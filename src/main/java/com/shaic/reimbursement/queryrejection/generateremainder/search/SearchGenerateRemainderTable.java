package com.shaic.reimbursement.queryrejection.generateremainder.search;

import com.shaic.arch.SHAConstants;
import com.shaic.arch.SHAUtils;
import com.shaic.arch.table.GBaseTable;
import com.vaadin.v7.data.util.BeanItemContainer;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.v7.ui.Table;

/**
 * 
 *
 */
public class SearchGenerateRemainderTable extends GBaseTable<SearchGenerateReminderTableDTO>{

	private final static Object[] NATURAL_COL_ORDER = new Object[]{"serialNumber","reminderType","category","claimIntimationNo",
		"intimationDate","patientName", "hospitalName", "hospitalAddress"}; 
	
	@Override
	public void removeRow() {
		table.removeAllItems();
		
	}

	@Override
	public void initTable() {
		
		table.setContainerDataSource(new BeanItemContainer<SearchGenerateReminderTableDTO>(SearchGenerateReminderTableDTO.class));
		table.setVisibleColumns(NATURAL_COL_ORDER);
		table.setColumnWidth("hospitalAddress", 350);
		table.setHeight("300");
		
		table.removeGeneratedColumn("generateLetter");
		table.addGeneratedColumn("generateLetter",
			new Table.ColumnGenerator() {
				@Override
				public Object generateCell(Table source,
						final Object itemId, Object columnId) {
					
					if((SearchGenerateReminderTableDTO)itemId != null){
					
						final SearchGenerateReminderTableDTO letterDto = (SearchGenerateReminderTableDTO)itemId;
						
						final Button generateLetterButton = new Button(
								"Generate Letter");

						generateLetterButton.setData(letterDto);
						generateLetterButton
								.addClickListener(new Button.ClickListener() {
									public void buttonClick(
											ClickEvent event) {
										SearchGenerateReminderTableDTO reminderDto = (SearchGenerateReminderTableDTO) event
												.getButton()
												.getData();
										if(reminderDto != null){
											
											VaadinSession session = getSession();
											
											Boolean isActiveHumanTask = SHAUtils.isActiveHumanTask(reminderDto.getUsername(),reminderDto.getPassword(),reminderDto.getTaskNumber(), session);
											try{
											if(! isActiveHumanTask){
											
												SHAUtils.setActiveOrDeactiveClaim(reminderDto.getUsername(),reminderDto.getPassword(),reminderDto.getTaskNumber(),session);
										
												fireViewEvent(SearchGenerateRemainderPresenter.GENERATE_LETTER, reminderDto);
												
											}else{
												System.out.println("Reminder Letter for This Claim Intimation is already generated by another user");
											}
											}catch(Exception e){
												
												Integer existingTaskNumber= (Integer)session.getAttribute(SHAConstants.TOKEN_ID);
												SHAUtils.releaseHumanTask(reminderDto.getUsername(), reminderDto.getPassword(), existingTaskNumber, session);
												e.printStackTrace();
												
											}
											
										
										}
							        } 
							    });
						generateLetterButton.addStyleName("link");
					        return generateLetterButton;
							}
					else{
						return "";
					}
					}
				});
	}

	@Override
	public void tableSelectHandler(
			SearchGenerateReminderTableDTO t) {
		

	}

	@Override
	public String textBundlePrefixString() {
		
		return "search-generate-remainder-";
	}
	protected void tablesize(){
//		table.setPageLength(table.size()+1);
//		int length =table.getPageLength();
//		if(length>=7){
//			table.setPageLength(7);
//		}
		
		table.setPageLength(table.getItemIds().size()+1);
		
	}

}
