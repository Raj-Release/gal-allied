package com.shaic.paclaim.cashless.flp.search;

import java.util.Iterator;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.inject.Inject;

import org.vaadin.addon.cdimvp.ViewComponent;

import com.shaic.arch.EnhancedFieldGroupFieldFactory;
import com.shaic.arch.SHAUtils;
import com.shaic.arch.fields.dto.SelectValue;
import com.shaic.arch.table.Searchable;
import com.shaic.domain.PreauthService;
import com.shaic.domain.ReferenceTable;
import com.shaic.domain.Status;
import com.shaic.domain.preauth.Stage;
import com.vaadin.v7.data.fieldgroup.BeanFieldGroup;
import com.vaadin.v7.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.v7.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.v7.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.v7.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.FormLayout;
import com.vaadin.v7.ui.HorizontalLayout;
import com.vaadin.v7.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.v7.ui.TextField;
import com.vaadin.v7.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

public class PAProcessPreMedicalSearchForm extends ViewComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@Inject
	private PAProcessPreMedicalTable processPreMedicalTable;
	
	@EJB
	private PreauthService preauthService;
	
	
	private BeanFieldGroup<PAProcessPreMedicalFormDTO> binder;

	private TextField txtIntimationNo;
	private TextField txtPolicyNo;
	private ComboBox cmbType;
	private ComboBox cmbIntimationSource;	
	private ComboBox cmbNetworkHospType;
	private Button preMedicalSearchBtn;
	private Button resetBtn;
	private ComboBox cbxCPUCode;
	
	private ComboBox cmbSortOrder;
	
	private ComboBox cmbPriority;
	private ComboBox cmbSource;
	
	
	VerticalLayout buildPreauthPreMedicalSearchLayout;
	private Searchable searchable;
	
	public void addSearchListener(Searchable searable)
	{
		this.searchable = searable;
	}
	
	
	public PAProcessPreMedicalFormDTO getSearchDTO()
	{
		try {
			this.binder.commit();
			PAProcessPreMedicalFormDTO bean = this.binder.getItemDataSource().getBean();
			return  bean;
		} catch (CommitException e) {
			e.printStackTrace();
		}
		return null;
		
	}

	
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	
	@PostConstruct
	public void init() {
		initBinder();
		//buildPreauthSearchLayout = buildPreauthSearchLayout();
		buildPreauthPreMedicalSearchLayout  = new VerticalLayout();
		Panel preauthPremedicalPanel	= new Panel();
		//Vaadin8-setImmediate() preauthPremedicalPanel.setImmediate(false);
		preauthPremedicalPanel.setWidth("100%");
		preauthPremedicalPanel.setHeight("50%");
		preauthPremedicalPanel.setCaption("First Level Processing (Pre-auth)");
		preauthPremedicalPanel.addStyleName("panelHeader");
		preauthPremedicalPanel.addStyleName("g-search-panel");
		preauthPremedicalPanel.setContent(buildPreauthSearchLayout());
		buildPreauthPreMedicalSearchLayout.addComponent(preauthPremedicalPanel);
		buildPreauthPreMedicalSearchLayout.setComponentAlignment(preauthPremedicalPanel, Alignment.MIDDLE_LEFT);
		setCompositionRoot(buildPreauthPreMedicalSearchLayout);
		addListener();
	}
	
	private void initBinder()
	{
		this.binder = new BeanFieldGroup<PAProcessPreMedicalFormDTO>(PAProcessPreMedicalFormDTO.class);
		this.binder.setItemDataSource(new PAProcessPreMedicalFormDTO());
		this.binder.setFieldFactory(new EnhancedFieldGroupFieldFactory());
	}
	
	
	private VerticalLayout buildPreauthSearchLayout() {
		
		 AbsoluteLayout absoluteLayout_3 =  new AbsoluteLayout();
		 VerticalLayout verticalLayout = new VerticalLayout();
		 //Vaadin8-setImmediate() verticalLayout.setImmediate(false);
		 verticalLayout.setWidth("100.0%");
		 verticalLayout.setMargin(false);		 
		 //Vaadin8-setImmediate() absoluteLayout_3.setImmediate(false);
		 absoluteLayout_3.setWidth("100.0%");
		 absoluteLayout_3.setHeight("231px");

		txtIntimationNo =  binder.buildAndBind("Intimation No", "intimationNo", TextField.class);
		cbxCPUCode = binder.buildAndBind("CPU Code","cpuCode",ComboBox.class);
		cmbType =  binder.buildAndBind("Type", "type", ComboBox.class);
		txtPolicyNo = binder.buildAndBind("Policy No", "policyNo", TextField.class);
		cmbIntimationSource =  binder.buildAndBind("Intimation Source", "intimationSource", ComboBox.class);
		cmbNetworkHospType =  binder.buildAndBind("Network Hosp Type", "networkHospType", ComboBox.class);
		
		cmbPriority = binder.buildAndBind("Priority","priority",ComboBox.class);
		
		cmbSource = binder.buildAndBind("Source","source",ComboBox.class);
		
		cmbSortOrder = binder.buildAndBind("Sort Order","sortOrder",ComboBox.class);
		
		BeanItemContainer<SelectValue> sortOrder = SHAUtils.getSortOrder();
		cmbSortOrder.setContainerDataSource(sortOrder);
		cmbSortOrder.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbSortOrder.setItemCaptionPropertyId("value");
		cmbSortOrder.setValue(cmbSortOrder.getContainerDataSource().getItemIds().toArray()[0]);

		FormLayout formLayout1 = new FormLayout(txtIntimationNo, txtPolicyNo,cmbPriority,cmbSource,cmbSortOrder);
		FormLayout formLayout2 = new FormLayout(cmbType, cmbIntimationSource,cbxCPUCode,cmbNetworkHospType);
		HorizontalLayout searchFormLayout = new HorizontalLayout(formLayout1 ,  formLayout2);
	//	searchFormLayout.setComponentAlignment(formLayout1, Alignment.MIDDLE_RIGHT);
		//searchFormLayout.setComponentAlignment(formLayout2, Alignment.MIDDLE_LEFT);
		searchFormLayout.setMargin(true);
		searchFormLayout.setWidth("100%");
		absoluteLayout_3.addComponent(searchFormLayout);
		
		preMedicalSearchBtn = new Button();
		preMedicalSearchBtn.setCaption("Get Tasks");
		//Vaadin8-setImmediate() preMedicalSearchBtn.setImmediate(true);
		preMedicalSearchBtn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		preMedicalSearchBtn.setWidth("-1px");
		preMedicalSearchBtn.setHeight("-10px");
		preMedicalSearchBtn.setDisableOnClick(true);
		absoluteLayout_3
		.addComponent(preMedicalSearchBtn, "top:190.0px;left:250.0px;");
		//Vaadin8-setImmediate() preMedicalSearchBtn.setImmediate(true);
		resetBtn = new Button();
		resetBtn.setCaption("Reset");
		//Vaadin8-setImmediate() resetBtn.setImmediate(true);
		resetBtn.addStyleName(ValoTheme.BUTTON_DANGER);
		resetBtn.setWidth("-1px");
		resetBtn.setHeight("-10px");
		absoluteLayout_3.addComponent(resetBtn, "top:190.0px;left:359.0px;");
		//Vaadin8-setImmediate() resetBtn.setImmediate(true);
		verticalLayout.addComponent(absoluteLayout_3);
		verticalLayout.setWidth("750");
		//verticalLayout.setHeight("300px");
		
		return verticalLayout; 
	}
	
	public void addListener() {

		preMedicalSearchBtn.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				preMedicalSearchBtn.setEnabled(true);
				//TODO values for all the child dto s inside preauthDto must be set b4 calling detail page
//				preauthDTO.setPolicyKey(175l);
//				preauthDTO.setClaimKey(116l);
//				preauthDTO.setIntimationKey(194l);
//				fireViewEvent(MenuPresenter.SHOW_PREMEDICAL_WIZARD, preauthDTO, true);
				searchable.doSearch();
				processPreMedicalTable.tablesize();

			}
		});
		
		resetBtn.addClickListener(new Button.ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
			}
		});
	}
	
	
	/**
	 * Method to reset all form values 
	 *
	 * */
	
	public void resetAlltheValues() 
	{
		
		Iterator<Component> componentIterator = buildPreauthPreMedicalSearchLayout.iterator();
			while(componentIterator.hasNext()) 
			{
				Component searchScrnComponent = componentIterator.next() ;
				if(searchScrnComponent instanceof  Panel )
				{	
					System.out.println("---inside the if block---");
					Panel panel = (Panel)searchScrnComponent;
					Iterator<Component> searchScrnCompIter = panel.iterator();
					while (searchScrnCompIter.hasNext())
					{
						Component verticalLayoutComp = searchScrnCompIter.next();
						VerticalLayout vLayout = (VerticalLayout)verticalLayoutComp;
						Iterator<Component> vLayoutIter = vLayout.iterator();
						while(vLayoutIter.hasNext())
						{
							Component absoluteComponent = vLayoutIter.next();
							AbsoluteLayout absLayout = (AbsoluteLayout)absoluteComponent;
							Iterator<Component> absLayoutIter = absLayout.iterator();
							while(absLayoutIter.hasNext())
							{
								Component horizontalComp = absLayoutIter.next();
								if(horizontalComp instanceof HorizontalLayout)
								{
									HorizontalLayout hLayout = (HorizontalLayout)horizontalComp;
									Iterator<Component> formLayComp = hLayout.iterator();
									while(formLayComp.hasNext())
									{
										Component formComp = formLayComp.next();
										FormLayout fLayout = (FormLayout)formComp;
										Iterator<Component> formComIter = fLayout.iterator();
									
										while(formComIter.hasNext())
										{
											Component indivdualComp = formComIter.next();
											if(indivdualComp != null) 
											{
												if(indivdualComp instanceof Label) 
												{
													continue;
												}	
												if(indivdualComp instanceof TextField) 
												{
													TextField field = (TextField) indivdualComp;
													field.setValue("");
												} 
												else if(indivdualComp instanceof ComboBox)
												{
													ComboBox field = (ComboBox) indivdualComp;
													field.setValue(null);
												}	 
									// Remove the table if exists..	
									//removeTableFromLayout();
											}
										}
									}
								}
							}
						}
					}
					//Method to reset search table.
					removeTableFromLayout();
				}
			}
	}
	
	private void removeTableFromLayout()
	{
		if(null != searchable)
		{
			searchable.resetSearchResultTableValues();
		}
	}

	public void refresh()
	{
		System.out.println("---inside the refresh----");
		resetAlltheValues();
	}

	

	
	public void setIntimationSrc(BeanItemContainer<SelectValue> parameter){		
		cmbIntimationSource.setContainerDataSource(parameter);
		cmbIntimationSource.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbIntimationSource.setItemCaptionPropertyId("value");
		
	}
	
	public void setNetworkHospType(BeanItemContainer<SelectValue> parameter){		
		cmbNetworkHospType.setContainerDataSource(parameter);
		cmbNetworkHospType.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbNetworkHospType.setItemCaptionPropertyId("value");
	}
	
	public void setCpuCode(BeanItemContainer<SelectValue> cpuCode) {
		cbxCPUCode.setContainerDataSource(cpuCode);
		cbxCPUCode.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cbxCPUCode.setItemCaptionPropertyId("value");
	}

	
	public void setPreAuthType(BeanItemContainer<SelectValue> parameter){	
		
		BeanItemContainer<SelectValue> selectValueForType = SHAUtils.getSelectValueForType();
		
		cmbType.setContainerDataSource(selectValueForType);
		cmbType.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbType.setItemCaptionPropertyId("value");
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		
		cmbPriority.setContainerDataSource(selectValueForPriority);
		cmbPriority.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbPriority.setItemCaptionPropertyId("value");
		
		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.CLAIM_REGISTRATION_STAGE);
		
//		Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);

		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey2.getKey());
		selectValue1.setValue(stageByKey2.getStageName());
		
		Status stageByKey3 = preauthService.getStatusByKey(ReferenceTable.PREMEDICAL_PREAUTH_COORDINATOR_REPLY);
		
		SelectValue selectValue2 = new SelectValue();
		selectValue2.setId(stageByKey3.getKey());
		selectValue2.setValue(stageByKey3.getProcessValue());
		
		Status stageByKey4 = preauthService.getStatusByKey(ReferenceTable.REFER_TO_FLP);
		
		SelectValue selectValue3 = new SelectValue();
		selectValue3.setId(stageByKey4.getKey());
		selectValue3.setValue(stageByKey4.getProcessValue());

		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue1);
		statusByStage.addBean(selectValue2);
		statusByStage.addBean(selectValue3);

		cmbSource.setContainerDataSource(statusByStage);
		cmbSource.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbSource.setItemCaptionPropertyId("value");
		
		
		
	}
	
}
