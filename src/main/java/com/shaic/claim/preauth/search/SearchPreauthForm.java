package com.shaic.claim.preauth.search;

import java.util.Iterator;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.inject.Inject;

import org.vaadin.addon.cdimvp.ViewComponent;

import com.shaic.arch.EnhancedFieldGroupFieldFactory;
import com.shaic.arch.SHAUtils;
import com.shaic.arch.fields.dto.SelectValue;
import com.shaic.arch.table.Searchable;
import com.shaic.claim.preauth.wizard.dto.PreauthDTO;
import com.shaic.claim.preauth.wizard.dto.SearchPreauthFormDTO;
import com.shaic.cmn.login.ImsUser;
import com.shaic.domain.ClaimService;
import com.shaic.domain.MasUser;
import com.shaic.domain.MasterService;
import com.shaic.domain.PreauthService;
import com.shaic.domain.ReferenceTable;
import com.shaic.domain.Status;
import com.shaic.domain.preauth.Stage;
import com.shaic.ims.bpm.claim.BPMClientContext;
import com.vaadin.cdi.UIScoped;
import com.vaadin.v7.data.Property.ValueChangeEvent;
import com.vaadin.v7.data.Property.ValueChangeListener;
import com.vaadin.v7.data.fieldgroup.BeanFieldGroup;
import com.vaadin.v7.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.v7.data.util.BeanItemContainer;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.v7.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.v7.ui.CheckBox;
import com.vaadin.v7.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.FormLayout;
import com.vaadin.v7.ui.HorizontalLayout;
import com.vaadin.v7.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.v7.ui.TextField;
import com.vaadin.v7.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

@UIScoped
public class SearchPreauthForm extends ViewComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = -3616823920991467671L;
	
	
	private BeanFieldGroup<SearchPreauthFormDTO> binder;
	
	@Inject
	private PreauthDTO preauthDTO;
	
	@EJB
	private PreauthService preauthService;
	
	@EJB
	private MasterService masterService;
	
	@EJB
	private ClaimService claimService;
	
	@Inject
   private SearchPreAuthList searchPreAuthList;

	TextField txtIntimationNo;
	
	ComboBox cmbType;
	
	TextField txtPolicyNo;
	
	Button preauthSearchBtn;
	
	Button resetBtn;
	
	ComboBox cmbIntimationSource;
	
	ComboBox cmbNetworkHospType;
	
	ComboBox cmbTreatmentType;
	
	ComboBox cmbSpeciality;
	
	private ComboBox cmbPriority;
	
	private ComboBox cmbSource;
	
	private ComboBox cbxCPUCode;
	
	private TextField txtClaimedAmtFrom;
	
	private TextField txtClaimedAmtTo;
	
	VerticalLayout buildPreauthSearchLayuout;
	
	private Searchable searchable;
	
	private ComboBox cmbProductType;
	
	private CheckBox corpAdviseRevd;
	
//	private ComboBox cmbPriorityNew;
	
	private Label priority;
	
	private CheckBox chkAll;
	
	private CheckBox chkCRM;
	
	private CheckBox chkVIP;
	
	public void addSearchListener(Searchable searable)
	{
		this.searchable = searable;
	}
	
	public SearchPreauthFormDTO getSearchDTO()
	{
		try {
			this.binder.commit();
			SearchPreauthFormDTO bean = this.binder.getItemDataSource().getBean();
			return  bean;
		} catch (CommitException e) {
			e.printStackTrace();
		}
		return null;
		
	}
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	@PostConstruct
	public void init() {
		initBinder();
		//buildPreauthSearchLayout = buildPreauthSearchLayout();
		buildPreauthSearchLayuout  = new VerticalLayout();
		Panel preauthPremedicalPanel	= new Panel();
		//Vaadin8-setImmediate() preauthPremedicalPanel.setImmediate(false);
//		preauthPremedicalPanel.setWidth("100%");
//		preauthPremedicalPanel.setHeight("50%");
		preauthPremedicalPanel.setCaption("Process Pre-authorization");
		preauthPremedicalPanel.addStyleName("panelHeader");
		preauthPremedicalPanel.addStyleName("g-search-panel");
		preauthPremedicalPanel.setContent(buildPreauthSearchLayout());
		buildPreauthSearchLayuout.addComponent(preauthPremedicalPanel);
		buildPreauthSearchLayuout.setComponentAlignment(preauthPremedicalPanel, Alignment.MIDDLE_LEFT);
		buildPreauthSearchLayuout.setMargin(false);
		setCompositionRoot(buildPreauthSearchLayuout);
		addListener();
	}
	
	private void initBinder()
	{
		this.binder = new BeanFieldGroup<SearchPreauthFormDTO>(SearchPreauthFormDTO.class);
		this.binder.setItemDataSource(new SearchPreauthFormDTO());
		this.binder.setFieldFactory(new EnhancedFieldGroupFieldFactory());
	}

	
	private VerticalLayout buildPreauthSearchLayout() 
	{
		 AbsoluteLayout absoluteLayout_3 =  new AbsoluteLayout();
		 VerticalLayout verticalLayout = new VerticalLayout();
		 //Vaadin8-setImmediate() verticalLayout.setImmediate(false);
		 verticalLayout.setWidth("100.0%");
		 verticalLayout.setMargin(false);		 
		 //Vaadin8-setImmediate() absoluteLayout_3.setImmediate(false);
		 absoluteLayout_3.setWidth("100.0%");
		 absoluteLayout_3.setHeight("600px");

		txtIntimationNo =  binder.buildAndBind("Intimation No", "intimationNo", TextField.class);
		cbxCPUCode = binder.buildAndBind("CPU Code","cpuCode",ComboBox.class);
		cmbType =  binder.buildAndBind("Type", "type", ComboBox.class);
		txtPolicyNo = binder.buildAndBind("Policy No", "policyNo", TextField.class);
		cmbIntimationSource =  binder.buildAndBind("Intimation Source", "intimationSource", ComboBox.class);
		cmbNetworkHospType =  binder.buildAndBind("Network Hosp Type", "networkHospType", ComboBox.class);
		cmbTreatmentType = binder.buildAndBind("Treatment Type", "treatmentType", ComboBox.class);
		cmbSpeciality = binder.buildAndBind("Speciality" , "speciality" , ComboBox.class);
		txtClaimedAmtFrom =  binder.buildAndBind("Claimed Amt From", "claimedAmtFrom", TextField.class);
		txtClaimedAmtTo =  binder.buildAndBind("Claimed Amt To", "claimedAmtTo", TextField.class);
		
		corpAdviseRevd = binder.buildAndBind("Corporate Advise Received","isCorpAdvReceived",CheckBox.class);
		corpAdviseRevd.setVisible(false);
		
		cmbPriority = binder.buildAndBind("Priority(IRDA)","priority",ComboBox.class);
		
//		cmbPriorityNew = binder.buildAndBind("Priority","priorityNew",ComboBox.class);
		
		cmbSource = binder.buildAndBind("Source","source",ComboBox.class);
		
		cmbProductType = binder.buildAndBind("Product Type","productType",ComboBox.class);
		
		BeanItemContainer<SelectValue> productName = masterService.getSelectValueContainerForProduct();
		cmbProductType.setContainerDataSource(productName);
		cmbProductType.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbProductType.setItemCaptionPropertyId("value");
		/*FormLayout formLayout1 = new FormLayout(txtIntimationNo, txtPolicyNo,cmbTreatmentType, cmbSpeciality,cmbSource, txtClaimedAmtFrom);
		FormLayout formLayout2 = new FormLayout(cmbType, cmbIntimationSource,cbxCPUCode, cmbNetworkHospType,cmbPriority, txtClaimedAmtTo);
		HorizontalLayout searchFormLayout = new HorizontalLayout(formLayout1,formLayout2);*/
		
		priority = new Label();
		priority.setCaption("Priority");
		
		chkAll = binder.buildAndBind("All","priorityAll",CheckBox.class);
		chkAll.setValue(Boolean.TRUE);
		
		chkCRM = binder.buildAndBind("CRM","crm",CheckBox.class);
		
		chkVIP = binder.buildAndBind("VIP","vip",CheckBox.class);
		
		HorizontalLayout priorityHorLayout = new HorizontalLayout(priority,chkAll,chkCRM,chkVIP);
		priorityHorLayout.setMargin(false);
		priorityHorLayout.setSpacing(true);
		FormLayout formLayoutChk = new FormLayout(priorityHorLayout);
		
		FormLayout formLayoutLeft = new FormLayout(txtIntimationNo, txtPolicyNo,cbxCPUCode/*,cmbPriorityNew*/);
		FormLayout formLayoutMiddleRight = new FormLayout(cmbTreatmentType,cmbSpeciality,cmbType);
		FormLayout formLayoutMiddleLeft = new FormLayout(cmbNetworkHospType,txtClaimedAmtFrom,cmbSource);
		FormLayout formLayoutRight = new FormLayout(cmbPriority,txtClaimedAmtTo,cmbProductType);
		
		FormLayout formLayoutRight2 = new FormLayout(corpAdviseRevd);
		
		HorizontalLayout searchFormLayout = new HorizontalLayout(formLayoutLeft ,formLayoutMiddleRight,formLayoutMiddleLeft,formLayoutRight,formLayoutRight2);
		
		searchFormLayout.setMargin(false);

		searchFormLayout.setWidth("100%");
		
/*		HorizontalLayout searchFormLayout = new HorizontalLayout(new FormLayout(txtIntimationNo, txtPolicyNo, cmbTreatmentType, cmbSpeciality), new FormLayout(cmbType, cmbIntimationSource, cmbNetworkHospType));
		searchFormLayout.setMargin(true);
		searchFormLayout.setWidth("80%");*/

		absoluteLayout_3.addComponent(searchFormLayout,"top:-20.0px;left:0.0px;");
		absoluteLayout_3.addComponent(formLayoutChk,"top:100.0px;left:-12.0px;");
		preauthSearchBtn = new Button();
		preauthSearchBtn.setCaption("Get Tasks");
		//Vaadin8-setImmediate() preauthSearchBtn.setImmediate(true);
		preauthSearchBtn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		preauthSearchBtn.setWidth("-1px");
		preauthSearchBtn.setHeight("-10px");
		preauthSearchBtn.setDisableOnClick(true);
		
		//CR2019213
		setManaualFlag();
		
		absoluteLayout_3
		.addComponent(preauthSearchBtn, "top:130.0px;left:290.0px;");
		//Vaadin8-setImmediate() preauthSearchBtn.setImmediate(true);
	
		resetBtn = new Button();
		resetBtn.setCaption("Reset");
		//Vaadin8-setImmediate() resetBtn.setImmediate(true);
		resetBtn.addStyleName(ValoTheme.BUTTON_DANGER);
		resetBtn.setWidth("-1px");
		resetBtn.setHeight("-10px");
		absoluteLayout_3.addComponent(resetBtn, "top:130.0px;left:390.0px;");
		//Vaadin8-setImmediate() resetBtn.setImmediate(true);
		verticalLayout.addComponent(absoluteLayout_3);
		verticalLayout.setWidth("1600px");
		verticalLayout.setHeight("180px");
		verticalLayout.addStyleName("g-search-panel");
		return verticalLayout; 
		
	}

	

	@SuppressWarnings("deprecation")
	public void addListener() {

		preauthSearchBtn.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				preauthSearchBtn.setEnabled(true);
			/*	preauthDTO.setPolicyKey(12l);
				preauthDTO.setClaimKey(12l);
				preauthDTO.setIntimationKey(12l);*/
//				fireViewEvent(MenuPresenter.SHOW_PREATUH_WIZARD, preauthDTO,true);
				searchable.doSearch();
				searchPreAuthList.tablesize();
			}
		});
		
		cmbTreatmentType.addValueChangeListener(new ValueChangeListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 2697682747976915503L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				
				SelectValue selValue = new SelectValue();
				selValue = (SelectValue)cmbTreatmentType.getValue();
				if(null != selValue && null != selValue.getValue())
				{
				fireViewEvent(
						SearchPreauthPresenter.TREATMENT_TYPE_CHANGED,
						selValue.getValue());
				}else{
					fireViewEvent(
							SearchPreauthPresenter.SPECIALITY_LIST,
							null);
				}
			}
		});
		
		resetBtn.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
				chkAll.setValue(true);
				/*BeanItemContainer<SelectValue> selectValueForPriorityNew = SHAUtils.getSelectValueForPriorityNew();
				
				cmbPriorityNew.setContainerDataSource(selectValueForPriorityNew);
				cmbPriorityNew.setItemCaptionMode(ItemCaptionMode.PROPERTY);
				cmbPriorityNew.setItemCaptionPropertyId("value");
				cmbPriorityNew.setValue(selectValueForPriorityNew.getItemIds().get(0));*/
			}
		});
		
		chkCRM.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(null != event && null != event.getProperty() && null != event.getProperty().getValue())
				{
					boolean value = (Boolean) event.getProperty().getValue();

					if(value || (chkVIP != null && chkVIP.getValue() != null && chkVIP.getValue().equals(Boolean.TRUE)))
					{
						chkAll.setValue(false);
						chkAll.setEnabled(false);
					}
					else{
						chkAll.setEnabled(true);
					}	 						 
					
				}
			}
		});
		
		chkVIP.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(null != event && null != event.getProperty() && null != event.getProperty().getValue())
				{
					boolean value = (Boolean) event.getProperty().getValue();

					if(value || (chkCRM != null && chkCRM.getValue() != null && chkCRM.getValue().equals(Boolean.TRUE)))
					{
						chkAll.setValue(false);
						chkAll.setEnabled(false);
					}
					else{
						chkAll.setEnabled(true);
					}	 						 
					
				}
			}
		});
		
	}
	
	/**
	 * Method to reset all form values 
	 *
	 * */
	
	public void resetAlltheValues() 
	{
		
		Iterator<Component> componentIterator = buildPreauthSearchLayuout.iterator();
			while(componentIterator.hasNext()) 
			{
				Component searchScrnComponent = componentIterator.next() ;
				if(searchScrnComponent instanceof  Panel )
				{	
					System.out.println("---inside the if block---");
						Panel panel = (Panel)searchScrnComponent;
						Iterator<Component> searchScrnCompIter = panel.iterator();
					while (searchScrnCompIter.hasNext())
					{
						Component verticalLayoutComp = searchScrnCompIter.next();
						VerticalLayout vLayout = (VerticalLayout)verticalLayoutComp;
						Iterator<Component> vLayoutIter = vLayout.iterator();
						while(vLayoutIter.hasNext())
						{
							Component absoluteComponent = vLayoutIter.next();
							AbsoluteLayout absLayout = (AbsoluteLayout)absoluteComponent;
							Iterator<Component> absLayoutIter = absLayout.iterator();
							while(absLayoutIter.hasNext())
							{
								Component horizontalComp = absLayoutIter.next();
								if(horizontalComp instanceof HorizontalLayout)
								{
									HorizontalLayout hLayout = (HorizontalLayout)horizontalComp;
									Iterator<Component> formLayComp = hLayout.iterator();
									while(formLayComp.hasNext())
									{
										Component formComp = formLayComp.next();
										FormLayout fLayout = (FormLayout)formComp;
										Iterator<Component> formComIter = fLayout.iterator();
									
										while(formComIter.hasNext())
										{
											Component indivdualComp = formComIter.next();
											if(indivdualComp != null) 
											{
												if(indivdualComp instanceof Label) 
												{
													continue;
												}	
												if(indivdualComp instanceof TextField) 
												{
													TextField field = (TextField) indivdualComp;
													field.setValue("");
												} 
												else if(indivdualComp instanceof ComboBox)
												{
													ComboBox field = (ComboBox) indivdualComp;
													field.setValue(null);
												}	 
									// Remove the table if exists..	
									//removeTableFromLayout();
											}
										}
									}
								}
							}
						}
					}//Method to reset search table.
					removeTableFromLayout();
					
					if(corpAdviseRevd != null){
						corpAdviseRevd.setValue(null);
					}
				}
			}
	}
	
	private void removeTableFromLayout()
	{
		if(null != searchable)
		{
			searchable.resetSearchResultTableValues();
			clearFields();
		}
	}

	public void refresh()
	{
		System.out.println("---inside the refresh----");
		resetAlltheValues();
		clearFields();
	}

	

	
	public void setIntimationSrc(BeanItemContainer<SelectValue> parameter){		
		cmbIntimationSource.setContainerDataSource(parameter);
		cmbIntimationSource.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbIntimationSource.setItemCaptionPropertyId("value");
		
		parameter.sort(new Object[] {"value"}, new boolean[] {true});
	}
	
	public void setNetworkHospType(BeanItemContainer<SelectValue> parameter){		
		cmbNetworkHospType.setContainerDataSource(parameter);
		cmbNetworkHospType.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbNetworkHospType.setItemCaptionPropertyId("value");
		
		parameter.sort(new Object[] {"value"}, new boolean[] {true});
	}
	
	public void setTreatmentType(BeanItemContainer<SelectValue> parameter){		
		cmbTreatmentType.setContainerDataSource(parameter);
		cmbTreatmentType.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbTreatmentType.setItemCaptionPropertyId("value");
		
		parameter.sort(new Object[] {"value"}, new boolean[] {true});
	}
	
	public void setPreAuthType(BeanItemContainer<SelectValue> parameter){
		
		BeanItemContainer<SelectValue> selectValueForType = SHAUtils.getSelectValueForType();
		
		cmbType.setContainerDataSource(selectValueForType);
		cmbType.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbType.setItemCaptionPropertyId("value");
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriorityIRDA();
		
		cmbPriority.setContainerDataSource(selectValueForPriority);
		cmbPriority.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbPriority.setItemCaptionPropertyId("value");
		
		/*BeanItemContainer<SelectValue> selectValueForPriorityNew = SHAUtils.getSelectValueForPriorityNew();
		
		cmbPriorityNew.setContainerDataSource(selectValueForPriorityNew);
		cmbPriorityNew.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbPriorityNew.setItemCaptionPropertyId("value");
		cmbPriorityNew.setValue(selectValueForPriorityNew.getItemIds().get(0));*/
		
		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.PROCESS_PRE_MEDICAL);
		Status statusByKey = preauthService.getStatusByKey(ReferenceTable.PREAUTH_COORDINATOR_REPLY_RECEIVED_STATUS); 
		Status statusByKey1 = preauthService.getStatusByKey(ReferenceTable.SPECIALIST_REPLY_RECEIVED);
		Status statusByKey3 = preauthService.getStatusByKey(ReferenceTable.PREMEDICAL_WAIVED_REJECTION); 

//		Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);

		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey2.getKey());
		selectValue1.setValue(stageByKey2.getStageName());
		
		SelectValue selectValue2 = new SelectValue();
		selectValue2.setId(statusByKey.getKey());
		selectValue2.setValue(statusByKey.getProcessValue());
		
		SelectValue selectValue3 = new SelectValue();
		selectValue3.setId(statusByKey1.getKey());
		selectValue3.setValue(statusByKey1.getProcessValue());
		
		SelectValue selectValue4 = new SelectValue();
		selectValue4.setId(statusByKey3.getKey());
		selectValue4.setValue(statusByKey3.getProcessValue());
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue3);
		statusByStage.addBean(selectValue1);
		statusByStage.addBean(selectValue4);
		statusByStage.addBean(selectValue2);

		cmbSource.setContainerDataSource(statusByStage);
		cmbSource.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbSource.setItemCaptionPropertyId("value");
		statusByStage.sort(new Object[] {"value"}, new boolean[] {true});
		
	
	}
	
	public void setSpeciality(BeanItemContainer<SelectValue> parameter){
		
		cmbSpeciality.setContainerDataSource(parameter);
		cmbSpeciality.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cmbSpeciality.setItemCaptionPropertyId("value");	
		
		parameter.sort(new Object[] {"value"}, new boolean[] {true});
	}

	public void setCpuCode(BeanItemContainer<SelectValue> cpuCodeContainer) {
		cbxCPUCode.setContainerDataSource(cpuCodeContainer);
		cbxCPUCode.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		cbxCPUCode.setItemCaptionPropertyId("value");	
		
	}
	
	public void setCpuView(){
		corpAdviseRevd.setVisible(true);
	}
	
	public void clearFields()
    {
		chkAll.setValue(true);
		chkCRM.setValue(false);
		chkVIP.setValue(false);
    }
	
	//CR2019213
	public void setManaualFlag() {
				ImsUser imsUser1 = null;
				if(VaadinSession.getCurrent().getAttribute(BPMClientContext.USER_OBJECT) != null) {
					imsUser1 = (ImsUser) VaadinSession.getCurrent().getAttribute(BPMClientContext.USER_OBJECT);
				}
				MasUser masUser = claimService.getUserName(imsUser1.getUserName());
				if(masUser != null && masUser.getManualFlag() != null && masUser.getManualFlag().equalsIgnoreCase("Y")){
					preauthSearchBtn.setEnabled(true);
				}else if(masUser != null && masUser.getManualFlag() != null && masUser.getManualFlag().equalsIgnoreCase("N")){
					preauthSearchBtn.setEnabled(false);
				}
				else{
					preauthSearchBtn.setEnabled(false);
				}
	}

}
