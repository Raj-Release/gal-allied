package com.shaic.claim.preauth.wizard.pages;

import java.util.Iterator;

import javax.ejb.EJB;

import org.vaadin.addon.cdimvp.ViewComponent;

import com.shaic.claim.preauth.wizard.dto.PreauthDTO;
import com.shaic.ims.bpm.claim.DBCalculationService;
import com.vaadin.ui.Component;
import com.vaadin.ui.FormLayout;
import com.vaadin.v7.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.v7.ui.TextField;
import com.vaadin.v7.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

public class ViewGmcCorpBufferDetailsPage extends ViewComponent {
	
	private VerticalLayout mainLayout;
	private HorizontalLayout horizontal;
	private FormLayout formlayoutleft;
	private TextField txtCorpLimit;
	private TextField txtCorpUtilizedAmt;
	private TextField avalBalance;
	
	private Double gmcSI = 0d;
	private Double gmcUtilised = 0d;
	private Double gmcLimit = 0d;
	private Double gmcBalance = 0d;

	private Panel mainPanel;

	@EJB
	private DBCalculationService dbCalculationService;

	private TextField txtCorpSI;
	
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ViewGmcCorpBufferDetailsPage() {

	}

//	@PostConstruct
	public void initView() {

		Panel buildMainLayout = buildMainLayout();
		setCompositionRoot(buildMainLayout);

	}

	public VerticalLayout bindFieldGroup(PreauthDTO bean, Boolean isChecked) {

		initView();

		
			if(bean.getPreauthDataExtractionDetails().getCorpBufferSI() != null){
				gmcSI = bean.getPreauthDataExtractionDetails().getCorpBufferSI();
				txtCorpSI.setValue(gmcSI.toString());
			}
			if(bean.getPreauthDataExtractionDetails().getCorpBufferUtilisedAmt() != null){
				gmcUtilised = bean.getPreauthDataExtractionDetails().getCorpBufferUtilisedAmt();
				txtCorpUtilizedAmt.setValue(gmcUtilised.toString());
			}
			if(bean.getPreauthDataExtractionDetails().getCorpBufferLimit() != null){
				gmcLimit = bean.getPreauthDataExtractionDetails().getCorpBufferLimit();
				txtCorpLimit.setValue(gmcLimit.toString());
			}
			if(bean.getPreauthDataExtractionDetails().getCorpBufferAvalBal() != null){
				gmcBalance = bean.getPreauthDataExtractionDetails().getCorpBufferAvalBal();
				avalBalance.setValue(gmcBalance.toString());
			}
		
		if(isChecked){
			if(bean.getClaimDTO().getGmcCorpBufferLmt() != null){
				txtCorpLimit.setValue(bean.getClaimDTO().getGmcCorpBufferLmt().toString());
				gmcLimit = Double.valueOf(bean.getClaimDTO().getGmcCorpBufferLmt());
			}else{
				txtCorpLimit.setValue("0");
				gmcLimit = 0d;
			}
		}else{
			txtCorpLimit.setValue("0");
			gmcLimit = 0d;
		}
		
		
		setValueForCorpBuffer();
		
		txtCorpSI.setNullRepresentation("");
		txtCorpUtilizedAmt.setNullRepresentation("");
		txtCorpLimit.setNullRepresentation("");
		avalBalance.setNullRepresentation("");

//		setReadOnly(formlayoutleft);
		mainLayout.setSpacing(true);

		return mainLayout;
	}

	@SuppressWarnings({ "rawtypes", "deprecation" })
	private void setReadOnly(FormLayout a_formLayout) {
		Iterator<Component> formLayoutLeftComponent = a_formLayout
				.getComponentIterator();
		while (formLayoutLeftComponent.hasNext()) {
			Component c = formLayoutLeftComponent.next();
			if (c instanceof com.vaadin.v7.ui.AbstractField) {
				TextField field = (TextField) c;
				field.setWidth("440px");
				field.setReadOnly(true);
				field.addStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
			}
		}
	}

	private Panel buildMainLayout() {
		// common part: create layout

		horizontal = new HorizontalLayout(
				buildFormlayoutleft());
		horizontal.setWidth("100.0%");
		horizontal.setHeight("100.0%");
		
		mainLayout = new VerticalLayout(horizontal);
		
		mainLayout.setSpacing(true);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		
		mainPanel = new Panel();
		mainPanel.setSizeFull();
		mainPanel.setContent(mainLayout);

		return mainPanel;
	}

	private FormLayout buildFormlayoutleft() {
		txtCorpSI = new TextField("Corporate Buffer SI");
		txtCorpUtilizedAmt = new TextField("Corporate Buffer Utilised Amt");
		txtCorpLimit = new TextField("Corporate Buffer Limit for Current Claim");
		avalBalance = new TextField("Available Balance");
		formlayoutleft = new FormLayout(txtCorpSI,  txtCorpUtilizedAmt,
				txtCorpLimit, avalBalance);
		formlayoutleft.addStyleName("layoutDesign");
		formlayoutleft.setWidth("100.0%");
		formlayoutleft.setMargin(false);
		formlayoutleft.setSpacing(true);
//		formlayoutleft.setReadOnly(false);
		return formlayoutleft;
	}

	public void setValueForCorpBuffer() {
		Double availableBalance = gmcSI -(gmcUtilised + gmcLimit);
		if(avalBalance != null){
			avalBalance.setValue(availableBalance.toString());	
		}
	}


}
