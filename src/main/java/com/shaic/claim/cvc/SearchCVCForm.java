package com.shaic.claim.cvc;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;

import org.apache.commons.lang.StringUtils;
import org.vaadin.addon.cdimvp.ViewComponent;
import org.vaadin.addons.comboboxmultiselect.ComboBoxMultiselect;
import org.vaadin.addons.comboboxmultiselect.ComboBoxMultiselect.ShowButton;
import org.vaadin.dialogs.ConfirmDialog;

import com.google.gwt.event.dom.client.KeyCodes;
import com.shaic.arch.EnhancedFieldGroupFieldFactory;
import com.shaic.arch.SHAConstants;
import com.shaic.arch.fields.dto.SelectValue;
import com.shaic.arch.fields.dto.SpecialSelectValue;
import com.shaic.arch.table.Searchable;
import com.shaic.claim.cvc.auditaction.CVCAuditActionPagePresenter;
import com.shaic.claim.lumen.search.LumenSearchReqFormDTO;
import com.shaic.domain.MasterService;
import com.shaic.domain.PreauthService;
import com.shaic.ims.bpm.claim.BPMClientContext;
import com.shaic.ims.bpm.claim.DBCalculationService;
import com.shaic.main.navigator.domain.MenuItemBean;
import com.vaadin.v7.data.Property;
import com.vaadin.v7.data.Property.ValueChangeEvent;
import com.vaadin.v7.data.Property.ValueChangeListener;
import com.vaadin.v7.data.fieldgroup.BeanFieldGroup;
import com.vaadin.v7.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.v7.data.util.BeanItem;
import com.vaadin.v7.data.util.BeanItemContainer;
import com.vaadin.event.ShortcutAction;
import com.vaadin.event.ShortcutListener;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.event.FieldEvents.FocusEvent;
import com.vaadin.event.FieldEvents.FocusListener;
import com.vaadin.server.Sizeable;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component.Listener;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.FormLayout;
import com.vaadin.v7.shared.ui.label.ContentMode;
import com.vaadin.v7.ui.AbstractField;
import com.vaadin.v7.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.v7.ui.ComboBox;
import com.vaadin.v7.ui.Field;
import com.vaadin.v7.ui.HorizontalLayout;
import com.vaadin.v7.ui.Label;
import com.vaadin.v7.ui.TextArea;
import com.vaadin.v7.ui.TextField;
import com.vaadin.ui.Panel;
import com.vaadin.v7.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

public class SearchCVCForm extends ViewComponent{


	/**
	 * 
	 */
	private static final long serialVersionUID = -3616823920991467671L;
	
	private BeanFieldGroup<SearchCVCFormDTO> binder;
	private SearchCVCFormDTO bean;
		
	@EJB
	private PreauthService preauthService;
	
	@EJB
	private MasterService masterService;

	Button concurrentCashessSearchBtn;
	
	Button concurrentCashlessIntEnhancement;
	
	Button concurrentCashlessFinalEnhancement;
	
	Button nonConcurrentCashessSearchBtn;
	
	Button nonConcurrentCashlessIntEnhancement;
	
	Button nonConcurrentCashlessFinalEnhancement;
	
	Button hospitalStlmntSearchBtn;
	
	Button memberStlmntSearchBtn;
	
	TextField txtIntimationNumber;
	
	TextArea txtReason;
	
	Button pickBtn;
	
	ComboBox year;
	
	ComboBoxMultiselect productMulticomboBox;
	
	private BeanItemContainer<SpecialSelectValue> productNameContainer;
	
	private BeanItemContainer<SelectValue> productContainer;
	
	VerticalLayout buildPreauthSearchLayuout;
	
	private Searchable searchable;	
	
	private ArrayList<Component> mandatoryFields = new ArrayList<Component>();
	
	Button postCashlessSearchBtn;
	
	public void addSearchListener(Searchable searable)
	{
		this.searchable = searable;
	}
	
	public SearchCVCFormDTO getSearchDTO()
	{
		try {
			this.binder.commit();
			//SearchCVCFormDTO bean = this.binder.getItemDataSource().getBean();
			return  bean;
		} catch (CommitException e) {
			e.printStackTrace();
		}
		return null;
		
	}
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	@PostConstruct
	public void init() {
		initBinder();
		bean = new SearchCVCFormDTO();
		buildPreauthSearchLayuout  = new VerticalLayout();
		Panel preauthPremedicalPanel	= new Panel();
		//Vaadin8-setImmediate() preauthPremedicalPanel.setImmediate(false);
		preauthPremedicalPanel.setCaption("Claims Audit");
		preauthPremedicalPanel.addStyleName("panelHeader");
		preauthPremedicalPanel.addStyleName("g-search-panel");
		preauthPremedicalPanel.setContent(buildPreauthSearchLayout());
		preauthPremedicalPanel.setHeight("300px");
		buildPreauthSearchLayuout.addComponent(preauthPremedicalPanel);
		buildPreauthSearchLayuout.setMargin(false);
		setCompositionRoot(buildPreauthSearchLayuout);
		addListener();
	}
	
	private void initBinder()
	{
		this.binder = new BeanFieldGroup<SearchCVCFormDTO>(SearchCVCFormDTO.class);
		this.binder.setItemDataSource(new SearchCVCFormDTO());
		this.binder.setFieldFactory(new EnhancedFieldGroupFieldFactory());
	}
	
	@SuppressWarnings("deprecation")
	private HorizontalLayout buildPreauthSearchLayout() 
	{
		VerticalLayout verticalLayout = new VerticalLayout();
		//Vaadin8-setImmediate() verticalLayout.setImmediate(false);
		verticalLayout.setWidth("100.0%");
		verticalLayout.setMargin(false);	
		verticalLayout.setSpacing(false);

		concurrentCashessSearchBtn = new Button();
		concurrentCashessSearchBtn.setCaption("Concurrent Pre-Auth");
		//Vaadin8-setImmediate() cashlessSearchBtn.setImmediate(true);
		concurrentCashessSearchBtn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		concurrentCashessSearchBtn.setWidth("225px");
		concurrentCashessSearchBtn.setHeight("-10px");
		concurrentCashessSearchBtn.setDisableOnClick(true);
		//Vaadin8-setImmediate() cashlessSearchBtn.setImmediate(true);
		
		concurrentCashlessIntEnhancement = new Button();
		concurrentCashlessIntEnhancement.setCaption("Concurrent Interim Enhancement");
		concurrentCashlessIntEnhancement.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		concurrentCashlessIntEnhancement.setWidth("225px");
		concurrentCashlessIntEnhancement.setHeight("-10px");
		concurrentCashlessIntEnhancement.setDisableOnClick(true);
		
		
		concurrentCashlessFinalEnhancement = new Button();
		concurrentCashlessFinalEnhancement.setCaption("Concurrent Final Enhancement");
		concurrentCashlessFinalEnhancement.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		concurrentCashlessFinalEnhancement.setWidth("225px");
		concurrentCashlessFinalEnhancement.setHeight("-10px");
		concurrentCashlessFinalEnhancement.setDisableOnClick(true);

		nonConcurrentCashessSearchBtn = new Button();
		nonConcurrentCashessSearchBtn.setCaption("Non-Concurrent Pre-Auth");
		//Vaadin8-setImmediate() reimbSearchBtn.setImmediate(true);
		nonConcurrentCashessSearchBtn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		nonConcurrentCashessSearchBtn.setWidth("225px");
		nonConcurrentCashessSearchBtn.setHeight("-10px");
		//Vaadin8-setImmediate() reimbSearchBtn.setImmediate(true);		
		
		
		nonConcurrentCashlessIntEnhancement = new Button();
		nonConcurrentCashlessIntEnhancement.setCaption("Non-Concurrent Interim Enhancement");
		nonConcurrentCashlessIntEnhancement.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		nonConcurrentCashlessIntEnhancement.setWidth("225px");
		nonConcurrentCashlessIntEnhancement.setHeight("-10px");
		
		nonConcurrentCashlessFinalEnhancement = new Button();
		nonConcurrentCashlessFinalEnhancement.setCaption("Non-Concurrent Final Enhancement");
		nonConcurrentCashlessFinalEnhancement.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		nonConcurrentCashlessFinalEnhancement.setWidth("225px");
		nonConcurrentCashlessFinalEnhancement.setHeight("-10px");
		

		hospitalStlmntSearchBtn = new Button();
		hospitalStlmntSearchBtn.setCaption("Hospital Settlement");
		//Vaadin8-setImmediate() reimbSearchBtn.setImmediate(true);
		hospitalStlmntSearchBtn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		hospitalStlmntSearchBtn.setWidth("225px");
		hospitalStlmntSearchBtn.setHeight("-10px");
		//Vaadin8-setImmediate() reimbSearchBtn.setImmediate(true);	
		
		memberStlmntSearchBtn = new Button();
		memberStlmntSearchBtn.setCaption("Member Settlement");
		//Vaadin8-setImmediate() reimbSearchBtn.setImmediate(true);
		memberStlmntSearchBtn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		memberStlmntSearchBtn.setWidth("225px");
		memberStlmntSearchBtn.setHeight("-10px");
		//Vaadin8-setImmediate() reimbSearchBtn.setImmediate(true);	
		


	/*	postCashlessSearchBtn = new Button();
		postCashlessSearchBtn.setCaption("Post-Cashless");
		postCashlessSearchBtn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		postCashlessSearchBtn.setWidth("-1px");
		postCashlessSearchBtn.setHeight("-10px");
		postCashlessSearchBtn.setDisableOnClick(true);*/
		
		Label label = new Label();
		label.setEnabled(false);
		Label label1 = new Label();
		label1.setEnabled(false);
		Label label2 = new Label();
		label2.setEnabled(false);
		Label label3 = new Label();
		label3.setEnabled(false);

		FormLayout labelLayout = new FormLayout(label);
		FormLayout label1Layout = new FormLayout(label1);
		FormLayout label2Layout = new FormLayout(label2);
		FormLayout label3Layout = new FormLayout(label3);
		
		txtIntimationNumber = new TextField("Intimation Number");
		bean.setIntimationNo(txtIntimationNumber.getValue());
		
		txtReason = new TextArea("Reason");
		bean.setReason(txtReason.getValue());
		txtReason.setMaxLength(200);	
		txtReason.setDescription(SHAConstants.F8_POPUP_FOR_TEXTAREA);
		txtReason.setData(txtReason.getValue());
		handleTextAreaPopup(txtReason,null);
		
		pickBtn = new Button();
		pickBtn.setCaption("Pick");
		pickBtn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		pickBtn.setWidth("-1px");
		pickBtn.setHeight("-10px");
		
		year = new ComboBox("Year");
		BeanItemContainer<SelectValue> policyYearValues = getPolicyYearValues();
		year.setContainerDataSource(policyYearValues);
		year.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		year.setItemCaptionPropertyId("value");
		year.setId("year");
		List<SelectValue> itemIds2 = policyYearValues.getItemIds();
		if(itemIds2 != null && ! itemIds2.isEmpty()){
			SelectValue selectValue = itemIds2.get(0);
			year.setValue(selectValue);
		}
		bean.setYear(year.getValue().toString());
		
		productMulticomboBox = new ComboBoxMultiselect("Product Name");
		//productNameContainer = masterService.getProductContainerForAudit();
		productContainer=masterService.getProductNameContainerForAudit();
		
		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(0L);
		selectValue1.setValue(SHAConstants.ALL);
		productContainer.addBean(selectValue1);
		productMulticomboBox.setContainerDataSource(productContainer);
		productMulticomboBox.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		productMulticomboBox.setItemCaptionPropertyId("value");
		productMulticomboBox.setShowSelectedOnTop(true);
		//productMulticomboBox.setInputPrompt("ALL");
		//ShowButton All = null;
		//productMulticomboBox.setShowSelectAllButton(ShowButton All);
		productMulticomboBox.addValueChangeListener(new Property.ValueChangeListener() {
			
			@Override
			public void valueChange(com.vaadin.v7.data.Property.ValueChangeEvent event) {
				if(null != productMulticomboBox){
					binder.getItemDataSource().getBean().setProductName(productMulticomboBox.getValue().toString());
					 bean.setProductName(productMulticomboBox.getValue().toString());
					 bean.setProductNameMulti(productMulticomboBox.getValue().toString());
				}
			}
		});
		 
		List<SelectValue> itemIds = productContainer.getItemIds();
			if(itemIds != null && ! itemIds.isEmpty()){
				for (SelectValue selectValue : itemIds) {
					if(selectValue.getId().equals(0l)){
						productMulticomboBox.select(selectValue);
						break;
					}
				}
			}
		 
//		HorizontalLayout intimationLayout = new HorizontalLayout(txtIntimationNumber,txtReason,pickBtn); 
		VerticalLayout layout1 = new VerticalLayout(concurrentCashessSearchBtn,nonConcurrentCashessSearchBtn,hospitalStlmntSearchBtn,txtIntimationNumber,year);
		layout1.setSizeFull();
		layout1.setSpacing(true);
		HorizontalLayout dummy1 = new HorizontalLayout();
		HorizontalLayout dummy2 = new HorizontalLayout();
		VerticalLayout layout2 = new VerticalLayout(concurrentCashlessIntEnhancement,nonConcurrentCashlessIntEnhancement,memberStlmntSearchBtn,txtReason);
		layout2.setSizeFull();
		layout2.setSpacing(true);
		FormLayout dummy = new FormLayout();
		VerticalLayout layout3 = new VerticalLayout(concurrentCashlessFinalEnhancement,nonConcurrentCashlessFinalEnhancement,label,label2,label3,pickBtn);
		layout3.setSizeFull();
		layout3.setSpacing(true);
		
		FormLayout layout4 = new FormLayout(productMulticomboBox);
		layout4.setSizeFull();
		layout4.setMargin(false);	
		layout4.setSpacing(false);
		
		HorizontalLayout finalLayout = new HorizontalLayout(layout1,layout2,layout3,layout4);
//		VerticalLayout resultingLayout = new VerticalLayout(concurrentLayout,nonConcurrentLayout,settlememtLayout);

		/*FormLayout concurrentCashessSearchBtnLayout = new FormLayout(concurrentCashessSearchBtn);
		FormLayout nonConcurrentCashessSearchBtnLayout = new FormLayout(nonConcurrentCashessSearchBtn);
		FormLayout hospitalStlmntSearchBtnLayout = new FormLayout(hospitalStlmntSearchBtn);
		FormLayout memberStlmntSearchBtnLayout = new FormLayout(memberStlmntSearchBtn);

		FormLayout intimationFormLayout = new FormLayout(txtIntimationNumber,pickBtn);
		FormLayout reasonFormLayout = new FormLayout(txtReason);
//		FormLayout pickBtnLayout = new FormLayout(pickBtn);
		
		HorizontalLayout hLayout = new HorizontalLayout(concurrentCashessSearchBtnLayout,nonConcurrentCashessSearchBtnLayout,
				hospitalStlmntSearchBtnLayout,memberStlmntSearchBtnLayout,
				labelLayout,label1Layout,label2Layout,label3Layout,
				intimationFormLayout,reasonFormLayout,pickBtnLayout);
		hLayout.setSpacing(false);
		hLayout.setMargin(false);
		verticalLayout.addComponent(hLayout);*/
		finalLayout.setSpacing(true);
		finalLayout.setMargin(true);
		verticalLayout.setHeight("130px");
		finalLayout.addStyleName("g-search-panel");
		
		setRequiredAndValidation(txtIntimationNumber);
		setRequiredAndValidation(txtReason);
		setRequiredAndValidation(year);
		mandatoryFields.remove(txtIntimationNumber);
		mandatoryFields.remove(txtReason);
		mandatoryFields.add(txtIntimationNumber);
		mandatoryFields.add(txtReason);
		mandatoryFields.add(year);
		
		return finalLayout; 
		
	}

	@SuppressWarnings("deprecation")
	public void addListener() {

		concurrentCashessSearchBtn.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
				concurrentCashessSearchBtn.setEnabled(true);
				bean.setClaimTypeId(SHAConstants.CONCURRENT_CASHLESS_PREAUTH);
				searchable.doSearch();
			}
		});
		
		concurrentCashlessIntEnhancement.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
				concurrentCashlessIntEnhancement.setEnabled(true);
				bean.setClaimTypeId(SHAConstants.CONCURRENT_CASHLESS_INTERIM_ENHANCEMENNT);
				searchable.doSearch();
			}
		});
		
		concurrentCashlessFinalEnhancement.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
				concurrentCashlessFinalEnhancement.setEnabled(true);
				bean.setClaimTypeId(SHAConstants.CONCURRENT_CASHLESS_FINAL_ENHANCEMENNT);
				searchable.doSearch();
			}
		});
		
		nonConcurrentCashessSearchBtn.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
				nonConcurrentCashessSearchBtn.setEnabled(true);
				bean.setClaimTypeId(SHAConstants.NON_CONCURRENT_CASHLESS_PREAUTH);
				searchable.doSearch();
			}
		});
		
		nonConcurrentCashlessIntEnhancement.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
				nonConcurrentCashlessIntEnhancement.setEnabled(true);
				bean.setClaimTypeId(SHAConstants.NON_CONCURRENT_CASHLESS_INTERIM_ENHANCEMENNT);
				searchable.doSearch();
			}
		});
		
		nonConcurrentCashlessFinalEnhancement.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
				nonConcurrentCashlessFinalEnhancement.setEnabled(true);
				bean.setClaimTypeId(SHAConstants.NON_CONCURRENT_CASHLESS_FINAL_ENHANCEMENNT);
				searchable.doSearch();
			}
		});
		
		hospitalStlmntSearchBtn.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
				hospitalStlmntSearchBtn.setEnabled(true);
				bean.setClaimTypeId(SHAConstants.HOSPITAL_SETTLEMENT_CHAR);
				searchable.doSearch();
			}
		});
		
		memberStlmntSearchBtn.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
				memberStlmntSearchBtn.setEnabled(true);
				bean.setClaimTypeId(SHAConstants.MEMBER_SETTLEMENT_CHAR);
				searchable.doSearch();
			}
		});
		
		pickBtn.addClickListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				if(validatePage())
				{
					if(null != txtIntimationNumber && txtIntimationNumber.getValue() != null){
						
						///IMSSUPPOR-43177
						if (year != null && year.getValue() != null && year.getValue() != "") {
							SelectValue selectYear = (SelectValue) year.getValue();
						    if(selectYear!=null && selectYear.getValue()!=null){
						    	bean.setYear(selectYear.getValue());
						      }
//						                                                        filters.put("intimationYear", year.getValue());
						  }
						
						
						bean.setIntimationNo(txtIntimationNumber.getValue());
						
						String userName=(String)getUI().getSession().getAttribute(BPMClientContext.USERID);
						searchable.doSearch();
						/*DBCalculationService dbCalculationService = new DBCalculationService();
						SearchCVCTableDTO tableDto = dbCalculationService.getCVCAuditDataForIntimationNumber(userName,bean.getIntimationNo());
						if (null != tableDto && tableDto.getMessage() != null 
								&& tableDto.getMessage().equalsIgnoreCase("SUCCESS")) {
							searchable.doSearch();
						}else {
							if (null != tableDto && tableDto.getMessage() != null 
									&& !StringUtils.isBlank(tableDto.getMessage())) {
								showErrorMessage(tableDto.getMessage());
							}else {
								resetAlltheValues();
								
								Label successLabel = new Label("<b style = 'color: black;'>No Records found.</b>", ContentMode.HTML);			
								Button homeButton = new Button("Claims Audit Home");
								homeButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
								VerticalLayout layout = new VerticalLayout(successLabel, homeButton);
								layout.setComponentAlignment(homeButton, Alignment.BOTTOM_CENTER);
								layout.setSpacing(true);
								layout.setMargin(true);
								HorizontalLayout hLayout = new HorizontalLayout(layout);
								hLayout.setMargin(true);
								
								final ConfirmDialog dialog = new ConfirmDialog();
								dialog.setCaption("");
								dialog.setClosable(false);
								dialog.setContent(hLayout);
								dialog.setResizable(false);
								dialog.setModal(true);
								dialog.show(getUI().getCurrent(), null, true);
								
								homeButton.addClickListener(new ClickListener() {
									private static final long serialVersionUID = 7396240433865727954L;

									@Override
									public void buttonClick(ClickEvent event) {						
										dialog.close();	
										fireViewEvent(MenuItemBean.CVC_AUDIT,null);
									}
								});
							}
						}*/
					}	
				}

			}
		});
		
		txtReason.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(null != txtReason){
				bean.setReason(txtReason.getValue());
				}
			}
		});
	}
	
	public boolean validatePage() {
		
		Boolean hasError = false;
		StringBuffer eMsg = new StringBuffer();
	
		if (txtIntimationNumber != null
				&& txtIntimationNumber.getValue() == null
				|| (txtIntimationNumber.getValue() != null && txtIntimationNumber
						.getValue().length() == 0)) {
			hasError = true;
			eMsg.append("Please Enter Intimation Number </br>");
		}
		if (txtReason != null
				&& txtReason.getValue() == null
				|| (txtReason.getValue() != null && txtReason
						.getValue().length() == 0)) {
			hasError = true;
			eMsg.append("Please Enter Reason </br>");
		}
		
		if (year != null
				&& year.getValue() == null) {
			hasError = true;
			eMsg.append("Please Select Year </br>");
		}
		

		if (hasError) {
			Label label = new Label(eMsg.toString(), ContentMode.HTML);
			label.setStyleName("errMessage");
			VerticalLayout layout = new VerticalLayout();
			layout.setMargin(true);
			layout.addComponent(label);
			
			Button btn = new Button("Ok");
			btn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
			btn.setWidth("-1px");
			btn.setHeight("-10px");
			layout.addComponent(btn);

			ConfirmDialog dialog = new ConfirmDialog();
			dialog.setCaption("Alert");
			dialog.setClosable(false);
			dialog.setContent(layout);
			dialog.setResizable(false);
			dialog.setModal(true);
			dialog.show(getUI().getCurrent(), null, true);
			
			btn.addClickListener(new Button.ClickListener() {

				private static final long serialVersionUID = 1L;

				@Override
				public void buttonClick(ClickEvent event) {
					//resetAlltheValues();
					dialog.close();
				}
			});

			hasError = true;
			return !hasError;
		} 
		return true;
				
	}
	
	@SuppressWarnings("unused")
	private void setRequiredAndValidation(Component component) {
		@SuppressWarnings({ "unchecked", "rawtypes" })
		AbstractField<Field> field = (AbstractField<Field>) component;
		field.setRequired(true);
		field.setValidationVisible(false);
	}

	@SuppressWarnings("unused")
	private void setRequired(Boolean isRequired) {
	
		if (!mandatoryFields.isEmpty()) {
			for (int i = 0; i < mandatoryFields.size(); i++) {
				AbstractField<?> field = (AbstractField<?>) mandatoryFields
						.get(i);
				field.setRequired(isRequired);
			}
		}
	}
	
	private void showErrorMessage(String eMsg) {
		Label label = new Label(eMsg, ContentMode.HTML);
		label.setStyleName("errMessage");
		VerticalLayout layout = new VerticalLayout();
		layout.setMargin(true);
		layout.addComponent(label);
		
		Button btn = new Button("Ok");
		btn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		btn.setWidth("-1px");
		btn.setHeight("-10px");
		layout.addComponent(btn);

		ConfirmDialog dialog = new ConfirmDialog();
		dialog.setCaption("Errors");
		dialog.setClosable(false);
		dialog.setContent(layout);
		dialog.setResizable(false);
		dialog.setModal(true);
		dialog.show(getUI().getCurrent(), null, true);
		
		btn.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				resetAlltheValues();
				dialog.close();
			}
		});
	}
	
	public void resetAlltheValues(){
		txtIntimationNumber.setValue("");
		txtReason.setValue("");
		bean.setIntimationNo("");
		bean.setReason("");
		/*List<SelectValue> itemIds = (List<SelectValue>) productMulticomboBox.getItemIds();
		if(itemIds != null && ! itemIds.isEmpty()){
			for (SelectValue selectValue : itemIds) {
				if(selectValue.getId().equals(0l)){
					productMulticomboBox.select(selectValue);
					break;
				}
			}
		}*/
	}
	
	@SuppressWarnings("unused")
	public  void handleTextAreaPopup(TextArea searchField, final  Listener listener) {

		ShortcutListener enterShortCut = new ShortcutListener(
				"ShortcutForRedraftRemarks", ShortcutAction.KeyCode.F8, null) {

			private static final long serialVersionUID = 1L;
			@Override
			public void handleAction(Object sender, Object target) {
				((ShortcutListener) listener).handleAction(sender, target);
			}
		};
		handleShortcutForRedraft(searchField, getShortCutListenerForRemarks(searchField));

	}

	@SuppressWarnings("deprecation")
	public  void handleShortcutForRedraft(final TextArea textField, final ShortcutListener shortcutListener) {
		textField.addFocusListener(new FocusListener() {

			@Override
			public void focus(FocusEvent event) {
				textField.addShortcutListener(shortcutListener);

			}
		});
		textField.addBlurListener(new BlurListener() {

			@Override
			public void blur(BlurEvent event) {

				textField.removeShortcutListener(shortcutListener);

			}
		});
	}
	
	private ShortcutListener getShortCutListenerForRemarks(final TextArea txtFld)
	{
		ShortcutListener listener =  new ShortcutListener("Reason",KeyCodes.KEY_F8,null) {

			private static final long serialVersionUID = 1L;

			@SuppressWarnings({ "static-access", "deprecation" })
			@Override
			public void handleAction(Object sender, Object target) {
				VerticalLayout vLayout =  new VerticalLayout();

				vLayout.setWidth(100.0f,Sizeable.UNITS_PERCENTAGE);
				vLayout.setHeight(Sizeable.SIZE_UNDEFINED,Sizeable.UNITS_PERCENTAGE);
				vLayout.setMargin(true);
				vLayout.setSpacing(true);
				final TextArea txtArea = new TextArea();
				txtArea.setStyleName("Boldstyle"); 
				txtArea.setValue(txtFld.getValue());
				txtArea.setNullRepresentation("");
				txtArea.setSizeFull();
				txtArea.setWidth("100%");
				txtArea.setMaxLength(200);
//				txtArea.setReadOnly(true);
				txtArea.setRows(25);

				txtArea.addValueChangeListener(new ValueChangeListener() {

					@Override
					public void valueChange(ValueChangeEvent event) {
						txtFld.setValue(((TextArea)event.getProperty()).getValue());
					}
				});
				Button okBtn = new Button("OK");
				okBtn.setStyleName(ValoTheme.BUTTON_FRIENDLY);
				vLayout.addComponent(txtArea);
				vLayout.addComponent(okBtn);
				vLayout.setComponentAlignment(okBtn,Alignment.BOTTOM_CENTER);

				final Window dialog = new Window();

				String strCaption = "Reason";

				dialog.setCaption(strCaption);

				dialog.setHeight(vLayout.getHeight(), Sizeable.UNITS_PERCENTAGE);
				dialog.setWidth("45%");
				dialog.setClosable(false);

				dialog.setContent(vLayout);
				dialog.setResizable(true);
				dialog.setModal(true);
				dialog.setDraggable(true);
				dialog.setData(txtFld);

				dialog.addCloseListener(new Window.CloseListener() {
					@Override
					public void windowClose(CloseEvent e) {
						dialog.close();
					}
				});

				if(getUI().getCurrent().getPage().getWebBrowser().isIE()) {
					dialog.setPositionX(450);
					dialog.setPositionY(500);
				}
				getUI().getCurrent().addWindow(dialog);
				okBtn.addClickListener(new Button.ClickListener() {
					private static final long serialVersionUID = 1L;
					@Override
					public void buttonClick(ClickEvent event) {
						dialog.close();
					}
				});	
			}
		};

		return listener;
	}
	
	public BeanItemContainer<SelectValue> getPolicyYearValues(){
		
		List<SelectValue> selectValueList = new ArrayList<SelectValue>();
		BeanItemContainer<SelectValue> container = new BeanItemContainer<SelectValue>(SelectValue.class);
		
		Calendar instance = Calendar.getInstance();
		//ADDED FOR FY APR - MAR
		int month = instance.get(Calendar.MONTH);
		if(month >= 3){
			instance.add(Calendar.YEAR, 1);
		}
		/*instance.add(Calendar.YEAR, 1);*/
		int intYear = instance.get(Calendar.YEAR);
		Long year = Long.valueOf(intYear);
		for(Long i= year;i>=year-13;i--){
			SelectValue selectValue = new SelectValue();
			Long j = i-1;
			selectValue.setId(j);
			selectValue.setValue(""+i.intValue());
			selectValueList.add(selectValue);
		}
		container.addAll(selectValueList);
		
		return container;
	}
	
	public void validateYear() {
		
		Boolean hasError = false;
		StringBuffer eMsg = new StringBuffer();
		
		if (year != null
				&& year.getValue() == null) {
			hasError = true;
			eMsg.append("Please Select Year </br>");
		}
		

		if (hasError) {
			Label label = new Label(eMsg.toString(), ContentMode.HTML);
			label.setStyleName("errMessage");
			VerticalLayout layout = new VerticalLayout();
			layout.setMargin(true);
			layout.addComponent(label);
			
			Button btn = new Button("Ok");
			btn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
			btn.setWidth("-1px");
			btn.setHeight("-10px");
			layout.addComponent(btn);

			ConfirmDialog dialog = new ConfirmDialog();
			dialog.setCaption("Alert");
			dialog.setClosable(false);
			dialog.setContent(layout);
			dialog.setResizable(false);
			dialog.setModal(true);
			dialog.show(getUI().getCurrent(), null, true);
			
			btn.addClickListener(new Button.ClickListener() {

				private static final long serialVersionUID = 1L;

				@Override
				public void buttonClick(ClickEvent event) {
					resetAlltheValues();
					dialog.close();
				}
			});

		}
				
	}
	
}
