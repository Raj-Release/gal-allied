package com.shaic.claim.allowghiregistration;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.inject.Instance;
import javax.faces.bean.ViewScoped;
import javax.inject.Inject;

import org.vaadin.addon.cdimvp.ViewComponent;
import org.vaadin.csvalidation.CSValidator;
import org.vaadin.dialogs.ConfirmDialog;

import com.shaic.arch.SHAConstants;
import com.shaic.arch.SHAUtils;
import com.shaic.arch.fields.dto.SelectValue;
import com.shaic.arch.view.LoaderPresenter;
import com.shaic.claim.ClaimDto;
import com.shaic.claim.ClaimMapper;
import com.shaic.claim.IntimationDetailsCarousel;
import com.shaic.claim.ViewDetails;
import com.shaic.claim.ViewDetails.ViewLevels;
import com.shaic.claim.corpbuffer.allocation.search.AllocateCorpBufferService;
import com.shaic.claim.corpbuffer.allocation.wizard.AllocateCorpBufferDetailDTO;
import com.shaic.claim.policy.search.ui.premia.PremPolicy;
import com.shaic.claim.preauth.wizard.dto.PreauthDTO;
import com.shaic.claim.premedical.dto.PreviousClaimsTableDTO;
import com.shaic.claim.registration.PreviousClaimsTableForClaimRegistration;
import com.shaic.claim.registration.SearchClaimRegistrationTableDto;
import com.shaic.claim.registration.SublimtListTable;
import com.shaic.claim.registration.balancesuminsured.view.BalanceSumInsured;
import com.shaic.claim.reimbursement.dto.RRCDTO;
import com.shaic.claim.viewEarlierRodDetails.RewardRecognitionRequestView;
import com.shaic.domain.Claim;
import com.shaic.domain.Hospitals;
import com.shaic.domain.Intimation;
import com.shaic.domain.IntimationService;
import com.shaic.domain.MasterService;
import com.shaic.domain.PolicyService;
import com.shaic.domain.ReferenceTable;
import com.shaic.domain.SublimitFunObject;
import com.shaic.domain.TmpCPUCode;
import com.shaic.ims.bpm.claim.DBCalculationService;
import com.shaic.main.navigator.domain.MenuItemBean;
import com.shaic.main.navigator.ui.Toolbar;
import com.shaic.newcode.wizard.dto.NewIntimationDto;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.v7.data.Property;
import com.vaadin.v7.data.Property.ValueChangeEvent;
import com.vaadin.v7.data.Property.ValueChangeListener;
import com.vaadin.v7.data.fieldgroup.FieldGroup;
import com.vaadin.v7.data.util.BeanItem;
import com.vaadin.v7.data.util.BeanItemContainer;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.v7.event.FieldEvents.TextChangeEvent;
import com.vaadin.v7.event.FieldEvents.TextChangeListener;
import com.vaadin.server.Sizeable;
import com.vaadin.server.StreamResource;
import com.vaadin.server.VaadinSession;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.v7.shared.ui.label.ContentMode;
import com.vaadin.v7.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.v7.ui.CheckBox;
import com.vaadin.v7.ui.ComboBox;
import com.vaadin.v7.ui.Table;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.FormLayout;
import com.vaadin.v7.ui.HorizontalLayout;
import com.vaadin.v7.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.v7.ui.TextArea;
import com.vaadin.v7.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.v7.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.v7.ui.themes.Reindeer;
import com.vaadin.ui.themes.ValoTheme;

@ViewScoped
@SuppressWarnings({ "serial", "deprecation" })
public class GhiAllowClaimRegistration extends ViewComponent {

	@Inject
	private ViewDetails viewDetails;

	@Inject
	private PreviousClaimsTableForClaimRegistration previousClaimsRgistration;

	@Inject
	private BalanceSumInsured balanceSIComponentInstance;

	@Inject
	private Instance<SublimtListTable> sublimitListInstance;
	
	@Inject
	private Toolbar toolBar;

	@EJB
	private PolicyService policyService;
	
	@EJB
	private IntimationService intimationService;
	
	@EJB
	private DBCalculationService dbCalculationService;

	private SublimtListTable sublimtListTable;

	private List<SublimitFunObject> resultSublimitList = new ArrayList<SublimitFunObject>();
	
	HashMap<String, String> enteredValues = new HashMap<String, String>();

	private VerticalLayout balanceSIComponent;

	private Panel mainPanel = new Panel();

	private VerticalLayout mainLayout;

	private FormLayout dynamicFrmLayout;

	private CheckBox vipChk;

	private TextField provAmtTxt;

	private ComboBox currencyNameSelect;

	private TextArea registrationRemarksTxta;

	private TextArea suggestRejectionTxta;

	private TextField claimedAmtTxt;

	private VerticalLayout dynamicFieldsLayout;

	private TextField provisionalAmtTxt;

	private Button registerButton;

	private Button suggestRejectBtn;

	private Button homePageButton;

	private SearchClaimRegistrationTableDto registerationBean = new SearchClaimRegistrationTableDto();

	private Claim claim = null;

	private ClaimDto claimDto;

	private NewIntimationDto newIntimationDto = new NewIntimationDto();

	private TmpCPUCode tmpCpuCode = null;

	private Double provisionamount = 0d;
	
	private Double balanceSumInsured = 0d;

	private VerticalLayout registrationDetailsLayout;

	private Button submitButton;

	private Button cancelButton;

	private HorizontalLayout submitButtonLayout;

	private BeanItemContainer<SelectValue> currencyMasterContainer;

	@Inject
	private Instance<IntimationDetailsCarousel> carouselInstance;

	private IntimationDetailsCarousel intimationDetailCarousel;

	@EJB
	private MasterService masterService;

	private HorizontalLayout registerBtnLayout;

	private SearchClaimRegistrationTableDto searchDTO;
	
	private PreauthDTO preauthDTO;
	
	@Inject
	private Instance<RewardRecognitionRequestView> rewardRecognitionRequestViewInstance;
	
	private RewardRecognitionRequestView rewardRecognitionRequestViewObj;
	
	private RRCDTO rrcDTO;
	
	private Window popup;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	private CheckBox gmcCorpBuffer;
	private TextField gmcCorpBufferLimit;
	
	private TextField gmcCorpBufferSiTxt;
	private TextField gmcCorpBufferUtilisedAmtTxt;
	private TextField gmcCorpBufferLimitTxt;
	private TextField gmcAvalBalTxt;
	
	private Double gmcSI = 0d;
	private Double gmcUtilised = 0d;
	private Double gmcLimit = 0d;
	private Double gmcBalance = 0d;
	
	@EJB
	private AllocateCorpBufferService bufferService;

	
	public void init() {

	}

	public void initView(SearchClaimRegistrationTableDto dto) {

		if (dto != null) {
			this.searchDTO = dto;
			intimationService.getTopUpPolicyDetails(dto.getNewIntimationDto().getPolicy().getPolicyNumber(),dto);
			
			if(null != dto.getTopUpPolicyAlertFlag() && SHAConstants.YES_FLAG.equalsIgnoreCase(dto.getTopUpPolicyAlertFlag())){
				showTopUpAlertMessage(dto.getTopUpPolicyAlertMessage());
			}
			else if(dto.getPopupMap() != null && ! dto.getPopupMap().isEmpty())
			{
				poupMessageForProduct();
			}else if(dto.getSuspiciousPopUp() != null && ! dto.getSuspiciousPopUp().isEmpty()){
				suspiousPopupMessage();
			}
			newIntimationDto = dto.getNewIntimationDto();
			registerationBean = dto;
			preauthDTO = new PreauthDTO();
			claimDto = new ClaimDto();
			preauthDTO.setRrcDTO(dto.getRrcDTO());
			//preauthDTO.setRodHumanTask(dto.getHumanTask());
			fireViewEvent(GhiAllowClaimRegistrationPresenter.GET_BALANCE_SI_GHI_ALLOW,newIntimationDto);
			fireViewEvent(GhiAllowClaimRegistrationPresenter.GET_GHI_ALLOW_CPU_OBJECT,
					newIntimationDto.getCpuId());			

			claimDto.setNewIntimationDto(newIntimationDto);
		}

		BeanItem<NewIntimationDto> item = new BeanItem<NewIntimationDto>(
				newIntimationDto);
		FieldGroup binder = new FieldGroup(item);
		binder.bindMemberFields(this);

		Panel buildMainLayout = buildMainLayout();
		if(!dto.getIsProceedFurther()) {
			registerButton.setEnabled(false);
			StringBuffer message = new StringBuffer("");
			if(dto.getIsCancelledPolicy()) {
				message.append("Policy is cancelled. Hence claim cannot be approved. Please contact the administrator.");
			} 
			showPolicyStatusMessage(message.toString());
		}
		setCompositionRoot(buildMainLayout);
	}
	
	private Panel buildMainLayout() {
		mainLayout = new VerticalLayout();
		homePageButton = new Button();
		VerticalLayout tabsLayout = buildTabsLayout();
		registrationDetailsLayout = new VerticalLayout();
		registerBtnLayout = new HorizontalLayout();
		submitButtonLayout = new HorizontalLayout();
		Panel registrationPanel = buildRegistrationPanel();
		mainLayout.addComponent(registrationPanel);
		mainLayout.addComponent(intimationDetailCarousel);
		viewDetails.initView(newIntimationDto.getIntimationId(), ViewLevels.INTIMATION, false,"Claim Reg");
		//mainLayout.addComponent(viewDetails);
		mainLayout.addComponent(commonButtonsLayout());
		//mainLayout.setComponentAlignment(viewDetails, Alignment.TOP_CENTER);

			FormLayout currencyDetailsForm = buildCurrencyFormLayout();
			
			
			FormLayout gmcFormFieldsLayout = new FormLayout();
			
			//Vaadin8-setImmediate() gmcFormFieldsLayout.setImmediate(false);
			gmcFormFieldsLayout.setMargin(false);
			gmcFormFieldsLayout.setSpacing(true);
			
			gmcCorpBuffer = new CheckBox();
			
			FormLayout bufferFLayout = new FormLayout(gmcCorpBuffer);
			bufferFLayout.setCaption("Corporate Buffer");
			bufferFLayout.setMargin(false);
			
			gmcFormFieldsLayout.addComponent(bufferFLayout);

			gmcCorpBufferLimit = new TextField("Corporate Buffer Limit");
			gmcCorpBufferLimit.setEnabled(false);
			gmcCorpBufferLimit.addBlurListener(getgmcCorpBufferLimitListener(gmcCorpBufferLimitTxt));
			
			//R1167
			gmcCorpBuffer.setReadOnly(true);
			//gmcCorpBuffer.addValueChangeListener(getGmcCorpBufferListener(gmcCorpBufferLimit));
			
			CSValidator claimedAmtTxtValidator = new CSValidator();
			//Vaadin8-setImmediate() gmcCorpBufferLimit.setImmediate(false);
			gmcCorpBufferLimit.setWidth("160px");
			gmcCorpBufferLimit.setHeight("-1px");
			gmcCorpBufferLimit.setValidationVisible(false);
			gmcCorpBufferLimit.setMaxLength(13);
			claimedAmtTxtValidator.extend(gmcCorpBufferLimit);
			claimedAmtTxtValidator.setRegExp("^[0-9.]*$");
			claimedAmtTxtValidator.setPreventInvalidTyping(true);
			
			gmcFormFieldsLayout.addComponent(gmcCorpBufferLimit);
			gmcFormFieldsLayout.setVisible(false);
			
			if(newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getProduct() != null){
				if(ReferenceTable.getGMCProductList().containsKey(newIntimationDto.getPolicy().getProduct().getKey())){
					gmcFormFieldsLayout.setVisible(true);		
				}else{
					gmcFormFieldsLayout.setVisible(false);		
				}
			}
			
			HorizontalLayout gmcLayout = new HorizontalLayout();
			gmcLayout.addComponents(currencyDetailsForm/*, gmcFormFieldsLayout*/); //R1167
			
			registrationDetailsLayout.addComponent(gmcLayout);

			tabsLayout.setMargin(true);
			registrationDetailsLayout.addComponent(tabsLayout);

			HorizontalLayout suggestRejecionAndRegisterButtonLayout = BuildClaimRegisterAndSuggestRejectionBtnLayout();
			registerBtnLayout
					.addComponent(suggestRejecionAndRegisterButtonLayout);
			registerBtnLayout.setWidth("100%");
			registerBtnLayout.setComponentAlignment(
					suggestRejecionAndRegisterButtonLayout,
					Alignment.BOTTOM_RIGHT);

			registrationDetailsLayout.addComponent(registerBtnLayout);

			dynamicFieldsLayout = new VerticalLayout();
			dynamicFrmLayout = new FormLayout();
			dynamicFieldsLayout.addComponent(dynamicFrmLayout);
			registrationDetailsLayout.addComponent(dynamicFieldsLayout);
		

		HorizontalLayout buttonLayout1 = buildSubmitAndCancelBtnLayout();
		submitButtonLayout.addComponent(buttonLayout1);
		submitButtonLayout.setWidth("100%");
		submitButtonLayout.setSpacing(true);
		submitButtonLayout.setMargin(true);
		submitButtonLayout.setComponentAlignment(buttonLayout1,
				Alignment.MIDDLE_CENTER);
		registrationDetailsLayout.addComponent(submitButtonLayout);

		mainLayout.addComponent(registrationDetailsLayout);
		mainPanel.setWidth("100%");
		mainPanel.setHeight("620px");
		mainPanel.setContent(mainLayout);

		return mainPanel;
	}
	
	  public void poupMessageForProduct() {
		  final ConfirmDialog dialog = new ConfirmDialog();
			dialog.setCaption("");
			dialog.setClosable(true);
			dialog.setResizable(false);
			dialog.setModal(true);
			
			Button okButton = new Button("OK");
			okButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
			
			okButton.addClickListener(new ClickListener() {
				private static final long serialVersionUID = 7396240433865727954L;

				@Override
				public void buttonClick(ClickEvent event) {
					dialog.close();
					if(searchDTO.getSuspiciousPopUp() != null && ! searchDTO.getSuspiciousPopUp().isEmpty()){
						suspiousPopupMessage();
					}
				}
			});
			
			HorizontalLayout hLayout = new HorizontalLayout(okButton);
			hLayout.setSpacing(true);
			hLayout.setComponentAlignment(okButton, Alignment.MIDDLE_CENTER);
			hLayout.setMargin(true);
			VerticalLayout layout = new VerticalLayout();
			Map<String, String> popupMap = searchDTO.getPopupMap();
			for (Map.Entry<String, String> entry : popupMap.entrySet()) {
			   layout.addComponent(new Label(entry.getValue(), ContentMode.HTML));
			   layout.addComponent(new Label(entry.getKey(), ContentMode.HTML));
			}
			layout.addComponent(okButton);
			layout.setMargin(true);
			layout.setSpacing(true);
			dialog.setContent(layout);
			dialog.setWidth("30%");
			dialog.show(getUI().getCurrent(), null, true);
		}
	  
	  public void suspiousPopupMessage() {
		  final ConfirmDialog dialog = new ConfirmDialog();
			dialog.setCaption("");
			dialog.setClosable(true);
			dialog.setResizable(false);
			dialog.setModal(true);
			
			Button okButton = new Button("OK");
			okButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
			
			okButton.addClickListener(new ClickListener() {
				private static final long serialVersionUID = 7396240433865727954L;

				@Override
				public void buttonClick(ClickEvent event) {
					dialog.close();
				}
			});
			
			HorizontalLayout hLayout = new HorizontalLayout(okButton);
			hLayout.setSpacing(true);
			hLayout.setComponentAlignment(okButton, Alignment.MIDDLE_CENTER);
			hLayout.setMargin(true);
			VerticalLayout layout = new VerticalLayout();
			Map<String, String> popupMap = searchDTO.getSuspiciousPopUp();
			for (Map.Entry<String, String> entry : popupMap.entrySet()) {
			   layout.addComponent(new Label(entry.getValue(), ContentMode.HTML));
			   layout.addComponent(new Label(entry.getKey(), ContentMode.HTML));
			}
			layout.addComponent(okButton);
			layout.setMargin(true);
			layout.setSpacing(true);
			dialog.setContent(layout);
			dialog.setWidth("30%");
			dialog.show(getUI().getCurrent(), null, true);
		}
	
	public HorizontalLayout commonButtonsLayout()
	{
		Button btnRRC = new Button("RRC");
		btnRRC.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				validateUserForRRCRequestIntiation();
				
			}
			
		});
		
		Label dummyLabel =new Label();
		dummyLabel.setWidth("730px");
		HorizontalLayout alignmentHLayout = new HorizontalLayout(btnRRC,dummyLabel,viewDetails);
		return alignmentHLayout;
	}
	
	private void validateUserForRRCRequestIntiation()
	{
		
		Label label = new Label("Without Approval you cannot proceed further", ContentMode.HTML);
		label.setStyleName("errMessage");
		VerticalLayout layout = new VerticalLayout();
		layout.setMargin(true);
		layout.addComponent(label);
		ConfirmDialog dialog = new ConfirmDialog();
		dialog.setCaption("Errors");
		dialog.setClosable(true);
		dialog.setContent(layout);
		dialog.setResizable(true);
		dialog.setModal(true);
		dialog.show(getUI().getCurrent(), null, true);
		
		
		//fireViewEvent(ClaimRegistrationPresenter.VALIDATE_CLAIM_REGISTRATION_USER_RRC_REQUEST, preauthDTO);//, secondaryParameters);
	}

//	@Override
	public void buildValidationUserRRCRequestLayout(Boolean isValid) {
		
			if (!isValid) {
				Label label = new Label("Same user cannot raise request more than once from same stage", ContentMode.HTML);
				label.setStyleName("errMessage");
				VerticalLayout layout = new VerticalLayout();
				layout.setMargin(true);
				layout.addComponent(label);
				ConfirmDialog dialog = new ConfirmDialog();
				dialog.setCaption("Errors");
				dialog.setClosable(true);
				dialog.setContent(layout);
				dialog.setResizable(true);
				dialog.setModal(true);
				dialog.show(getUI().getCurrent(), null, true);
			} 
		else
		{
			popup = new com.vaadin.ui.Window();
			popup.setCaption("");
			popup.setWidth("85%");
			popup.setHeight("100%");
			rewardRecognitionRequestViewObj = rewardRecognitionRequestViewInstance.get();
			//ViewDocumentDetailsDTO documentDetails =  new ViewDocumentDetailsDTO();
			//documentDetails.setClaimDto(bean.getClaimDTO());
			rewardRecognitionRequestViewObj.initPresenter(SHAConstants.PROCESS_CLAIM_REGISTRATION);
			
			
			
			rewardRecognitionRequestViewObj.init(preauthDTO, popup);
			
			//earlierRodDetailsViewObj.init(bean.getClaimDTO().getKey(),bean.getKey());
			popup.setCaption("Reward Recognition Request");
			popup.setContent(rewardRecognitionRequestViewObj);
			popup.setClosable(true);
			popup.center();
			popup.setResizable(false);
			popup.addCloseListener(new Window.CloseListener() {
				/**
				 * 
				 */
				private static final long serialVersionUID = 1L;

				@Override
				public void windowClose(CloseEvent e) {
					System.out.println("Close listener called");
				}
			});

			popup.setModal(true);
			UI.getCurrent().addWindow(popup);
		}
		}
	
	
	public void loadRRCRequestDropDownValues(
			BeanItemContainer<SelectValue> mastersValueContainer) {
		// TODO Auto-generated method stub
		rewardRecognitionRequestViewObj.loadRRCRequestDropDownValues(mastersValueContainer)	;
		
	}
	
 
	
	public void buildRRCRequestSuccessLayout(String rrcRequestNo) {
		// TODO Auto-generated method stub
		rewardRecognitionRequestViewObj.buildRRCRequestSuccessLayout(rrcRequestNo);
		
	}
	


	private HorizontalLayout buildSubmitAndCancelBtnLayout() {

		submitButton = new Button();
		String submitCaption = "Submit";
		submitButton.setCaption(submitCaption);
		//Vaadin8-setImmediate() submitButton.setImmediate(true);
		submitButton.addStyleName(ValoTheme.BUTTON_PRIMARY);
		submitButton.setWidth("-1px");
		submitButton.setHeight("-1px");
		mainLayout.addComponent(submitButton);

		submitButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {

					if (claimDto.getStatusName() != null) {
						claimDto.setCreatedBy(registerationBean.getUsername());
						fireViewEvent(
								GhiAllowClaimRegistrationPresenter.SUBMIT_GHI_ALLOW_CLAIM_CLICK,
								claimDto);
					} else {
						Notification
								.show("ERROR",
										"Please Click Register Or Suggest Reject Button before Submitting the Claim. ",
										Notification.Type.ERROR_MESSAGE);
					}
				}
			});
	
		//Vaadin8-setImmediate() submitButton.setImmediate(true);

		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		//Vaadin8-setImmediate() cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		cancelButton.setStyleName(ValoTheme.BUTTON_DANGER);

		cancelButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					
					VaadinSession session = getSession();
					Long  wrkFlowKey= (Long)getSession().getAttribute(SHAConstants.WK_KEY);

			 		if(wrkFlowKey != null){
				 			DBCalculationService dbService = new DBCalculationService();
				 			dbService.callUnlockProcedure(wrkFlowKey);
				 			getSession().setAttribute(SHAConstants.WK_KEY, null);
				 	}
			 		else{
			 			SHAUtils.releaseHumanTask(registerationBean.getUsername(), registerationBean.getPassword(), registerationBean.getTaskNumber(),session);
			 		}
					fireViewEvent(
							GhiAllowClaimRegistrationPresenter.CANCEL_CLAIM_REGISTRATION_GHI_ALLOW,
							null);
				}
			});
		

		HorizontalLayout newBtnLayout = new HorizontalLayout(submitButton,
				cancelButton);
		newBtnLayout.setSpacing(true);
		return newBtnLayout;
	}

	private HorizontalLayout BuildClaimRegisterAndSuggestRejectionBtnLayout() {
		registerButton = new Button();
		registerButton.setCaption("Register");
		//Vaadin8-setImmediate() registerButton.setImmediate(true);
		registerButton.setWidth("-1px");
		registerButton.setHeight("-1px");
		registerButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
		registerButton.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				Intimation intimationDtls = intimationService.getIntimationByNo(newIntimationDto.getIntimationId());
				if(validatePolicyStatus(newIntimationDto.getPolicy().getPolicyNumber()) || (intimationDtls.getAllowApprovalFlag() != null && intimationDtls.getAllowApprovalFlag().equalsIgnoreCase("Y"))){
				claimDto.setStatusName("Registered");
				fireViewEvent(GhiAllowClaimRegistrationPresenter.CLICK_GHI_ALLOW_REGISTER_BUTTON,
						null);
				} else {
					showErrorPageForCancelledPolicy();
					registerButton.setEnabled(false);
				}
			}
		});

		suggestRejectBtn = new Button();
		suggestRejectBtn.setCaption("Suggest Rejection");
		//Vaadin8-setImmediate() suggestRejectBtn.setImmediate(true);
		suggestRejectBtn.setWidth("-1px");
		suggestRejectBtn.setHeight("-1px");
		suggestRejectBtn.setStyleName(ValoTheme.BUTTON_DANGER);
		
//		if(newIntimationDto != null && newIntimationDto.getClaimType() != null && newIntimationDto.getClaimType().getId() != null &&
//				newIntimationDto.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)){
//			suggestRejectBtn.setEnabled(false);
//		}
		
		suggestRejectBtn.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				claimDto.setStatusName("SuggestRejection");
				fireViewEvent(GhiAllowClaimRegistrationPresenter.SUGGEST_REJECTION_ALLOW_GHI_VALUE_CHANGE,
						null);
			}
		});
		HorizontalLayout submitAndSuggestBtnLayout = new HorizontalLayout(
				registerButton, suggestRejectBtn);
		submitAndSuggestBtnLayout.setSpacing(true);
		return submitAndSuggestBtnLayout;
	}

	private Panel buildRegistrationPanel() {
		// common part: create layout
		Panel registrationPanel = new Panel();
		String caption = "Claim Registration";
		HorizontalLayout panelCaption = new HorizontalLayout();

		panelCaption.addStyleName(ValoTheme.PANEL_WELL);
		panelCaption.setSpacing(true);
		panelCaption.setWidth("100%");
		panelCaption.setMargin(new MarginInfo(false, true, false, true));
		Label captionLbl = new Label(caption);
		panelCaption.addComponent(captionLbl);
		// panelCaption.setHeight("30px"); //for testing purpose

			vipChk = new CheckBox("Flag as VIP");
			panelCaption.addComponent(vipChk);
			panelCaption.setComponentAlignment(vipChk, Alignment.TOP_RIGHT);
		
		//Vaadin8-setImmediate() registrationPanel.setImmediate(false);
		registrationPanel.setWidth("100%");
		// registrationPanel.setHeight("130px");
		registrationPanel.addStyleName("panelHeader");

		intimationDetailCarousel = carouselInstance.get();
		intimationDetailCarousel.init(newIntimationDto);
		VerticalLayout vlayout = new VerticalLayout();
		vlayout.addComponent(panelCaption);
		vlayout.addComponent(intimationDetailCarousel);
		vlayout.setStyleName("policygridinfo");
		registrationPanel.setContent(vlayout);

		return registrationPanel;
	}

	private FormLayout buildCurrencyFormLayout() {
		// common part: create layout
		FormLayout currencyDetailsForm = new FormLayout();
		//Vaadin8-setImmediate() currencyDetailsForm.setImmediate(false);
		currencyDetailsForm.setMargin(false);
		currencyDetailsForm.setSpacing(true);

		// nativeSelect_1
		currencyNameSelect = new ComboBox();
		currencyNameSelect.setCaption("Currency Name");
		//Vaadin8-setImmediate() currencyNameSelect.setImmediate(false);
		currencyNameSelect.setWidth("160px");
		currencyNameSelect.setHeight("-1px");
		currencyNameSelect.setNullSelectionAllowed(false);
		fireViewEvent(GhiAllowClaimRegistrationPresenter.GET_CURRENCY_MASTER_GHI_ALLOW, null);
		currencyNameSelect.setEnabled(false);

		currencyNameSelect.setContainerDataSource(currencyMasterContainer);
		currencyNameSelect.setItemCaptionMode(ItemCaptionMode.PROPERTY);
		currencyNameSelect.setItemCaptionPropertyId("value");
		// Set Default Value to First Option.
		Collection<?> itemIds = currencyNameSelect.getContainerDataSource()
				.getItemIds();
		currencyNameSelect.setValue(itemIds.toArray()[2]);

		currencyNameSelect
				.addValueChangeListener(new Property.ValueChangeListener() {
					private static final long serialVersionUID = -4820170898280727113L;

					public void valueChange(ValueChangeEvent valueChangeEvent) {
						SelectValue masterValue = (SelectValue) valueChangeEvent
								.getProperty().getValue();
						if (claimedAmtTxt != null) {
							claimedAmtTxt.setCaption("Amount Claimed (INR) "
									+ masterValue.getValue());
							//Vaadin8-setImmediate() currencyNameSelect.setImmediate(true);
						}
					}
				});
		//Vaadin8-setImmediate() currencyNameSelect.setImmediate(true);
		currencyDetailsForm.addComponent(currencyNameSelect);

		CSValidator claimedAmtTxtValidator = new CSValidator();
		claimedAmtTxt = new TextField();
		claimedAmtTxt.setCaption("Amount Claimed (INR) ");
		//Vaadin8-setImmediate() claimedAmtTxt.setImmediate(false);
		claimedAmtTxt.setWidth("160px");
		claimedAmtTxt.setHeight("-1px");
		claimedAmtTxt.setRequired(true);
		claimedAmtTxt.setRequiredError("Please enter Claimed Amount.");
		claimedAmtTxt.setValidationVisible(false);
		claimedAmtTxt.setMaxLength(13);
		claimedAmtTxtValidator.extend(claimedAmtTxt);
		claimedAmtTxtValidator.setRegExp("^[0-9.]*$");
		claimedAmtTxtValidator.setPreventInvalidTyping(true);
		
		if(this.searchDTO.getClaimedAmount() != null){
			claimedAmtTxt.setValue(String.valueOf(this.searchDTO.getClaimedAmount().longValue()));
			claimedAmtTxt.setEnabled(false);
		}

		currencyDetailsForm.addComponent(claimedAmtTxt);
		

		return currencyDetailsForm;
	}

	public void setCurrencyMaster(BeanItemContainer<SelectValue> currencyMaster) {
		currencyMasterContainer = currencyMaster;
	}

	private VerticalLayout buildTabsLayout() {
		// common part: create layout
		VerticalLayout tabsLayout = new VerticalLayout();
		//Vaadin8-setImmediate() tabsLayout.setImmediate(false);
		// tabsLayout.setWidth("100%");
		// tabsLayout.setHeight("100%");
		tabsLayout.setSizeFull();
		tabsLayout.setMargin(true);

		// tabSheet_1
		TabSheet previousClaimTab = buildClaimTabs();
		tabsLayout.addComponent(previousClaimTab);

		if (registerationBean != null
				&& registerationBean.getNewIntimationDto() != null) {
			NewIntimationDto intimationDto = registerationBean.getNewIntimationDto();
			fireViewEvent(GhiAllowClaimRegistrationPresenter.GET_GHI_ALLOW_PREVIOUS_CLAIMS,
					intimationDto);
		}

		return tabsLayout;
	}

	private TabSheet buildClaimTabs() {
		TabSheet previousClaimTab = new TabSheet();
		//Vaadin8-setImmediate() previousClaimTab.setImmediate(true);
		// previousClaimTab.setWidth("100.0%");
		// previousClaimTab.setHeight("100.0%");
		previousClaimTab.setSizeFull();
		previousClaimTab.setStyleName(ValoTheme.TABSHEET_FRAMED);

		TabSheet previousClaimSheet = buildPreviouClaimTable();
		previousClaimTab.setHeight("100.0%");
		previousClaimTab.addTab(previousClaimSheet, "Previous Claims", null);

		// tabSheet_2
		TabSheet balanceSITab = buildBalanceSITab();
		previousClaimTab.addTab(balanceSITab, "Balance SI", null);

		TabSheet subLimitTab = buildSubLimitTab();
		previousClaimTab.addTab(subLimitTab, "Sub Limits", null);
		
		TabSheet corpBufferTab = buildCorpBufferTab();
		if(newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getProduct() != null){
			if(ReferenceTable.getGMCProductList().containsKey(newIntimationDto.getPolicy().getProduct().getKey())){
				previousClaimTab.addTab(corpBufferTab, "Corporate Buffer", null);		
			}
		}

		return previousClaimTab;
	}

	private TabSheet buildPreviouClaimTable() {
		TabSheet previousClaimLayout = new TabSheet();
		previousClaimLayout.hideTabs(true);
		//Vaadin8-setImmediate() previousClaimLayout.setImmediate(true);
		previousClaimLayout.setWidth("100%");
		previousClaimLayout.setHeight("100%");
		previousClaimLayout.setSizeFull();
		//Vaadin8-setImmediate() previousClaimLayout.setImmediate(true);
		previousClaimsRgistration.init("", false, false);

		VerticalLayout previousClaimTableLayout = new VerticalLayout();

		previousClaimTableLayout.setHeight("195px");
		previousClaimTableLayout.setWidth("100%");
		previousClaimTableLayout.setMargin(true);
		previousClaimTableLayout.setSpacing(true);

		previousClaimTableLayout.addComponent(previousClaimsRgistration);

		previousClaimLayout.setHeight("200px");

		previousClaimLayout.addComponent(previousClaimTableLayout);
		return previousClaimLayout;
	}

	private TabSheet buildBalanceSITab() {
		// common part: create layout
		TabSheet balanceSITab = new TabSheet();
		//Vaadin8-setImmediate() balanceSITab.setImmediate(true);
		balanceSITab.setWidth("100.0%");
		balanceSITab.setHeight("100.0%");
		balanceSITab.setSizeFull();
		balanceSITab.hideTabs(true);

		// verticalLayout_3
		VerticalLayout balanceSIVerticalLayout = buildBalanceSITabLayout();

		balanceSITab.addTab(balanceSIVerticalLayout, "Tab", null);
		return balanceSITab;
	}

	private TabSheet buildSubLimitTab() {
		TabSheet subLimitsTab = new TabSheet();
		//Vaadin8-setImmediate() subLimitsTab.setImmediate(true);
		subLimitsTab.setWidth("100.0%");
		subLimitsTab.setHeight("100.0%");
		subLimitsTab.setSizeFull();
		subLimitsTab.hideTabs(true);

		VerticalLayout sublimitsVerticalLayout = new VerticalLayout();
		//Vaadin8-setImmediate() sublimitsVerticalLayout.setImmediate(false);
		sublimitsVerticalLayout.setWidth("100%");
		sublimitsVerticalLayout.setHeight("100%");
		sublimitsVerticalLayout.setSizeFull();
		sublimitsVerticalLayout.setMargin(true);
		sublimitsVerticalLayout.setSpacing(true);

		fireViewEvent(GhiAllowClaimRegistrationPresenter.GET_GHI_ALLOW_SUB_LIMIT_LIST,
				newIntimationDto);

		sublimtListTable = sublimitListInstance.get();
		sublimtListTable.init("", false, false);
		sublimtListTable.setTableList(resultSublimitList);

		VerticalLayout sublimtListTableLayout = new VerticalLayout(
				sublimtListTable);
		sublimtListTableLayout.setSpacing(true);
		sublimtListTableLayout.setHeight("195px");
		sublimtListTableLayout.setWidth("80%");
		sublimtListTableLayout.setMargin(true);
		sublimtListTableLayout.setSpacing(true);
		subLimitsTab.setHeight("200px");

		subLimitsTab.addTab(sublimtListTableLayout, "Tab", null);
		sublimitsVerticalLayout.addComponent(subLimitsTab);

		return subLimitsTab;
	}

	@AutoGenerated
	private VerticalLayout buildBalanceSITabLayout() {
		// common part: create layout
		VerticalLayout balanceSIVerticalLayout = new VerticalLayout();
		//Vaadin8-setImmediate() balanceSIVerticalLayout.setImmediate(false);
		balanceSIVerticalLayout.setWidth("100%");
		balanceSIVerticalLayout.setHeight("106.88%");
		balanceSIVerticalLayout.setMargin(true);
		balanceSIVerticalLayout.setSpacing(true);

		balanceSIComponent = balanceSIComponentInstance
				.bindFieldGroup(newIntimationDto.getIntimationId(),null);

		balanceSIVerticalLayout.addComponent(balanceSIComponent);

		return balanceSIVerticalLayout;
	}

	private VerticalLayout buildRegisterFields() {

			buildProvisionAmountField();

				registrationRemarksTxta = new TextArea("Registration Remarks");
				registrationRemarksTxta.setMaxLength(200);

			if (suggestRejectionTxta != null) {
				dynamicFrmLayout.removeComponent(suggestRejectionTxta);
				suggestRejectionTxta = null;

				claimDto.setSuggestRejection(false);
			}

			dynamicFrmLayout.addComponent(registrationRemarksTxta);
			dynamicFieldsLayout.addComponent(dynamicFrmLayout);

		return dynamicFieldsLayout;

	}

	private void buildProvisionAmountField() {
		CSValidator provisionalAmtValidator = new CSValidator();
		provisionalAmtTxt = new TextField();
		provisionalAmtTxt.setCaption("Provision Amount");
		//Vaadin8-setImmediate() provisionalAmtTxt.setImmediate(false);
		provisionalAmtTxt.setWidth("-1px");
		provisionalAmtTxt.setHeight("-1px");
		provisionalAmtTxt.setMaxLength(13);
		provisionalAmtTxt.setRequired(true);
		provisionalAmtTxt.setRequiredError("Please enter Provision Amount");
		provisionalAmtValidator.extend(provisionalAmtTxt);
		provisionalAmtValidator.setRegExp("^[0-9]*$");
		provisionalAmtValidator.setPreventInvalidTyping(true);
		provisionalAmtTxt.setValidationVisible(false);


		if (tmpCpuCode != null) {
			
			if (tmpCpuCode.getProvisionAmount() != null) {
				provisionamount = tmpCpuCode.getProvisionAmount();
				System.out.println("provision amt====================="+provisionamount);
				System.out.println("Balance SI amt====================="+balanceSumInsured);
				
				
				Double claimedAmount = claimedAmtTxt.getValue() != null ? Double.valueOf(claimedAmtTxt.getValue()) : 0d;
				
				System.out.println("Claimed amt======================"+claimedAmount);
				
				if(balanceSumInsured != null && balanceSumInsured>0){
					if(balanceSumInsured > claimedAmount){
						provisionamount = claimedAmount;
						provisionalAmtTxt.setValue(provisionamount.toString());
				}
				else {
					provisionalAmtTxt.setValue(balanceSumInsured.toString());
				}					
					
				} else{
					provisionalAmtTxt.setValue("0");
				}
			}
			
			System.out.println("final provision amount --------------------------------"+provisionalAmtTxt.getValue());
			claimDto.setProvisionHomeAmount(Double.valueOf(provisionalAmtTxt.getValue()));
			claimDto.setProvisionAmount(Double.valueOf(provisionalAmtTxt.getValue()));

			if (currencyNameSelect.getValue() != null) {
				claimDto.setCurrencyId((SelectValue) currencyNameSelect
						.getValue());
			}
			
		}
		provisionalAmtTxt.addTextChangeListener(new TextChangeListener() {

			@Override
			public void textChange(TextChangeEvent event) {
				if (provAmtTxt != null) {
					provAmtTxt.setReadOnly(false);
					provAmtTxt.setValue(event.getText());
					provAmtTxt.setReadOnly(true);
				}
			}
		});
		dynamicFrmLayout.removeAllComponents();
		dynamicFrmLayout.addComponent(provisionalAmtTxt);
	}

	private FormLayout buildSuggestRejectionFields(FormLayout dynamicFrmLayout) {
		claimDto.setSuggestRejection(true);

		if (dynamicFrmLayout == null) {
			dynamicFrmLayout = new FormLayout();
		}
//		if (provisionalAmt == null && dynamicFrmLayout.getComponentCount() < 0) {
//			provisionalAmt = new TextField("Provision Amount INR  ");
//			provisionalAmt.setValue("0");
//			dynamicFrmLayout.addComponent(provisionalAmt);
//		}
		else if (dynamicFrmLayout.getComponentCount() > 0) {
			if (registrationRemarksTxta != null) {
				dynamicFrmLayout.removeComponent(registrationRemarksTxta);
			}
		}

		if (suggestRejectionTxta != null) {
			dynamicFrmLayout.removeComponent(suggestRejectionTxta);
		}
		suggestRejectionTxta = new TextArea("Suggested Rejection Remarks");
		suggestRejectionTxta.setRequired(true);
		suggestRejectionTxta.setValidationVisible(false);
		suggestRejectionTxta.setMaxLength(200);
		//Vaadin8-setImmediate() suggestRejectionTxta.setImmediate(false);
		suggestRejectionTxta
				.setRequiredError("Please Provide Suggesion Remarks for Rejection");
		
		dynamicFrmLayout.addComponent(suggestRejectionTxta);

		return dynamicFrmLayout;
	}

	public void registerClick() {

		boolean hasError = validateClaimdeAmount();
		
		if(!hasError)
		{
		if (dynamicFieldsLayout != null) {
			if (dynamicFieldsLayout.getComponentCount() > 0) {
				dynamicFieldsLayout.removeAllComponents();
			}

		}
			dynamicFieldsLayout = buildRegisterFields();
		}
		else
		{
			Notification.show("ERROR", "Please Fill the Manadatory Fields.",
					Notification.Type.ERROR_MESSAGE);
		}
		
	}

	public void suggestRejectionClick() {		
		claimDto.setSuggestRejection(true);
		if (dynamicFieldsLayout != null) {
			if (dynamicFieldsLayout.getComponentCount() > 0) {
				dynamicFieldsLayout.removeAllComponents();
			}
		}
		
		boolean hasError = validateClaimdeAmount();
		if(!hasError){
			buildProvisionAmountField();
			dynamicFieldsLayout
					.addComponent(buildSuggestRejectionFields(dynamicFrmLayout));
			
		}
		else
		{
			Notification.show("ERROR", "Please Fill the Manadatory Field.",
					Notification.Type.ERROR_MESSAGE);
		}
		
	}

	public void cancelRegistration() {

		ConfirmDialog dialog = ConfirmDialog.show(getUI(), "Confirmation",
				"Are you really want to cancel the GHI Allow Registration ?",
				"No", "Yes", new ConfirmDialog.Listener() {

					public void onClose(ConfirmDialog dialog) {
						if (dialog.isCanceled() && !dialog.isConfirmed()) {
							// Confirmed to continue
							// fireViewEvent(MenuItemBean.SEARCH_REGISTER_CLAIM,
							// null);

							registerationBean = null;
							newIntimationDto = null;
							fireViewEvent(LoaderPresenter.LOAD_URL,
									MenuItemBean.SEARCH_GHI_ALLOW_REGISTER_CLAIM);

						} else {
							// User did not confirm
						}
					}
				});

		dialog.setStyleName(Reindeer.WINDOW_BLACK);
	}
	

	public void submitRegistration(ClaimDto claimDto, Boolean isProceedfurther) {

		// Check Whether all the mandatory fields are entered.
		Boolean hasError = false;

		FormLayout frmLayout = dynamicFrmLayout;

		hasError = validateClaimdeAmount();
		
		if(null != this.searchDTO && null != this.searchDTO.getNewIntimationDto() && null != this.searchDTO.getNewIntimationDto().getPolicy() &&
				null != this.searchDTO.getNewIntimationDto().getPolicy().getProduct() && null != this.searchDTO.getNewIntimationDto().getPolicy().getProduct().getKey() &&
				(ReferenceTable.getGMCProductList().containsKey(this.searchDTO.getNewIntimationDto().getPolicy().getProduct().getKey()))){		
			
			/*Integer stoplossAmnt = dbCalculationService.getStopLossProcedure(this.searchDTO.getNewIntimationDto().getPolicy().getKey(),
					claimDto.getKey(), 0l).get(SHAConstants.STOP_LOSS_AVAILABLE);
			
			if(this.searchDTO.getClaimedAmount() != null){
				if(this.searchDTO.getClaimedAmount() > stoplossAmnt){
					
					hasError = true;
					Notification
							.show("ERROR",
									"Amount Claimed cannot be greater than Stop Loss amount and this claim cannot be registered.",
									Notification.Type.ERROR_MESSAGE);
					return;
				}
			}*/
		}
		
		if (claimDto.getStatusName() == null && claimDto.getStatusName() == "") {
			hasError = true;
			showErrorMsg("Please Click Register Or Suggest Reject Button before Submitting the Claim. ");
			return;
		}

		if (suggestRejectionTxta != null
				&& suggestRejectionTxta.getValue() == null) {
			showErrorMsg("Please Enter Manadatory Fields by Clicking Register Or Suggest Reject Button. ");
			return;
		}
		
		if(!claimDto.getSuggestRejection() && !isProceedfurther) {
			showErrorMsg("Rejection only applicable for this policy because of Cheque Realisation is Dishonoured. ");
			registerButton.setEnabled(false);
			if (dynamicFieldsLayout.getComponentCount() > 0) {
				dynamicFieldsLayout.removeAllComponents();
			}
			hasError = true;
			return;
		} else {
			registerButton.setEnabled(true);
		}

		if (provisionalAmtTxt != null && !provisionalAmtTxt.isValid()) {
			provisionalAmtTxt.setValidationVisible(true);
			hasError = true;
		}
		if (frmLayout.getComponentCount() == 3 && suggestRejectionTxta != null
				&& suggestRejectionTxta.getValue() == null) {
			suggestRejectionTxta.setValidationVisible(true);
			hasError = true;
		}

		if (suggestRejectionTxta != null) {
			suggestRejectionTxta.setValidationVisible(false);
		}
		
		if(this.gmcCorpBuffer != null && this.gmcCorpBuffer.getValue()){
			if(this.gmcCorpBufferLimit != null && this.gmcCorpBufferLimit.getValue() != null && this.gmcCorpBufferLimit.getValue().equalsIgnoreCase("") ){
				gmcCorpBufferLimit.setValidationVisible(true);
				hasError = true;
			}
			
		}

		if (hasError) {
			showErrorMsg("Please Fill the Manadatory Fields. ");
			hasError = true;
			return;
		}
		if (!hasError) {
			claimDto.setNewIntimationDto(newIntimationDto);
			Long vip = vipChk.getValue() ? 1l : 0l;
			//added for updating VIP flag in claim table in priority column
			
			//code added by noufel for combining all the priority and pass as a single String Variable
			List<String> combinedPriorityList = new ArrayList<String>();
			StringBuilder combinedPriorityValues = new StringBuilder();
			
			if(this.searchDTO.getNewIntimationDto() != null && this.searchDTO.getNewIntimationDto().getPolicy() != null && this.searchDTO.getNewIntimationDto().getPolicy().getKey() != null) {
				String memberType = dbCalculationService.getCMDMemberType(this.searchDTO.getNewIntimationDto().getPolicy().getKey());
				combinedPriorityList.add(memberType);
			}
			if(vip != null && vip.equals(1l)){
				combinedPriorityList.add(SHAConstants.VIP_CUSTOMER);
			}
			if(claimDto != null && claimDto.getNewIntimationDto() != null && 
					claimDto.getNewIntimationDto().getReasonForAdmission() != null && !claimDto.getNewIntimationDto().getReasonForAdmission().isEmpty()){
				combinedPriorityList.add(claimDto.getNewIntimationDto().getReasonForAdmission());
			}
			if(this.searchDTO.getNewIntimationDto() != null && this.searchDTO.getNewIntimationDto().getPolicy() != null && this.searchDTO.getNewIntimationDto().getPolicy().getPolicyNumber() != null) {
			Integer activeStatus = dbCalculationService.getGmcATOSActiveFlag(this.searchDTO.getNewIntimationDto().getPolicy().getPolicyNumber());
			if(activeStatus != null && activeStatus == 1){
				combinedPriorityList.add(SHAConstants.ATOS);
			}
			}
			if(claimDto != null && claimDto.getNewIntimationDto() != null && claimDto.getNewIntimationDto().getHospitalDto() != null){
			Hospitals hospitalDetailsByKey = intimationService.getHospitalByKey(claimDto.getNewIntimationDto().getHospitalDto().getKey());
			if(null != hospitalDetailsByKey && hospitalDetailsByKey.getFspFlag() != null && hospitalDetailsByKey.getFspFlag().equalsIgnoreCase(SHAConstants.YES_FLAG)){
				combinedPriorityList.add(SHAConstants.VSP_HOSPITALS);
			}
			}
			if(combinedPriorityList !=null && !combinedPriorityList.isEmpty()){
				combinedPriorityList.forEach(prio -> combinedPriorityValues.append(prio+" "));
		    	 System.out.println(combinedPriorityValues.toString());
			}
			
			if(combinedPriorityValues != null && !combinedPriorityValues.toString().isEmpty()){
				System.out.println("Combined priority Values :-" + combinedPriorityValues.toString());
				Map<String, Object> getPriorityEvent =	dbCalculationService.getPriorityFlag(0l,combinedPriorityValues.toString());
	         if(getPriorityEvent != null){
	        	 if(getPriorityEvent.containsKey("priorityWeightage")){
	        		 claimDto.setPriorityWeightage((Long) getPriorityEvent.get("priorityWeightage")); 
	        	 }
	        	 if(getPriorityEvent.containsKey("priorityEvent") && ((String) getPriorityEvent.get("priorityEvent")) != null && !((String) getPriorityEvent.get("priorityEvent")).isEmpty()){
	        		 claimDto.setPriorityEvent((String) getPriorityEvent.get("priorityEvent")); 
	        	 }
	         }
			}
			claimDto.setIsVipCustomer(vip);
			claimDto.setConversionLetter(0l);
			claimDto.setStatusDate(new Timestamp(System.currentTimeMillis()));
			claimDto.setCurrencyId((SelectValue) currencyNameSelect.getValue());

			// TODO set currency conversion and set the provision
			
			claimDto.setClaimedAmount((claimedAmtTxt.getValue() == null || claimedAmtTxt
					.getValue() == "") ? Double.valueOf("0") : Double
					.valueOf(claimedAmtTxt.getValue()));
			claimDto.setClaimedHomeAmount((claimedAmtTxt.getValue() == null || claimedAmtTxt
					.getValue() == "") ? Double.valueOf("0") : Double
					.valueOf(claimedAmtTxt.getValue()));
			claimDto.setRegistrationRemarks((registrationRemarksTxta == null || registrationRemarksTxta
					.getValue() == null) ? null : registrationRemarksTxta
					.getValue());
			claimDto.setSuggestedRejectionRemarks((suggestRejectionTxta == null || suggestRejectionTxta
					.getValue() == null) ? null : suggestRejectionTxta
					.getValue());

			if (frmLayout != null && frmLayout.getComponentCount() == 1
					&& provisionalAmtTxt != null && provisionalAmtTxt.isVisible()) {
				claimDto.setProvisionAmount((provisionalAmtTxt.getValue() != null && provisionalAmtTxt
						.getValue() != "") ? Double.valueOf(provisionalAmtTxt
						.getValue()) : Double.valueOf("0"));
				claimDto.setProvisionHomeAmount((provisionalAmtTxt.getValue() != null && provisionalAmtTxt
						.getValue() != "") ? Double.valueOf(provisionalAmtTxt
						.getValue()) : Double.valueOf("0"));
			}
			
			Long gmcBuffer = gmcCorpBuffer.getValue() ? 1l : 0l;
			claimDto.setIsgmcCorpBuffer(gmcBuffer);
			
			claimDto.setGmcCorpBufferLmt((gmcCorpBufferLimit.getValue() == null || gmcCorpBufferLimit
					.getValue() == "") ? Integer.valueOf("0") : Integer
					.valueOf(gmcCorpBufferLimit.getValue()));
			
			
			fireViewEvent(GhiAllowClaimRegistrationPresenter.SUBMIT_GHI_ALLOW_CLAIM_REGISTRATION,
					registerationBean, claimDto);
		}
	}

	private void showErrorMsg(String eMsg) {
		Label label = new Label(eMsg, ContentMode.HTML);
		label.setStyleName("errMessage");
		VerticalLayout layout = new VerticalLayout();
		layout.setMargin(true);
		layout.addComponent(label);

		ConfirmDialog dialog = new ConfirmDialog();
		dialog.setCaption("Errors");
		dialog.setClosable(true);
		dialog.setContent(label);
		dialog.setResizable(false);
		dialog.show(getUI().getCurrent(), null, true);
	}
	
	private Boolean validateClaimdeAmount() {
		boolean hasError = false;
		
		if (claimedAmtTxt == null || ("").equals(claimedAmtTxt.getValue())){
			hasError = true;
		}
		else if(claimedAmtTxt != null && !("").equalsIgnoreCase(claimedAmtTxt.getValue())){
			if(!(Integer.valueOf(claimedAmtTxt.getValue()) >= 0)){
					
					claimedAmtTxt.setValidationVisible(true);
					hasError = true;
			}
		}		
	
		return hasError;
	}

	private FormLayout buildBasicInfoLayout(Claim claim) {
//	private FormLayout buildBasicInfoLayout() {
		String value = "";
		if (claim != null) {

			if (claim.getCurrencyId() != null) {
				value = claim.getCurrencyId().getValue();
			}

		}

		FormLayout formFieldsLayout = new FormLayout();

		currencyNameSelect = new ComboBox();
		currencyNameSelect.setCaption("Currency Name");
		currencyNameSelect.setWidth("160px");
		currencyNameSelect.setHeight("-1px");
		currencyNameSelect.addItem(value);
		currencyNameSelect.setNullSelectionAllowed(false);
		formFieldsLayout.addComponent(currencyNameSelect);
		currencyNameSelect.setValue(currencyNameSelect.getContainerDataSource()
				.getItemIds().toArray()[0]);
		currencyNameSelect.setReadOnly(true);

		claimedAmtTxt = new TextField();
		claimedAmtTxt.setCaption("Amount Claimed *   " + value);
		claimedAmtTxt.setWidth("-1px");
		claimedAmtTxt.setHeight("-1px");
		if (claim != null) {
			claimedAmtTxt.setValue(claim.getClaimedAmount() != null ? claim
					.getClaimedAmount().toString() : "");
		} else {
			claimedAmtTxt.setValue("0");
		}

		claimedAmtTxt.setReadOnly(true);
		claimedAmtTxt.setStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
		formFieldsLayout.addComponent(claimedAmtTxt);

		provisionalAmtTxt = new TextField();
		provisionalAmtTxt.setCaption("Provision Amount");
		provisionalAmtTxt.setWidth("-1px");
		provisionalAmtTxt.setHeight("-1px");
		if (claim != null) {
			provisionalAmtTxt.setValue(claim.getProvisionAmount() != null ? claim
					.getProvisionAmount().toString() : "");
		}
		provisionalAmtTxt.setReadOnly(true);
		provisionalAmtTxt.setStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
		formFieldsLayout.addComponent(provisionalAmtTxt);

		return formFieldsLayout;
	}

	private VerticalLayout buildRegisterSuccessLayout(Claim claim) {
		if (provisionalAmtTxt != null) {
			dynamicFrmLayout.removeComponent(provisionalAmtTxt);
		}
		FormLayout formFieldsLayout = buildBasicInfoLayout(claim);
//		FormLayout formFieldsLayout = buildBasicInfoLayout();
		HorizontalLayout buttonLayoutForSuccess = new HorizontalLayout();
		
		TextArea regRemarksTxta = new TextArea("Registration Remarks *");
		TextArea sugRejTxta  = new TextArea("Suggested Rejection Remarks *");
			
		regRemarksTxta.setValue(claimDto.getRegistrationRemarks());
		regRemarksTxta.setReadOnly(true);
		regRemarksTxta.setStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
		regRemarksTxta.setHeight("-1px");
			formFieldsLayout.addComponent(regRemarksTxta);
			TextField suggestRejectionTxt = new TextField("Suggest Rejection");

			if (claimDto.getSuggestRejection()) {

				formFieldsLayout.removeComponent(regRemarksTxta);
				suggestRejectionTxt
						.setValue(claimDto.getSuggestRejection() ? "Yes" : "No");
				suggestRejectionTxt.setReadOnly(true);
				formFieldsLayout.addComponent(suggestRejectionTxt);

				sugRejTxta.setValue(claimDto
						.getSuggestedRejectionRemarks());
				sugRejTxta.setReadOnly(true);
				sugRejTxta.setHeight("-1px");
				sugRejTxta.setStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
				formFieldsLayout.addComponent(sugRejTxta);	
		}
			
			TextField claimNumber = new TextField("Claim Number");
			claimNumber.setValue(claim.getClaimId());
			claimNumber.setReadOnly(true);
			claimNumber.setStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
			formFieldsLayout.addComponent(claimNumber);

		String homePageButtonCaption = "Home Page";

		homePageButton.setCaption(homePageButtonCaption);
		//Vaadin8-setImmediate() homePageButton.setImmediate(true);
		homePageButton.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		homePageButton.setWidth("-1px");
		homePageButton.setHeight("-1px");

		homePageButton.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {

				fireViewEvent(LoaderPresenter.LOAD_URL,
						MenuItemBean.SEARCH_REGISTER_CLAIM);
				
			}
		});
	
		
		//Vaadin8-setImmediate() homePageButton.setImmediate(true);


		Button registerAnotherClaimButton = new Button();
		registerAnotherClaimButton.setCaption("Register Another Claim");
		//Vaadin8-setImmediate() registerAnotherClaimButton.setImmediate(true);
		registerAnotherClaimButton.setWidth("-1px");
		registerAnotherClaimButton.setHeight("-1px");
		registerAnotherClaimButton.addStyleName(ValoTheme.BUTTON_PRIMARY);

		registerAnotherClaimButton
				.addClickListener(new Button.ClickListener() {
					@Override
					public void buttonClick(ClickEvent event) {
						fireViewEvent(LoaderPresenter.LOAD_URL,
								MenuItemBean.SEARCH_REGISTER_CLAIM);
					}
				});
		buttonLayoutForSuccess.addComponents(homePageButton,
				registerAnotherClaimButton);
		buttonLayoutForSuccess.setSpacing(true);
	
		buttonLayoutForSuccess.addComponent(homePageButton);
	
		HorizontalLayout buttonLayoutForSuccess1 = new HorizontalLayout(
				buttonLayoutForSuccess);
		buttonLayoutForSuccess1.setMargin(true);
		buttonLayoutForSuccess1.setWidth("100%");

		VerticalLayout layout = new VerticalLayout();
		

		Label label = new Label(
				"<b style = 'color:red'>Claim has been registered successfully !!!! </b>",
				Label.CONTENT_XHTML);
		
		Label suggRejLabel = new Label(
				"<b style = 'color:red'>Claim has been Suggested for rejection !!!! </b>",
				Label.CONTENT_XHTML);
		
		layout.addComponents(formFieldsLayout, label);
				
		if(claim.getStatus() != null && 
				claim.getStatus().getKey() != null &&
				ReferenceTable.CLAIM_SUGGEST_REJECTION_STATUS.equals(claim.getStatus().getKey())){
			layout.addComponent(suggRejLabel);
		}
		
		layout.addComponent(buttonLayoutForSuccess1);
		
		buttonLayoutForSuccess1.setComponentAlignment(
				buttonLayoutForSuccess, Alignment.MIDDLE_CENTER);

		toolBar.countTool();
		return layout;
	}

	public void openPdfFileInWindow(final String filepath) {
		Window window = new Window();
		// ((VerticalLayout) window.getContent()).setSizeFull();
		window.setResizable(true);
		window.setCaption("Claim Form Covering Letter PDF");
		window.setWidth("800");
		window.setHeight("600");
		window.setModal(true);
		window.center();

		Path p = Paths.get(filepath);
		String fileName = p.getFileName().toString();

		StreamResource.StreamSource s = new StreamResource.StreamSource() {

			public InputStream getStream() {
				try {

					File f = new File(filepath);
					FileInputStream fis = new FileInputStream(f);
					return fis;

				} catch (Exception e) {
					e.printStackTrace();
					return null;
				}
			}
		};

		StreamResource r = new StreamResource(s, fileName);
		Embedded e = new Embedded();
		e.setSizeFull();
		e.setType(Embedded.TYPE_BROWSER);
		r.setMIMEType("application/pdf");
		e.setSource(r);
		window.setContent(e);
		UI.getCurrent().addWindow(window);
	}

	public void setPreviousClaimsDtoList(
			List<PreviousClaimsTableDTO> previousClaimDtoList) {
		if (null != previousClaimDtoList && !previousClaimDtoList.isEmpty()) {
			previousClaimsRgistration.setTableList(previousClaimDtoList);
		}
	}

	public void setBalanceSumInsured(Double balanceSI){
		balanceSumInsured = balanceSI;
		System.out.println("Balance SI In UI Screen ============================="+balanceSI);
	}	
	
	public void setCpuObject(TmpCPUCode tmpCpu) {

		tmpCpuCode = new TmpCPUCode();

		if (tmpCpu != null) {
			tmpCpuCode.setKey(tmpCpu.getKey());
			tmpCpuCode.setCpuCode(tmpCpu.getCpuCode());
			tmpCpuCode.setDescription(tmpCpu.getDescription());
			tmpCpuCode.setProvisionAmount(tmpCpu.getProvisionAmount());
		}
	}

	public void setSublimitList(List<SublimitFunObject> sublimitList) {

		resultSublimitList = sublimitList;
	}

	public void setClaimDetails(ClaimDto newClaimDto) {
		claimDto.setClaimId(newClaimDto.getClaimId());
		claimDto.setKey(newClaimDto.getKey());
		claim =  ClaimMapper.getInstance().getClaim(newClaimDto);

		if (claim != null) {
			registrationDetailsLayout.removeComponent(registerBtnLayout);
			registrationDetailsLayout.removeComponent(submitButtonLayout);
			registrationDetailsLayout
					.addComponent(buildRegisterSuccessLayout(claim));
//			registrationDetailsLayout
//			.addComponent(buildRegisterSuccessLayout());
		}
	}
	
	  public void showPolicyStatusMessage(String message) {
		  final ConfirmDialog dialog = new ConfirmDialog();
			dialog.setCaption("");
			dialog.setClosable(true);
			dialog.setResizable(false);
			dialog.setModal(true);
			
			Button okButton = new Button("OK");
			okButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
			
			okButton.addClickListener(new ClickListener() {
				private static final long serialVersionUID = 7396240433865727954L;

				@Override
				public void buttonClick(ClickEvent event) {
					dialog.close();
				}
			});
			
			HorizontalLayout hLayout = new HorizontalLayout(okButton);
			hLayout.setSpacing(true);
			hLayout.setComponentAlignment(okButton, Alignment.MIDDLE_CENTER);
			hLayout.setMargin(true);
			VerticalLayout layout = new VerticalLayout();
			layout.addComponent(new Label(message, ContentMode.HTML));
			layout.addComponent(okButton);
			layout.setMargin(true);
			layout.setSpacing(true);
			dialog.setContent(layout);
			dialog.setWidth("30%");
			dialog.show(getUI().getCurrent(), null, true);
		}
	  
	  private TabSheet buildCorpBufferTab() {
			TabSheet corpBufferTab = new TabSheet();
			//Vaadin8-setImmediate() corpBufferTab.setImmediate(true);
			corpBufferTab.setWidth("100.0%");
			corpBufferTab.setHeight("100.0%");
			corpBufferTab.setSizeFull();
			corpBufferTab.hideTabs(true);

			VerticalLayout gmcVerticalLayout = new VerticalLayout();
			//Vaadin8-setImmediate() gmcVerticalLayout.setImmediate(false);
			gmcVerticalLayout.setWidth("100%");
			gmcVerticalLayout.setHeight("100%");
			gmcVerticalLayout.setSizeFull();
			gmcVerticalLayout.setMargin(true);
			gmcVerticalLayout.setSpacing(true);

//			FormLayout gmcFormFieldsLayout = new FormLayout();
			
//			ClaimDto claimDto = (ClaimDto) parameters.getPrimaryParameter();
			Intimation intimation = intimationService.getIntimationByKey(claimDto.getNewIntimationDto().getKey());
			Long mainNo = 0L;
			if(intimation.getInsured().getDependentRiskId() !=null){
				mainNo = intimation.getInsured().getDependentRiskId();
			}else{
				mainNo = intimation.getInsured().getInsuredId();
			}
			
			AllocateCorpBufferDetailDTO allocateCorpBufferDetailDTO = bufferService.getbufferViewDetails(intimation);

			  Table discTable  = new Table();
			discTable.addContainerProperty("Particulars", Label.class, null);
			discTable.addContainerProperty("Amount",  Double.class, null);
			discTable.setNullSelectionAllowed(true);
			Label policyLabel = new Label("<div style='padding-left: 80px;'>" +"Policy Wise" + "</div>",ContentMode.HTML);
			Label disBuffSI = new Label("<b style='font-weight: normal !important;'>Discretionary Buffer SI </b>",ContentMode.HTML);
			Label disBuffUtil = new Label("<b style='font-weight: normal !important;'>Discretionary Buffer Utilised Amount",ContentMode.HTML);
			Label disAvlBal = new Label("<b style='font-weight: normal !important;'>Available Balance",ContentMode.HTML);
			Label insuredLabel = new Label("<b style='padding-left: 80px;'>" +"Insured Wise" + "</b>",ContentMode.HTML);
			Label disInsuAlloct = new Label("<b style='font-weight: normal !important;'>Discretionary Buffer Allocated for Employee",ContentMode.HTML);
			Label disInsUtil = new Label("<b style='font-weight: normal !important;'>Discretionary Buffer Utilised Amount",ContentMode.HTML);
			Label disInsAvl = new Label("<b style='font-weight: normal !important;'>Available Balance ",ContentMode.HTML);
			discTable.addItem(new Object[]{policyLabel, allocateCorpBufferDetailDTO.getPolicyWise() },1);
			discTable.addItem(new Object[]{disBuffSI, allocateCorpBufferDetailDTO.getDisBufferSI() },2);
			discTable.addItem(new Object[]{disBuffUtil, allocateCorpBufferDetailDTO.getDisBufferUtilizedAmt() },3);
			discTable.addItem(new Object[]{disAvlBal, allocateCorpBufferDetailDTO.getPolicywisedisBufferAvlBlnc() },4);
			discTable.addItem(new Object[]{insuredLabel, allocateCorpBufferDetailDTO.getPolicyWise() },5);
			discTable.addItem(new Object[]{disInsuAlloct, allocateCorpBufferDetailDTO.getDisAllocatedLimit() },6);
			discTable.addItem(new Object[]{disInsUtil, allocateCorpBufferDetailDTO.getDiscretionaryUtilizedInsured() },7);
			discTable.addItem(new Object[]{disInsAvl, allocateCorpBufferDetailDTO.getDisBufferAvailBalnc() },8);
			discTable.setPageLength(8);
			discTable.setCaption("Discretionary Buffer Details");
			discTable.setSizeFull();
			
			Table wintageTable  = new Table();
			wintageTable.addContainerProperty("Particulars", Label.class, null);
			wintageTable.addContainerProperty("Amount",  Double.class, null);
			wintageTable.setNullSelectionAllowed(true);
			Label winpolicyLabel = new Label("<div style='padding-left: 80px;'>" +"Policy Wise" + "</div>",ContentMode.HTML);
			Label winBuffSI = new Label("<b style='font-weight: normal !important;'>Vintage Buffer SI </b>",ContentMode.HTML);
			Label winBuffUtil = new Label("<b style='font-weight: normal !important;'>Vintage Buffer Utilised Amount",ContentMode.HTML);
			Label winAvlBal = new Label("<b style='font-weight: normal !important;'>Available Balance",ContentMode.HTML);
			Label wininsuredLabel = new Label("<b style='padding-left: 80px;'>" +"Insured Wise" + "</b>",ContentMode.HTML);
			Label winInsuAlloct = new Label("<b style='font-weight: normal !important;'>Vintage Buffer Allocated for Employee",ContentMode.HTML);
			Label winInsUtil = new Label("<b style='font-weight: normal !important;'>Vintage Buffer Utilised Amount",ContentMode.HTML);
			Label winInsAvl = new Label("<b style='font-weight: normal !important;'>Available Balance ",ContentMode.HTML);
			wintageTable.addItem(new Object[]{winpolicyLabel, allocateCorpBufferDetailDTO.getPolicyWise() },1);
			wintageTable.addItem(new Object[]{winBuffSI, allocateCorpBufferDetailDTO.getMaxwintageBufferLimit() },2);
			wintageTable.addItem(new Object[]{winBuffUtil, allocateCorpBufferDetailDTO.getWintageAllocatedLimit() },3);
			wintageTable.addItem(new Object[]{winAvlBal, allocateCorpBufferDetailDTO.getWintageBufferAvlBalnc() },4);
			wintageTable.addItem(new Object[]{wininsuredLabel, allocateCorpBufferDetailDTO.getPolicyWise() },5);
			wintageTable.addItem(new Object[]{winInsuAlloct, allocateCorpBufferDetailDTO.getWintageBufferLimit() },6);
			wintageTable.addItem(new Object[]{winInsUtil, allocateCorpBufferDetailDTO.getWintageUtilizedInsured() },7);
			wintageTable.addItem(new Object[]{winInsAvl, allocateCorpBufferDetailDTO.getWintageAvlBalnc() },8);
			wintageTable.setPageLength(8);
			wintageTable.setCaption("Vintage Buffer Details");
			wintageTable.setSizeFull();
			
			Table nacTable  = new Table();
			/*nacTable.setWidth("400px");
			nacTable.setHeight("88px");*/
			nacTable.addContainerProperty("Particulars", Label.class, null);
			nacTable.addContainerProperty("Amount",  Double.class, null);
			nacTable.setNullSelectionAllowed(true);
			Label nacbpolicyLabel = new Label("<div style='padding-left: 80px;'>" +"Policy Wise" + "</div>",ContentMode.HTML);
			Label nacBuffSI = new Label("<b style='font-weight: normal !important;'>NACB Buffer SI </b>",ContentMode.HTML);
			Label nacBuffUtil = new Label("<b style='font-weight: normal !important;'>NACB Buffer Utilised Amount",ContentMode.HTML);
			Label nacAvlBal = new Label("<b style='font-weight: normal !important;'>Available Balance",ContentMode.HTML);
			Label nacinsuredLabel = new Label("<b style='padding-left: 80px;'>" +"Insured Wise" + "</b>",ContentMode.HTML);
			Label nacInsuAlloct = new Label("<b style='font-weight: normal !important;'>NACB Buffer Allocated for Employee",ContentMode.HTML);
			Label nacInsUtil = new Label("<b style='font-weight: normal !important;'>NACB Buffer Utilised Amount",ContentMode.HTML);
			Label nacInsAvl = new Label("<b style='font-weight: normal !important;'>Available Balance ",ContentMode.HTML);
			nacTable.addItem(new Object[]{nacbpolicyLabel, allocateCorpBufferDetailDTO.getPolicyWise() },1);
			nacTable.addItem(new Object[]{nacBuffSI, allocateCorpBufferDetailDTO.getMaxnacBufferLimit() },2);
			nacTable.addItem(new Object[]{nacBuffUtil, allocateCorpBufferDetailDTO.getNacAllocatedLimit() },3);
			nacTable.addItem(new Object[]{nacAvlBal, allocateCorpBufferDetailDTO.getNacBufferAvlBalnc() },4);
			nacTable.addItem(new Object[]{nacinsuredLabel, allocateCorpBufferDetailDTO.getPolicyWise() },5);
			nacTable.addItem(new Object[]{nacInsuAlloct, allocateCorpBufferDetailDTO.getNacBufferLimit() },6);
			nacTable.addItem(new Object[]{nacInsUtil, allocateCorpBufferDetailDTO.getNacbUtilizedInsured() },7);
			nacTable.addItem(new Object[]{nacInsAvl, allocateCorpBufferDetailDTO.getNacAvlBalnc() },8);
			nacTable.setPageLength(8);
			nacTable.setCaption("NACB Buffer Details");
			nacTable.setSizeFull();
			
			HorizontalLayout tabelLayout = new HorizontalLayout(discTable,wintageTable,nacTable);
			tabelLayout.setSpacing(true);
			tabelLayout.setMargin(true);
			
			VerticalLayout sublimtListTableLayout = new VerticalLayout(tabelLayout);
			sublimtListTableLayout.setSpacing(true);
			sublimtListTableLayout.setHeight("100%");
			sublimtListTableLayout.setWidth("100%");
			sublimtListTableLayout.setMargin(true);
			sublimtListTableLayout.setSpacing(true);
//			gmcVerticalLayout.addComponent(tabelLayout);
			
			corpBufferTab.setHeight("100%");

			corpBufferTab.addTab(sublimtListTableLayout, "Tab", null);
			gmcVerticalLayout.addComponent(corpBufferTab);
			
//			fireViewEvent(ClaimRegistrationPresenter.GET_GMC_CORP_BUFFER,
//					  claimDto);
			
			return corpBufferTab;
		}
	  
	  private BlurListener getgmcCorpBufferLimitListener(final TextField itemProperty) {
			BlurListener listener = new BlurListener() {
				private static final long serialVersionUID = 1L;

				@Override
				public void blur(BlurEvent event) {
					TextField value = (TextField) event.getComponent();
					setValueForCorpBufferTab(value.getValue(), itemProperty);					
				}
			};
			return listener;
		}
	  
	  private ValueChangeListener getGmcCorpBufferListener(final TextField itemProperty) {
		  ValueChangeListener listener = new ValueChangeListener() {
				private static final long serialVersionUID = 1L;

				@Override
				public void valueChange(ValueChangeEvent event) {
					Boolean checkValue = gmcCorpBuffer.getValue();
					if(itemProperty != null){
						if(checkValue){
							itemProperty.setEnabled(true);
							itemProperty.setRequired(true);
						}else{
							itemProperty.setEnabled(false);
							itemProperty.setRequired(false);
						}
					}
					
				}
			};
			return listener;
		}
	
	  private void setValueForCorpBufferTab(String value, TextField itemProperty){
		 
			  if(itemProperty != null){
				  itemProperty.setValue(value);
			  }
			  if(value != null && !value.isEmpty()){
				  gmcLimit = Double.valueOf(value);
			  }else{
				  gmcLimit = 0d;
			  }
		  
		  
		  fireViewEvent(GhiAllowClaimRegistrationPresenter.GET_GHI_ALLOW_GMC_CORP_BUFFER,
				  claimDto);
	  }
	  
	  public void setGmcCorpBuffer(Double bufferSI, Double utilisedAmt){
		  gmcSI = bufferSI;
		  gmcUtilised = utilisedAmt;
		  gmcBalance = gmcSI - (gmcUtilised + gmcLimit);
		  gmcCorpBufferSiTxt.setValue(gmcSI.toString());
		  gmcCorpBufferUtilisedAmtTxt.setValue(gmcUtilised.toString());
		  gmcAvalBalTxt.setValue(gmcBalance.toString());
			
		}
	  
	  private Boolean validatePolicyStatus(String policyNumber){
			Boolean hasError = false;
			enteredValues.put("polNo", policyNumber);
			
			BeanItemContainer<PremPolicy> policyContainer =  policyService.filterPolicyDetailsPremia(enteredValues);
			List<PremPolicy> policyList = policyContainer.getItemIds();
			if(policyList !=null && !policyList.isEmpty()){
				for (PremPolicy premPolicy : policyList) {
					if(premPolicy.getPolicyStatus().equalsIgnoreCase(SHAConstants.CANCELLED_POLICY)){
						hasError = true;
					}
					
				}
			}
			return !hasError;
		}
		
		public void showErrorPageForCancelledPolicy(){
				
				String message = SHAConstants.CANCELLED_POLICY_ALERT ;
				
				Label successLabel = new Label(
						"<b style = 'color: red;'>" + message + "</b>",
						ContentMode.HTML);
				Button homeButton = new Button("Ok");
				homeButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
				VerticalLayout layout = new VerticalLayout(successLabel, homeButton);
				layout.setComponentAlignment(homeButton, Alignment.BOTTOM_CENTER);
				layout.setSpacing(true);
				layout.setMargin(true);
				HorizontalLayout hLayout = new HorizontalLayout(layout);
				hLayout.setMargin(true);
			
				final ConfirmDialog dialog = new ConfirmDialog();
				dialog.setCaption("");
				dialog.setClosable(false);
				dialog.setContent(hLayout);
				dialog.setResizable(false);
				dialog.setModal(true);
				dialog.show(getUI().getCurrent(), null, true);
				homeButton.addClickListener(new ClickListener() {
					private static final long serialVersionUID = 7396240433865727954L;
			
					@Override
					public void buttonClick(ClickEvent event) {
						dialog.close();
					}
				});
				
			}
		public void showTopUpAlertMessage(String remarks) {		 		 
						/*Label successLabel = new Label(
						"<b style = 'color: red;'>" + remarks + "</b>",
						ContentMode.HTML);*/
				TextArea txtArea = new TextArea();
				txtArea.setMaxLength(4000);
				txtArea.setData(searchDTO);
				//txtArea.setStyleName("Boldstyle");
				txtArea.setValue(remarks);
				txtArea.setNullRepresentation("");
				txtArea.setSizeFull();
				txtArea.setWidth("100%");
				txtArea.addStyleName(ValoTheme.TEXTAREA_BORDERLESS);
				
				Button homeButton = new Button("OK");
				homeButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
				
				
				txtArea.setRows(remarks.length()/80 >= 25 ? 25 : ((remarks.length()/80)%25)+1);
				VerticalLayout layout = new VerticalLayout(txtArea, homeButton);
				layout.setComponentAlignment(homeButton, Alignment.MIDDLE_CENTER);
				layout.setSpacing(true);
				layout.setMargin(true);
				layout.setStyleName("borderLayout");
				
				final ConfirmDialog dialog = new ConfirmDialog();
				dialog.setClosable(false);
				dialog.setContent(layout);
				dialog.setHeight(layout.getHeight(), Sizeable.UNITS_PERCENTAGE);
				dialog.setWidth("45%");
				dialog.setResizable(false);
				dialog.setModal(true);		
				dialog.show(getUI().getCurrent(), null, true);
	 			homeButton.addClickListener(new ClickListener() {
	 				private static final long serialVersionUID = 7396240433865727954L;

	 				@Override
	 				public void buttonClick(ClickEvent event) {
	 					dialog.close();
	 					if(searchDTO.getPopupMap() != null && ! searchDTO.getPopupMap().isEmpty())
	 					{
	 						poupMessageForProduct();
	 					}else if(searchDTO.getSuspiciousPopUp() != null && ! searchDTO.getSuspiciousPopUp().isEmpty()){
	 						suspiousPopupMessage();
	 					}
	 				}
	 			});

	 	}
}
