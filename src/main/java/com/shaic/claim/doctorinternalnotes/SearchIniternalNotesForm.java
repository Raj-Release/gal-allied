package com.shaic.claim.doctorinternalnotes;

import java.util.Iterator;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;

import org.vaadin.addon.cdimvp.ViewComponent;

import com.shaic.arch.EnhancedFieldGroupFieldFactory;
import com.shaic.arch.SHAConstants;
import com.shaic.arch.SHAUtils;
import com.shaic.arch.fields.dto.SelectValue;
import com.shaic.arch.fields.dto.SpecialSelectValue;
import com.shaic.arch.table.Searchable;
import com.shaic.domain.MasterService;
import com.shaic.domain.PreauthService;
import com.shaic.domain.ReferenceTable;
import com.shaic.domain.preauth.Stage;
import com.shaic.newcode.wizard.dto.NewIntimationDto;
import com.vaadin.v7.data.fieldgroup.BeanFieldGroup;
import com.vaadin.v7.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.v7.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.v7.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.v7.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.v7.ui.DateField;
import com.vaadin.ui.FormLayout;
import com.vaadin.v7.ui.HorizontalLayout;
import com.vaadin.v7.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.v7.ui.TextField;
import com.vaadin.v7.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

public class SearchIniternalNotesForm extends ViewComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private BeanFieldGroup<NewIntimationDto> binder;
	
	@EJB
	private PreauthService preauthService;
	
	@EJB
	private MasterService masterService;

	private TextField txtIntimationNo;

	private Button searchBtn;
	
	private Searchable searchable;
	
	Button resetBtn;
	
	VerticalLayout searchFieldLayout;

	public void addSearchListener(Searchable searchable) {
		this.searchable = searchable;
	}

	public NewIntimationDto getSearchDTO() {
		try {
			this.binder.commit();
			NewIntimationDto bean = this.binder
					.getItemDataSource().getBean();
			return bean;
		} catch (CommitException e) {
			e.printStackTrace();
		}
		return null;

	}
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	@PostConstruct
	public void init() {
		initBinder();
		searchFieldLayout  = new VerticalLayout();
		Panel processEnhancementPanel	= new Panel();
		//Vaadin8-setImmediate() processEnhancementPanel.setImmediate(false);
		processEnhancementPanel.setWidth("100%"); // Valid width
		processEnhancementPanel.setHeight("90%");
		processEnhancementPanel.setCaption("Add Doctor Note");
		processEnhancementPanel.addStyleName("panelHeader");
		processEnhancementPanel.addStyleName("g-search-panel");
		processEnhancementPanel.setContent(buildPreauthSearchLayout());
		//processEnhancementPanel.
		searchFieldLayout.addComponent(processEnhancementPanel);
		searchFieldLayout.setComponentAlignment(processEnhancementPanel, Alignment.MIDDLE_LEFT);
		setCompositionRoot(searchFieldLayout);
		addListener();
	}
	
	private void initBinder() {
		this.binder = new BeanFieldGroup<NewIntimationDto>(
				NewIntimationDto.class);
		this.binder
				.setItemDataSource(new NewIntimationDto());
		this.binder.setFieldFactory(new EnhancedFieldGroupFieldFactory());
	}

	private VerticalLayout buildPreauthSearchLayout() 
	{		
		AbsoluteLayout absoluteLayout_3 =  new AbsoluteLayout();
		VerticalLayout verticalLayout = new VerticalLayout();
		 //Vaadin8-setImmediate() verticalLayout.setImmediate(false);
		 verticalLayout.setWidth("100.0%");
		 verticalLayout.setMargin(false);		 
		 //Vaadin8-setImmediate() absoluteLayout_3.setImmediate(false);
		 absoluteLayout_3.setWidth("100.0%");
		 absoluteLayout_3.setHeight("160px"); 
//		 absoluteLayout_3.setHeight("150px");

		txtIntimationNo = binder.buildAndBind("Intimation No", "intimationId",
				TextField.class);
		txtIntimationNo.setValue(null);
		FormLayout firstForm = new FormLayout(txtIntimationNo);
		firstForm.setMargin(false);
		
		
		HorizontalLayout searchFormLayout = new HorizontalLayout(firstForm);
		searchFormLayout.setMargin(true);

		searchFormLayout.setWidth("100%");
//		searchFormLayout.setComponentAlignment(formLayout1 , Alignment.MIDDLE_LEFT);
//		searchFormLayout.setComponentAlignment(formLayout2 , Alignment.MIDDLE_CENTER);
		
		absoluteLayout_3.addComponent(searchFormLayout,"top:20.0px;left:0.0px;");
		
		searchBtn = new Button();
		searchBtn.setCaption("Search");
		//Vaadin8-setImmediate() searchBtn.setImmediate(true);
		searchBtn.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		searchBtn.setWidth("-1px");
		searchBtn.setHeight("-10px");
		searchBtn.setDisableOnClick(true);
		//absoluteLayout_3
		//.addComponent(fieldVisitSearchBtn , "top:200.0px;left:354.0px;");	
		//Vaadin8-setImmediate() searchBtn.setImmediate(true);
		
		resetBtn = new Button();
		resetBtn.setCaption("Reset");
		//Vaadin8-setImmediate() resetBtn.setImmediate(true);
		resetBtn.addStyleName(ValoTheme.BUTTON_DANGER);
		resetBtn.setWidth("-1px");
		resetBtn.setHeight("-10px");
		//Vaadin8-setImmediate() resetBtn.setImmediate(true);
		
	/*	GridLayout buttonLayout = new GridLayout(2,1);
		buttonLayout.addComponent(fieldVisitSearchBtn, 0,0);
		buttonLayout.addComponent(resetBtn , 1,0);

		
		HorizontalLayout cmdButtonPanel = new HorizontalLayout(buttonLayout);
		cmdButtonPanel.setComponentAlignment(buttonLayout, Alignment.MIDDLE_CENTER);
		cmdButtonPanel.setWidth("100%");
		absoluteLayout_3.addComponent(cmdButtonPanel, "top:100.0px;left:200.0px;");*/	
		absoluteLayout_3.addComponent(searchBtn, "top:80.0px;left:260.0px;");
		absoluteLayout_3.addComponent(resetBtn, "top:80.0px;left:369.0px;");	
//		verticalLayout.setHeight("500px");
		verticalLayout.addComponent(absoluteLayout_3);		
		//Vaadin8-setImmediate() verticalLayout.setImmediate(false);
		verticalLayout.setWidth("100%");
		// mainVerticalLayout.setHeight("500px");
		verticalLayout.setMargin(false);		 
		 //Vaadin8-setImmediate() absoluteLayout_3.setImmediate(false);
		 absoluteLayout_3.setWidth("100.0%");
		 
		 absoluteLayout_3.setHeight("145px");	
		
		return verticalLayout; 
	}

	public void addListener() {
		searchBtn.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				searchBtn.setEnabled(true);
				searchable.doSearch();
			}			
		});
		
		resetBtn.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				//searable.doSearch();
				resetAlltheValues();
			}
		});
	}
	
	/**
	 * Method to reset all form values 
	 *
	 * */
	
	public void resetAlltheValues() 
	{
		
		Iterator<Component> componentIterator = searchFieldLayout.iterator();
			while(componentIterator.hasNext()) 
			{
				Component searchScrnComponent = componentIterator.next() ;
				if(searchScrnComponent instanceof  Panel )
				{	
					Panel panel = (Panel)searchScrnComponent;
					Iterator<Component> searchScrnCompIter = panel.iterator();
					while (searchScrnCompIter.hasNext())
					{
						Component verticalLayoutComp = searchScrnCompIter.next();
						VerticalLayout vLayout = (VerticalLayout)verticalLayoutComp;
						Iterator<Component> vLayoutIter = vLayout.iterator();
						while(vLayoutIter.hasNext())
						{
							Component absoluteComponent = vLayoutIter.next();
							AbsoluteLayout absLayout = (AbsoluteLayout)absoluteComponent;
							Iterator<Component> absLayoutIter = absLayout.iterator();
							while(absLayoutIter.hasNext())
							{
								Component horizontalComp = absLayoutIter.next();
								if(horizontalComp instanceof HorizontalLayout)
								{
									HorizontalLayout hLayout = (HorizontalLayout)horizontalComp;
									Iterator<Component> formLayComp = hLayout.iterator();
									while(formLayComp.hasNext())
									{
										Component formComp = formLayComp.next();
										FormLayout fLayout = (FormLayout)formComp;
										Iterator<Component> formComIter = fLayout.iterator();
									
										while(formComIter.hasNext())
										{
											Component indivdualComp = formComIter.next();
											if(indivdualComp != null) 
											{
												if(indivdualComp instanceof Label) 
												{
													continue;
												}	
												if(indivdualComp instanceof TextField) 
												{
													TextField field = (TextField) indivdualComp;
													field.setValue("");
												} 
													 
									// Remove the table if exists..	
									//removeTableFromLayout();
											}
										}
									}
								}
							}
						}
					}
				}//Method to reset search table.
			removeTableFromLayout();
		}
	}

	private void removeTableFromLayout()
	{
		if(null != searchable)
		{
			searchable.resetSearchResultTableValues();
		}
	}

	public void refresh()
	{
		System.out.println("---inside the refresh----");
		resetAlltheValues();
	}

}