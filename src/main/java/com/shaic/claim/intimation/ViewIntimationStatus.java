package com.shaic.claim.intimation;

import java.util.Date;
import java.util.Iterator;

import javax.faces.bean.ViewScoped;
import javax.inject.Inject;

import com.shaic.arch.SHAUtils;
import com.shaic.claim.ClaimDto;
import com.shaic.claim.ViewDetails;
import com.shaic.domain.Claim;
import com.shaic.domain.Intimation;
import com.shaic.domain.NewIntimationService;
import com.shaic.newcode.wizard.dto.CashlessDetailsDto;
import com.shaic.newcode.wizard.dto.ClaimStatusDto;
import com.shaic.newcode.wizard.dto.NewIntimationDto;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.v7.data.Property.ReadOnlyException;
import com.vaadin.v7.data.fieldgroup.FieldGroup;
import com.vaadin.v7.data.util.BeanItem;
import com.vaadin.v7.data.util.IndexedContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Panel;
import com.vaadin.v7.ui.Table;
import com.vaadin.v7.ui.TextField;
import com.vaadin.v7.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;

@ViewScoped
public class ViewIntimationStatus extends Window {

	private static final String STATUS_OF_INTIMATION_NO = "Status of Intimation No: ";

	/**
	 * 
	 */
	private static final long serialVersionUID = -5727974360914008027L;

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Panel mainPanel;
	@AutoGenerated
	private VerticalLayout mainverticalLayout;
	@AutoGenerated
	private VerticalLayout wholeVerticalLayout;
	@AutoGenerated
	private Panel mainaccordion;
	@AutoGenerated
	private Panel financialApproval;
	@AutoGenerated
	private VerticalLayout financialVerticalLayout;
	@AutoGenerated
	private Panel billing;
	@AutoGenerated
	private VerticalLayout billingVerticalLayout;
	@AutoGenerated
	private Panel recptofDocsAndMedicalProcessing;
	@AutoGenerated
	private VerticalLayout rodverticalLayout;
	@AutoGenerated
	private FormLayout rodFormLayout;
	@AutoGenerated
	private TextField Rodailment;
	@AutoGenerated
	private Panel cashlessDetails;
	@AutoGenerated
	private VerticalLayout cashlessverticalLayout;
	@AutoGenerated
	private FormLayout cashlessFormLayout;

	private TextField totalAuthAmt;
	@AutoGenerated
	private TextField statusOfCashLess;
	@AutoGenerated
	private TextField ailment;
	@AutoGenerated
	private Panel registrationDetails;
	@AutoGenerated
	private FormLayout registrationFormLayout;
	@AutoGenerated
	private TextField remainderDate;
	@AutoGenerated
	private TextField remainder;
	@AutoGenerated
	private TextField closeRemarks;
	@AutoGenerated
	private TextField cpuCode;
	@AutoGenerated
	private TextField claimCpuCode;
	@AutoGenerated
	private TextField cashLessOrReimbersement;
	@AutoGenerated
	private TextField provisionAmt;
	@AutoGenerated
	private TextField registrationStatus;
	@AutoGenerated
	private TextField claimNo;
	@AutoGenerated
	private Panel intimationDetails;
	@AutoGenerated
	private FormLayout intimationFormLayout;
	@AutoGenerated
	private TextField idCardNo;
	@AutoGenerated
	private TextField hospitalCode;
	@AutoGenerated
	private TextField agentBrokerName;
	@AutoGenerated
	private TextField agentBrokerCode;
	@AutoGenerated
	private TextField smName;
	@AutoGenerated
	private TextField smCode;
	@AutoGenerated
	private TextField reasonForAdmission;
	@AutoGenerated
	private TextField fieldVisitDoctorName;
	@AutoGenerated
	private TextField hospitalAdmissionDate;
	@AutoGenerated
	private TextField hospitalNetwork;

	@AutoGenerated
	private TextField hospitalCity;
	@AutoGenerated
	private TextField hospitalName;
	@AutoGenerated
	private TextField insuredPatientName;
	@AutoGenerated
	private TextField patientName;
	@AutoGenerated
	private TextField productName;
	@AutoGenerated
	private TextField policyIssueOffice;
	@AutoGenerated
	private TextField policyNumber;
	@AutoGenerated
	private TextField createdDate;
	@AutoGenerated
	private TextField intimationId;
	@AutoGenerated
	private TextField dateOfIntimation;
	
	@Inject
	private ViewDetails viewDetails;

	@Inject
	private CashLessTableDetails cashLessTableDetails;

	@Inject
	private CashlessTable cashlessTable;

	@Inject
	private NewIntimationService newIntimationService;

	@Inject
	private CashLessTableMapper cashLessTableMapper;

	@Inject
	private Intimation intimation;

	final String CPU_CODE;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */

	public ViewIntimationStatus() {

		CPU_CODE = "";
		Panel panel = buildIntimationDetails();
		setContent(panel);

		setWindowPosition();
	}

	private void bindClaimFieldGroup(ClaimDto data) {
		FieldGroup binder = new FieldGroup();
		BeanItem<ClaimDto> item = new BeanItem<ClaimDto>(data);
		binder.setItemDataSource(item);
		binder.bindMemberFields(this);
	}

	public ViewIntimationStatus(ClaimDto a_claimData,
			NewIntimationDto a_intimationData, Boolean isRegistered) {
		super(STATUS_OF_INTIMATION_NO + a_intimationData.getIntimationId());
		CPU_CODE = a_intimationData.getCpuCode().toString();
		VerticalLayout layout = buildMainPanel();
		setContent(layout);
		bindClaimFieldGroup(a_claimData);
		bindIntimationFieldGroup(a_intimationData);

		buidReadonly();
		setWindowPosition();

	}

	private void setWindowPosition() {
		this.setWidth(900, Unit.PIXELS);
		this.setHeight(700, Unit.PIXELS);
		setModal(true);
		setClosable(true);
		setResizable(true);
	}

	public ViewIntimationStatus(String intimationNo,ViewDetails viewDetails) {		
		super(STATUS_OF_INTIMATION_NO + ( intimationNo != null ? intimationNo : "" ));
		if(intimationNo != null)
		{		
			this.viewDetails = viewDetails;
		this.viewDetails.init();
		this.viewDetails.viewClaimStatusUpdated(intimationNo);		
		}
		CPU_CODE = "";
	}
	
	public ViewIntimationStatus(ClaimStatusDto claimStatusDto,
			Boolean isRegistered, CashLessTableDetails cashLessTableDetails,
			CashlessTable cashlessTable, CashLessTableMapper cashTableMapper,
			NewIntimationService newIntimationService, Intimation intimation) {
		super(STATUS_OF_INTIMATION_NO
				+ claimStatusDto.getNewIntimationDto().getIntimationId());
		this.cashLessTableDetails = cashLessTableDetails;
		this.cashlessTable = cashlessTable;
		this.cashLessTableMapper.getAllMapValues();
		this.cashLessTableMapper = cashTableMapper;
		this.newIntimationService = newIntimationService;
		this.intimation = intimation;

		CPU_CODE = claimStatusDto.getNewIntimationDto().getCpuCode().toString();
		VerticalLayout layout = buildMainPanel();
		setContent(layout);
		bindClaimFieldGroup(claimStatusDto.getClaimDto());
		bindIntimationFieldGroup(claimStatusDto.getNewIntimationDto());
		setIntimationData(claimStatusDto.getNewIntimationDto());
		setClaimData(claimStatusDto.getClaimDto());
		setCashlessDetailsData(claimStatusDto.getCashlessDetailsDto());
		if (claimStatusDto.getNewIntimationDto().getAdmissionDate() != null) {
			try {
				Date tempDate = SHAUtils.formatTimestamp(claimStatusDto
						.getNewIntimationDto().getAdmissionDate().toString());
				hospitalAdmissionDate.setValue(SHAUtils.formatDate(tempDate));
			} catch (ReadOnlyException e) {
				e.printStackTrace();
			}
		}

		if (claimStatusDto.getNewIntimationDto().getCreatedDate() != null) {
			try {
				Date tempDate = SHAUtils.formatTimestamp(claimStatusDto
						.getNewIntimationDto().getCreatedDate().toString());
				dateOfIntimation.setValue(SHAUtils.formatDate(tempDate));
			} catch (ReadOnlyException e) {
				e.printStackTrace();
			}
		}

		buidReadonly();
		setWindowPosition();
	}

	public ViewIntimationStatus(NewIntimationDto data, Boolean isRegistered,
			CashLessTableDetails cashLessTableDetails,
			CashlessTable cashlessTable, CashLessTableMapper cashTableMapper,
			NewIntimationService newIntimationService, Intimation intimation) {
		super(STATUS_OF_INTIMATION_NO + data.getIntimationId());
		this.cashLessTableDetails = cashLessTableDetails;
		this.cashlessTable = cashlessTable;
		this.cashLessTableMapper = cashTableMapper;
		this.newIntimationService = newIntimationService;
		this.intimation = intimation;
		VerticalLayout layout = buildMainPanel();
		setContent(layout);
		bindIntimationFieldGroup(data);

		if (data.getAdmissionDate() != null) {
			try {
				Date tmphospitalAdmissionDate = SHAUtils.formatTimestamp(data
						.getAdmissionDate().toString());
				hospitalAdmissionDate.setValue(SHAUtils
						.formatDate(tmphospitalAdmissionDate));
			} catch (ReadOnlyException e) {
				e.printStackTrace();
			}
		}

		if (data.getCreatedDate() != null) {
			try {
				Date tmpintimationDate = SHAUtils.formatTimestamp(data
						.getCreatedDate().toString());
				dateOfIntimation.setValue(SHAUtils
						.formatDate(tmpintimationDate));
			} catch (ReadOnlyException e) {
				e.printStackTrace();
			}
		}
		CPU_CODE = data.getCpuCode().toString();
		setIntimationData(data);
		buidReadonly();
		setWindowPosition();

	}

	public void setClaimData(ClaimDto claimDto) {
		if (claimDto != null) {
			claimNo.setValue(claimDto.getClaimId() != null ? claimDto
					.getClaimId() : "");
			provisionAmt
					.setValue(claimDto.getProvisionAmount() != null ? claimDto
							.getProvisionAmount().toString() : "");
			cashLessOrReimbersement
					.setValue(claimDto.getClaimType() != null ? claimDto
							.getClaimType().getValue() : "");
			claimCpuCode
					.setValue((claimDto.getNewIntimationDto() != null && claimDto
							.getNewIntimationDto().getCpuCode() != null) ? claimDto
							.getNewIntimationDto().getCpuCode() : "");
			closeRemarks.setValue("");

		}

	}

	public void setCashlessDetailsData(CashlessDetailsDto cashlessDetailsDto) {
		if (cashlessDetailsDto != null) {
			totalAuthAmt
					.setValue(cashlessDetailsDto.getTotalAuthAmt() != null ? cashlessDetailsDto
							.getTotalAuthAmt().toLowerCase() : "");
			statusOfCashLess
					.setValue(cashlessDetailsDto.getStatusOfCashless() != null ? cashlessDetailsDto
							.getStatusOfCashless() : "");
			ailment.setValue(cashlessDetailsDto.getAilment() != null ? cashlessDetailsDto
					.getAilment() : "");
		}
	}

	public void setIntimationData(NewIntimationDto newIntimationDto) {
		if (newIntimationDto != null) {
			policyNumber.setValue(newIntimationDto.getPolicy()
					.getPolicyNumber());
			policyIssueOffice
					.setValue((newIntimationDto.getPolicy() != null && newIntimationDto
							.getPolicy().getHomeOfficeCode() != null) ? newIntimationDto
							.getPolicy().getHomeOfficeCode() : "");

			if (newIntimationDto.getInsuredPatient() != null) {
				patientName.setValue(newIntimationDto.getInsuredPatient()
						.getInsuredName() != null ? newIntimationDto
						.getInsuredPatient().getInsuredName() : "");
				idCardNo.setValue(newIntimationDto.getInsuredPatient()
						.getHealthCardNumber() != null ? newIntimationDto
						.getInsuredPatient().getHealthCardNumber() : "");
			}

			if (newIntimationDto.getPolicy() != null
					&& newIntimationDto.getPolicy().getProduct() != null) {
				productName.setValue(newIntimationDto.getPolicy().getProduct().getValue() != null ? newIntimationDto
						.getPolicy().getProduct().getValue() : "");
				smCode.setValue(newIntimationDto.getPolicy().getSmCode() != null ? newIntimationDto
						.getPolicy().getSmCode() : "");
				smName.setValue(newIntimationDto.getPolicy().getSmName() != null ? newIntimationDto
						.getPolicy().getSmName() : "");
				agentBrokerCode.setValue(newIntimationDto.getPolicy()
						.getAgentCode() != null ? newIntimationDto.getPolicy()
						.getAgentCode() : "");
				agentBrokerName.setValue(newIntimationDto.getPolicy()
						.getAgentName() != null ? newIntimationDto.getPolicy()
						.getAgentName() : "");
			}

			if (newIntimationDto.getHospitalDto() != null) {
				hospitalName.setValue(newIntimationDto.getHospitalDto()
						.getName() != null ? newIntimationDto.getHospitalDto()
						.getName() : "");
				hospitalCity
						.setValue(newIntimationDto.getHospitalDto() != null ? newIntimationDto
								.getHospitalDto().getCity() : "");
				hospitalNetwork.setValue(newIntimationDto.getHospitalDto()
						.getHospitalType() != null ? newIntimationDto
						.getHospitalDto().getHospitalType().getValue() : "");

				hospitalCode.setValue(newIntimationDto.getHospitalDto()
						.getHospitalCode() != null ? newIntimationDto
						.getHospitalDto().getHospitalCode() : "");
			}

			
		}

	}

	private void buidReadonly() {
		setReadOnly(intimationFormLayout);
		setReadOnly(registrationFormLayout);
		setReadOnly(cashlessFormLayout);
		setReadOnly(rodFormLayout);
	}

	private void bindIntimationFieldGroup(NewIntimationDto data) {
		FieldGroup binder = new FieldGroup();
		BeanItem<NewIntimationDto> item = new BeanItem<NewIntimationDto>(data);
		binder.setItemDataSource(item);
		binder.bindMemberFields(this);

	}

	private void setReadOnly(FormLayout layout) {
		Iterator<Component> i = layout.iterator();
		while (i.hasNext()) {
			Component c = i.next();
			if (c instanceof TextField) {
				TextField field = (TextField) c;
				field.setNullRepresentation("");
				field.setReadOnly(true);
				field.setWidth("500px");
				field.addStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
			}
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		mainLayout = new AbsoluteLayout();
		//Vaadin8-setImmediate() mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		setWidth("100.0%");
		setHeight("100.0%");

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildMainPanel() {
		// common part: create layout
		mainPanel = new Panel();
		mainPanel.setCaption("Status of Intimation No.");
		//Vaadin8-setImmediate() mainPanel.setImmediate(false);
		mainPanel.setWidth("100.0%");
		mainPanel.setHeight("100.0%");

		return buildMainAccordion();
	}

	@AutoGenerated
	private VerticalLayout buildMainVerticalLayout() {
		// common part: create layout
		mainverticalLayout = new VerticalLayout();
		//Vaadin8-setImmediate() mainverticalLayout.setImmediate(false);
		mainverticalLayout.setWidth("100.0%");
		mainverticalLayout.setHeight("100.0%");
		mainverticalLayout.setMargin(true);

		return mainverticalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildMainAccordion() {
		// common part: create layout
		mainaccordion = new Panel();
		//Vaadin8-setImmediate() mainaccordion.setImmediate(true);
		mainaccordion.setWidth("100.0%");
		mainaccordion.setHeight("100.0%");
		mainaccordion.setSizeFull();

		wholeVerticalLayout = new VerticalLayout();
		wholeVerticalLayout.setSpacing(true);

		intimationDetails = buildIntimationDetails();
		wholeVerticalLayout.addComponent(intimationDetails);

		registrationDetails = buildRegistrationDetails();
		wholeVerticalLayout.addComponent(registrationDetails);

		cashlessDetails = buildCashlessDetails();
		wholeVerticalLayout.addComponent(cashlessDetails);

		recptofDocsAndMedicalProcessing = buildRecptofDocsAndMedicalProcessing();
		wholeVerticalLayout.addComponent(recptofDocsAndMedicalProcessing);

		billing = buildBilling();
		wholeVerticalLayout.addComponent(billing);

		financialApproval = buildFinancialApproval();
		wholeVerticalLayout.addComponent(financialApproval);

		return wholeVerticalLayout;
	}

	@AutoGenerated
	private Panel buildIntimationDetails() {
		intimationDetails = new Panel("Initmation Details");
		//Vaadin8-setImmediate() intimationDetails.setImmediate(false);
		intimationDetails.setWidth("100.0%");
		intimationDetails.setHeight("-1px");

		intimationFormLayout = buildIntimationFormLayout();
		intimationDetails.setContent(intimationFormLayout);

		return intimationDetails;
	}

	@AutoGenerated
	private FormLayout buildIntimationFormLayout() {
		intimationFormLayout = new FormLayout();
		//Vaadin8-setImmediate() intimationFormLayout.setImmediate(true);
		intimationFormLayout.setWidth("100.0%");
		intimationFormLayout.setHeight("100.0%");
		intimationFormLayout.setMargin(false);
		intimationFormLayout.setSpacing(true);
		intimationFormLayout.addStyleName("layoutDesign");

		intimationId = new TextField();
		intimationId.setCaption("Intimation No.");
		intimationFormLayout.addComponent(intimationId);

		dateOfIntimation = new TextField();
		dateOfIntimation.setCaption("Date of Intimation");
		intimationFormLayout.addComponent(dateOfIntimation);

		policyNumber = new TextField();
		policyNumber.setCaption("Policy No. / Adv. Rcpt. No");
		intimationFormLayout.addComponent(policyNumber);

		policyIssueOffice = new TextField();
		policyIssueOffice.setCaption("Policy Issuing Office");
		intimationFormLayout.addComponent(policyIssueOffice);

		productName = new TextField();
		productName.setCaption("Product Name");
		intimationFormLayout.addComponent(productName);

		insuredPatientName = new TextField();
		insuredPatientName.setCaption("Insured Name");
		intimationFormLayout.addComponent(insuredPatientName);

		patientName = new TextField();
		patientName.setCaption("Patient Name");
		intimationFormLayout.addComponent(patientName);

		hospitalName = new TextField();
		hospitalName.setCaption("Hospital Name");
		intimationFormLayout.addComponent(hospitalName);

		hospitalCity = new TextField();
		hospitalCity.setCaption("City of Hospital");
		intimationFormLayout.addComponent(hospitalCity);

		hospitalNetwork = new TextField();
		hospitalNetwork.setCaption("Network / Non-Network");
		intimationFormLayout.addComponent(hospitalNetwork);

		hospitalAdmissionDate = new TextField();
		hospitalAdmissionDate.setCaption("Date of Admission");
		intimationFormLayout.addComponent(hospitalAdmissionDate);

		fieldVisitDoctorName = new TextField();
		fieldVisitDoctorName.setCaption("Field Visit Doctor Name");
		intimationFormLayout.addComponent(fieldVisitDoctorName);

		reasonForAdmission = new TextField();
		reasonForAdmission.setCaption("Reason For Admission");
		intimationFormLayout.addComponent(reasonForAdmission);

		cpuCode = new TextField();
		cpuCode.setCaption("CPU Code");

		intimationFormLayout.addComponent(cpuCode);

		smCode = new TextField();
		smCode.setCaption("SM Code");
		intimationFormLayout.addComponent(smCode);

		smName = new TextField();
		smName.setCaption("SM Name");
		intimationFormLayout.addComponent(smName);

		agentBrokerCode = new TextField();
		agentBrokerCode.setCaption("Agent / Broker Code");
		intimationFormLayout.addComponent(agentBrokerCode);

		agentBrokerName = new TextField();
		agentBrokerName.setCaption("Agent / Broker Name");
		intimationFormLayout.addComponent(agentBrokerName);

		hospitalCode = new TextField();
		hospitalCode.setCaption("Hospital Code");
		intimationFormLayout.addComponent(hospitalCode);

		idCardNo = new TextField();
		idCardNo.setCaption("ID Card No.");
		intimationFormLayout.addComponent(idCardNo);

		return intimationFormLayout;
	}

	@AutoGenerated
	private Panel buildRegistrationDetails() {
		// common part: create layout
		registrationDetails = new Panel("Registration Details");

		// registrationFormLayout
		registrationFormLayout = buildRegistrationFormLayout();
		registrationDetails.setContent(registrationFormLayout);

		return registrationDetails;
	}

	@AutoGenerated
	private FormLayout buildRegistrationFormLayout() {
		// common part: create layout
		registrationFormLayout = new FormLayout();
		//Vaadin8-setImmediate() registrationFormLayout.setImmediate(false);
		registrationFormLayout.setWidth("100.0%");
		registrationFormLayout.setHeight("100.0%");
		registrationFormLayout.setMargin(false);
		registrationFormLayout.setSpacing(true);
		registrationFormLayout.addStyleName("layoutDesign");

		// claimNo
		claimNo = new TextField();
		claimNo.setCaption("Claim No");
		registrationFormLayout.addComponent(claimNo);

		// rgistrationStatus
		registrationStatus = new TextField();
		registrationStatus.setCaption("Registration Status");
		registrationFormLayout.addComponent(registrationStatus);

		// provisionAmount
		provisionAmt = new TextField();
		provisionAmt.setCaption("Provision Amount");
		registrationFormLayout.addComponent(provisionAmt);

		// cashlessOrReimbursement
		cashLessOrReimbersement = new TextField();
		cashLessOrReimbersement.setCaption("Cashless / Reimbursement");
		registrationFormLayout.addComponent(cashLessOrReimbersement);

		// CPUCode
		claimCpuCode = new TextField();
		claimCpuCode.setCaption("CPU Code");
		claimCpuCode.setValue(CPU_CODE);
		registrationFormLayout.addComponent(claimCpuCode);

		// closeRemarks
		closeRemarks = new TextField();
		closeRemarks.setCaption("Close Remarks");
		registrationFormLayout.addComponent(closeRemarks);

		// remainder
		remainder = new TextField();
		remainder.setCaption("Remainder");
		registrationFormLayout.addComponent(remainder);

		// remainderDate
		remainderDate = new TextField();
		remainderDate.setCaption("Remainder Date");
		registrationFormLayout.addComponent(remainderDate);

		return registrationFormLayout;
	}

	@AutoGenerated
	private Panel buildCashlessDetails() {
		// common part: create layout
		cashlessDetails = new Panel("Cashless Details");
		//Vaadin8-setImmediate() cashlessDetails.setImmediate(false);
		cashlessDetails.setWidth("100.0%");
		cashlessDetails.setHeight("100.0%");

		// verticalLayout_2
		cashlessverticalLayout = buildcashlessVerticalLayout();
		cashlessDetails.setContent(cashlessverticalLayout);

		return cashlessDetails;
	}

	@AutoGenerated
	private VerticalLayout buildcashlessVerticalLayout() {
		// common part: create layout
		cashlessverticalLayout = new VerticalLayout();
		//Vaadin8-setImmediate() cashlessverticalLayout.setImmediate(false);
		cashlessverticalLayout.setWidth("100.0%");
		cashlessverticalLayout.setHeight("100.0%");
		cashlessverticalLayout.setMargin(false);

		// cashlessFormLayout
		cashlessFormLayout = buildCashlessFormLayout();
		cashlessverticalLayout.addComponent(cashlessFormLayout);
		cashlessverticalLayout.addComponent(buildCashLessTable());
		return cashlessverticalLayout;
	}

	@AutoGenerated
	private FormLayout buildCashlessFormLayout() {
		// common part: create layout
		cashlessFormLayout = new FormLayout();
		//Vaadin8-setImmediate() cashlessFormLayout.setImmediate(false);
		cashlessFormLayout.setWidth("100.0%");
		cashlessFormLayout.setHeight("-1px");
		cashlessFormLayout.setMargin(false);
		cashlessFormLayout.addStyleName("layoutDesign");

		// ailment
		ailment = new TextField();
		ailment.setCaption("Ailment");
		cashlessFormLayout.addComponent(ailment);

		// cashlessStatus
		statusOfCashLess = new TextField();
		statusOfCashLess.setCaption("Status of Cashless");
		cashlessFormLayout.addComponent(statusOfCashLess);

		// totalAuthAmount
		totalAuthAmt = new TextField();
		totalAuthAmt.setCaption("Total Auth Amount");
		cashlessFormLayout.addComponent(totalAuthAmt);

		return cashlessFormLayout;
	}

	private VerticalLayout buildCashLessTable() {
		VerticalLayout cashlessLayout = new VerticalLayout();

		return new VerticalLayout(cashLessTableDetails.init(cashlessTable,
				newIntimationService, cashLessTableMapper, intimation));
	}

	@AutoGenerated
	private Panel buildRecptofDocsAndMedicalProcessing() {
		// common part: create layout
		recptofDocsAndMedicalProcessing = new Panel(
				"Receipt of Documents And Medical Processing");
		//Vaadin8-setImmediate() recptofDocsAndMedicalProcessing.setImmediate(false);
		recptofDocsAndMedicalProcessing.setWidth("100.0%");
		recptofDocsAndMedicalProcessing.setHeight("100.0%");

		// verticalLayout_4
		rodverticalLayout = buildRodVerticalLayout();
		recptofDocsAndMedicalProcessing.setContent(rodverticalLayout);
		return recptofDocsAndMedicalProcessing;
	}

	@AutoGenerated
	private VerticalLayout buildRodVerticalLayout() {
		// common part: create layout
		rodverticalLayout = new VerticalLayout();
		//Vaadin8-setImmediate() rodverticalLayout.setImmediate(false);
		rodverticalLayout.setWidth("100.0%");
		rodverticalLayout.setHeight("100.0%");
		rodverticalLayout.setMargin(false);

		// rodFormLayout
		rodFormLayout = buildRodFormLayout();

		rodverticalLayout.addComponent(rodFormLayout);
		IndexedContainer iContainer = meicalProcessingCreateContainer();
		Table rodDetailTable = meicalProcessingCreateTable(iContainer, "");
		rodverticalLayout.addComponent(rodDetailTable);

		return rodverticalLayout;
	}

	@AutoGenerated
	private FormLayout buildRodFormLayout() {
		// common part: create layout
		rodFormLayout = new FormLayout();
		//Vaadin8-setImmediate() rodFormLayout.setImmediate(false);
		rodFormLayout.setWidth("100.0%");
		rodFormLayout.setHeight("-1px");
		rodFormLayout.setMargin(false);
		rodFormLayout.setSpacing(true);
		rodFormLayout.addStyleName("layoutDesign");

		// Rodailment
		Rodailment = new TextField();
		Rodailment.setCaption("Ailment");
		rodFormLayout.addComponent(Rodailment);

		return rodFormLayout;
	}

	@AutoGenerated
	private Panel buildBilling() {
		// common part: create layout
		billing = new Panel("Billing");
		//Vaadin8-setImmediate() billing.setImmediate(false);
		billing.setWidth("100.0%");
		billing.setHeight("100.0%");

		// verticalLayout_5
		billingVerticalLayout = new VerticalLayout();
		//Vaadin8-setImmediate() billingVerticalLayout.setImmediate(false);
		billingVerticalLayout.setWidth("100.0%");
		billingVerticalLayout.setHeight("100.0%");
		billingVerticalLayout.setMargin(false);

		IndexedContainer iContainer = billingCreateContainer();
		Table billingDetailTable = billingCreateTable(iContainer, "");
		billingVerticalLayout.addComponent(billingDetailTable);

		billing.setContent(billingVerticalLayout);

		return billing;
	}

	@AutoGenerated
	private Panel buildFinancialApproval() {
		// common part: create layout
		financialApproval = new Panel("Financial Approval");
		//Vaadin8-setImmediate() financialApproval.setImmediate(false);
		financialApproval.setWidth("100.0%");
		financialApproval.setHeight("100.0%");

		// verticalLayout_6
		financialVerticalLayout = new VerticalLayout();
		//Vaadin8-setImmediate() financialVerticalLayout.setImmediate(false);
		financialVerticalLayout.setWidth("100.0%");
		financialVerticalLayout.setHeight("100.0%");
		financialVerticalLayout.setMargin(false);

		IndexedContainer iContainer = financialApprovalCreateContainer();
		Table financialDetailTable = financialApprovalCreateTable(iContainer,
				"");
		financialVerticalLayout.addComponent(financialDetailTable);

		financialApproval.setContent(financialVerticalLayout);

		return financialApproval;
	}

	private void chashlessDetailColumnMapper(Table table,
			IndexedContainer container) {
		table.setContainerDataSource(container);
		Object[] chashlessColumns = new Object[] { "chashlessType",
				"respanceDate", "replayStatus", "authApproveAmount", "reason",
				"doctorRemark" };
		table.setVisibleColumns(chashlessColumns);
		table.setPageLength(5);
	}

	public IndexedContainer chashlessDetailCreateContainer() {
		IndexedContainer container = new IndexedContainer();
		container.addContainerProperty("key", Long.class, null);
		container.addContainerProperty("chashlessType", String.class, null);
		container.addContainerProperty("respanceDate", Date.class, null);
		container.addContainerProperty("replayStatus", String.class, null);
		container.addContainerProperty("authApproveAmount", String.class, null);
		container.addContainerProperty("reason", String.class, null);
		container.addContainerProperty("doctorRemark", String.class, null);

		return container;
	}

	public Table chashlessDetailcreateTable(IndexedContainer container,
			String tableHeader) {

		final Table table = new Table(tableHeader);
		chashlessDetailColumnMapper(table, container);
		table.setWidth("100%");
		table.setHeight("100%");
		table.setEditable(false);
		return table;
	}

	public void chashlessDetailAddItem(final Table table,
			final IndexedContainer container, final Claim claim) {
		Object itemId = container.addItem();
		container.getItem(itemId).getItemProperty("key");
		container.getItem(itemId).getItemProperty("chashlessType");
		container.getItem(itemId).getItemProperty("respanceDate");
		container.getItem(itemId).getItemProperty("claimedAmount");
		container.getItem(itemId).getItemProperty("replayStatus");
		container.getItem(itemId).getItemProperty("authApproveAmount");
		container.getItem(itemId).getItemProperty("reason");
		container.getItem(itemId).getItemProperty("doctorRemark");

	}

	private void meicalProcessingColumnMapper(Table table,
			IndexedContainer container) {

		table.setContainerDataSource(container);
		Object[] meicalProcessingColumns = new Object[] { "type",
				"receivedFrom", "date", "amount", "medicalResponseDt",
				"status", "remark", "reminder", "reminderDate", "query" };
		table.setVisibleColumns(meicalProcessingColumns);
		table.setPageLength(table.size() + 1);
	}

	public IndexedContainer meicalProcessingCreateContainer() {
		IndexedContainer container = new IndexedContainer();

		container.addContainerProperty("key", Long.class, null);
		container.addContainerProperty("type", String.class, null);
		container.addContainerProperty("receivedFrom", String.class, null);
		container.addContainerProperty("date", Date.class, null);
		container.addContainerProperty("amount", String.class, null);
		container.addContainerProperty("medicalResponseDt", Date.class, null);
		container.addContainerProperty("status", String.class, null);
		container.addContainerProperty("remark", Double.class, null);
		container.addContainerProperty("reminder", Double.class, null);
		container.addContainerProperty("reminderDate", String.class, null);
		container.addContainerProperty("query", Button.class, null);

		return container;
	}

	public Table meicalProcessingCreateTable(IndexedContainer container,
			String tableHeader) {

		final Table table = new Table(tableHeader);
		meicalProcessingColumnMapper(table, container);
		table.setWidth("100%");
		table.setHeight("100%");
		table.setEditable(false);
		return table;
	}

	@SuppressWarnings("unchecked")
	public void meicalProcessingaddItem(final Table table,
			final IndexedContainer container, final Claim claim) {
		Object itemId = container.addItem();
		container.getItem(itemId).getItemProperty("key");
		container.getItem(itemId).getItemProperty("type");
		container.getItem(itemId).getItemProperty("receivedFrom");
		container.getItem(itemId).getItemProperty("date");
		container.getItem(itemId).getItemProperty("amount");
		container.getItem(itemId).getItemProperty("medicalResponseDt");
		container.getItem(itemId).getItemProperty("status");
		container.getItem(itemId).getItemProperty("remark");
		container.getItem(itemId).getItemProperty("reminder");
		container.getItem(itemId).getItemProperty("reminderDate");

		Button viewClaimBtn = getmeicalProcessingDetailButton(container, itemId);
		container.getItem(itemId).getItemProperty("query")
				.setValue(viewClaimBtn);
		viewClaimBtn.addStyleName("link");

	}

	private Button getmeicalProcessingDetailButton(
			final IndexedContainer container, Object itemId) {
		Button viewClaimBtn = new Button("Details");
		viewClaimBtn.setData(itemId);
		viewClaimBtn.addClickListener(new ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {

			}
		});
		return viewClaimBtn;
	}

	private void billingColumnMapper(Table table, IndexedContainer container) {

		table.setContainerDataSource(container);
		Object[] meicalProcessingColumns = new Object[] { "type",
				"billingCompletedDt", "billAssessedAmt", "status", "query" };
		table.setVisibleColumns(meicalProcessingColumns);
		table.setPageLength(table.size() + 1);
	}

	public IndexedContainer billingCreateContainer() {
		IndexedContainer container = new IndexedContainer();

		container.addContainerProperty("key", Long.class, null);
		container.addContainerProperty("type", String.class, null);
		container
				.addContainerProperty("billingCompletedDt", String.class, null);
		container.addContainerProperty("billAssessedAmt", String.class, null);

		container.addContainerProperty("status", String.class, null);
		container.addContainerProperty("query", Button.class, null);

		return container;
	}

	public Table billingCreateTable(IndexedContainer container,
			String tableHeader) {

		final Table table = new Table(tableHeader);
		billingColumnMapper(table, container);
		table.setWidth("100%");
		table.setHeight("100%");
		table.setEditable(false);
		return table;
	}

	@SuppressWarnings("unchecked")
	public void billingaddItem(final Table table,
			final IndexedContainer container, final Claim claim) {
		Object itemId = container.addItem();
		container.getItem(itemId).getItemProperty("key");
		container.getItem(itemId).getItemProperty("type");
		container.getItem(itemId).getItemProperty("billingCompletedDt");
		container.getItem(itemId).getItemProperty("billAssessedAmt");
		container.getItem(itemId).getItemProperty("status");
		Button viewClaimBtn = getBillingDetailButton(container, itemId);
		container.getItem(itemId).getItemProperty("query")
				.setValue(viewClaimBtn);
		viewClaimBtn.addStyleName("link");

	}

	private Button getBillingDetailButton(final IndexedContainer container,
			Object itemId) {
		Button viewClaimBtn = new Button("Details");
		viewClaimBtn.setData(itemId);
		viewClaimBtn.addClickListener(new ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {

			}
		});
		return viewClaimBtn;
	}

	private void financialApprovalColumnMapper(Table table,
			IndexedContainer container) {

		table.setContainerDataSource(container);
		Object[] meicalProcessingColumns = new Object[] { "type", "atype",
				"date", "amount", "Banker", "typeOfPayment",
				"checkorTransactionNo", "checkorTransactionDate",
				"checkorTransactionDateDate", "finalRejectionRemarks" };
		table.setVisibleColumns(meicalProcessingColumns);
		table.setPageLength(table.size() + 1);
	}

	public IndexedContainer financialApprovalCreateContainer() {
		IndexedContainer container = new IndexedContainer();

		container.addContainerProperty("key", Long.class, null);
		container.addContainerProperty("type", String.class, null);

		container.addContainerProperty("atype", String.class, null);

		container.addContainerProperty("date", String.class, null);

		container.addContainerProperty("amount", String.class, null);

		container.addContainerProperty("Banker", Date.class, null);
		container.addContainerProperty("typeOfPayment", String.class, null);
		container.addContainerProperty("checkorTransactionNo", Double.class,
				null);

		container.addContainerProperty("checkorTransactionDate", Double.class,
				null);
		container.addContainerProperty("checkorTransactionDateDate",
				String.class, null);

		container.addContainerProperty("finalRejectionRemarks", String.class,
				null);

		return container;
	}

	public Table financialApprovalCreateTable(IndexedContainer container,
			String tableHeader) {

		final Table table = new Table(tableHeader);
		financialApprovalColumnMapper(table, container);
		table.setWidth("100%");
		table.setHeight("100%");
		table.setEditable(false);
		return table;
	}

	public void financialApprovaladdItem(final Table table,
			final IndexedContainer container, final Claim claim) {
		Object itemId = container.addItem();
		container.getItem(itemId).getItemProperty("key");
		container.getItem(itemId).getItemProperty("type");
		container.getItem(itemId).getItemProperty("atype");

		container.getItem(itemId).getItemProperty("date");
		container.getItem(itemId).getItemProperty("amount");
		container.getItem(itemId).getItemProperty("typeOfPayment");

		container.getItem(itemId).getItemProperty("checkorTransactionNo");
		container.getItem(itemId).getItemProperty("checkorTransactionDate");
		container.getItem(itemId).getItemProperty("checkorTransactionDateDate");
		container.getItem(itemId).getItemProperty("finalRejectionRemarks");

	}

}
