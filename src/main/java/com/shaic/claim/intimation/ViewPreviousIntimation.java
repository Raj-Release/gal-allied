package com.shaic.claim.intimation;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceContextType;

import org.vaadin.dialogs.ConfirmDialog;

import com.shaic.claim.ClaimDto;
import com.shaic.claim.policy.search.ui.PremPolicyDetails;
import com.shaic.domain.Claim;
import com.shaic.domain.ClaimService;
import com.shaic.domain.HospitalService;
import com.shaic.domain.Intimation;
import com.shaic.domain.IntimationService;
import com.shaic.domain.MasterService;
import com.shaic.domain.NewIntimationService;
import com.shaic.domain.PolicyService;
import com.shaic.newcode.wizard.dto.ClaimStatusDto;
import com.vaadin.cdi.UIScoped;
import com.vaadin.v7.shared.ui.label.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.v7.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.UI;
import com.vaadin.v7.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;

@UIScoped
public class ViewPreviousIntimation extends Window {

	private static final long serialVersionUID = 2822375407747544994L;

	@PersistenceContext(unitName = "PERSISTENCE_UNIT_NAME", type = PersistenceContextType.EXTENDED)
	protected EntityManager entityManager;

	@EJB
	private PolicyService policyService;

	@EJB
	// @Inject
	private IntimationService intimationService;

	@EJB
	private HospitalService hospitalService;

	@EJB
	private ClaimService claimService;

	@EJB
	private MasterService masterService;

	private Panel intimationPanel;

	private VerticalLayout layout;

	@Inject
	private CashlessTable cashlessTable;

	@Inject
	private NewIntimationService newIntimationService;

	@Inject
	private CashLessTableMapper cashLessTableMapper;

	@Inject
	private CashLessTableDetails cashLessTableDetails;

	@Inject
	private ViewPreviousIntimationTable viewPreviousIntimationTable;

	@Inject
	private ViewPreviousIntimationService viewPreviousIntimationService;

	@Inject
	private ClaimStatusDto claimStatusDto;

	private Button btnClose;
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * 
	 * 
	 */

	@PostConstruct
	public void init() {
		
	}

	

	public ViewPreviousIntimation(PremPolicyDetails policyDetails,
			MasterService masterService, PolicyService policyService,
			HospitalService hospitalService, ClaimService claimService,
			CashLessTableDetails cashLessTableDetails,
			CashlessTable cashlessTable,
			CashLessTableMapper cashLessTableMapper,
			NewIntimationService newIntimationService,
			IntimationService intimationService,
			ViewPreviousIntimationTable viewPreviousIntimationTable,
			EntityManager entityManager) {
		super("View Intimations");
		btnClose = new Button("Close");
		btnClose.setStyleName(ValoTheme.BUTTON_DANGER);
		btnClose.setData(this);
		listener();
		this.cashLessTableDetails = cashLessTableDetails;
		this.cashlessTable = cashlessTable;
		this.cashLessTableMapper.getAllMapValues();
		this.cashLessTableMapper = cashLessTableMapper;
		this.newIntimationService = newIntimationService;
		this.policyService = policyService;
		this.hospitalService = hospitalService;
		this.claimService = claimService;
		this.viewPreviousIntimationTable = viewPreviousIntimationTable;
		this.entityManager = entityManager;
		intimationPanel = buildMainLayout(policyDetails, masterService);
		this.setWidth(95, Unit.PERCENTAGE);
		this.setHeight("400px");
		//this.setHeight(700, Unit.PIXELS);
		layout = new VerticalLayout();
		layout.addComponent(intimationPanel);
		layout.setComponentAlignment(intimationPanel, Alignment.MIDDLE_CENTER);
		layout.addComponent(btnClose);
		layout.setComponentAlignment(btnClose, Alignment.MIDDLE_CENTER);
		layout.setSpacing(true);
		setContent(layout);
		setModal(true);
		setClosable(true);
	}

//	public ViewPreviousIntimation(TmpPolicy tmpPolicy,
//			MasterService masterService, PolicyService policyService,
//			HospitalService hospitalService, ClaimService claimService,
//			CashLessTableDetails cashLessTableDetails,
//			CashlessTable cashlessTable,
//			CashLessTableMapper cashLessTableMapper,
//			NewIntimationService newIntimationService,
//			IntimationService intimationService,
//			ViewPreviousIntimationTable viewPreviousIntimationTable,
//			EntityManager entityManager) {
//		super("View Intimations");
//		btnClose = new Button("Close");
//		btnClose.setStyleName(ValoTheme.BUTTON_DANGER);
//		btnClose.setData(this);
//		listener();
//		this.cashLessTableDetails = cashLessTableDetails;
//		this.cashlessTable = cashlessTable;
//		this.cashLessTableMapper = cashLessTableMapper;
//		this.newIntimationService = newIntimationService;
//		this.policyService = policyService;
//		this.hospitalService = hospitalService;
//		this.claimService = claimService;
//		this.viewPreviousIntimationTable = viewPreviousIntimationTable;
//		this.entityManager = entityManager;
//		intimationPanel = buildMainLayout(tmpPolicy, masterService);
//		this.setWidth(95, Unit.PERCENTAGE);
//		this.setHeight(750, Unit.PIXELS);
//		layout = new VerticalLayout();
//		layout.addComponent(intimationPanel);
//		layout.setComponentAlignment(intimationPanel, Alignment.MIDDLE_CENTER);
//		layout.addComponent(btnClose);
//		layout.setComponentAlignment(btnClose, Alignment.MIDDLE_CENTER);
//		layout.setSpacing(true);
//		setContent(layout);
//		setModal(true);
//		setClosable(true);
//		setResizable(true);
//	}

	private Panel buildMainLayout(PremPolicyDetails tmpPolicy,
			final MasterService master) {
		intimationPanel = new Panel();
		//intimationPanel.setCaption("Intimation Details");
		//Vaadin8-setImmediate() intimationPanel.setImmediate(true);
		viewPreviousIntimationTable.init("", false, false);
		viewPreviousIntimationTable.setColumnHeader();
		ViewPreviousIntimationService viewPreviousIntimationService = new ViewPreviousIntimationService();
		List<ViewPreviousIntimationDto> viewpreviousIntimationDtoList = new ArrayList<ViewPreviousIntimationDto>();
		if(tmpPolicy != null){
			viewpreviousIntimationDtoList = viewPreviousIntimationService.getPreviousIntimationList(tmpPolicy.getPolicyNo(),
					"", entityManager);
			List<ViewPreviousIntimationDto> previousPremiaIntimationList = viewPreviousIntimationService.getPreviousPremiaIntimationList(tmpPolicy.getPolicyNo(),
					"", entityManager);
			if(previousPremiaIntimationList != null){
				viewpreviousIntimationDtoList.addAll(previousPremiaIntimationList);
			}
		}
		if(viewpreviousIntimationDtoList != null && viewpreviousIntimationDtoList.isEmpty()){
//			showErrorMessage("<b>No Prvious Intimations available for this Policy.</b>");
			
			Notification.show("No Previous Intimations available for this Policy.", Notification.TYPE_HUMANIZED_MESSAGE);
			
			return intimationPanel;
		}
		viewPreviousIntimationTable
				.setTableList(viewpreviousIntimationDtoList);
		viewPreviousIntimationTable.setColumnHeader();
		viewPreviousIntimationTable.getTable().setPageLength(7);
		intimationPanel.setContent(viewPreviousIntimationTable);
		return intimationPanel;
	}
//	private Panel buildMainLayout(TmpPolicy tmpPolicy,
//			final MasterService master) {
//		intimationPanel = new Panel();
//		intimationPanel.setCaption("Intimation Details");
//		//Vaadin8-setImmediate() intimationPanel.setImmediate(true);
//		viewPreviousIntimationTable.init("", false, false);
//		ViewPreviousIntimationService viewPreviousIntimationService = new ViewPreviousIntimationService();
//		List<ViewPreviousIntimationDto> viewpreviousIntimationDtoList = viewPreviousIntimationService.getPreviousIntimationList(tmpPolicy.getPolNo(),
//				entityManager);
//		if(viewpreviousIntimationDtoList != null && viewpreviousIntimationDtoList.isEmpty()){
////			showErrorMessage("<b>No Prvious Intimations available for this Policy.</b>");
//			
//			Notification.show("No Previous Intimations available for this Policy.", Notification.TYPE_ERROR_MESSAGE);
//			
//			return intimationPanel;
//		}
//		viewPreviousIntimationTable
//				.setTableList(viewpreviousIntimationDtoList);
//		intimationPanel.setContent(viewPreviousIntimationTable);
//		return intimationPanel;
//	}

	@SuppressWarnings({ "serial", "unused" })
	private void getButtonAction(final boolean claimExists,
			final Button intimationNoButton) {
		intimationNoButton.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				Intimation intimation = (Intimation) event.getButton()
						.getData();

				Claim a_claim = claimService.getClaimforIntimation(intimation
						.getKey());

				ClaimDto a_claimDto = claimService.claimToClaimDTO(a_claim);

				if (intimation.getStatus() != null
						&& intimation.getStatus().getProcessValue()
								.equalsIgnoreCase("SUBMITTED")
						&& claimExists == true) {
					claimStatusDto.setClaimDto(a_claimDto);
					claimStatusDto.setNewIntimationDto(a_claimDto
							.getNewIntimationDto());
					ViewIntimationStatus intimationStatus = new ViewIntimationStatus(
							claimStatusDto, intimation.getPolicy()
									.getActiveStatus() == null,
							cashLessTableDetails, cashlessTable,
							cashLessTableMapper, newIntimationService,
							intimation);
					UI.getCurrent().addWindow(intimationStatus);
				} else if (intimation.getStatus() != null
						&& intimation.getStatus().getProcessValue()
								.equalsIgnoreCase("SUBMITTED")
						&& claimExists == false) {
					ViewIntimation intimationDetails;
					intimationDetails = new ViewIntimation(a_claimDto
							.getNewIntimationDto(), hospitalService);
					UI.getCurrent().addWindow(intimationDetails);

				}
			}
		});
	}
	private void listener(){
		btnClose.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				Object w =  btnClose.getData();
				((Window) w).close();
				
			}
		});
		
	}
	
	private void showErrorMessage(String eMsg) {
		Label label = new Label(eMsg, ContentMode.HTML);
		label.setStyleName("errMessage");
		VerticalLayout layout = new VerticalLayout();
		layout.setMargin(true);
		layout.addComponent(label);

		ConfirmDialog dialog = new ConfirmDialog();
		dialog.setCaption("Errors");
		dialog.setClosable(true);
		dialog.setContent(layout);
		dialog.setResizable(false);
		dialog.setModal(true);
		dialog.show(getUI().getCurrent(), null, true);
	}

}
