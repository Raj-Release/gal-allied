package com.shaic.claim.intimation.create;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.vaadin.addon.cdimvp.ViewComponent;
import org.vaadin.dialogs.ConfirmDialog;

import com.shaic.arch.EnhancedFieldGroupFieldFactory;
import com.shaic.arch.utils.StarIntimationUtils;
import com.shaic.claim.policy.search.ui.premia.PremPolicy;
import com.shaic.domain.Insured;
import com.shaic.domain.InsuredSearchBean;
import com.shaic.domain.InsuredService;
import com.shaic.domain.MasterService;
import com.shaic.domain.MastersValue;
import com.shaic.domain.Policy;
import com.shaic.domain.ReferenceTable;
import com.shaic.domain.preauth.GmcMainMemberList;
import com.shaic.newcode.wizard.dto.NewIntimationDto;
import com.shaic.newcode.wizard.pages.IntimationDetailsPage;
import com.vaadin.cdi.UIScoped;
import com.vaadin.v7.data.fieldgroup.BeanFieldGroup;
import com.vaadin.v7.data.fieldgroup.FieldGroup;
import com.vaadin.v7.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.v7.data.util.BeanItemContainer;
import com.vaadin.v7.data.util.IndexedContainer;
import com.vaadin.v7.shared.ui.label.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.themes.ValoTheme;
import com.vaadin.v7.ui.ComboBox;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.GridLayout;
import com.vaadin.v7.ui.HorizontalLayout;
import com.vaadin.v7.ui.Label;
import com.vaadin.v7.ui.PopupDateField;
import com.vaadin.v7.ui.Table;
import com.vaadin.v7.ui.TextField;
import com.vaadin.v7.ui.VerticalLayout;

@UIScoped
public class SearchGMCInsuredUI extends ViewComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = -5426174099053475085L;

	@Inject
	private InsuredService insuredService;

	@Inject
	private MasterService masterService;

	@Inject
//	@IntimationGroup
	private NewIntimationDto bean;
	
	private FieldGroup binder;
	
	private BeanFieldGroup<InsuredSearchBean> searchFieldGroup;

	public static BeanItemContainer<InsuredSearchBean> tmpInsuredSearchBeanContainer;

	private Button resetButton;

	private Button searchButton;

	//private ComboBox cmbGender;

	private TextField agetextField;

	//private PopupDateField dateofBirthpopupDateField;

	private TextField insuredNametextField;
	
	private TextField gmcMainMemberNameField;
	
	private TextField employeeIdTxt;
	
	private TextField healthCardNumberTxt;

	private PremPolicy policy;

	@Inject
	private SearchGMCInsuredTable insureTable;
	
	private VerticalLayout layout;
	
	private FormLayout formLayout;
	
	private VerticalLayout mainVerticalLayout;

	private IntimationDetailsPage intimationPage;

	public SearchGMCInsuredUI() {
		
	}
	/*public void initView(PremPolicy policy)
	{
		this.policy = policy;
	}*/
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	//@PostConstruct	
	public void initView(PremPolicy policy) {
		setCaption("Search Insured");
		this.policy = policy;

		setHeight("700px");
		setWidth("850px");

		searchFieldGroup = new BeanFieldGroup<InsuredSearchBean>(
				InsuredSearchBean.class);
		searchFieldGroup.setFieldFactory(new EnhancedFieldGroupFieldFactory());
		searchFieldGroup.setItemDataSource(new InsuredSearchBean());
		
		

		setCompositionRoot(buildLayout());
	}

	private VerticalLayout buildLayout() {
		layout = new VerticalLayout();

		//Vaadin8-setImmediate() layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("-1px");
		layout.setMargin(true);
		layout.setSpacing(true);

		layout.setCaption("Insured List");

		HorizontalLayout buildSearchPanel = buildSearchPanel();
		
		layout.addComponent(buildSearchPanel);
		layout.setComponentAlignment(buildSearchPanel, Alignment.TOP_LEFT);
		return layout;
	}

	private HorizontalLayout buildSearchPanel() {
		HorizontalLayout hLayout = new HorizontalLayout();
		//Vaadin8-setImmediate() hLayout.setImmediate(false);
		hLayout.setWidth("90%");
		hLayout.setHeight("-1px");
		hLayout.setMargin(true);
		hLayout.setSpacing(true);
		mainVerticalLayout = buildSearchLayout();
		hLayout.addComponent(mainVerticalLayout);
		hLayout.setComponentAlignment(mainVerticalLayout, Alignment.MIDDLE_CENTER);

		return hLayout;
	}

	private VerticalLayout buildSearchLayout() {

		formLayout = new FormLayout();
		
		formLayout.setWidth("70%");
		formLayout.setSpacing(true);
		
		gmcMainMemberNameField = searchFieldGroup.buildAndBind("Main Member Name",
				"gmcMainMemberName", TextField.class);
		
		insuredNametextField = searchFieldGroup.buildAndBind("Insured Â Name",	
				"insuredName", TextField.class);
		
		agetextField = searchFieldGroup.buildAndBind("Age", "age",
				TextField.class);
		
		agetextField.setNullRepresentation("");
		//TODO
		employeeIdTxt = searchFieldGroup.buildAndBind("Employee Id", "employeeId",TextField.class);
//		employeeIdTxt = new TextField("Employee ID No");
		//TODO
		healthCardNumberTxt = searchFieldGroup.buildAndBind("ID Card No", "healthCardNumber",TextField.class);
//		healthCardNumberTxt = new TextField("Health Card No");
		formLayout.addComponent(gmcMainMemberNameField);
		formLayout.addComponent(insuredNametextField);
		formLayout.addComponent(employeeIdTxt);
		formLayout.addComponent(agetextField);
		formLayout.addComponent(healthCardNumberTxt);
		
		searchButton = new Button("Search");
		//Vaadin8-setImmediate() searchButton.setImmediate(true);
		searchButton.setWidth("-1px");
		searchButton.setHeight("-1px");
		searchButton.addStyleName(ValoTheme.BUTTON_FRIENDLY);

		resetButton = new Button();
		resetButton.setCaption("Reset");
		//Vaadin8-setImmediate() resetButton.setImmediate(true);
		resetButton.setWidth("-1px");
		resetButton.setHeight("-1px");
		resetButton.addStyleName(ValoTheme.BUTTON_DANGER);
		
		HorizontalLayout buttonLayout = new HorizontalLayout(searchButton, resetButton);
		buttonLayout.setSpacing(true);
		buttonLayout.setMargin(true);
		
		mainVerticalLayout = new VerticalLayout(formLayout,buttonLayout);
		mainVerticalLayout.setComponentAlignment(buttonLayout, Alignment.MIDDLE_CENTER);
		addListener();
		return mainVerticalLayout;
	}

	private void addListener() {
		resetButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				resetSearchIntimationFields();
			}
		});
		// searchButton


		searchButton.addClickListener(new ClickListener() {
			private static final long serialVersionUID = -5914033995530670042L;

			@Override
			public void buttonClick(ClickEvent event) {

				try {
					insureTable.removeAllItems();
					searchFieldGroup.commit();
					tmpInsuredSearchBeanContainer = new BeanItemContainer<InsuredSearchBean>(InsuredSearchBean.class);
					tmpInsuredSearchBeanContainer.addBean(searchFieldGroup.getItemDataSource().getBean());
					//if (true)
					//{
					if(isValid()){
						if (tmpInsuredSearchBeanContainer.getItemIds().size() != 0) {
							InsuredSearchBean intimationBean = tmpInsuredSearchBeanContainer
									.getItemIds().get(0);
							// fieldGroup.setItemDataSource(intimationBean);

							List<GmcMainMemberList> searchResult = insuredService
									.searchGMCInsured(intimationBean, policy);
							
							
							if (searchResult.size() != 0) {
								layout.removeComponent(insureTable);
								insureTable.init("", false, false);
								insureTable.setColumnHeader();
								insureTable.removeAllItems();
								layout.addComponent(insureTable);
								layout.setComponentAlignment(insureTable, Alignment.BOTTOM_LEFT);
								Long i = 1l;
								for (GmcMainMemberList insured : searchResult) {
									if(insured != null){
										GmcMainMemberListDTO dto = new GmcMainMemberListDTO();
										dto.setKey(i);
										dto.setPolicySysId(insured.getPolicySysId());
										dto.setPolicyNumber(insured.getPolicyNumber());
										dto.setEndorsementNumber(insured.getEndorsementNumber());
										dto.setRiskId(insured.getRiskId());
										dto.setProductCode(insured.getProductCode());
										dto.setSectionCode(insured.getSectionCode());
										dto.setMemberId(insured.getMemberId());
										dto.setMainMemberName(insured.getMainMemberName());
										dto.setInsuredName(insured.getInsuredName());
										dto.setAge(insured.getAge());
										dto.setEmployeeId(insured.getEmployeeId());
										dto.setIdCardNumber(insured.getIdCardNumber());
										dto.setGmcMainMemberList(insured);
										insureTable.addBeanToList(dto);
									}
								}
								insureTable.setTablesize();
							} else {
//								Notification
//										.show("ERROR",
//												"record is not found for the given search criteria",
//												Notification.TYPE_HUMANIZED_MESSAGE);
								showErrorMessage("record is not found for the given search criteria");
							}
						}
						/*//} /*else {
//						Notification
//								.show("ERROR",
//										"Please enter at least one input parameters for search.",
//										Notification.TYPE_HUMANIZED_MESSAGE);
						
						showErrorMessage("Please enter at least one input parameters for search.");
					}*/
				}
				else {
						showErrorMessage("<b>Please Enter any one of the field<br></b>");
					}	
				} catch (CommitException e) {
					e.printStackTrace();
				}

			}
		});
	}
	
	private void showErrorMessage(String eMsg) {
		Label label = new Label(eMsg, ContentMode.HTML);
		label.setStyleName("errMessage");
		VerticalLayout layout = new VerticalLayout();
		layout.setMargin(true);
		layout.addComponent(label);

		ConfirmDialog dialog = new ConfirmDialog();
		dialog.setCaption("Errors");
		dialog.setClosable(true);
		dialog.setContent(layout);
		dialog.setResizable(false);
		dialog.setModal(true);
		dialog.show(getUI().getCurrent(), null, true);
	}

	private void columnMapper(Table table, IndexedContainer container) {


		table.setColumnHeader("insuredName", "Insured Name");
		table.setColumnHeader("employeeId","Employee ID No");
		table.setColumnHeader("healthCardNumber","Health Card No");
		table.setColumnHeader("insuredDateOfBirth", "Date of Birth");
		table.setColumnHeader("insuredAge", "Age");
		table.setColumnHeader("insuredGender", "Gender");
		

		table.addContainerProperty("key", Long.class, null);
		table.addContainerProperty("insuredName", String.class, null);
		table.addContainerProperty("employeeId",String.class, null);
		table.addContainerProperty("healthCardNumber",String.class, null);
		table.addContainerProperty("insuredGender", String.class, null);
		table.addContainerProperty("insuredDateOfBirth", String.class, null);
		table.addContainerProperty("insuredAge", String.class, null);
		table.setContainerDataSource(container);

		table.setVisibleColumns(new Object[] { "insuredName","employeeId","healthCardNumber", "insuredGender",
				"insuredDateOfBirth", "insuredAge", "Select" });

		table.setPageLength(table.size());
	}

	public IndexedContainer createContainer() {
		IndexedContainer container = new IndexedContainer();

		container.addContainerProperty("mainMemberName", Long.class, null);
		container.addContainerProperty("insuredName", String.class, null);
		container.addContainerProperty("memberId",String.class,null);
		container.addContainerProperty("employeeId",String.class, null);
		container.addContainerProperty("age", String.class, null);
		container.addContainerProperty("idCardNumber", String.class, null);
		return container;
	}

	@SuppressWarnings("serial")
	public void addItem(final Table table, final IndexedContainer container,
			final Insured insured) {
		Object itemId = container.addItem();
		container.getItem(itemId).getItemProperty("key")
				.setValue(insured.getKey());
		container.getItem(itemId).getItemProperty("insuredName")
				.setValue(insured.getInsuredName());
		//TODO Need to set employee Id
		container.getItem(itemId).getItemProperty("employeeId")
		.setValue(" ");
		container.getItem(itemId).getItemProperty("healthCardNumber")
		.setValue(insured.getHealthCardNumber());
		
		container.getItem(itemId).getItemProperty("insuredGender")
				.setValue(insured.getInsuredGender().getValue());
		container.getItem(itemId).getItemProperty("insuredDateOfBirth")
				.setValue(new SimpleDateFormat("dd-MM-yyy").format(insured.getInsuredDateOfBirth()));
		container.getItem(itemId).getItemProperty("insuredAge")
				.setValue(String.valueOf(insured.getInsuredAge().intValue()));

		Button btnSelect = new Button("Select");
		
		HashMap<String, Object> objectMap = new HashMap<String, Object>();
		objectMap.put("insured", insured);
		objectMap.put("intimation", this.intimationPage);
		btnSelect.setData(objectMap);
		
		btnSelect.addClickListener(new ClickListener() {
			@Override
			@SuppressWarnings("unchecked")
			public void buttonClick(ClickEvent event) {
				
				HashMap<String, Object> objectMap =  (HashMap<String, Object>) event.getButton().getData();
				Insured insured =  (Insured) objectMap.get("insured");
				fireViewEvent(IntimationDetailsPage.INSURED_SELECTED, insured);
				
//				fireViewEvent(IntimationDetailPage.INSURED_SELECTED, insured);
//				IntimationDetailPage intimationDetailsPage =  (IntimationDetailPage) objectMap.get("intimation");
//				if(intimationDetailsPage != null) {
//					Collection<?> itemIds = intimationDetailsPage.cmbInsuredPatiend.getContainerDataSource().getItemIds();
//					intimationDetailsPage.cmbInsuredPatiend.setValue(insured);
//				}
			}
		});
		container.getItem(itemId).getItemProperty("Select").setValue(btnSelect);
		btnSelect.addStyleName("link");
	}

	public void resetSearchIntimationFields() {
		if(formLayout != null) {
			StarIntimationUtils.resetAlltheValues(formLayout);
			insureTable.removeAllItems();
			searchFieldGroup.setItemDataSource(new InsuredSearchBean());
		}
	}
	
 	public void setParent(IntimationDetailsPage parent) {
        if (parent != null) {
            this.intimationPage = parent;
        } 
    }
 	
 	public Boolean isValid(){
		Boolean isFieldEntered = Boolean.FALSE;
		if(agetextField != null && agetextField.getValue() != null && ! agetextField.getValue().equalsIgnoreCase("")){
			isFieldEntered = Boolean.TRUE;
		}
		if(insuredNametextField != null && insuredNametextField.getValue() != null && ! insuredNametextField.getValue().equalsIgnoreCase("")){
			isFieldEntered = Boolean.TRUE;
		}
		if(gmcMainMemberNameField != null && gmcMainMemberNameField.getValue() != null && ! gmcMainMemberNameField.getValue().equalsIgnoreCase("")){
			isFieldEntered = Boolean.TRUE;
		}
		if(employeeIdTxt != null && employeeIdTxt.getValue() != null && ! employeeIdTxt.getValue().equalsIgnoreCase("")){
			isFieldEntered = Boolean.TRUE;
		}
		if(healthCardNumberTxt != null && healthCardNumberTxt.getValue() != null && ! healthCardNumberTxt.getValue().equalsIgnoreCase("")){
			isFieldEntered = Boolean.TRUE;
		}
		return isFieldEntered;
	}
}
