package com.shaic.claim.intimation;

import java.util.Date;
import java.util.Iterator;

import javax.inject.Inject;

import com.shaic.arch.SHAUtils;
import com.shaic.domain.HospitalService;
import com.shaic.domain.Hospitals;
import com.shaic.domain.UnFreezHospitals;
import com.shaic.newcode.wizard.dto.NewIntimationDto;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.v7.data.Property.ReadOnlyException;
import com.vaadin.v7.data.fieldgroup.FieldGroup;
import com.vaadin.v7.data.util.BeanItem;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Component;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Panel;
import com.vaadin.v7.ui.TextArea;
import com.vaadin.v7.ui.TextField;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;



@SuppressWarnings("serial")
public class ViewIntimation extends Window {

	@SuppressWarnings("unused")
	@Inject
	private HospitalService hospitalService;

	private Panel intimationPanel;
	private FormLayout intimationFrmLayout;

	private TextField intimationMode;
	private TextField intimatdBy;
	private TextField intimatorName;
	private TextField callerContactNum;
	private TextField insuredPatientName;
	private TextField reasonForAdmission;
	private TextField hospitalName;
	private TextField hospitalAdmissionDate;
	private TextField hospitalNetwork;
	private TextArea hospitalAddress;
	private TextField hospitalPhnNo;
	private TextField hospitalFaxNo;
	private TextField doctorName;
	private TextField roomCategoryValue;
	private TextField hospitalDetails;
	private TextField hospitalDistrict;
	private TextField hospitalState;
	private TextField hospitalCity;

	public ViewIntimation(NewIntimationDto newIntimationDto,
			HospitalService hospitalService) {
		super("View Intimation");
		this.hospitalService = hospitalService;
		intimationPanel = buildMainLayout(newIntimationDto.getIntimationId());
		this.setWidth(600, Unit.PIXELS);
		this.setHeight(750, Unit.PIXELS);
		// this.setSizeFull();		
		setContent(intimationPanel);

		FieldGroup binder = new FieldGroup();
		BeanItem<NewIntimationDto> item = new BeanItem<NewIntimationDto>(
				newIntimationDto);
		binder.setItemDataSource(item);
		binder.bindMemberFields(this);
		if (newIntimationDto.getHospitalDto() != null) {
			if (newIntimationDto.getHospitalDto().getKey() != null) {
				UnFreezHospitals hospital = hospitalService
						.getUnFreezHospitalById(newIntimationDto.getHospitalDto()
								.getKey());
				if (hospital != null) {
					hospitalFaxNo.setValue(hospital.getFax());
					hospitalPhnNo.setValue(hospital.getPhoneNumber());
//					hospitalAddress
//							.setValue((hospital.getDoorApartmentNumber() != null ? hospital
//									.getDoorApartmentNumber() : "")
//									+ " "
//									+ (hospital.getBuildingName() != null ? hospital
//											.getBuildingName() : "")
//									+ " "
//									+ (hospital.getStreetName() != null ? hospital
//											.getStreetName() : "")
//									+ " "
//									+ (hospital.getCity() != null ? hospital
//											.getCity() : ""));
					hospitalAddress.setValue(hospital.getAddress());
					hospitalName.setValue(hospital.getName());
					
					hospitalDistrict.setValue(hospital.getCity());
					hospitalState.setValue(hospital.getState());
					hospitalCity.setValue(hospital.getCity() );
				}
			}
		}

		if (newIntimationDto.getRoomCategory() != null
				&& !newIntimationDto.getRoomCategory().getValue().equals("")) {
			roomCategoryValue.setValue(newIntimationDto.getRoomCategory().getValue());
		}

		if (newIntimationDto.getIntimatedBy() != null
				&& !newIntimationDto.getIntimatedBy().toString().equals("")) {
			intimatdBy.setValue(newIntimationDto.getIntimatedBy().getValue()
					.toString());
		}

		if (newIntimationDto.getModeOfIntimation() != null
				&& !newIntimationDto.getModeOfIntimation().toString()
						.equals("")) {
			intimationMode.setValue(newIntimationDto.getModeOfIntimation()
					.getValue().toString());
		}

		if (newIntimationDto.getHospitalType() != null) {
			hospitalNetwork.setValue(newIntimationDto.getHospitalType()
					.toString());
		}

		if (newIntimationDto.getIntimaterName() != null) {
			intimatorName.setValue(newIntimationDto.getIntimaterName()
					.toString());
		}

		if (newIntimationDto.getAdmissionDate() != null) {
			try {
				Date tempDate = SHAUtils.formatTimestamp(newIntimationDto
						.getAdmissionDate().toString());
				hospitalAdmissionDate.setValue(SHAUtils.formatDate(tempDate));
			} catch (ReadOnlyException e) {
				e.printStackTrace();
			}
		}
		setReadOnly(intimationFrmLayout, true);
		// getContent().setSizeUndefined();
		setModal(true);
		setClosable(true);
		setResizable(true);
	}

	@AutoGenerated
	private Panel buildMainLayout(String intimationNo) {
		intimationPanel = buildIntimationPanel(intimationNo);
		return intimationPanel;
	}

	private Panel buildIntimationPanel(String intimationNo) {
		intimationPanel = new Panel();
		intimationPanel.setCaption("Intimation Details of " + intimationNo);
		//Vaadin8-setImmediate() intimationPanel.setImmediate(false);
		intimationPanel.setSizeFull();
		intimationFrmLayout = buildIntimationFrmLayout();
		intimationPanel.setContent(intimationFrmLayout);
		return intimationPanel;
	}


	private FormLayout buildIntimationFrmLayout() {

		intimationMode = new TextField();
		intimationMode.setCaption("Mode of  Intimation ");

		intimatdBy = new TextField();
		intimatdBy.setCaption("Intimated  By");

		intimatorName = new TextField();
		intimatorName.setCaption("Caller/Intimator Name");

		callerContactNum = new TextField();
		callerContactNum.setCaption("Caller Contact No");

		insuredPatientName = new TextField();
		insuredPatientName.setCaption("Insured Name");

		reasonForAdmission = new TextField();
		reasonForAdmission.setCaption("Reason For Admission");

		hospitalName = new TextField();
		hospitalName.setCaption("Hospital Name");

		hospitalAdmissionDate = new TextField();
		hospitalAdmissionDate.setCaption("Hospital Admission Date");

		hospitalNetwork = new TextField();
		hospitalNetwork.setCaption("Hospital Type");

		hospitalDetails = new TextField();
		hospitalDetails.setCaption("Hospital Details");

		hospitalDistrict = new TextField();
		hospitalDistrict.setCaption("District");
		
		hospitalState = new TextField();
		hospitalState.setCaption("State");
		
		hospitalCity = new TextField();
		hospitalCity.setCaption("City");

		hospitalAddress = new TextArea();
		hospitalAddress.setCaption("Hospital  Address");

		hospitalPhnNo = new TextField();
		hospitalPhnNo.setCaption("Hospital Phone No");

		hospitalFaxNo = new TextField();
		hospitalFaxNo.setCaption("Hospital Fax No");

		doctorName = new TextField();
		doctorName.setCaption("Hospital Doctor Name");

		roomCategoryValue = new TextField();
		roomCategoryValue.setCaption("Room Category");
		intimationFrmLayout = new FormLayout(intimationMode, intimatdBy,
				intimatorName, callerContactNum, insuredPatientName,
				reasonForAdmission, hospitalDetails,
				hospitalAdmissionDate, hospitalNetwork, hospitalDistrict,hospitalState,hospitalCity, hospitalName,hospitalAddress,
				hospitalPhnNo, hospitalFaxNo, doctorName, roomCategoryValue);
		intimationFrmLayout.addStyleName("layoutDesign");
		intimationFrmLayout.setWidth("100.0%");
		intimationFrmLayout.setSpacing(true);

		Iterator<Component> iter = intimationFrmLayout.iterator();

		while (iter.hasNext()) {
			intimationFrmLayout.setComponentAlignment((Component) iter.next(),
					Alignment.MIDDLE_CENTER);
		}

		return intimationFrmLayout;
	}

	private void setReadOnly(FormLayout a_formLayout, boolean readOnly) {
		Iterator<Component> formLayoutLeftComponent = a_formLayout.iterator();
		while (formLayoutLeftComponent.hasNext()) {
			Component c = formLayoutLeftComponent.next();
			if (c instanceof TextField) {
				TextField field = (TextField) c;
				field.setWidth("250px");
				field.setNullRepresentation("");
				field.setReadOnly(readOnly);
				field.addStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
			}
			if (c instanceof TextArea) {
				TextArea field = (TextArea) c;
				field.setWidth("250px");
				field.setNullRepresentation("");
				field.setReadOnly(readOnly);
				field.addStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
			}
		}
	}

}
