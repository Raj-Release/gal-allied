package com.shaic.claim.hospitalscoring;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.ejb.EJB;
import javax.persistence.Query;

import org.vaadin.addon.cdimvp.ViewComponent;
import org.vaadin.dialogs.ConfirmDialog;
import com.shaic.claim.scoring.HospitalScoringService;
import com.shaic.domain.Intimation;

import com.shaic.arch.EnhancedFieldGroupFieldFactory;
import com.shaic.arch.table.Searchable;
//import com.shaic.claim.cashlessprocess.withdrawpreauth.SearchWithdrawCashLessProcessFormDTO;
import com.shaic.claim.preauth.wizard.dto.PreauthDTO;
import com.shaic.claim.scoring.HospitalScoringView;
import com.vaadin.v7.data.fieldgroup.BeanFieldGroup;
import com.vaadin.server.ErrorMessage;
import com.vaadin.v7.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.v7.ui.AbstractField;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.v7.ui.Field;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.v7.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.v7.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;

public class HospitalScoringDetailsForm extends ViewComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private BeanFieldGroup<HospitalScoringDetailsDTO> binder;

	private TextField txtIntimationNo;

	private Button hospitalScoreSearch;
	private Button resetBtn;
	
	private VerticalLayout buildWithDrawSearchLayout;
	
	private ArrayList<Component> mandatoryFields = new ArrayList<Component>();
	
	private Searchable searchable;
	
	private PreauthDTO bean;
	
	@Inject
	private HospitalScoringDoctorsView hospitalScoringView;
	
	@EJB
	private HospitalScoringService scoringService;

	/*
	 * public void addSearchListener(Searchable searchable) { this.searchable =
	 * searchable; }
	 */

	public HospitalScoringDetailsDTO getSearchDTO() {
		try {
			this.binder.commit();
			HospitalScoringDetailsDTO bean = this.binder.getItemDataSource()
					.getBean();
			return bean;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;

	}

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	
	@PostConstruct
	public void init() {
		initBinder();
		// buildPreauthSearchLayout = buildPreauthSearchLayout();
		buildWithDrawSearchLayout = new VerticalLayout();
		Panel processRejectionPanel = new Panel();
		//		processRejectionPanel.setImmediate(false);
		//processRejectionPanel.setWidth("850px");
		processRejectionPanel.setWidth("100%");
		processRejectionPanel.setHeight("50%");
		processRejectionPanel.setCaption("Hospital Scoring");
		processRejectionPanel.addStyleName("panelHeader");
		processRejectionPanel.addStyleName("g-search-panel");
		processRejectionPanel.setContent(buildWithdrawSearchLayout());
		buildWithDrawSearchLayout.addComponent(processRejectionPanel);
		buildWithDrawSearchLayout.setComponentAlignment(processRejectionPanel,
				Alignment.MIDDLE_LEFT);
		setCompositionRoot(buildWithDrawSearchLayout);
		addListener();
	}
	
	private void initBinder() {
		this.binder = new BeanFieldGroup<HospitalScoringDetailsDTO>(
				HospitalScoringDetailsDTO.class);
		this.binder.setItemDataSource(new HospitalScoringDetailsDTO());
		this.binder.setFieldFactory(new EnhancedFieldGroupFieldFactory());
	}

	private VerticalLayout buildWithdrawSearchLayout() {
		
		AbsoluteLayout absoluteLayout_3 = new AbsoluteLayout();
		VerticalLayout verticalLayout = new VerticalLayout();
//		verticalLayout.setImmediate(false);
		verticalLayout.setWidth("100.0%");
		verticalLayout.setMargin(false);
//		absoluteLayout_3.setImmediate(false);
		absoluteLayout_3.setWidth("100.0%");
		// absoluteLayout_3.setHeight("250px");
		absoluteLayout_3.setHeight("150px");
		
		txtIntimationNo = binder.buildAndBind("Intimation No", "intimationNo",
				TextField.class);		
		
//		mandatoryFields.add(txtIntimationNo);
//		mandatoryFields.add(txtPolicyNo);
//		
//		showOrHideValidation(false);
		
		FormLayout formLayout1 = new FormLayout(txtIntimationNo);
		
		HorizontalLayout searchFormLayout = new HorizontalLayout(formLayout1);
		searchFormLayout.setMargin(true);
		
		searchFormLayout.setWidth("100%");
		searchFormLayout.setComponentAlignment(formLayout1,
				Alignment.MIDDLE_LEFT);
		absoluteLayout_3.addComponent(searchFormLayout);
		
		/*
		 * HorizontalLayout searchFormLayout = new HorizontalLayout(new
		 * FormLayout(txtIntimationNo),new FormLayout(txtPolicyNo));
		 * searchFormLayout.setMargin(true); searchFormLayout.setWidth("80%");
		 * absoluteLayout_3.addComponent(searchFormLayout);
		 */
		
		hospitalScoreSearch = new Button();
		hospitalScoreSearch.setCaption("Search");
//		hospitalScoreSearch.setImmediate(true);
		hospitalScoreSearch.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		hospitalScoreSearch.setWidth("-1px");
		hospitalScoreSearch.setHeight("-10px");
		hospitalScoreSearch.setDisableOnClick(false);
		absoluteLayout_3.addComponent(hospitalScoreSearch,
				"top:80.0px;left:220.0px;");
//		hospitalScoreSearch.setImmediate(true);
		
		resetBtn = new Button();
		resetBtn.setCaption("Reset");
//		resetBtn.setImmediate(true);
		resetBtn.addStyleName(ValoTheme.BUTTON_DANGER);
		resetBtn.setWidth("-1px");
		resetBtn.setHeight("-10px");
		absoluteLayout_3.addComponent(resetBtn, "top:80.0px;left:329.0px;");
//		resetBtn.setImmediate(true);
		verticalLayout.addComponent(absoluteLayout_3);
		verticalLayout.setWidth("650px");
		return verticalLayout; 
	}

	public void addListener() {
		hospitalScoreSearch.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {

				if (txtIntimationNo.getValue() != null
						&& !txtIntimationNo.getValue().isEmpty()) {
					Intimation selectedIntimation = scoringService
							.getIntimationByNo(txtIntimationNo.getValue());
					if (selectedIntimation != null) {
						showScoringView();
					} else {
						showErrorPopup("Please enter valid input");
					}
				} else {
					showErrorPopup("Please enter valid input");
				}
				txtIntimationNo.setValue("");
			}
			
		});
		
		resetBtn.addClickListener(new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				//searable.doSearch();
				resetAlltheValues();
			}
		});
	}
	
	public void resetAlltheValues() 
	{
		
		Iterator<Component> componentIterator = buildWithDrawSearchLayout.iterator();
			while(componentIterator.hasNext()) 
			{
				Component searchScrnComponent = componentIterator.next() ;
				if(searchScrnComponent instanceof  Panel )
				{	
					Panel panel = (Panel)searchScrnComponent;
					Iterator<Component> searchScrnCompIter = panel.iterator();
					while (searchScrnCompIter.hasNext())
					{
						Component verticalLayoutComp = searchScrnCompIter.next();
						VerticalLayout vLayout = (VerticalLayout)verticalLayoutComp;
						Iterator<Component> vLayoutIter = vLayout.iterator();
						while(vLayoutIter.hasNext())
						{
							Component absoluteComponent = vLayoutIter.next();
							AbsoluteLayout absLayout = (AbsoluteLayout)absoluteComponent;
							Iterator<Component> absLayoutIter = absLayout.iterator();
							while(absLayoutIter.hasNext())
							{
								Component horizontalComp = absLayoutIter.next();
								if(horizontalComp instanceof HorizontalLayout)
								{
									HorizontalLayout hLayout = (HorizontalLayout)horizontalComp;
									Iterator<Component> formLayComp = hLayout.iterator();
									while(formLayComp.hasNext())
									{
										Component formComp = formLayComp.next();
										FormLayout fLayout = (FormLayout)formComp;
										Iterator<Component> formComIter = fLayout.iterator();
									
										while(formComIter.hasNext())
										{
											Component indivdualComp = formComIter.next();
											if(indivdualComp != null) 
											{
												if(indivdualComp instanceof Label) 
												{
													continue;
												}	
												if(indivdualComp instanceof TextField) 
												{
													TextField field = (TextField) indivdualComp;
													field.setValue("");
												} 
												else if(indivdualComp instanceof ComboBox)
												{
													ComboBox field = (ComboBox) indivdualComp;
													field.setValue(null);
												}	 
									// Remove the table if exists..	
									//removeTableFromLayout();
											}
										}
									}
								}
							}
						}
					}
					
				}
				removeTableFromLayout();
			}
	}
	
	private void removeTableFromLayout() {
		if (null != searchable) {
			searchable.resetSearchResultTableValues();
		}
	}
	
	public void refresh() {
		System.out.println("---inside the refresh----");
		resetAlltheValues();
	}
	
	protected void showOrHideValidation(Boolean isVisible) {
		for (Component component : mandatoryFields) {
			AbstractField<?>  field = (AbstractField<?>)component;
			field.setRequired(!isVisible);
			field.setValidationVisible(isVisible);
		}
	}
	
	private boolean validatePage() {
		Boolean hasError = false;
		showOrHideValidation(true);
		StringBuffer eMsg = new StringBuffer();
		int count=0;
		
		if (!this.binder.isValid()) {

			for (Field<?> field : this.binder.getFields()) {
				ErrorMessage errMsg = ((AbstractField<?>) field)
						.getErrorMessage();
				if (errMsg != null) {
					eMsg.append(errMsg.getFormattedHtmlMessage());
					count++;
				}
				hasError = true;
			}
		}
		if (hasError) {
			if(count==2){
			setRequired(true);
			Label label = new Label(eMsg.toString(), ContentMode.HTML);
			label.setStyleName("errMessage");
			VerticalLayout layout = new VerticalLayout();
			layout.setMargin(true);
			layout.addComponent(label);

			ConfirmDialog dialog = new ConfirmDialog();
			dialog.setCaption("Errors");
			dialog.setClosable(true);
			dialog.setContent(layout);
			dialog.setResizable(false);
			dialog.setModal(true);
			dialog.show(getUI().getCurrent(), null, true);
			}

			hasError = true;
			if(count==2){
			return !hasError;
			}
			return hasError;
		} 
			showOrHideValidation(false);
			return true;
		}
	
	private void setRequired(Boolean isRequired) {

		if (!mandatoryFields.isEmpty()) {
			for (int i = 0; i < mandatoryFields.size(); i++) {
				AbstractField<?> field = (AbstractField<?>) mandatoryFields
						.get(i);
				field.setRequired(isRequired);
			}
		}
	}

	public void showScoringView() {
		hospitalScoringView.init(txtIntimationNo.getValue(), true);
		/*
		 * hospitalScoringView.setScreenName("Pre-Auth");
		 * hospitalScoringView.setDtoBean(bean);
		 * hospitalScoringView.setParentScoringButton(hospitalScoreSearch);
		 */
		VerticalLayout misLayout = new VerticalLayout(hospitalScoringView);
		Window popup = new com.vaadin.ui.Window();
		popup.setWidth("48%");
		// To be Removed in version 4 - Start
		/*
		 * if(bean.getNewIntimationDTO().getClaimType().getId().intValue() ==
		 * ReferenceTable.CLAIM_TYPE_CASHLESS_ID.intValue()){
		 * popup.setHeight("72%"); }else{ popup.setHeight("59%"); }
		 */
		// To be Removed in version 4 - End
		popup.setHeight("58%");
		popup.setContent(misLayout);
		popup.setClosable(false);
		popup.center();
		popup.setResizable(true);
		hospitalScoringView.setPopupWindow(popup);
		popup.addCloseListener(new Window.CloseListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void windowClose(CloseEvent e) {
				System.out.println("Close listener called");
			}
		});
		popup.setModal(true);
		UI.getCurrent().addWindow(popup);
	}

	private void showErrorPopup(String errorMessage) {
		Label label = new Label(errorMessage, ContentMode.HTML);
		label.setStyleName("errMessage");
		VerticalLayout layout = new VerticalLayout();
		layout.setMargin(true);
		layout.addComponent(label);

		ConfirmDialog dialog = new ConfirmDialog();
		dialog.setCaption("Error");
		dialog.setClosable(true);
		dialog.setContent(layout);
		dialog.setResizable(false);
		dialog.setModal(true);
		dialog.show(getUI().getCurrent(), null, true);
		return;
	}

	}
