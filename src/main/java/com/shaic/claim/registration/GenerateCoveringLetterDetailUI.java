package com.shaic.claim.registration;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.vaadin.addon.cdimvp.ViewComponent;
import org.vaadin.dialogs.ConfirmDialog;

import com.shaic.arch.CrmFlaggedComponents;
import com.shaic.arch.SHAConstants;
import com.shaic.arch.SHAUtils;
import com.shaic.arch.fields.dto.SelectValue;
import com.shaic.arch.view.LoaderPresenter;
import com.shaic.claim.ClaimDto;
import com.shaic.claim.ViewDetails;
import com.shaic.claim.ViewDetails.ViewLevels;
import com.shaic.domain.Claim;
import com.shaic.domain.MasterService;
import com.shaic.domain.PolicyService;
import com.shaic.ims.bpm.claim.BPMClientContext;
import com.shaic.ims.bpm.claim.DBCalculationService;
import com.shaic.ims.carousel.RevisedCashlessCarousel;
import com.shaic.main.navigator.domain.MenuItemBean;
import com.shaic.newcode.wizard.dto.NewIntimationDto;
import com.vaadin.cdi.UIScoped;
import com.vaadin.v7.data.util.BeanItemContainer;
import com.vaadin.server.StreamResource;
import com.vaadin.server.VaadinSession;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.v7.ui.ComboBox;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.FormLayout;
import com.vaadin.v7.ui.HorizontalLayout;
import com.vaadin.v7.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.v7.ui.TextArea;
import com.vaadin.v7.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.v7.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.v7.ui.themes.Reindeer;
import com.vaadin.ui.themes.ValoTheme;

@UIScoped
public class GenerateCoveringLetterDetailUI extends ViewComponent  {

		/**
	 * 
	 */
	private static final long serialVersionUID = -5178558368608211098L;

		@Inject
		private ViewDetails viewDetails;
		
		@EJB
		private PolicyService policyService;

		private Panel mainPanel = new Panel();

		private VerticalLayout mainLayout;

		private FormLayout dynamicFrmLayout;
		
		private ComboBox currencyNameSelect;

		private TextArea registrationRemarksTxta;

		private TextArea suggestRejectionTxta;

		private TextField claimedAmtTxt;

		private VerticalLayout dynamicFieldsLayout;

		private TextField provisionalAmt;

		private Button generatePdfBtn;

		private Button homePageButton;

		private GenerateCoveringLetterSearchTableDto coveringLetterBean;

		private Claim claim = null;

		private ClaimDto claimDto = new ClaimDto();

		private NewIntimationDto newIntimationDto = new NewIntimationDto();

		private VerticalLayout submitBtnLayout;

		private Button submitButton;

		private Button cancelButton;

		private HorizontalLayout submitButtonLayout;

		private BeanItemContainer<SelectValue> currencyMasterContainer;

		@Inject
		private Instance<RevisedCashlessCarousel> carouselInstance;

		private RevisedCashlessCarousel intimationDetailCarousel;

		@EJB
		private MasterService masterService;

		//private HorizontalLayout registerBtnLayout;
		
		@Inject
		private CrmFlaggedComponents crmFlaggedComponents;

		/**
		 * The constructor should first build the main layout, set the composition
		 * root and then do any custom initialization.
		 *
		 * The constructor will not be automatically regenerated by the visual
		 * editor.
		 */

		@PostConstruct
		public void init() {

		}

		public void initView(GenerateCoveringLetterSearchTableDto dto) {

			if (dto != null) {

				newIntimationDto = dto.getClaimDto().getNewIntimationDto();
				coveringLetterBean = dto;
				claimDto = dto.getClaimDto();
				claimDto.setNewIntimationDto(newIntimationDto);
			}
			
			Panel buildMainLayout = buildMainLayout();

			setCompositionRoot(buildMainLayout);

		}
		
		private Panel buildMainLayout() {
			mainLayout = new VerticalLayout();
			generatePdfBtn = new Button("Generate Covering Letter");
			
			submitBtnLayout = new VerticalLayout();
			//registerBtnLayout = new HorizontalLayout();
			submitButtonLayout = new HorizontalLayout();
			Panel registrationPanel = buildRegistrationPanel();
			mainLayout.addComponent(registrationPanel);
			mainLayout.addComponent(intimationDetailCarousel);
			
//			mainLayout.addComponent(viewDetails);
			
//			mainLayout.setComponentAlignment(viewDetails, Alignment.TOP_CENTER);
			
			HorizontalLayout crmIconLayout = SHAUtils.newImageCRM(coveringLetterBean.getPreauthDTO());
			crmIconLayout.setSpacing(false);

			HorizontalLayout iconLayout = new HorizontalLayout(crmIconLayout, viewDetails);
			iconLayout.setComponentAlignment(viewDetails, Alignment.TOP_RIGHT);
			iconLayout.setWidth("100%");

			crmFlaggedComponents.init(coveringLetterBean.getCrcFlaggedReason(), coveringLetterBean.getCrcFlaggedRemark());

			mainLayout.addComponent(iconLayout);
			mainLayout.addComponent(crmFlaggedComponents);
			
			mainLayout.addComponent(buildBasicInfoLayout(claimDto));

			
			generatePdfBtn.addClickListener(new Button.ClickListener() {
				
				@Override
				public void buttonClick(ClickEvent event) {
					fireViewEvent(GenerateCoveringLetterPresenter.GENERATE_LETTER,
							claimDto);
					submitButton.setVisible(true);
					cancelButton.setEnabled(false);
					
				}
			});
			
			
			mainLayout.addComponent(generatePdfBtn);
			mainLayout.setComponentAlignment(generatePdfBtn, Alignment.BOTTOM_RIGHT);
			HorizontalLayout buttonLayout1 = buildSubmitAndCancelBtnLayout();
			submitButtonLayout.addComponent(buttonLayout1);
			submitButtonLayout.setWidth("100%");
			submitButtonLayout.setSpacing(true);
			submitButtonLayout.setMargin(true);
			submitButtonLayout.setComponentAlignment(buttonLayout1,
					Alignment.MIDDLE_CENTER);
			submitBtnLayout.addComponent(submitButtonLayout);

			mainLayout.addComponent(submitBtnLayout);
			mainPanel.setWidth("100%");
			mainPanel.setHeight("620px");
			mainPanel.setContent(mainLayout);

			return mainPanel;
		}

		private HorizontalLayout buildSubmitAndCancelBtnLayout() {

			submitButton = new Button();
			submitButton.setCaption("Home Page");
			//Vaadin8-setImmediate() submitButton.setImmediate(true);
			submitButton.addStyleName(ValoTheme.BUTTON_PRIMARY);
			submitButton.setWidth("-1px");
			submitButton.setHeight("-1px");
//			mainLayout.addComponent(submitButton);
			
				submitButton.addClickListener(new Button.ClickListener() {

					@Override
					public void buttonClick(ClickEvent event) {
						Map<String,Object> outcome = new HashMap<String,Object>();
						String userId = UI.getCurrent().getSession().getAttribute(BPMClientContext.USERID).toString();
						String password = UI.getCurrent().getSession().getAttribute(BPMClientContext.PASSWORD).toString();
						outcome.put(BPMClientContext.USERID, userId);
						outcome.put(BPMClientContext.PASSWORD,password);
//						outcome.put("OUTCOME","APPROVE");
						outcome.put("OUTCOME",SHAConstants.OUTCOME_GENERATE_COVERING_LETTER_END);
						claimDto.setConversionLetter(1l);
						coveringLetterBean.setClaimDto(claimDto);
						outcome.put("Bean",coveringLetterBean);
						//Added for FVR insert.
						outcome.put("fvrDetailsBean",newIntimationDto);
						fireViewEvent(GenerateCoveringLetterPresenter.SET_BPM_OUT_COME,outcome);
						
						
//						fireViewEvent(MenuItemBean.GENERATE_COVERINGLETTER,
//									null);
						
						fireViewEvent(LoaderPresenter.LOAD_URL,MenuItemBean.GENERATE_COVERINGLETTER);
						clearObject();
					}
				});
		
			//Vaadin8-setImmediate() submitButton.setImmediate(true);
			submitButton.setVisible(false);
			cancelButton = new Button();
			cancelButton.setCaption("Cancel");
			//Vaadin8-setImmediate() cancelButton.setImmediate(true);
			cancelButton.setWidth("-1px");
			cancelButton.setHeight("-1px");
			cancelButton.setStyleName(ValoTheme.BUTTON_DANGER);

			cancelButton.addClickListener(new Button.ClickListener() {

					@Override
					public void buttonClick(ClickEvent event) {
						
						
						VaadinSession session = getSession();
						
//						SHAUtils.releaseHumanTask(coveringLetterBean.getUsername(), coveringLetterBean.getPassword(), coveringLetterBean.getTaskNumber(),session);
						releaseWorkFlowTask();
						fireViewEvent(
								GenerateCoveringLetterPresenter.CANCEL_CLAIM_LETTER_GENERATION,
								null);
					}
				});
			

			HorizontalLayout newBtnLayout = new HorizontalLayout(submitButton,
					cancelButton);
			newBtnLayout.setSpacing(true);
			return newBtnLayout;
		}

		private Panel buildRegistrationPanel() {
			// common part: create layout
			Panel registrationPanel = new Panel();
			String caption = "Claim Details";
			HorizontalLayout panelCaption = new HorizontalLayout();

			panelCaption.addStyleName(ValoTheme.PANEL_WELL);
			panelCaption.setSpacing(true);
			panelCaption.setWidth("100%");
			panelCaption.setMargin(new MarginInfo(false, true, false, true));
			Label captionLbl = new Label(caption);
			panelCaption.addComponent(captionLbl);


			//Vaadin8-setImmediate() registrationPanel.setImmediate(false);
			registrationPanel.setWidth("100%");
			registrationPanel.addStyleName("panelHeader");

			intimationDetailCarousel = carouselInstance.get();
			intimationDetailCarousel.init(newIntimationDto, claimDto, "");
			VerticalLayout vlayout = new VerticalLayout();
			vlayout.addComponent(panelCaption);
			vlayout.addComponent(intimationDetailCarousel);
			viewDetails.initView(newIntimationDto.getIntimationId(), ViewLevels.INTIMATION, false,"Generate covering letter");
			vlayout.setStyleName("policygridinfo");
			registrationPanel.setContent(vlayout);

			return registrationPanel;
		}

		public void setCurrencyMaster(BeanItemContainer<SelectValue> currencyMaster) {
			currencyMasterContainer = currencyMaster;
		}

		public void cancelCoveringLetter() {

			ConfirmDialog dialog = ConfirmDialog.show(getUI(), "Confirmation",
					"Are you sure you want to cancel ?", "No",
					"Yes", new ConfirmDialog.Listener() {

						public void onClose(ConfirmDialog dialog) {
							if (dialog.isCanceled() && !dialog.isConfirmed()) {
								// Confirmed to continue
								fireViewEvent(MenuItemBean.GENERATE_COVERINGLETTER,
										null);
								clearObject();
							} else {
								// User did not confirm
							}
						}
					});

			dialog.setStyleName(Reindeer.WINDOW_BLACK);
		}

		private Boolean validateClaimdeAmount() {
			boolean hasError = false;
			
			if (claimedAmtTxt != null
					&& (claimedAmtTxt.getValue() == null
							|| claimedAmtTxt.getValue() == "" || !(Integer
							.valueOf(claimedAmtTxt.getValue()) > 0))) {
				claimedAmtTxt.setValidationVisible(true);
				hasError = true;
			}
			return hasError;
		}

		private FormLayout buildBasicInfoLayout(ClaimDto claimdto) {
			String value = "";
			if (claimdto != null) {

				if (claimdto.getCurrencyId() != null) {
					value = claimdto.getCurrencyId().getValue();
				}

			}

			FormLayout formFieldsLayout = new FormLayout();

			
			if(claimDto.getClaimType() != null && claimDto.getClaimType().getValue() != null && StringUtils.containsIgnoreCase(claimDto.getClaimType().getValue(), "cashless"))
			{
				TextField claimType = new TextField("Claim Status");
				claimType.setValue(claimDto.getClaimType() != null && claimDto.getClaimType().getValue() != null ? claimDto.getClaimType().getValue() : "");
				formFieldsLayout.addComponent(claimType);
			}
			
			
			
			
			currencyNameSelect = new ComboBox();
			currencyNameSelect.setCaption("Currency Name");
			currencyNameSelect.setWidth("160px");
			currencyNameSelect.setHeight("-1px");
			currencyNameSelect.addItem(value);
			currencyNameSelect.setNullSelectionAllowed(false);
			formFieldsLayout.addComponent(currencyNameSelect);
			currencyNameSelect.setValue(currencyNameSelect.getContainerDataSource()
					.getItemIds().toArray()[0]);
			currencyNameSelect.setReadOnly(true);

			claimedAmtTxt = new TextField();
			claimedAmtTxt.setCaption("Amount Claimed *   " + value);
			claimedAmtTxt.setWidth("-1px");
			claimedAmtTxt.setHeight("-1px");
			if (claimdto != null) {
				claimedAmtTxt.setValue(claimdto.getClaimedAmount() != null ? claimdto
						.getClaimedAmount().toString() : "");
			} else {
				claimedAmtTxt.setValue("0");
			}

			claimedAmtTxt.setReadOnly(true);
			claimedAmtTxt.setStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
			formFieldsLayout.addComponent(claimedAmtTxt);

			provisionalAmt = new TextField();
			provisionalAmt.setCaption("Provision Amount");
			provisionalAmt.setWidth("-1px");
			provisionalAmt.setHeight("-1px");
			if (claimDto != null) {
				provisionalAmt.setValue(claimDto.getProvisionAmount() != null ? claimDto
						.getProvisionAmount().toString() : "");
			}
			provisionalAmt.setReadOnly(true);
			provisionalAmt.setStyleName(ValoTheme.TEXTFIELD_BORDERLESS);
			formFieldsLayout.addComponent(provisionalAmt);

			
			if(claimDto.getClaimType() != null && claimDto.getClaimType().getValue() != null && StringUtils.containsIgnoreCase(claimDto.getClaimType().getValue(), "cashless"))
			{
				TextField conversionReason = new TextField("Reason for Conversion *");
				conversionReason.setValue(claimDto.getConversionReason() != null && claimDto.getConversionReason().getValue() != null ? claimDto.getConversionReason().getValue() : "");
				formFieldsLayout.addComponent(conversionReason);
			}
			
			

			return formFieldsLayout;
		}

		public void openPdfFileInWindow(final String filepath) {
			
			Window window = new Window();
			// ((VerticalLayout) window.getContent()).setSizeFull();
			window.setResizable(true);
			window.setCaption("Claim Form Covering Letter PDF");
			window.setWidth("800");
			window.setHeight("600");
			window.setModal(true);
			window.center();

			Path p = Paths.get(filepath);
			String fileName = p.getFileName().toString();
			StreamResource.StreamSource s = SHAUtils.getStreamResource(filepath);

			/*StreamResource.StreamSource s = new StreamResource.StreamSource() {

				public FileInputStream getStream() {
					try {

						File f = new File(filepath);
						FileInputStream fis = new FileInputStream(f);
						return fis;

					} catch (Exception e) {
						e.printStackTrace();
						return null;
					}
				}
			};*/

			StreamResource r = new StreamResource(s, fileName);
			Embedded e = new Embedded();
			e.setSizeFull();
			e.setType(Embedded.TYPE_BROWSER);
			r.setMIMEType("application/pdf");
			e.setSource(r);
			SHAUtils.closeStreamResource(s);
			window.setContent(e);
			UI.getCurrent().addWindow(window);
		}
		public void releaseWorkFlowTask(){
			Long  wrkFlowKey= (Long)getSession().getAttribute(SHAConstants.WK_KEY);
	 		
	 		if(wrkFlowKey != null){
	 			DBCalculationService dbService = new DBCalculationService();
	 			dbService.callUnlockProcedure(wrkFlowKey);
	 			getSession().setAttribute(SHAConstants.WK_KEY, null);
	 		}
		};
		
		public void clearObject(){
			coveringLetterBean = null;
			if(mainLayout != null){
				mainLayout.removeAllComponents();
			}
			currencyMasterContainer = null;
			policyService = null;
			masterService = null;
		}
}
