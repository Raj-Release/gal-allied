package com.shaic.main.navigator.ui;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;

import javax.ejb.EJB;
import javax.enterprise.event.Observes;
import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.vaadin.addon.cdimvp.AbstractMVPPresenter;
import org.vaadin.addon.cdimvp.AbstractMVPPresenter.ViewInterface;
import org.vaadin.addon.cdimvp.CDIEvent;
import org.vaadin.addon.cdimvp.ParameterDTO;
import org.vaadin.dialogs.ConfirmDialog;

import com.alert.util.ButtonOption;
import com.alert.util.ButtonType;
import com.alert.util.MessageBox;
import com.galaxyalert.utils.GalaxyAlertBox;
import com.galaxyalert.utils.GalaxyButtonTypesEnum;
import com.shaic.arch.SHAConstants;
import com.shaic.arch.SHAFileUtils;
import com.shaic.arch.SHAUtils;
import com.shaic.arch.fields.dto.MagazineDTO;
import com.shaic.arch.fields.dto.SearchScreenValidationTableDTO;
import com.shaic.arch.fields.dto.SelectValue;
import com.shaic.arch.fields.dto.SpecialSelectValue;
import com.shaic.arch.table.SearchScreenValidationTable;
import com.shaic.arch.table.SearchScreenValidationTableForCashless;
import com.shaic.arch.test.TestComponentView;
//import com.shaic.arch.utils.ExportToExcel;
import com.shaic.arch.view.LoaderPresenter;
import com.shaic.arch.view.LoaderView;
import com.shaic.branchmanagerfeedback.BranchManagerFeedbackService;
import com.shaic.branchmanagerfeedback.BranchManagerFeedbackView;
import com.shaic.claim.ClaimDto;
import com.shaic.claim.ClaimMapper;
import com.shaic.claim.DMSDocumentDetailsDTO;
import com.shaic.claim.MasterGST;
import com.shaic.claim.OPClaimMapper;
import com.shaic.claim.ReimbursementDto;
import com.shaic.claim.ReimbursementRejectionDetailsDto;
import com.shaic.claim.ReimbursementRejectionDto;
import com.shaic.claim.aadhar.pages.UpdateAadharDetailsView;
import com.shaic.claim.aadhar.search.SearchUpdateAadharTableDTO;
import com.shaic.claim.aadhar.search.SearchUpdateAadharView;
import com.shaic.claim.adviseonped.AdviseOnPEDView;
import com.shaic.claim.adviseonped.search.SearchAdviseOnPEDTableDTO;
import com.shaic.claim.adviseonped.search.SearchAdviseOnPEDView;
import com.shaic.claim.allowghiregistration.GhiAllowClaimRegistrationView;
import com.shaic.claim.allowghiregistration.SearchGhiAllowClaimRegisterView;
import com.shaic.claim.bedphoto.SearchBedPhoto;
import com.shaic.claim.bedphoto.SearchBedPhotoTableDTO;
import com.shaic.claim.bedphoto.UploadBedPhotoView;
import com.shaic.claim.bulkconvertreimb.search.SearchBulkConvertReimbService;
//import com.shaic.claim.cashlessprocess.downsize.search.SearchDownsizeCashLessProcessView;
import com.shaic.claim.cashlessprocess.downsize.wizard.DownsizePreauthWizard;
import com.shaic.claim.cashlessprocess.downsizeRequest.page.DownsizePreauthRequestWizard;
//import com.shaic.claim.cashlessprocess.downsizeRequest.search.SearchDownsizeRequestView;
import com.shaic.claim.cashlessprocess.withdrawpreauth.SearchWithdrawCashLessProcessTableDTO;
//import com.shaic.claim.cashlessprocess.withdrawpreauth.SearchWithdrawCashLessProcessView;
import com.shaic.claim.cashlessprocess.withdrawpreauthpostprocess.SearchWithdrawCashLessPostProcessTableDTO;
//import com.shaic.claim.cashlessprocess.withdrawpreauthpostprocess.SearchWithdrawCashLessPostProcessView;
import com.shaic.claim.cashlessprocess.withdrawpreauthpostprocess.WithDrawPostProcessBillDetailsDTO;
import com.shaic.claim.claimhistory.view.ViewClaimHistoryService;
//import com.shaic.claim.clearcashless.searchcashless.SearchCancelCashlessView;
import com.shaic.claim.coinsurance.view.CoInsuranceTableDTO;
import com.shaic.claim.common.NursingChargesMatchingDTO;
import com.shaic.claim.common.RoomRentMatchingDTO;
import com.shaic.claim.corpbuffer.allocation.search.AllocateCorpBufferTableDTO;
import com.shaic.claim.corpbuffer.allocation.search.AllocateCorpBufferView;
import com.shaic.claim.corpbuffer.allocation.wizard.AllocateCorpBufferDetailDTO;
import com.shaic.claim.corpbuffer.allocation.wizard.AllocateCorpBufferWizard;
import com.shaic.claim.cpuautoallocation.SearchCpuAutoAllocationView;
import com.shaic.claim.cpuskipzmr.SkipZMRView;
import com.shaic.claim.cvc.CVCPageView;
import com.shaic.claim.cvc.SearchCVCFormDTO;
import com.shaic.claim.cvc.SearchCVCTableDTO;
import com.shaic.claim.cvc.SearchCVCView;
import com.shaic.claim.cvc.auditaction.CVCAuditActionPageView;
import com.shaic.claim.cvc.auditaction.SearchCVCAuditActionService;
import com.shaic.claim.cvc.auditaction.SearchCVCAuditActionTableDTO;
import com.shaic.claim.cvc.auditaction.SearchCVCAuditActionView;
import com.shaic.claim.cvc.auditqueryreplyprocessing.cashless.SearchCVCAuditClsQryTableDTO;
import com.shaic.claim.cvc.auditreport.ClaimAuditReportView;
import com.shaic.claim.cvc.postprocess.PostProcessClaimCVCAuditView;
import com.shaic.claim.cvc.postprocess.SearchPostProcessCVCView;
import com.shaic.claim.doctorinternalnotes.InternalNotesPageView;
import com.shaic.claim.doctorinternalnotes.SearchInternalNotesView;
import com.shaic.claim.edithospitalInfo.search.SearchEditHospitalDetailsTableDTO;
import com.shaic.claim.edithospitalInfo.search.SearchEditHospitalDetailsView;
import com.shaic.claim.enhacement.table.PreviousPreAuthService;
import com.shaic.claim.enhacement.table.PreviousPreAuthTableDTO;
//import com.shaic.claim.enhancement.search.SearchEnhancementView;
import com.shaic.claim.enhancements.preauth.wizard.PreauthEnhancementWizard;
import com.shaic.claim.enhancements.premedical.wizard.PremedicalEnhancementWizard;
import com.shaic.claim.fieldVisitPage.FieldVisitDTO;
import com.shaic.claim.fieldVisitPage.FieldVisitPageView;
import com.shaic.claim.fieldvisit.search.SearchFieldVisitTableDTO;
import com.shaic.claim.fieldvisit.search.SearchFieldVisitView;
import com.shaic.claim.fileUpload.CoordinatorService;
import com.shaic.claim.fileUpload.FileUploadView;
import com.shaic.claim.fss.filedetail.ProcessDataEntryService;
import com.shaic.claim.fss.filedetail.ProcessDataEntryWizardViewImpl;
import com.shaic.claim.fss.filedetailsreport.FileDetailsReportView;
import com.shaic.claim.fss.searchfile.SearchDataEntryMapper;
import com.shaic.claim.fss.searchfile.SearchDataEntryTableDTO;
import com.shaic.claim.fss.searchfile.SearchDataEntryView;
import com.shaic.claim.fvrdetails.view.ViewFVRDTO;
import com.shaic.claim.fvrdetails.view.ViewFVRService;
import com.shaic.claim.fvrgrading.page.FvrReportGradingPageDto;
import com.shaic.claim.fvrgrading.page.FvrReportGradingPageView;
import com.shaic.claim.fvrgrading.search.SearchFvrReportGradingTableDto;
import com.shaic.claim.fvrgrading.search.SearchFvrReportGradingView;
import com.shaic.claim.hospitalCommunication.HospitalView;
import com.shaic.claim.hospitalscoring.HospitalScoringDetailsView;
import com.shaic.claim.icdSublimitMapping.IcdSubLimitMappingService;
import com.shaic.claim.intimation.create.dto.HospitalDto;
import com.shaic.claim.intimation.create.dto.PolicyDto;
import com.shaic.claim.intimation.search.SearchIntimationView;
import com.shaic.claim.intimation.unlockbpmntodb.SearchUnlockIntimationDBView;
import com.shaic.claim.intimation.viewdetails.search.SearchViewDetailView;
import com.shaic.claim.leagalbilling.LegalBillingDTO;
import com.shaic.claim.leagalbilling.LegalTaxDeduction;
import com.shaic.claim.leagalbilling.LegalTaxDeductionMapper;
import com.shaic.claim.legal.home.SearchLegalHomeView;
import com.shaic.claim.legal.processconsumerforum.page.advocatefee.SearchProcessAdvocateFeeView;
import com.shaic.claim.legal.processconsumerforum.page.advocatenotice.SearchProcessAdvocateNoticeView;
import com.shaic.claim.legal.processconsumerforum.page.consumerforum.SearchProcessConsumerForumView;
import com.shaic.claim.legal.processconsumerforum.page.ombudsman.SearchProcessOmbudsmanView;
import com.shaic.claim.medical.opinion.OpinionValidationView;
import com.shaic.claim.medical.opinion.RecMarketingEscalationView;
import com.shaic.claim.medical.opinion.RecordMarkEscDTO;
import com.shaic.claim.medical.opinion.SearchRecordMarkEscTableDTO;
import com.shaic.claim.medical.opinion.SearchRecordMarkEscView;
import com.shaic.claim.misc.updatesublimit.SearchUpdateSublimitTableDTO;
import com.shaic.claim.misc.updatesublimit.SearchUpdateSublimitView;
import com.shaic.claim.misc.updatesublimit.wizard.UpdateSublimitWizard;
//import com.shaic.claim.negotiation.SearchProcessNegotiationTableDTO;
//import com.shaic.claim.negotiation.SearchProcessNegotiationView;
import com.shaic.claim.omp.reports.outstandingreport.OmpOutstandingReportView;
import com.shaic.claim.omp.reports.statusreport.OmpStatusWiseReportView;
import com.shaic.claim.omppaymentletterbulk.SearchPrintPaymentBulkView;
import com.shaic.claim.outpatient.createbatchop.CreateBatchOpView;
import com.shaic.claim.outpatient.processOP.wizard.ProcessOPClaimWizard;
import com.shaic.claim.outpatient.processOPpages.BenefitsAvailedDTO;
import com.shaic.claim.outpatient.registerclaim.dto.OutPatientDTO;
import com.shaic.claim.outpatient.registerclaim.mapper.OutpatientMapper;
import com.shaic.claim.outpatient.registerclaim.wizard.OPRegisterClaimWizard;
import com.shaic.claim.pancard.page.UpdatePanCardReportView;
import com.shaic.claim.pancard.search.pages.SearchUploadPanCardTableDTO;
import com.shaic.claim.pancard.search.pages.SearchUploadPanCardView;
import com.shaic.claim.pcc.beans.PCCRequest;
import com.shaic.claim.pcc.hrmp.HRMPWizardView;
import com.shaic.claim.pcc.hrmp.SearchHRMPTableDTO;
import com.shaic.claim.pcc.hrmp.SearchHRMPView;
import com.shaic.claim.ped.outsideprocess.InitiatePedView;
import com.shaic.claim.pedquery.PEDQueryDTO;
import com.shaic.claim.pedquery.PEDQueryService;
import com.shaic.claim.pedquery.PEDQueryView;
import com.shaic.claim.pedquery.search.SearchPEDQueryTableDTO;
//import com.shaic.claim.pedquery.search.SearchPEDQueryView;
import com.shaic.claim.pedrequest.approve.PEDRequestDetailsApproveView;
import com.shaic.claim.pedrequest.approve.bancspedQuery.BancsSearchPEDRequestApproveTableDTO;
import com.shaic.claim.pedrequest.approve.bancspedQuery.BancsSearchPEDRequestApproveView;
import com.shaic.claim.pedrequest.approve.bancspedrequest.BancsPEDRequestDetailsApproveView;
import com.shaic.claim.pedrequest.approve.search.SearchPEDRequestApproveFormDTO;
import com.shaic.claim.pedrequest.approve.search.SearchPEDRequestApproveTableDTO;
import com.shaic.claim.pedrequest.approve.search.SearchPEDRequestApproveView;
import com.shaic.claim.pedrequest.initiateped.SearchPEDInitiateTableDTO;
import com.shaic.claim.pedrequest.initiateped.SearchPEDInitiateView;
import com.shaic.claim.pedrequest.process.PEDRequestDetailsProcessView;
import com.shaic.claim.pedrequest.process.search.SearchPEDRequestProcessTableDTO;
import com.shaic.claim.pedrequest.process.search.SearchPEDRequestProcessView;
import com.shaic.claim.pedrequest.teamlead.PEDRequestDetailsTeamLeadView;
import com.shaic.claim.pedrequest.teamlead.search.SearchPEDRequestTeamLeadView;
import com.shaic.claim.pincodemapping.SearchPinCodeView;
import com.shaic.claim.policy.search.ui.NewSearchPolicyView;
import com.shaic.claim.policy.search.ui.PremEndorsementDetails;
import com.shaic.claim.policy.search.ui.PremInsuredDetails;
import com.shaic.claim.policy.search.ui.PremInsuredNomineeDetails;
import com.shaic.claim.policy.search.ui.PremPolicyDetails;
import com.shaic.claim.policy.search.ui.PremPreviousPolicyDetails;
import com.shaic.claim.policy.search.ui.PremiaService;
import com.shaic.claim.policy.search.ui.PremiaToPolicyMapper;
import com.shaic.claim.policy.search.ui.SearchPolicyView;
import com.shaic.claim.policy.search.ui.opsearch.OPExpiredPolicyClaimView;
import com.shaic.claim.policy.search.ui.opsearch.OPRegisterClaimPolicyView;
import com.shaic.claim.policy.search.ui.opsearch.SearchProcessOPClaimRequestTableDTO;
import com.shaic.claim.policy.search.ui.opsearch.SearchProcessOPClaimRequestView;
import com.shaic.claim.policy.search.ui.opsearch.SearchSettlementLetterProcessOPClaimRequestView;
import com.shaic.claim.policy.search.ui.premia.PremPolicy;
import com.shaic.claim.preauth.PreauthWizard;
import com.shaic.claim.preauth.dto.ResidualAmountDTO;
import com.shaic.claim.preauth.mapper.PreauthMapper;
//import com.shaic.claim.preauth.negotiation.SearchUncheckNegotiationView;
import com.shaic.claim.preauth.search.SearchPreauthView;
//import com.shaic.claim.preauth.search.autoallocation.SearchPreauthAutoAllocationView;
import com.shaic.claim.preauth.view.DiagnosisService;
import com.shaic.claim.preauth.wizard.dto.CoordinatorDTO;
import com.shaic.claim.preauth.wizard.dto.DiagnosisDetailsTableDTO;
import com.shaic.claim.preauth.wizard.dto.FvrGradingDetailsDTO;
import com.shaic.claim.preauth.wizard.dto.ImplantDetailsDTO;
import com.shaic.claim.preauth.wizard.dto.OldPedEndorsementDTO;
import com.shaic.claim.preauth.wizard.dto.PedDetailsTableDTO;
import com.shaic.claim.preauth.wizard.dto.PreauthDTO;
import com.shaic.claim.preauth.wizard.dto.PreauthDataExtaractionDTO;
import com.shaic.claim.preauth.wizard.dto.ProcedureDTO;
import com.shaic.claim.preauth.wizard.dto.SearchPreauthFormDTO;
import com.shaic.claim.preauth.wizard.dto.SearchPreauthTableDTO;
import com.shaic.claim.preauth.wizard.dto.SpecialityDTO;
import com.shaic.claim.preauth.wizard.dto.TreatingDoctorDTO;
import com.shaic.claim.preauth.wizard.dto.UpdateOtherClaimDetailDTO;
import com.shaic.claim.premedical.dto.OtherBenefitsTableDto;
import com.shaic.claim.premedical.dto.PreviousClaimsTableDTO;
import com.shaic.claim.premedical.mapper.PreMedicalMapper;
import com.shaic.claim.premedical.search.ProcessPreMedicalService;
import com.shaic.claim.premedical.search.ProcessPreMedicalTableDTO;
//import com.shaic.claim.premedical.search.ProcessPreMedicalView;
import com.shaic.claim.premedical.wizard.PreMedicalPreauthWizard;
import com.shaic.claim.process.premedical.enhancement.search.SearchPreMedicalProcessingEnhancementTableDTO;
//import com.shaic.claim.process.premedical.enhancement.search.SearchPreMedicalProcessingEnhancementView;
//import com.shaic.claim.process64VB.search.SearchProcessVBView;
import com.shaic.claim.process64VB.wizard.pages.Process64VBview;
import com.shaic.claim.processRejectionPage.ProcessRejectionWizard;
import com.shaic.claim.processrejection.search.SearchProcessRejectionTableDTO;
//import com.shaic.claim.processrejection.search.SearchProcessRejectionView;
import com.shaic.claim.processtranslation.search.SearchProcessTranslationTableDTO;
import com.shaic.claim.processtranslation.search.SearchProcessTranslationView;
import com.shaic.claim.processtranslation.search.SearchProcessTranslationViewR3;
import com.shaic.claim.reassignfieldVisitPage.ReAssignFieldVisitView;
import com.shaic.claim.reassignfieldvisit.search.SearchReAssignFieldVisitTableDTO;
import com.shaic.claim.reassignfieldvisit.search.SearchReAssignFieldVisitView;
import com.shaic.claim.registration.ClaimRegistrationView;
import com.shaic.claim.registration.GenerateLetterView;
import com.shaic.claim.registration.SearchClaimRegisterView;
import com.shaic.claim.registration.SearchClaimRegistrationPresenter;
import com.shaic.claim.registration.SearchClaimRegistrationTableDto;
import com.shaic.claim.registration.ackhoscomm.search.AbstractSearchDTO;
import com.shaic.claim.registration.ackhoscomm.search.SearchAcknowledgeHospitalCommunicationTableDTO;
import com.shaic.claim.registration.ackhoscomm.search.SearchAcknowledgeHospitalCommunicationView;
import com.shaic.claim.registration.convertClaim.search.SearchConvertClaimTableDto;
import com.shaic.claim.registration.convertClaimPage.ConvertClaimPageView;
import com.shaic.claim.registration.convertClaimToReimbursement.convertReimbursementPage.ConvertReimbursementPageView;
import com.shaic.claim.registration.convertclaimcashless.SearchConverClaimCashlessTableDTO;
import com.shaic.claim.registration.convertclaimcashless.SearchConverClaimCashlessView;
import com.shaic.claim.registration.convertclaimcashlesspage.ConvertClaimCashlessPageView;
import com.shaic.claim.registration.updateHospitalDetails.UpdateHospitalDetailsView;
import com.shaic.claim.reimbursement.billing.benefits.wizard.pages.ProcessClaimRequestBenefitsWizard;
import com.shaic.claim.reimbursement.billing.benefits.wizard.service.ProcessClaimRequestBenefitsService;
import com.shaic.claim.reimbursement.billing.dto.AddOnBenefitsDTO;
import com.shaic.claim.reimbursement.billing.dto.HopitalizationCalulationDetailsDTO;
import com.shaic.claim.reimbursement.billing.dto.OtherInsHospSettlementDetailsDTO;
import com.shaic.claim.reimbursement.billing.dto.OtherInsPostHospSettlementDetailsDTO;
import com.shaic.claim.reimbursement.billing.dto.OtherInsPreHospSettlementDetailsDTO;
import com.shaic.claim.reimbursement.billing.dto.PatientCareDTO;
import com.shaic.claim.reimbursement.billing.dto.PostHopitalizationDetailsDTO;
import com.shaic.claim.reimbursement.billing.dto.PreHopitalizationDetailsDTO;
import com.shaic.claim.reimbursement.billing.wizard.BillingWizard;
import com.shaic.claim.reimbursement.createandsearchlot.CreateAndSearchLotTableDTO;
import com.shaic.claim.reimbursement.createandsearchlot.CreateAndSearchLotView;
import com.shaic.claim.reimbursement.dto.OtherClaimDiagnosisDTO;
import com.shaic.claim.reimbursement.dto.QuantumReductionDetailsDTO;
import com.shaic.claim.reimbursement.dto.RRCDTO;
import com.shaic.claim.reimbursement.dto.ReimbursementQueryDto;
import com.shaic.claim.reimbursement.dto.ZonalReviewUpdateHospitalDetailsDTO;
import com.shaic.claim.reimbursement.financialapproval.wizard.FinancialWizard;
import com.shaic.claim.reimbursement.medicalapproval.processclaimrequest.dto.MedicalVerificationDTO;
import com.shaic.claim.reimbursement.medicalapproval.processclaimrequest.dto.NewFVRGradingDTO;
import com.shaic.claim.reimbursement.medicalapproval.processclaimrequest.dto.TreatmentQualityVerificationDTO;
import com.shaic.claim.reimbursement.medicalapproval.processclaimrequest.wizard.ClaimRequestWizard;
import com.shaic.claim.reimbursement.medicalapproval.zonalMedicalreview.mapper.ZonalMedicalReviewMapper;
import com.shaic.claim.reimbursement.medicalapproval.zonalMedicalreview.wizard.MedicalApprovalZonalReviewWizard;
import com.shaic.claim.reimbursement.opscreen.OpView;
import com.shaic.claim.reimbursement.paymentprocesscpu.PaymentProcessCpuService;
import com.shaic.claim.reimbursement.paymentprocesscpu.PaymentProcessCpuTableDTO;
import com.shaic.claim.reimbursement.paymentprocesscpu.PaymentProcessCpuView;
import com.shaic.claim.reimbursement.paymentprocesscpuview.PaymentProcessCpuPageDTO;
import com.shaic.claim.reimbursement.paymentprocesscpuview.PaymentProcessCpuPageView;
import com.shaic.claim.reimbursement.processDraftRejectionLetterDetail.ClaimRejectionDto;
import com.shaic.claim.reimbursement.processDraftRejectionLetterDetail.DecideOnRejectionWizardViewImpl;
import com.shaic.claim.reimbursement.processdraftquery.ClaimQueryDto;
import com.shaic.claim.reimbursement.processdraftquery.DecideOnProcessDraftQueryWizardViewImpl;
import com.shaic.claim.reimbursement.rawanalysis.ProcessRawRequestWizard;
import com.shaic.claim.reimbursement.rawanalysis.RawInitiatedRequestDTO;
import com.shaic.claim.reimbursement.rawanalysis.SearchProcessRawRequestTableDto;
import com.shaic.claim.reimbursement.rawanalysis.SearchProcessRawRequestView;
import com.shaic.claim.reimbursement.rrc.detailsPage.ModifyRRCRequestDataExtractionWizard;
import com.shaic.claim.reimbursement.rrc.detailsPage.ProcessRRCRequestDataExtractionWizard;
import com.shaic.claim.reimbursement.rrc.detailsPage.ReviewRRCRequestDataExtractionWizard;
import com.shaic.claim.reimbursement.rrc.services.InitiateRRCRequestTableDTO;
import com.shaic.claim.reimbursement.rrc.services.InitiateRRCRequestView;
import com.shaic.claim.reimbursement.rrc.services.InitiateRRCRequestWizardView;
import com.shaic.claim.reimbursement.rrc.services.ProcessRRCRequestService;
import com.shaic.claim.reimbursement.rrc.services.ReviewRRCRequestService;
import com.shaic.claim.reimbursement.rrc.services.SearchModifyRRCRequestTableDTO;
import com.shaic.claim.reimbursement.rrc.services.SearchModifyRRCRequestView;
import com.shaic.claim.reimbursement.rrc.services.SearchProcessRRCRequestTableDTO;
import com.shaic.claim.reimbursement.rrc.services.SearchProcessRRCRequestView;
import com.shaic.claim.reimbursement.rrc.services.SearchRRCRequestTable;
import com.shaic.claim.reimbursement.rrc.services.SearchRRCRequestTableDTO;
import com.shaic.claim.reimbursement.rrc.services.SearchRRCRequestView;
import com.shaic.claim.reimbursement.rrc.services.SearchRRCStatusTable;
import com.shaic.claim.reimbursement.rrc.services.SearchRRCStatusTableDTO;
import com.shaic.claim.reimbursement.rrc.services.SearchRRCStatusView;
import com.shaic.claim.reimbursement.rrc.services.SearchReviewRRCRequestTableDTO;
import com.shaic.claim.reimbursement.rrc.services.SearchReviewRRCRequestView;
import com.shaic.claim.reimbursement.searchuploaddocuments.SearchUploadDocumentsService;
import com.shaic.claim.reimbursement.searchuploaddocuments.SearchUploadDocumentsSubmitService;
import com.shaic.claim.reimbursement.searchuploaddocuments.SearchUploadDocumentsTableDTO;
import com.shaic.claim.reimbursement.searchuploaddocuments.SearchUploadDocumentsView;
import com.shaic.claim.reimbursement.searchuploaddocuments.SearchUploadDocumentsWizardView;
import com.shaic.claim.reimbursement.searchuploaddocumentsforacknotreceived.UploadDocumentsForAckNotReceivedPageTableDTO;
import com.shaic.claim.reimbursement.searchuploaddocumentsforacknotreceived.UploadDocumentsForAckNotReceivedService;
import com.shaic.claim.reimbursement.searchuploaddocumentsforacknotreceived.UploadDocumentsForAckNotReceivedSubmitService;
import com.shaic.claim.reimbursement.searchuploaddocumentsforacknotreceived.UploadDocumentsForAckNotReceivedTableDTO;
import com.shaic.claim.reimbursement.searchuploaddocumentsforacknotreceived.UploadDocumentsForAckNotReceivedView;
import com.shaic.claim.reimbursement.searchuploaddocumentsforacknotreceived.UploadDocumentsForAckNotReceivedWizardView;
import com.shaic.claim.reimbursement.submitSpecialist.SubmitSpecialistAdviseView;
import com.shaic.claim.reimbursement.talktalktalk.InitiateTalkTalkTalkDTO;
import com.shaic.claim.reimbursement.talktalktalk.InitiateTalkTalkTalkService;
import com.shaic.claim.reimbursement.talktalktalk.InitiateTalkTalkTalkTableDTO;
import com.shaic.claim.reimbursement.talktalktalk.InitiateTalkTalkTalkView;
import com.shaic.claim.reimbursement.talktalktalk.InitiateTalkTalkTalkWizardView;
import com.shaic.claim.reports.SearchClaimPolicyReportView;
import com.shaic.claim.reports.ExecutiveStatusReport.ExecutiveStatusDetailReportView;
import com.shaic.claim.reports.ackwithoutrodreport.AckWithoutRodReportView;
import com.shaic.claim.reports.agentbrokerreport.AgentBrokerReportView;
import com.shaic.claim.reports.autoClosureBatch.AutoClosureBatchView;
import com.shaic.claim.reports.autoallocationaancelreport.AutoAllocationCancelReportView;
import com.shaic.claim.reports.automationdashboard.AutomationDashboardView;
import com.shaic.claim.reports.billreceivedreport.BillReceivedReportService;
import com.shaic.claim.reports.billreceivedreport.BillReceivedReportView;
import com.shaic.claim.reports.callcenterDashBoard.CallcenterDashBoardReportView;
import com.shaic.claim.reports.claimsdailyreportnew.ClaimsDailyReportView;
import com.shaic.claim.reports.claimstatusreportnew.ClaimsStatusReportView;
import com.shaic.claim.reports.cpuwisePreauthReport.CPUwisePreauthReportView;
import com.shaic.claim.reports.cpuwiseperformancedetail.CpuWisePerformanceReportView;
import com.shaic.claim.reports.dailyreport.DailyReportView;
import com.shaic.claim.reports.executivesummaryreqort.ExecutiveStatusSummaryReportView;
import com.shaic.claim.reports.fraudanalysis.FraudReportView;
import com.shaic.claim.reports.fvrassignmentreport.FVRAssignmentReportView;
import com.shaic.claim.reports.gmcdailyreport.GmcDailyReportView;
import com.shaic.claim.reports.helpdeskstatusreport.HelpDeskStatusReportView;
import com.shaic.claim.reports.hospitalintimationstatus.HospitalIntimationStatusReportView;
import com.shaic.claim.reports.hospitalwisereport.HospitalWiseReportView;
import com.shaic.claim.reports.intimatedRiskDetailsReport.IntimatedRiskDetailsReportView;
import com.shaic.claim.reports.intimationAlternateCPUReport.IntimationAlternateCPUwiseReportView;
import com.shaic.claim.reports.investigationassignedreport.InvAssignReportView;
import com.shaic.claim.reports.marketingEscalationReport.MarketingEscalationReportView;
import com.shaic.claim.reports.medicalAuditCashlessIssueanceReport.MedicalAuditCashlessIssuanceReportView;
import com.shaic.claim.reports.medicalAuditClaimStatusReport.MedicalAuditClaimStatusReportView;
import com.shaic.claim.reports.medicalmailreport.MedicalMailReportView;
import com.shaic.claim.reports.negotiationreport.NegotiationAmountDetails;
import com.shaic.claim.reports.negotiationreport.NegotiationReportView;
import com.shaic.claim.reports.negotiationreport.SearchUpdateNegotiationView;
import com.shaic.claim.reports.notAdheringToANHReport.SearchNotAdheringToANHReportView;
import com.shaic.claim.reports.opclaimreport.OPClaimReportView;
import com.shaic.claim.reports.opinionvalidationreport.OpinionValidationReportView;
import com.shaic.claim.reports.paymentbatchreport.PaymentBatchReportView;
import com.shaic.claim.reports.paymentpendingdashboard.PaymentPendingDashboardView;
import com.shaic.claim.reports.paymentprocess.PaymentProcessView;
import com.shaic.claim.reports.plannedAdmissionReport.PlannedAdmissionReportView;
import com.shaic.claim.reports.preauthFormDocReport.SearchPreauthFormDocReportView;
import com.shaic.claim.reports.productivityreport.ProductivityReportView;
import com.shaic.claim.reports.shadowProvision.SearchShowdowView;
import com.shaic.claim.reports.tatreport.TATReportView;
import com.shaic.claim.rod.wizard.cancelAcknowledgement.CancelAcknowledgementWizardView;
import com.shaic.claim.rod.wizard.dto.BillEntryDetailsDTO;
import com.shaic.claim.rod.wizard.dto.DocumentCheckListDTO;
import com.shaic.claim.rod.wizard.dto.DocumentDetailsDTO;
import com.shaic.claim.rod.wizard.dto.PreviousAccountDetailsDTO;
import com.shaic.claim.rod.wizard.dto.RODQueryDetailsDTO;
import com.shaic.claim.rod.wizard.dto.ReceiptOfDocumentsDTO;
import com.shaic.claim.rod.wizard.dto.ReconsiderRODRequestTableDTO;
import com.shaic.claim.rod.wizard.dto.UploadDocumentDTO;
import com.shaic.claim.rod.wizard.pages.AcknowledgeDocReceivedWizard;
import com.shaic.claim.rod.wizard.pages.BillEntryWizardView;
import com.shaic.claim.rod.wizard.pages.CreateOnlineRODWizardView;
import com.shaic.claim.rod.wizard.pages.CreateRODWizardView;
import com.shaic.claim.rod.wizard.pages.HopsitalCashBenefitDTO;
import com.shaic.claim.rod.wizard.service.AcknowledgementDocumentsReceivedService;
import com.shaic.claim.rod.wizard.service.CreateRODService;
import com.shaic.claim.search.SearchClaimView;
import com.shaic.claim.search.specialist.search.SubmitSpecialistFormDTO;
import com.shaic.claim.search.specialist.search.SubmitSpecialistTableDTO;
import com.shaic.claim.search.specialist.search.SubmitSpecialistView;
import com.shaic.claim.settlementpullback.SettlementPullBackView;
import com.shaic.claim.settlementpullback.dto.SearchSettlementPullBackDTO;
import com.shaic.claim.settlementpullback.searchbatchpendingpullback.LotPullBackPageView;
import com.shaic.claim.settlementpullback.searchbatchpendingpullback.SearchLotPullBackTableDTO;
import com.shaic.claim.settlementpullback.searchbatchpendingpullback.SearchLotPullBackView;
import com.shaic.claim.settlementpullback.searchsettlementpullback.SearchSettlementPullBackView;
import com.shaic.claim.specialist.SpecialistViewImpl;
import com.shaic.claim.submitSpecialist.SubmitSpecialistPageView;
import com.shaic.claim.userproduct.document.ProductAndDocumentTypeDTO;
import com.shaic.claim.userproduct.document.ProductAndDocumentTypeView;
import com.shaic.claim.userproduct.document.UserProductMappingService;
import com.shaic.claim.userproduct.document.search.SearchDoctorDetailsTableDTO;
import com.shaic.claim.userproduct.document.search.SearchDoctorDetailsView;
import com.shaic.claim.userproduct.document.search.UserACtivationView;
import com.shaic.claim.userproduct.document.search.UserMagmtService;
import com.shaic.claim.userproduct.document.search.UserManagementDTO;
import com.shaic.claim.userproduct.document.search.UserManagementView;
import com.shaic.claim.userproduct.document.search.UserMgmtApplicableCpuDTO;
import com.shaic.claim.userreallocation.SearchReallocationDoctorDetailsTableDTO;
import com.shaic.claim.userreallocation.SearchReallocationDoctorDetailsView;
import com.shaic.claim.viewEarlierRodDetails.ViewDocumentDetailsDTO;
import com.shaic.claim.viewEarlierRodDetails.ViewQueryDTO;
import com.shaic.claim.withdrawPostProcessWizard.WithdrawPreauthPostProcessWizard;
import com.shaic.claim.withdrawWizard.WithdrawPreauthWizard;
import com.shaic.claims.reibursement.addaditionaldocuments.AddAditionalDocumentsView;
import com.shaic.claims.reibursement.addaditionaldocuments.SelectRODtoAddAdditionalDocumentsDTO;
import com.shaic.claims.reibursement.addaditionaldocuments.SelectRODtoAddAdditionalDocumentsMapper;
import com.shaic.claims.reibursement.rod.UploadNEFTDetails.UploadNEFTDetailsView;
import com.shaic.claims.reibursement.rod.addaditionaldocumentsPaymentInfo.AddAditionalDocumentsPaymentInfoView;
import com.shaic.cmn.login.ImsUser;
import com.shaic.domain.AssignedInvestigatiorDetails;
import com.shaic.domain.BankMaster;
import com.shaic.domain.CPUCodeService;
import com.shaic.domain.CityTownVillage;
import com.shaic.domain.Claim;
import com.shaic.domain.ClaimAuditQuery;
import com.shaic.domain.ClaimMagazine;
import com.shaic.domain.ClaimService;
import com.shaic.domain.ClaimVerification;
import com.shaic.domain.CoPayService;
import com.shaic.domain.CoorporateBuffer;
import com.shaic.domain.DiagnosisHospitalDetails;
import com.shaic.domain.DocAcknowledgement;
import com.shaic.domain.DocUploadToPremia;
import com.shaic.domain.DocumentDetails;
import com.shaic.domain.FVRGradingDetail;
import com.shaic.domain.FVRGradingMaster;
import com.shaic.domain.FieldVisitRequestService;
import com.shaic.domain.FvrTriggerPoint;
import com.shaic.domain.GalaxyIntimation;
import com.shaic.domain.HospitalService;
import com.shaic.domain.Hospitalisation;
import com.shaic.domain.Hospitals;
import com.shaic.domain.Insured;
import com.shaic.domain.InsuredDto;
import com.shaic.domain.InsuredPedDetails;
import com.shaic.domain.InsuredService;
import com.shaic.domain.Intimation;
import com.shaic.domain.IntimationService;
import com.shaic.domain.Investigation;
import com.shaic.domain.InvestigationService;
import com.shaic.domain.LegalHeir;
import com.shaic.domain.MASClaimAdvancedProvision;
import com.shaic.domain.MasClmAuditUserMapping;
import com.shaic.domain.MasCopay;
import com.shaic.domain.MasHospitalCashBenefit;
import com.shaic.domain.MasInvZone;
import com.shaic.domain.MasOmbudsman;
import com.shaic.domain.MasOpClaimSection;
import com.shaic.domain.MasRoleLimit;
import com.shaic.domain.MasRoomRentLimit;
import com.shaic.domain.MasUser;
import com.shaic.domain.MasUserAutoAllocation;
import com.shaic.domain.MasUserLimitMapping;
import com.shaic.domain.MasterService;
import com.shaic.domain.MastersValue;
import com.shaic.domain.NewBabyIntimation;
import com.shaic.domain.NomineeDetails;
import com.shaic.domain.OMPClaim;
import com.shaic.domain.OPClaim;
import com.shaic.domain.OrganaizationUnit;
import com.shaic.domain.PABenefitsCovers;
import com.shaic.domain.PEDValidationService;
import com.shaic.domain.PhysicalDocumentVerification;
import com.shaic.domain.PhysicalDocumentVerificationDetails;
import com.shaic.domain.Policy;
import com.shaic.domain.PolicyBankDetails;
import com.shaic.domain.PolicyEndorsementDetails;
import com.shaic.domain.PolicyNominee;
import com.shaic.domain.PolicyRiskCover;
import com.shaic.domain.PolicyService;
import com.shaic.domain.PostHospitalisation;
import com.shaic.domain.PreHospitalisation;
import com.shaic.domain.PreauthService;
import com.shaic.domain.PremiaOPAccumulatorDtls;
import com.shaic.domain.PreviousClaimedHistory;
import com.shaic.domain.PreviousClaimedHospitalization;
import com.shaic.domain.PreviousPolicy;
import com.shaic.domain.PreviousPolicyService;
import com.shaic.domain.Product;
import com.shaic.domain.ProposerNominee;
import com.shaic.domain.RODBillDetails;
import com.shaic.domain.RODDocumentSummary;
import com.shaic.domain.RRCRequest;
import com.shaic.domain.RawInvsDetails;
import com.shaic.domain.RawInvsHeaderDetails;
import com.shaic.domain.ReferenceTable;
import com.shaic.domain.Reimbursement;
import com.shaic.domain.ReimbursementBenefits;
import com.shaic.domain.ReimbursementBenefitsDetails;
import com.shaic.domain.ReimbursementQuery;
import com.shaic.domain.ReimbursementQueryService;
import com.shaic.domain.ReimbursementRejectionService;
import com.shaic.domain.State;
import com.shaic.domain.Status;
import com.shaic.domain.SublimitFunObject;
import com.shaic.domain.TalkTalkTalk;
import com.shaic.domain.TmpCPUCode;
import com.shaic.domain.TmpEmployee;
import com.shaic.domain.TmpInvestigation;
import com.shaic.domain.UpdateHospital;
import com.shaic.domain.UserToOrgMapping;
import com.shaic.domain.UsertoCPUMappingService;
import com.shaic.domain.VB64ApprovalRequest;
import com.shaic.domain.ViewTmpClaim;
import com.shaic.domain.ViewTmpIntimation;
import com.shaic.domain.fss.ChequeDetails;
import com.shaic.domain.fss.MasClient;
import com.shaic.domain.gmcautomailer.GmcAutomailerView;
import com.shaic.domain.omp.OMPClaimService;
import com.shaic.domain.omp.OMPIntimationService;
import com.shaic.domain.outpatient.OPDocumentBillEntry;
import com.shaic.domain.outpatient.OPHCHospitalDetails;
import com.shaic.domain.outpatient.OPHealthCheckup;
import com.shaic.domain.outpatient.OutpatientService;
import com.shaic.domain.preauth.BenefitAmountDetails;
import com.shaic.domain.preauth.ClaimAmountDetails;
import com.shaic.domain.preauth.CloseClaim;
import com.shaic.domain.preauth.Coordinator;
import com.shaic.domain.preauth.DiagnosisPED;
import com.shaic.domain.preauth.ExclusionDetails;
import com.shaic.domain.preauth.FieldVisitRequest;
import com.shaic.domain.preauth.ImplantDetails;
import com.shaic.domain.preauth.MasPrivateInvestigator;
import com.shaic.domain.preauth.NegotiationDetails;
import com.shaic.domain.preauth.OldInitiatePedEndorsement;
import com.shaic.domain.preauth.PccRemarks;
import com.shaic.domain.preauth.PedValidation;
import com.shaic.domain.preauth.PreExistingDisease;
import com.shaic.domain.preauth.Preauth;
import com.shaic.domain.preauth.PreauthEscalate;
import com.shaic.domain.preauth.PreauthQuery;
import com.shaic.domain.preauth.Procedure;
import com.shaic.domain.preauth.ResidualAmount;
import com.shaic.domain.preauth.Stage;
import com.shaic.domain.preauth.TreatingDoctorDetails;
import com.shaic.domain.preauth.UpdateOtherClaimDetails;
import com.shaic.domain.reimbursement.BillItemMapping;
import com.shaic.domain.reimbursement.MedicalApprover;
import com.shaic.domain.reimbursement.ReimbursementCalCulationDetails;
import com.shaic.domain.reimbursement.ReimbursementService;
import com.shaic.domain.reimbursement.Specialist;
import com.shaic.domain.service.PreMedicalService;
import com.shaic.feedback.managerfeedback.BranchManagerFeedbackhomePageDto;
import com.shaic.feedback.managerfeedback.FeedbackStatsDto;
import com.shaic.feedback.managerfeedback.ManagerFeedBackView;
import com.shaic.feedback.managerfeedback.previousFeedback.BranchManagerPreviousFeedbackView;
import com.shaic.ims.bpm.claim.BPMClientContext;
import com.shaic.ims.bpm.claim.DBCalculationService;
import com.shaic.main.navigator.domain.MenuItemBean;
import com.shaic.newcode.wizard.domain.ConvertClaimMapper;
import com.shaic.newcode.wizard.domain.HospitalCommunicationUpdateMapper;
import com.shaic.newcode.wizard.domain.InsuredMapper;
import com.shaic.newcode.wizard.domain.NewBabyIntimationMapper;
import com.shaic.newcode.wizard.domain.OMPClaimMapper;
import com.shaic.newcode.wizard.domain.PolicyMapper;
import com.shaic.newcode.wizard.dto.ConvertClaimDTO;
import com.shaic.newcode.wizard.dto.HospitalAcknowledgeDTO;
import com.shaic.newcode.wizard.dto.LegalHeirDTO;
import com.shaic.newcode.wizard.dto.NewBabyIntimationDto;
import com.shaic.newcode.wizard.dto.NewIntimationDto;
import com.shaic.newcode.wizard.dto.NomineeDetailsDto;
import com.shaic.newcode.wizard.pages.IntimationDetailsView;
import com.shaic.paclaim.billing.hospprocessclaimbilling.page.PAHospCoverBillingWizard;
import com.shaic.paclaim.billing.processclaimbilling.search.PASearchProcessClaimBillingService;
import com.shaic.reimburement.addAdditinalDocument.search.SearchAddAdditionalDocumentTableDTO;
import com.shaic.reimburement.addAdditinalDocument.search.SearchAddAdditionalDocumentView;
import com.shaic.reimburement.gatewayAddAdditinalDocument.search.PhysicalDocumentReceivedMakerTableDTO;
import com.shaic.reimburement.gatewayAddAdditinalDocument.search.PhysicalDocumentReceivedMakerView;
import com.shaic.reimburement.gatewayAddAdditinalDocument.search.ReceivedPhysicalDocumentsWizard;
import com.shaic.reimburement.specialapprover.approveclaim.search.SearchApproveClaimView;
import com.shaic.reimburement.specialapprover.processclaim.search.SearchProcessClaimView;
import com.shaic.reimbursement.acknowledgeinvestigationcompleted.AcknowledgeInvestigationCompletedView;
import com.shaic.reimbursement.assigninvesigation.AssignInvestigationWizard;
import com.shaic.reimbursement.assigninvesigation.AssignInvestigatorDto;
import com.shaic.reimbursement.billing.processClaimRequestBenefits.SearchProcessClaimRequestBenefitsView;
import com.shaic.reimbursement.billing.processclaimbilling.search.SearchProcessClaimBillingTableDTO;
import com.shaic.reimbursement.billing.processclaimbilling.search.SearchProcessClaimBillingView;
import com.shaic.reimbursement.draftinvesigation.DraftInvestigationWizard;
import com.shaic.reimbursement.draftinvesigation.DraftInvestigatorDto;
import com.shaic.reimbursement.draftinvesigation.DraftTriggerPointsToFocusDetailsTableDto;
import com.shaic.reimbursement.financialapprover.processclaimfinance.search.SearchProcessClaimFinancialsTableDTO;
import com.shaic.reimbursement.financialapprover.processclaimfinance.search.SearchProcessClaimFinancialsView;
import com.shaic.reimbursement.financialapprover.processclaimrequestBenefits.search.SearchProcessClaimRequestBenefitsFinancView;
import com.shaic.reimbursement.fraudidentification.FraudIdentificationView;
import com.shaic.reimbursement.investigation.ackinvestivationcompleted.search.SearchAckInvestigationCompletedTableDTO;
import com.shaic.reimbursement.investigation.ackinvestivationcompleted.search.SearchAckInvestigationCompletedView;
import com.shaic.reimbursement.investigation.assigninvestigation.search.SearchAssignInvestigationTableDTO;
import com.shaic.reimbursement.investigation.assigninvestigation.search.SearchAssignInvestigationView;
import com.shaic.reimbursement.investigation.draftinvestigation.search.SearchDraftInvestigationTableDTO;
import com.shaic.reimbursement.investigation.draftinvestigation.search.SearchDraftInvestigationView;
import com.shaic.reimbursement.investigation.reassigninvestigation.search.SearchReAssignInvestigationView;
import com.shaic.reimbursement.investigationgrading.InvestigationGradingWizardView;
import com.shaic.reimbursement.investigationgrading.SearchInvestigationGradingView;
import com.shaic.reimbursement.investigationin_direct_assigment.search.InvestigationDirectAssignmentView;
import com.shaic.reimbursement.investigationmaster.InvestigationMasterDTO;
import com.shaic.reimbursement.investigationmaster.InvestigationMasterTableDTO;
import com.shaic.reimbursement.investigationmaster.InvestigationMasterView;
import com.shaic.reimbursement.investigationmaster.InvestigationMasterWizardView;
import com.shaic.reimbursement.manageclaim.ClaimWiseAllowApprovalPages.ClaimWiseAllowApprovalView;
import com.shaic.reimbursement.manageclaim.HoldMonitorFLPScreen.SearchHoldMonitorFLPScreenView;
import com.shaic.reimbursement.manageclaim.HoldMonitorScreen.SearchHoldMonitorScreenFormDTO;
import com.shaic.reimbursement.manageclaim.HoldMonitorScreen.SearchHoldMonitorScreenView;
//import com.shaic.reimbursement.manageclaim.HoldMonitorScreen.SearchHoldMonitorScreenView;
import com.shaic.reimbursement.manageclaim.SearchUpdateRodDetails.SearchUpdateRodDetailsView;
import com.shaic.reimbursement.manageclaim.closeclaim.SearchInProcessRodLevel.SearchCloseClaimInProcessView;
import com.shaic.reimbursement.manageclaim.closeclaim.pageClaimLevel.CloseClaimPageDTO;
import com.shaic.reimbursement.manageclaim.closeclaim.pageClaimLevel.CloseClaimTableDTO;
import com.shaic.reimbursement.manageclaim.closeclaim.pageClaimLevel.CloseClaimView;
import com.shaic.reimbursement.manageclaim.closeclaim.pageRodLevel.CloseClaimRodLevelView;
import com.shaic.reimbursement.manageclaim.closeclaim.searchBasedClaimlevel.SearchCloseClaimTableDTO;
import com.shaic.reimbursement.manageclaim.closeclaim.searchBasedClaimlevel.SearchCloseClaimView;
import com.shaic.reimbursement.manageclaim.closeclaim.searchRodLevel.SearchCloseClaimRODLevelView;
import com.shaic.reimbursement.manageclaim.closeclaim.searchRodLevel.SearchCloseClaimTableDTORODLevel;
import com.shaic.reimbursement.manageclaim.closeclaimInProcess.pageRODLevel.CloseClaimInProcessView;
import com.shaic.reimbursement.manageclaim.reopenclaim.pageClaimLevel.ReopenClaimPageDTO;
import com.shaic.reimbursement.manageclaim.reopenclaim.pageClaimLevel.ReopenClaimTableDTO;
import com.shaic.reimbursement.manageclaim.reopenclaim.pageClaimLevel.ReopenClaimView;
import com.shaic.reimbursement.manageclaim.reopenclaim.pageRodLevel.ReOpenRodLevelClaimView;
import com.shaic.reimbursement.manageclaim.reopenclaim.sarchClaimLevel.SearchReOpenClaimTableDTO;
import com.shaic.reimbursement.manageclaim.reopenclaim.sarchClaimLevel.SearchReOpenClaimView;
import com.shaic.reimbursement.manageclaim.reopenclaim.searchRodLevel.SearchReOpenClaimRodLevelTableDTO;
import com.shaic.reimbursement.manageclaim.reopenclaim.searchRodLevel.SearchReOpenClaimRodLevelView;
import com.shaic.reimbursement.manageclaim.searchClaimwiseApproval.SearchClaimWiseAllowApprovalDto;
import com.shaic.reimbursement.manageclaim.searchClaimwiseApproval.SearchClaimWiseAllowApprovalView;
import com.shaic.reimbursement.medicalapproval.processclaimrequest.search.SearchProcessClaimRequestFormDTO;
import com.shaic.reimbursement.medicalapproval.processclaimrequest.search.SearchProcessClaimRequestTableDTO;
import com.shaic.reimbursement.medicalapproval.processclaimrequest.search.SearchProcessClaimRequestView;
import com.shaic.reimbursement.medicalapproval.processclaimrequestzonal.search.SearchProcessClaimRequestZonalTableDTO;
import com.shaic.reimbursement.medicalapproval.processclaimrequestzonal.search.SearchProcessClaimRequestZonalView;
import com.shaic.reimbursement.misc.processclaimrefund.search.SearchProcessClaimRefundView;
import com.shaic.reimbursement.misc.registerclaimrefund.search.SearchRegisterClaimRefundView;
import com.shaic.reimbursement.paymentprocess.createbatch.search.SearchCreateBatchView;
import com.shaic.reimbursement.paymentprocess.initiateRecovery.PaymentInitiateRecoverySearchView;
import com.shaic.reimbursement.paymentprocess.paymentreprocess.PaymentReprocessSearchView;
import com.shaic.reimbursement.paymentprocess.processpaymentreturn.search.SearchProcessPaymentReturnsView;
import com.shaic.reimbursement.paymentprocess.stoppaymenttracking.request.PopupStopPaymentRequestWizard;
import com.shaic.reimbursement.paymentprocess.stoppaymenttracking.request.StopPaymentRequestDto;
import com.shaic.reimbursement.paymentprocess.stoppaymenttracking.validation.PopupStopPaymentValidateWizard;
import com.shaic.reimbursement.printReminderLetterBulk.SearchPrintRemainderBulkView;
import com.shaic.reimbursement.processi_investigationi_initiated.ProcessInvestigationInitiatedView;
import com.shaic.reimbursement.processi_investigationi_initiated.search.SearchProcessInvestigationInitiatedTableDTO;
import com.shaic.reimbursement.processi_investigationi_initiated.search.SearchProcessInvestigationInitiatedView;
import com.shaic.reimbursement.queryrejection.draftquery.search.DecideOnDraftQueryDetailWizardViewImpl;
import com.shaic.reimbursement.queryrejection.draftquery.search.SearchDraftQueryLetterService;
import com.shaic.reimbursement.queryrejection.draftquery.search.SearchDraftQueryLetterTableDTO;
import com.shaic.reimbursement.queryrejection.draftquery.search.SearchDraftQueryLetterView;
import com.shaic.reimbursement.queryrejection.draftrejection.search.DraftRejectionLetterDetailView;
import com.shaic.reimbursement.queryrejection.draftrejection.search.SearchDraftRejectionLetterTableDTO;
import com.shaic.reimbursement.queryrejection.draftrejection.search.SearchDraftRejectionLetterView;
import com.shaic.reimbursement.queryrejection.generateremainder.search.GenerateReminderLetterDetailView;
import com.shaic.reimbursement.queryrejection.generateremainder.search.SearchGenerateRemainderView;
import com.shaic.reimbursement.queryrejection.generateremainder.search.SearchGenerateReminderTableDTO;
import com.shaic.reimbursement.queryrejection.processdraftquery.search.SearchProcessDraftQueryTableDTO;
import com.shaic.reimbursement.queryrejection.processdraftquery.search.SearchProcessDraftQueryView;
import com.shaic.reimbursement.queryrejection.processdraftrejection.search.SearchProcessDraftRejectionTableDTO;
import com.shaic.reimbursement.queryrejection.processdraftrejection.search.SearchProcessDraftRejectionView;
import com.shaic.reimbursement.reassigninvestigation.ReAssignInvestigationWizard;
import com.shaic.reimbursement.reminderBulkSearch.BulkReminderResultDto;
import com.shaic.reimbursement.reminderBulkSearch.SearchGenerateRemainderBulkService;
import com.shaic.reimbursement.reminderBulkSearch.SearchGenerateRemainderBulkView;
import com.shaic.reimbursement.rod.acknowledgementdocumentreceiver.search.SearchAcknowledgementDocumentReceiverTableDTO;
import com.shaic.reimbursement.rod.acknowledgementdocumentreceiver.search.SearchAcknowledgementDocumentReceiverView;
import com.shaic.reimbursement.rod.addAdditionalDocumentPaymentInfo.search.SearchAddAdditionalDocumentPaymentInfoTableDTO;
import com.shaic.reimbursement.rod.addAdditionalDocumentPaymentInfo.search.SearchAddAdditionalDocumentPaymentInfoView;
import com.shaic.reimbursement.rod.allowReconsideration.search.SearchAllowReconsideration;
import com.shaic.reimbursement.rod.cancelAcknowledgment.search.SearchCancelAcknowledgementView;
import com.shaic.reimbursement.rod.createonlinerod.search.SearchCreateOnlineRODTableDTO;
import com.shaic.reimbursement.rod.createrod.search.SearchCreateRODTableDTO;
import com.shaic.reimbursement.rod.createrod.search.SearchCreateRODView;
import com.shaic.reimbursement.rod.enterbilldetails.search.SearchEnterBillDetailTableDTO;
import com.shaic.reimbursement.rod.enterbilldetails.search.SearchEnterBillDetailView;
import com.shaic.reimbursement.rod.searchUploadNEFTDetails.search.SearchUploadNEFTDetailsTableDTO;
import com.shaic.reimbursement.rod.searchUploadNEFTDetails.search.SearchUploadNEFTDetailsView;
import com.shaic.reimbursement.rod.uploadinvestication.search.SearchUploadInvesticationTableDTO;
import com.shaic.reimbursement.rod.uploadinvestication.search.SearchUploadInvesticationView;
import com.shaic.reimbursement.topup_policy_master.search.TopUpPolicyMasterView;
import com.shaic.reimbursement.uploadTranslatedDocument.UploadTranslatedDocumentView;
import com.shaic.reimbursement.uploadrodreports.UploadInvestigationReportView;
import com.shaic.starfax.simulation.PremiaPullService;
import com.shaic.starfax.simulation.StarFaxFVRServiceRevised;
import com.vaadin.server.ExternalResource;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.BrowserFrame;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Notification;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;
import com.vaadin.v7.data.util.BeanItemContainer;
import com.vaadin.v7.shared.ui.label.ContentMode;
import com.vaadin.v7.ui.CheckBox;
import com.vaadin.v7.ui.HorizontalLayout;
import com.vaadin.v7.ui.Label;
import com.vaadin.v7.ui.OptionGroup;
import com.vaadin.v7.ui.VerticalLayout;
//import com.shaic.claim.clearcashless.ClearCashlessView;
//import com.shaic.claim.preauth.negotiation.SearchUncheckNegotiationView;

@SuppressWarnings("serial")
@ViewInterface(MenuView.class)
public class MenuPresenter extends AbstractMVPPresenter<MenuView> {
	
	private final Logger log = LoggerFactory.getLogger(MenuPresenter.class);

	public static final String INIT_MENU = "init_menu";

	public static final String SHOW_SUCCESS_VIEW = "login_success_view";
	
	public static final String SHOW_INTIMATION_SERVLET_VIEW = "intimation portal view";

	public static final String SHOW_PREATUH_WIZARD = "preauth_wizard_view";
	
	public static final String SHOW_PREMEDICAL_WIZARD = "premedical_wizard_view";

	public static final String SHOW_PREMEDICAL_ENHANCEMENT_WIZARD = "premedical_enhancement_wizard_view";

	public static final String SHOW_PREAUTH_ENHANCEMENT_WIZARD = "preauth_enhancement_wizard_view";

	public static final String SHOW_MEDICAL_ENHANCEMENT_WIZARD = "medical_enhancement_wizard_view";

	public static final String SHOW_PEDQUERY_WIZARD = "pedquery_wizard_view";

	public static final String SHOW_PEDQUERY_SEARCH = "pedquery_search_view";

	public static final String SHOW_ENHANCEMENT_WIZARD = "enhancement_wizard_view";

	public static final String SHOW_ACKNOWLEDGE_HOSPITAL_COMMUNICATION_SEARCH = "acknowledge_hospital_communication_search_view";

	public static final String SHOW_HOSPITAL = "Hospital Acknowledgement Communication";

	public static final String PROCESS_REJECTION = "Process Rejection Page";

	public static final String PED_REQUEST_PAGE_PROCESS = "PED Request page proces";
	
	public static final String PED_INITIATE_OUTSIDE_PROCESS = "ped initiate outside process";

	public static final String PED_REQUEST_PAGE_APPROVED = "PED Request page approved";
	
	public static final String PED_QUERY_REQUEST_PAGE = "PED Query Request page approved";

	public static final String PED_REQUEST_PAGE_TL_APPROVED = "PED Request page TEAM LEAD approved";

	public static final String FILE_UPLOAD_TABLE = "Process Translation table";

	public static final String UPLOAD_TRANSLATED_DOCUMENT_REIMBURSEMENT = "Upload translated document reimbursement";

	public static final String ADVISE_ON_PED_PAGE = "Advise on PED Page";

	public static final String SUBMIT_SPECIALIST_ADVISE_PAGE = "Submit Specialist Advise Page";

	public static final String PROCESS_FIELD_VISIT = "Field Visit Page";
	
	public static final String RE_ASSIGN_PROCESS_FIELD_VISIT = "Re Assign Field Visit Page";

	public static final String PED_QUERY_PAGE = "PED Query page";

	public static final String PED_QUERY_EDIT_PAGE = "Ped Query Edit Page";

	public static final String ADVISE_ON_PED_EDIT_PAGE = "Advise on Ped edit Page";

	public static final String CONVERT_CLAIM = "Convert Claim";
	
	public static final String SHOW_CONVERT_CLAIM_CASHLESS = "Convert Claim Cashless";

	public static final String SHOW_CONVERT_CLAIM = "Convert Claim Page";
	
	public static final String SHOW_CONVERT_REIMBURSEMENT = "Convert to reimbursement page";

	public static final String SUBMIT_SPECIALIST = "Submit Specialist Advise page view";

	public static final String WITHDRAW_PREAUTH_PAGE_VIEW = "With draw preauth wizard page view";
	
	public static final String WITHDRAW_PREAUTH_POST_PROCESS_PAGE_VIEW= "With draw preauth post process wizard page view";

	public static final String DOWNSIZE_PREAUTH_PAGE_VIEW = "Down size preauth wizare page view";
	
	public static final String DOWNSIZE_PREAUTH_REQUEST_PAGE_VIEW = "Downsize preauth request wizard page view";
	
	public static final String NEGOTIATE_PREAUTH= "Negotiate Preauth";

	public static final String POPULATE_POLICY_FROM_TMPPOLICY = "populate_policy_from_tmppolicy";

	// Added for withdraw pre auth details page.

	public static final String WITHDRAW_PREAUTH_WIZARD = "withdraw pre auth wizard view";

	public static final String FIELD_VISIT_REPESENTATION = "Field Visit Representation";

	// For Reimbursement
	
	public static final String SHOW_INVESTIGATION_MASTER = "SHOW INVESTIGATION MASTER";
	
	public static final String INVESTIGATION_MASTER ="INVESTIGATION MASTER";

	public static final String SEARCH_PROCESS_INVESTIGATION_INITIATED = "SEARCH PROCESS INVESTIGATION INITIATED";

	public static final String PROCESS_INVESTIGATION_INITIATED = "PROCESS INVESTIGATION INITIATED";

	public static final String ASSIGN_INVESTIGATION = "Assign Investigation for Reimbursement";
	
	public static final String RE_ASSIGN_INVESTIGATION = "ReAssign Investigation";
	
	public static final String DRAFT_INVESTIGATION = "Draft Investigation for Reimbursement";

	public static final String ACKNOWLEGE_INVESTIGATION_COMPLETED = "Acknowlege Investigation Completed for Reimbursement";

	// Added for R3 ROD menu.
	public static final String ACKNOWLEDGE_DOCUMENT_RECEIVED = "Acknowledge Document Received";

	public static final String SHOW_CREATE_ROD_WIZARD = "show create rod wizard";
	
	public static final String SHOW_CANCEL_ACKNOWLEDGEMENT_WIZARD = "show cancel acknowledgment wizard";

	// ReImbursment Medical Approval and Billing and Financial Approval
	public static final String SHOW_MEDICAL_APPROVAL_ZONAL_REVIEW = "medical_approval_zonal_medical_review";
	public static final String SHOW_MEDICAL_APPROVAL_PROCESS_CLAIM_REQUEST = "medical_approval_process_claim_request";
	public static final String SHOW_PROCESS_CLAIM_BILLING = "process_claim_billing";
	public static final String SHOW_PROCESS_FINANCIAL_CLAIM = "process_financial_claim";

	public static final String UPLOAD_INVESTIGATION_REPORT = "UPLOAD INVESTIGATION REPORT Screen";
	
	public static final String SHOW_BILL_ENTRY_WIZARD = "show bill entry wizard";

	public static final String SHOW_SUBMIT_SPECIALIST_ADVISE = "Submit Specialist Advise in Reimbursement";

	public static final String SHOW_PROCESS_CLAIM_REQUEST_BENEFITS = "process_claim_request_benefits";

	public static final String SHOW_MEDICAL_APPROVAL_CLAIM_BILLING_SCREEN = "show_medical_approval_claim_billing_screen";

	public static final String SHOW_FINANCIAL_APPROVAL_CLAIM_BILLING_SCREEN = "show_financial_approval_claim_billing_screen";

	public static final String SHOW_ADDITIONAL_DOCUMENTS = "Show Additinal Documents";
	
	public static final String SHOW_UPLOAD_NEFT_DETAILS = "Show Upload NEFT Details";
	
	public static final String SHOW_PROCESS_RRC_REQUEST_DETAILS = "show_process_rrc_request_details";
	public static final String SHOW_REVIEW_RRC_REQUEST_DETAILS = "show_review_rrc_request_details";
	public static final String SHOW_MODIFY_RRC_REQUEST_DETAILS = "show_modify_rrc_request_details";
	
	public static final String SHOW_SEARCH_RRC_REQUEST_VIEW = "show_search_rrc_request_view";
	
	//Dinesh
	public static final String SHOW_RRC_STATUS_SCREEN_VIEW = "show_rrc_status_screen_view";

	public static final String SHOW_OP_REGISTER_CLAIM = "out_patient_register_claim";
	
	public static final String SHOW_OP_EXPIRED_POLICY_CLAIM = "out_patient_Expired_policy_claim";

	public static final String SHOW_PROCESS_OP_CLAIM = "out_patient_process_op_claim";
	public static final String SHOW_DIRECT_PROCESS_OP_CLAIM = "out_patient_direct_process_op_claim";

	public static final String OP_SEARCH = "op_search_policy_ui";

	public static final String OP_REGISTER_CLAIM = "op_register_claim_wizard_view";
	
	public static final String CLOSE_CLAIM_SEARCH_BASED_ROD_LEVEL = "Close Claim Search based Rod Level";
	
	public static final String CLOSE_CLAIM_PAGE = "Close claim Revised page";
	
	public static final String CLOSE_CLAIM_IN_PROCESS = "Close Claim In Process";
	
	public static final String REOPEN_CLAIM_PAGE_VIEW = "Reopen Claim revised page";
	
	public static final String REOPEN_CLAIM_PAGE = "Re open claim page view";
	
	public static final String REOPEN_CLAIM_PAGE_CLAIM_LEVEL = "Re open claim page view claim level";
	
	public static final String CLAIM_WISE_ALLLOW_APPROVAL = "Claim Wise Allow Apporoval";
	
	public static final String DOCTOR_USER_ACCESSIBILITY = "User Accessibility";
	
	public static final String USER_MANAGEMENT_ACCESSIBILITY = "User Management Accessibility";
		 
	public static final String PAYMENT_PROCESS_CPU = "payment_process_cpu";
	
	public static final String OP_SCREEN = "OP_Screen";
	
	public static final String PAYMENT_PROCESS_CPU_PAGE = "Payment_process_cpu_page";
	
	public static final String PAYMENT_PROCESS = "payment_process";
	
	public static final String TAT_REPORT = "tat_report";
	
	public static final String SEARCH_OR_UPLOAD_DOCUMENTS = "Search_or_upload_documents";
	
	public static final String SEARCH_OR_UPLOAD_DOCUMENTS_WIZARD = "Search_or_upload_documents_wizard";

	
	public static final String SEARCH_OR_UPLOAD_DOCUMENTS_ACK_NOT_RECEIVED_WIZARD = "Search_or_upload_documents_ack_not_received_wizard";
	
	
	public static final String FVR_ASSINMENT_REPORT = "fvr_assignment_report";
	
	public static final String HOSPITAL_INTIMATION_REPORT = "Hospital_intimation_report";
	
	public static final String MEDICAL_MAIL_REPORT = "Medical_Mail_Report";
	
	public static final String DAILY_REPORT = "Daily_Report";
	
	public static final String CPU_WISE_PERFORMANCE_REPORT = "Cpu_Wise_Performance_report";
	
	public static final String AGENT_BROKER_REPORT = "Agent Broker Report";
	
	public static final String OP_CLAIM_REPORT = "Op Claim Report";
	
	public static final String BILL_RECEIVED_REPORT = "Bill Received Report";
	
	public static final String CREATE_OR_SEARCH_LOT = "Create Or Search Lot";
	
	//Added for premia intimation data enhancement in starfax stub.
	public static final String POPULATE_PREMIA_DATA = "Populate_premia_data";

	public static final String CREATE_LOT_MAKER = "Create Lot Maker";

	public static final String SHOW_CLEAR_CASHLESS = "show_clear_cashless_screen";
	
	public static final String SHOW_SETTLEMENT_PULL_BACK = "show_settlement_pull_back";
	
	public static final String SHOW_LOT_PULL_BACK = "show_lot_pull_back";
	
	public static final String SHOW_SEARCH_SCREEN_VALIDATION_MESSAGE = "show_search_screen_validation_message";
	
	public static final String SHOW_SEARCH_SCREEN_VALIDATION_MESSAGE_CASHLESS = "show_search_screen_validation_message_cashless";
	
	public static final String DIAGNOSIS_DETAILS = "Diagnosis Details";
	
	public static final String SEARCH_INVESTIGATION_GRADING = "SEARCH_INVESTIGATION_GRADING";
	public static final String INVESTIGATION_GRADING_WIZARD = "INVESTIGATION_GRADING_WIZARD";
	public static final String LOGOUT_UPDATE_DETAILS = "logout update Details";
	
	public static final String SHOW_PROCESS_64_WIZARD = "show process 64 wizard";
	
	public static final String SHOW_DATA_ENTRY_DETAILS = "show_data_entry_details";

	public static final String PA_SHOW_ACKNOWLEDGEMENT_DOCUMENT_RECEIVED = "PA_show_acknowledgement_document_received";	
	
	public static final String INVESTIGATION_DIRECT_ASSIGNEMENT = "INVESTIGATION_DIRECT_ASSIGNEMENT";
	public static final String UNCHECK_NEGOTIATION = "UNCHECK_NEGOTIATION";
	
	//public static final String SHOW_PA_NON_HOSP_FINANCIAL_APPROVAL_CLAIM_BILLING_SCREEN = "show_pa_non_hosp_financial_approval_claim_billing_screen";
	
	public static final String SHOW_PA_HOSP_COVER_FINANCIAL_APPROVAL_CLAIM_BILLING_SCREEN = "show_pa_hosp_cover_financial_approval_claim_billing_screen";
	
	public static final String PA_SHOW_BILL_ENTRY = "PA_show_bill_entry";
	
//	public static final String PA_SHOW_MEDICAL_APPROVAL_SCREEN = "pa_show_medical_approval_screen";
	
	
	//public static final String SHOW_PA_HOSP_COVER_MEDICAL_APPROVAL_CLAIM_BILLING_SCREEN = "show_pa_hosp_cover_medical_approval_claim_billing_screen";
	
	//public static final String PA_ADD_ADDITIONAL_DOCUMENTS = "PA Add additional Documents";
	
	


	//public static final String PA_SHOW_ACKNOWLEDGEMENT_DOCUMENT_RECEIVED = "PA_show_acknowledgement_document_received";	
	public static final String UPLOAD_PAN_CARD = "üpload pan card";
	
	public static final String SHOW_PHYSICAL_DOCUMENT = "Show Physical Documents";

	public static final String SHOW_OMP_CLAIM_PROCESSOR = "Show Omp claim processor";
	
	
	public static final String SHOW_FIELD_VISIT_REPORT_GRADING = "Field Visit Report Grading Page";
	
	public static final String PROCESS_INTERNAL_NOTES = "Update Doctor Internal Notes";
	
	public static final String CREATE_GHI_ALLOW_CLAIM_REGISTRATION = "create_ghi_allow_claim_registration";
	
	//public static final String SHOW_ALLOCATE_CORP_BUFFER_WIZARD = "show_allocate_corp_buffer_wizard";
	
	public static final String SHOW_PROCESS_RAW_REQUEST_WIZARD = "show_process_raw_wizard";

	public static final String SHOW_MASTER_USER_ALLOCATION_LIST = "master_allocation_list";

	
	public static final String UPDATE_SUBLIMIT = "update_sublimit";

	public static final String SHOW_UPDATE_ROD_DETAILS = "show update rod details";
	public static final String UPDATE_AADHAR_DETAILS = "update aadhar details";
	public static final String UPDATE_AADHAR_DETAILS_WIZARD = "aadhar details wizard";
	
	public static final String ADD_ADDITIONAL_PAYMENT_INFORMATION = "Add Additional  Payment Information";//R1069
	
	//public static final String UPLOAD_NEFT_DETAILS_WIZARD= "Upload NEFT Details Wizard";
	
	public static final String SHOW_BRANCH_MANAGER_FEEDBACK_HOME_PAGE = "Branch Manager Feedback Home Page";
	//public static final String SHOW_BRANCH_MANAGER_FEEDBACK_HOME_PAGE = "MANAGER_FEEDBACK_FORM";
	public static final String SHOW_PREVIOUS_FEEDBACK_LINK_HOME_PAGE = "Previous feedback status report link page";
	
	public static final String MAGAZINE_GALLERY_POPUP = "Magazine Gallery Popup Window"; 
	
	public static final String GET_MAGAZINE = "get magazine";
	
	public static final String UPLOAD_BED_PHOTO = "upload_bed_photo";
	
	public static final String UPLOAD_BED_PHOTO_WIZARD = "upload_bed_photo_wizard";

	public static final String SHOW_TATA_POLICY_PREAUTH_WIZARD = "tata_policy_preauth_wizard_view";
	
	public static final String GMC_AUTOMAILER = "GMC_AUTOMAILER";
	
	public static final String CVC_AUDIT = "CVC_AUDIT";
	
	public static final String CVC_AUDIT_WIZARD = "CVC_AUDIT_WIZARD";
	
	public static final String CVC_AUDIT_ACTION_PROCESSING = "CVC_AUDIT_ACTION_PROCESSING";
	
	public static final String CVC_AUDIT_ACTION_PROCESSING_WIZARD = "CVC_AUDIT_ACTION_PROCESSING_WIZARD";
	
	public static final String USER_ROLE_CVC_AUDIT = "CLM_CVC_AUDIT";
	public static final String USER_ROLE_CVC_AUDIT_CLUSTER_HEAD = "CLM_CVC_AUDIT_CLUSTER_HEAD";
	
	public static final String SHOW_PROCESS_PCC_CO_ORDINATOR_REQUEST_WIZARD = "show_process_pcc_co_ordinator_request_wizard";
	public static final String SHOW_PROCESS_PCC_PROCESSOR_REQUEST_WIZARD = "show_process_pcc_processor_request_wizard";
	public static final String SHOW_PROCESS_PCC_REVIEWER_REQUEST_WIZARD = "show_process_pcc_reviewer_request_wizard";
	public static final String SHOW_PROCESS_PCC_DIVISION_HEAD_REQUEST_WIZARD = "show_process_pcc_division_head_request_wizard";
	public static final String SHOW_PROCESS_PCC_ZONAL_MEDICAL_HEAD_REQUEST_WIZARD = "show_process_pcc_zonal_medical_head_request_wizard";
	public static final String SHOW_PROCESS_PCC_ZONAL_COORDINATOR_REQUEST_WIZARD = "show_process_pcc_zonal_coordinator_request_wizard";
	public static final String SHOW_PROCESS_PCC_HRM_COORDINATOR_REQUEST_WIZARD = "show_process_pcc_hrm_coordinator_request_wizard";
	public static final String SHOW_PROCESS_PCC_REASSIGN_HRM_COORDINATOR_REQUEST_WIZARD = "show_process_pcc_reassign_hrm_coordinator_request_wizard";
	
	public static final String HRMP = "HRMP";
	public static final String HRMP_WIZARD = "HRMP_WIZARD";
	
	public static final String RECORD_MARKETING_ESCALATION_PROCESS = "record_marketing_escalation_process";
	
	public static final String SHOW_STOP_PAYMENT_VALIDATION_WIZARD = "show_stop_payment_validation";
	public static final String SHOW_STOP_PAYMENT_REQUEST_WIZARD = "show_stop_payment_request";
	
	public static final String SUBMIT_SPECIALIST_ADVISE_GETTASK = "SUBMIT_SPECIALIST_ADVISE_GETTASK";
	
	public static final String PROCESS_PED_REQUEST_APPROVE_GETTASK = "PROCESS_PED_REQUEST_APPROVE_GETTASK";
	
	public static final String SHOW_CREATE_ONLINE_ROD_WIZARD = "show_create_online_rod_wizard";
	
	public static final String POST_PROCESS_CVC_WIZARD = "POST_PROCESS_CVC_WIZARD";
	
	// @EJB
	// private BatchScheduler batch;
	@EJB
	private DBCalculationService calcService;


	@EJB
	private MenuItemBean menuItems;

	@EJB
	private PolicyService policyService;

	@EJB
	private CreateRODService billDetailsService;

	@EJB
	private HospitalService hospitalService;

	@EJB
	private PreauthService preauthService;

	@EJB
	private PreMedicalService premedicalService;
	
	@EJB
	private CoPayService copayservice;
	
	 @EJB
	 private PremiaPullService premiaPullService;

	@EJB
	private ClaimService claimService;
	
	@EJB
	private OMPClaimService ompClaimService;
	
	@EJB
	private CoordinatorService coordinatorService;

	@EJB
	private MasterService masterService;

	@EJB
	private UsertoCPUMappingService usertoCPUMapService;
	
	@EJB
	private AcknowledgementDocumentsReceivedService acknowledgementDocumentsReceivedService;

	@EJB
	private IntimationService intimationService;
	
	@EJB
	private OMPIntimationService ompintimationService;

	@EJB
	private PreviousPreAuthService previousPreAuthService;

	@EJB
	private InsuredService insuredService;

	@EJB
	private PreviousPolicyService previousPolicyService;

//	@Inject
//	private DBCalculationService dbCalculationService;

	@EJB
	private PEDValidationService pedValidationService;

	@Inject
	private PremiaToPolicyMapper premiaPolicyMapper;

	@EJB
	private InvestigationService investigationService;

	@EJB
	private ReimbursementService reimbursementService;
	
	@EJB
	private IcdSubLimitMappingService icdSublimitMapService;

	@EJB
	private CPUCodeService cpuCodeService;
	
	@EJB
	private InitiateTalkTalkTalkService talkService;

	@EJB
	private CreateRODService rodService;
	
	@EJB
	private OutpatientService outpatientService;
	
	@EJB
	private DBCalculationService dBCalculationService;

	@EJB
	private SearchDraftQueryLetterService searchDraftQueryLetterService;

	//private ParameterDTO parameters;

	private SearchEditHospitalDetailsTableDTO searchEditHospitalDto;

//	@Inject
//	private AssignInvestigatorDto assignInvestigatorDto;

	@Inject
	private AcknowledgementDocumentsReceivedService ackDocReceivedService;

	@Inject
	private CreateRODService createRodService;

	@Inject
	private ProcessClaimRequestBenefitsService claimRequestBenefitsService;

	@EJB
	private ReimbursementQueryService reimbursementQuerySerice;

	@EJB
	private ReimbursementRejectionService reimbursementRejectionService;
	
	@EJB
	private ProcessPreMedicalService processPremedicalService;
	
	/**
	 * Added for Process RRC Request page --- starts
	 * */
	
	
	@EJB
	private ProcessRRCRequestService processRRCRequestService;
	
	@EJB
	private BillReceivedReportService billReceivedReportService;
	
	@EJB
	private ReviewRRCRequestService reviewRRCRequestService;
	
	@EJB
	private PEDQueryService pedQueryService;
	

	@Inject
	private ClaimMapper claimMapper;
	
	@EJB
	private FieldVisitRequestService fieldVisitSerivice;
	
	@EJB
	private DiagnosisService diagnosisService;
	
	@EJB
	private PaymentProcessCpuService paymentProcessService;
	
	
	//RM-STUB
	/*@EJB
	private StarFaxPremiaDocUploadService starFaxService;*/
	
	 @EJB
	 private StarFaxFVRServiceRevised starFaxFVRRevisedService;
	 
	 
	 @EJB
	 private SearchUploadDocumentsService searchUploadDocService;
	 
	 
	 @EJB
	 private UploadDocumentsForAckNotReceivedService searchUploadDocServiceforAckNotReceived;
	 
	 @EJB
	 private SearchUploadDocumentsSubmitService uploadSubmitService;
	 
	 @Inject
	 private SearchScreenValidationTable validationTable;
	 
	 
	 @Inject
	 private SearchScreenValidationTableForCashless cashlessValidationTable;
	 
	
	 
	 @EJB
	 private UploadDocumentsForAckNotReceivedSubmitService uploadSubmitServiceforAckNotReceived;
	 
	 
	 @EJB
	 private SearchBulkConvertReimbService searchBulkConvertToReimbService;
	
	 @EJB
	 private SearchGenerateRemainderBulkService bulkReminderSerachSevice;
	 
	 private DraftInvestigatorDto draftInvestigatorDto;

	/**
	 * Added for Process RRC Request page --- starts
	 * */

	@EJB
	private UserProductMappingService userMappingService;
	
	@EJB
	private UserMagmtService userMagmtService;
	
	@EJB
	private ProcessDataEntryService dataEntryService;
	
	@EJB
	private ViewClaimHistoryService viewClaimHistoryService;

	private HospitalCommunicationUpdateMapper acknowledgeMapper =  HospitalCommunicationUpdateMapper.getInstance();

	private ConvertClaimMapper convertClaimMapper = ConvertClaimMapper.getInstance();

	private Reimbursement reimObj;
	
	HashMap<String, String> enteredValues = new HashMap<String, String>();
	
	@EJB
	private ViewFVRService viewFVRService;
	
	@EJB
	private PASearchProcessClaimBillingService paSearchProcessClaimBillingService;
	
	
	@EJB
	private BranchManagerFeedbackService branchManagerFeedbackService;
	//private RODDocumentSummary rodDocSummary;

	@EJB
	private SearchCVCAuditActionService cvcActionService;

	protected void showPEDRequestProcess(
			@Observes @CDIEvent(MenuItemBean.PROCESS_PED_REQUEST_PROCESS) final ParameterDTO parameters) {
		view.setViewG(SearchPEDRequestProcessView.class, true);
	}

	protected void showPEDRequestApprove(
			@Observes @CDIEvent(MenuItemBean.PROCESS_PED_REQUEST_APPROVE) final ParameterDTO parameters) {
		view.setViewG(SearchPEDRequestApproveView.class, true);
	}
	
	 protected void showPEDQueryRequest(
			  @Observes @CDIEvent(MenuItemBean.PROCESS_PED_QUERY_REQUEST) final ParameterDTO parameters) {
			 view.setViewG(BancsSearchPEDRequestApproveView.class, true);
	}
	
	protected void showPEDRequestTeamLeadApprove(
			@Observes @CDIEvent(MenuItemBean.PROCESS_PED_REQUEST_TL_APPROVE) final ParameterDTO parameters) {
		view.setViewG(SearchPEDRequestTeamLeadView.class, true);
	}
	
	protected void showPEDInitiate(
			@Observes @CDIEvent(MenuItemBean.PED_INITIATE) final ParameterDTO parameters) {
		view.setViewG(SearchPEDInitiateView.class, true);
	}
	
	protected void showConvertClaimCashless(
			@Observes @CDIEvent(MenuItemBean.CONVERT_CLAIM_CASHLESS) final ParameterDTO parameters) {
		view.setViewG(SearchConverClaimCashlessView.class, true);
	}

	protected void showUploadTranslatedDocuments(
			@Observes @CDIEvent(MenuItemBean.UPLOAD_TRANSLATED_DOCUMENTS) final ParameterDTO parameters) {
		view.setViewG(SearchProcessTranslationView.class, true);
	}

	protected void showAdviseOnPed(
			@Observes @CDIEvent(MenuItemBean.ADVISE_ON_PED) final ParameterDTO parameters) {
		view.setViewG(SearchAdviseOnPEDView.class, true);
	}
	
//	Commented the below Cashless Screen
//	// TODO cashless
//	protected void showSubmitSpecialistAdvise(
//			@Observes @CDIEvent(MenuItemBean.SUBMIT_SPECIALLIST_ADVISE) final ParameterDTO parameters) {
//		BeanItemContainer<SelectValue> selectValueForRefferedByDoc = masterService
//				.getRefferedByDocList();
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodes();
//		view.setViewG(SubmitSpecialistView.class, selectValueForRefferedByDoc,
//				true, false, selectValueContainerForCPUCode);
//
////		 view.setViewG(SubmitSpecialistView.class, true);
//	}

	protected void showWithdrawPreauthView(
			@Observes @CDIEvent(MenuPresenter.WITHDRAW_PREAUTH_PAGE_VIEW) final ParameterDTO parameters) {

		SearchWithdrawCashLessProcessTableDTO tableDTO = (SearchWithdrawCashLessProcessTableDTO) parameters
				.getPrimaryParameter();

		Preauth preauthList = preauthService.getPreauthById(tableDTO.getKey());

		tableDTO.setPreauth(preauthList);

		PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//		PreMedicalMapper.getAllMapValues();

		//Long preauthKey = preauthList.getKey();

		PreauthDTO preauthDTO = premedicalMapper.getPreauthDTO(preauthList);
		setpreauthTOPreauthDTO(premedicalMapper, preauthList.getClaim(),
				preauthList, preauthDTO, false);
		
		if(preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList() != null){
			List<DiagnosisDetailsTableDTO> diagnosisTableList = preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
			List<ExclusionDetails> exclusionDetailsList = masterService.getExclusionDetailsList();
			for (DiagnosisDetailsTableDTO diagnosisDetailsTableDTO : diagnosisTableList) {
				//List<ExclusionDetails> exclusionDetailsList = masterService.getExclusionDetailsList();
				if(diagnosisDetailsTableDTO.getPedList() != null){
					for (PedDetailsTableDTO pedDetail : diagnosisDetailsTableDTO.getPedList()) {
						pedDetail.setExclusionAllDetails(exclusionDetailsList);
					}
				}
			}
		}
		
		Intimation intimationByKey = intimationService.getIntimationByKey(preauthList.getIntimation().getKey());
		
        preauthDTO.setCpuProvisionAmt(intimationByKey.getCpuCode() != null ? intimationByKey.getCpuCode().getProvisionAmount() : null);
        
        preauthDTO.setStrUserName(tableDTO.getUsername());
        preauthDTO.setStrPassword(tableDTO.getPassword());

		tableDTO.setPreauthDto(preauthDTO);

		BeanItemContainer<SelectValue> selectValueContainer = masterService
				.getConversionReasonByValue(ReferenceTable.WITHDRAWAL_REASON);

		// CR R1313
		if(!ReferenceTable.getGMCProductList().containsKey(intimationByKey.getPolicy().getProduct().getKey())){
			selectValueContainer = masterService
					.getSortedMasterBsedOnMasterTypeCode(ReferenceTable.WITHDRAWAL_REASON_RETAIL);
		}  // CR R1313
				
		Claim claim = preauthList.getClaim();
		
		Boolean isValidClaim = true;
		if(null != claim)
		{
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(claim.getLegalFlag()))
			{
				isValidClaim = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
		}
		
		if(isValidClaim){

		List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
				.search(claim.getKey(), false);
		
		

		List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
		for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {

			previousPreAuthTableDTO.setRequestedAmt(preauthService
					.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
							previousPreAuthTableDTO.getClaimKey()));
			newList.add(previousPreAuthTableDTO);

		}

		tableDTO.setPreviousPreAuthTableDTO(newList);

		tableDTO.setPolicyKey(preauthList.getPolicy().getKey());

		tableDTO.setClaimKey(preauthList.getClaim().getKey());

		ClaimDto claimDto = preauthDTO.getClaimDTO();
		claimDto.setClaimId(claim.getClaimId());
		MastersValue currency = claim.getCurrencyId();
		SelectValue currencyId = new SelectValue();
		currencyId.setId(currency.getKey());
		currencyId.setValue(currency.getValue());

		claimDto.setCurrencyId(currencyId);

		NewIntimationDto intimationDto = intimationService
				.getIntimationDto(preauthList.getIntimation());

		
		Double insuredSumInsured = calcService
				.getInsuredSumInsured(preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getInsuredId().toString(),
						preauthDTO.getPolicyDto().getKey(),preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getLopFlag());
		
		List<Preauth> preauthByClaimKey = preauthService
				.getPreauthByClaimKey(preauthList.getClaim().getKey());
		
		for (Preauth preauth2 : preauthByClaimKey) {
			preauthDTO.setReferenceType(preauth2.getPreauthId());
		}
		
		preauthDTO.setPreviousPreauthKey(tableDTO.getKey());
		
		if(preauthList.getRoomCategory() != null){
			SelectValue selected = new SelectValue();
			selected.setId(preauthList.getRoomCategory().getKey());
			selected.setValue(preauthList.getRoomCategory().getValue());
			preauthDTO.getPreauthDataExtractionDetails().setRoomCategory(selected);
			preauthDTO.getNewIntimationDTO().setRoomCategory(selected);
		}
		
		
		Long hospital = claim.getIntimation().getHospital();
		Hospitals hospitalById = hospitalService.getHospitalById(hospital);
		
		if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
			tableDTO.getPreauthDto().setIsSuspicious(hospitalById.getSuspiciousType());
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				tableDTO.getPreauthDto().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
			}
		}
		
		

		
		loadRRCRequestValues(preauthDTO,insuredSumInsured,SHAConstants.PROCESS_WITHDRAW_PREAUTH);
		preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
		preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
		
		//CR  R1186
		if(preauthDTO.getIsPEDInitiated()){
			boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			preauthDTO.setInsuredDeleted(isInsuredDeleted);
			
			//CR R1156
			boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			preauthDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);
		}
		
		/*//CR2019202
		 Map<String, String> getFraudAlert = calcService.getFraudAlerts(preauthDTO.getNewIntimationDTO().getIntimationId());
		 if(getFraudAlert != null && !getFraudAlert.isEmpty()){
			 preauthDTO.setFraudAlertFlag(getFraudAlert.get(SHAConstants.FLAG) != null ? getFraudAlert.get(SHAConstants.FLAG) : "N");
			 preauthDTO.setFraudAlertMsg(getFraudAlert.get(SHAConstants.ALERT_MESSAGE) != null ? getFraudAlert.get(SHAConstants.ALERT_MESSAGE) : null);
		 }*/
		 
		view.setWithdrawPreauthView(WithdrawPreauthWizard.class, tableDTO,
				intimationDto, claimDto, selectValueContainer);
		}

	}

	protected void showdownSizePreauthView(
			@Observes @CDIEvent(MenuPresenter.DOWNSIZE_PREAUTH_PAGE_VIEW) final ParameterDTO parameters) {

		SearchWithdrawCashLessProcessTableDTO tableDTO = (SearchWithdrawCashLessProcessTableDTO) parameters
				.getPrimaryParameter();

		PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//		PreMedicalMapper.getAllMapValues();

		Preauth preauthList = preauthService.getPreauthById(tableDTO.getKey());

		Preauth preauth = preauthService.getPreauthById(tableDTO.getKey());
		
		Boolean isValidClaim = true;
		if(null != preauth.getClaim())
		{
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(preauth.getClaim().getLegalFlag()))
			{
				isValidClaim = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
		}
		
		/*String[] split = preauth.getPreauthId().split("/");
		Integer seqNumber = Integer.valueOf(split[split.length - 1]);*/
		
		if(isValidClaim){

		Long preauthKey = preauth.getKey();
		

		PreauthDTO preauthDTO = premedicalMapper.getPreauthDTO(preauth);
		setpreauthTOPreauthDTO(premedicalMapper, preauth.getClaim(), preauth,
				preauthDTO, false);
		//preauthDTO.setRodHumanTask(tableDTO.getHumanTask());
		
		if(preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList() != null){
			List<DiagnosisDetailsTableDTO> diagnosisTableList = preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
			List<ExclusionDetails> exclusionDetailsList = masterService.getExclusionDetailsList();
			for (DiagnosisDetailsTableDTO diagnosisDetailsTableDTO : diagnosisTableList) {
				//List<ExclusionDetails> exclusionDetailsList = masterService.getExclusionDetailsList();
				if(diagnosisDetailsTableDTO.getPedList() != null){
					for (PedDetailsTableDTO pedDetail : diagnosisDetailsTableDTO.getPedList()) {
						pedDetail.setExclusionAllDetails(exclusionDetailsList);
					}
				}
			}
		}

		Double insuredSumInsured = calcService.getInsuredSumInsured(
				preauthDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), preauthDTO
						.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());

		// Double balanceSI =
		// dbCalculationService.getBalanceSI(intimationDTO.getPolicy().getKey()
		// ,intimationDTO.getInsuredPatient().getKey(),
		// intimationDTO.getPolicy().getTotalSumInsured());
		// Double balanceSI =
		// dbCalculationService.getBalanceSI(intimationDTO.getPolicy().getKey()
		// ,intimationDTO.getInsuredPatient().getKey(),
		// Double.valueOf(insuredSumInsured.toString()));
		Double balanceSI = 0d;
		List<Double> copayValue = new ArrayList<Double>();

		if(ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			balanceSI = calcService.getBalanceSIForGMC(preauthDTO.getNewIntimationDTO().getPolicy().getKey() ,preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(), preauth.getClaim().getKey());
			copayValue = calcService.getProductCoPayForGMC(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());

		}else{
			balanceSI = calcService.getBalanceSI(preauthDTO.getNewIntimationDTO().getPolicy().getKey() ,preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(), 0l, insuredSumInsured,preauthDTO.getNewIntimationDTO().getKey()).get(SHAConstants.TOTAL_BALANCE_SI);
			copayValue = calcService.getProductCoPay(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey() ,
					preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId(),
					preauthDTO.getNewIntimationDTO());
		}
		preauthDTO.setBalanceSI(balanceSI);
		preauthDTO.setProductCopay(copayValue);

		BeanItemContainer<SelectValue> selectValueContainer = masterService
				.getConversionReasonByValue(ReferenceTable.DOWNSIZE_REASON);

		if(!ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {
			selectValueContainer = masterService
					.getConversionReasonByValue(ReferenceTable.DOWNSIZE_REASON_RETAIL);
		}
		
		BeanItemContainer<SelectValue> escalateContainer = masterService
				.getConversionReasonByValue(ReferenceTable.ESCALATE_TO);

		Claim claim = preauthList.getClaim();

		List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
				.search(claim.getKey(), false);
		
//		List<Preauth> preauthByClaimKey = preauthService
//				.getPreauthByClaimKey(claim.getKey());
//
//		Preauth previousPreauthDetails = new Preauth();
//		if (!preauthByClaimKey.isEmpty()) {
//			for (Preauth previousPreauth : preauthByClaimKey) {
//				String[] preauthSplit = previousPreauth.getPreauthId().split(
//						"/");
//				Integer previousSeqNumber = Integer
//						.valueOf(preauthSplit[preauthSplit.length - 1]);
//				if (previousSeqNumber.equals(seqNumber - 1)) {
//					previousPreauthDetails = previousPreauth;
//					preauthDTO.setPreviousPreauthKey(previousPreauth.getKey());
//					List<ClaimAmountDetails> claimAmountDetailsByPreauth = preauthService
//							.getClaimAmountDetailsByPreauth(previousPreauth
//									.getKey());
//					Float amount = 0f;
//					for (ClaimAmountDetails claimAmountDetails : claimAmountDetailsByPreauth) {
//						if (claimAmountDetails.getPaybleAmount() != null) {
//							amount += claimAmountDetails.getPaybleAmount();
//						}
//					}
//
//					preauthDTO.setPreviousPreauthPayableAmount(previousPreauth
//							.getTotalApprovalAmount() != null ? previousPreauth
//							.getTotalApprovalAmount().intValue() : 0);
//					break;
//				}
//			}
//		}
		
		
		
		preauthDTO.setPreviousPreauthKey(preauthKey);
		
		preauthDTO.setStrUserName(tableDTO.getUsername());

		List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
		for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {
//			if ((tableDTO.getKey() != null && tableDTO.getKey().equals(
//					previousPreAuthTableDTO.getKey()))) {
				previousPreAuthTableDTO.setRequestedAmt(preauthService
						.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
								previousPreAuthTableDTO.getClaimKey()));
				newList.add(previousPreAuthTableDTO);
//			}
		}

		preauthDTO.setPreviousPreauthTableDTO(newList);

		List<Preauth> preauthByClaimKey = preauthService
				.getPreauthByClaimKey(preauth.getClaim().getKey());
		
		for (Preauth preauth2 : preauthByClaimKey) {
			preauthDTO.setReferenceType(preauth2.getPreauthId());
		}

		Preauth previousPreauth = null;
		if (!preauthByClaimKey.isEmpty()) {
			previousPreauth = preauthByClaimKey.get(0);

			/*String[] split = previousPreauth.getPreauthId().split("/");
			String defaultNumber = split[split.length - 1];*/
			//nextReferenceNo = Integer.valueOf(defaultNumber);
			for (Preauth preauth1 : preauthByClaimKey) {
				if (preauth1.getPreauthId() != null && ! preauth.getKey().equals(preauth1.getKey())
						&& ! preauth1.getStatus().getKey().equals(ReferenceTable.PREAUTH_REJECT_STATUS) 
						&& ! preauth1.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_REJECT_STATUS)) {
						previousPreauth = preauth1;
				}
			}

		}
		
		if (previousPreauth != null
					&& previousPreauth.getTotalApprovalAmount() != null) {
				preauthDTO.getPreauthDataExtractionDetails().setApprovedAmount(
						String.valueOf(previousPreauth
								.getTotalApprovalAmount().intValue()));
				preauthDTO.getPreauthDataExtractionDetails().setTotalApprAmt(previousPreauth.getTotalApprovalAmount());
				
			//IMSSUPPOR-28356 - ENHANCEMENT WITHDRAWN AND APPROVED CASES	
			if(ReferenceTable.WITHDRAW.equalsIgnoreCase(previousPreauth.getProcessType()) && ReferenceTable.ENHANCEMENT_PREAUTH_WITHDRAW_STATUS.equals(previousPreauth.getStatus().getKey())){
				preauthDTO.getPreauthDataExtractionDetails().setTotalApprAmt(0d);
			}
			
			//IMSSUPPOR-30160
			List<Preauth> preauthByClaimKeyDtls = preauthService
					.getPreauthListByClaimKeyInDesc(preauth.getClaim().getKey());
			Preauth previousPreauthLatest = null;
			for (Preauth preauthdtls : preauthByClaimKeyDtls) {
				if(preauthdtls.getStatus().getKey() != null && !preauthdtls.getStatus().getKey().equals(ReferenceTable.PREAUTH_REJECT_STATUS)
						&& !preauthdtls.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_REJECT_STATUS) && (preauthdtls.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_DOWNSIZE_STATUS)
								|| preauthdtls.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_PREAUTH_DOWNSIZE_STATUS))){
					previousPreauthLatest = preauthdtls;
					preauthDTO.getPreauthDataExtractionDetails().setTotalApprAmt(previousPreauthLatest.getTotalApprovalAmount());
					break;
				}
			}
				
			if(ReferenceTable.PREMIUM_DEDUCTION_PRODUCT_KEYS.containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {
				PremiaService premiaService = new PremiaService();
				Integer uniqueInstallmentAmount = premiaService.getUniqueInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
				preauthDTO.getPreauthMedicalDecisionDetails().setUniquePremiumAmt(uniqueInstallmentAmount.doubleValue());
				preauthDTO.getPreauthDataExtractionDetails().setApprovedAmountAftDeduction(previousPreauth.getApprovedAmtAftPremium());
			}
			
			preauthDTO.getPreauthDataExtractionDetails().setTotalOtherBenefitsApprovedAmt(previousPreauth.getOtherBenefitApprovedAmt());
			preauthDTO.setPreviousPreauthKey(previousPreauth.getKey());
		}
		
		if((ReferenceTable.getFHORevisedKeys().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
				|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
					(preauthDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
						|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
						|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
						&& ("G").equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan()))
				|| (preauthDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
				&& SHAConstants.YES_FLAG.equalsIgnoreCase(preauth.getOtherBenefitFlag())){
			List<OtherBenefitsTableDto> otherBenefitsList = premedicalService.getBenefitAmountDetailsByCashlessKey(preauth.getKey());
			preauthDTO.getPreauthDataExtractionDetails().setOtherBenefitsList(otherBenefitsList);
		}

		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA4(tableDTO.getIsCheifMedicalOfficer());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA3(tableDTO.getIsZonalMedicalHead());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA2(tableDTO.getIsZonalSeniorMedicalApprover());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA1(tableDTO.getIsZonalMedicalApprover());
		
		setClaimValuesToDTO(preauthDTO,claim);
		
		/*if(ReferenceTable.PREMIUM_DEDUCTION_PRODUCT_KEYS.containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {
			preauthDTO.getPreauthDataExtractionDetails().setApprovedAmountAftDeduction(preauth.getApprovedAmtAftPremium());
		}
		
		preauthDTO.setPreviousPreauthKey(preauthKey);*/
		
		if(preauth.getTotalApprovalAmount() != null){
			preauthDTO.setPreviousPreauthPayableAmount(preauth.getTotalApprovalAmount().intValue());
		}
		
		if(preauth.getRoomCategory() != null){
			SelectValue selected = new SelectValue();
			selected.setId(preauth.getRoomCategory().getKey());
			selected.setValue(preauth.getRoomCategory().getValue());
			preauthDTO.getPreauthDataExtractionDetails().setRoomCategory(selected);
			preauthDTO.getNewIntimationDTO().setRoomCategory(selected);
		}


		preauthDTO.setStrUserName(tableDTO.getUsername());
		loadRRCRequestValues(preauthDTO,insuredSumInsured,SHAConstants.PROCESS_DOWNSIZE_PREAUTH);
		preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
		preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
		
		//CR  R1186
		if(preauthDTO.getIsPEDInitiated()){
			boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			preauthDTO.setInsuredDeleted(isInsuredDeleted);
			
			//CR R1156
			boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			preauthDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);	
		}
				
		if(null != preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode()){
			
			List<MasOmbudsman> ombudsmanDetailsList = getOmbudsmanOffiAddrByPIOCode(preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode());
			
			if(ombudsmanDetailsList != null &&  !ombudsmanDetailsList.isEmpty())
				preauthDTO.getClaimDTO().setOmbudsManAddressList(ombudsmanDetailsList);
			
			MasterGST masGstObj = masterService.getGSTByStateId(preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode());

			if(null != masGstObj){
	
				preauthDTO.setGstNumber(masGstObj.getGstNumber());
				preauthDTO.setArnNumber(masGstObj.getArnNumber());
				preauthDTO.setGstState(masGstObj.getStateName());
			}
		}
		
		Long hospital = claim.getIntimation().getHospital();
		Hospitals hospitalById = hospitalService.getHospitalById(hospital);
		
		if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
			preauthDTO.setIsSuspicious(hospitalById.getSuspiciousType());
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				preauthDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
			}
		}
		/*//CR2019202
		 Map<String, String> getFraudAlert = calcService.getFraudAlerts(preauthDTO.getNewIntimationDTO().getIntimationId());
		 if(getFraudAlert != null && !getFraudAlert.isEmpty()){
			 preauthDTO.setFraudAlertFlag(getFraudAlert.get(SHAConstants.FLAG) != null ? getFraudAlert.get(SHAConstants.FLAG) : "N");
			 preauthDTO.setFraudAlertMsg(getFraudAlert.get(SHAConstants.ALERT_MESSAGE) != null ? getFraudAlert.get(SHAConstants.ALERT_MESSAGE) : null);
		 }*/
		//added for installment payment process in policy level and product level check  
		Map<String, String> getPolicyInstallment = calcService.getInstallmentPaymentFlag(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(),preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
		if(getPolicyInstallment != null && !getPolicyInstallment.isEmpty()){
			preauthDTO.setPolicyInstalmentFlag(getPolicyInstallment.get(SHAConstants.FLAG) != null ? getPolicyInstallment.get(SHAConstants.FLAG) : "N");
			preauthDTO.setPolicyInstalmentMsg(getPolicyInstallment.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) != null ? getPolicyInstallment.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) : null);
		}
		if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
			PremiaService premiaService = new PremiaService();
			Integer policyInstallmentAmount = premiaService.getPolicyInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			preauthDTO.setPolicyInstalmentPremiumAmt(policyInstallmentAmount.doubleValue());	
		}
		if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
			PremiaService premiaService = new PremiaService();
			String policyDueDate = premiaService.getPolicyInstallmentDetails(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			if (preauthDTO.getNewIntimationDTO().getPolicy().getPolicySource() != null && preauthDTO.getNewIntimationDTO().getPolicy().getPolicySource().equalsIgnoreCase(SHAConstants.BANCS_POLICY)) {
				preauthDTO.setPolicyInstalmentDueDate(SHAUtils.formatTimeFromString(policyDueDate.toString()));	
    			}
    			else{
    				preauthDTO.setPolicyInstalmentDueDate(SHAUtils.dateformatFromString(policyDueDate.toString()));
    			}
		}
		view.setDownsizePreauth(DownsizePreauthWizard.class, preauthDTO,
				selectValueContainer, escalateContainer);
		}

	}
	
	protected void showdownSizePreauthRequestView(
			@Observes @CDIEvent(MenuPresenter.DOWNSIZE_PREAUTH_REQUEST_PAGE_VIEW) final ParameterDTO parameters) {

		
		SearchWithdrawCashLessProcessTableDTO tableDTO = (SearchWithdrawCashLessProcessTableDTO) parameters
				.getPrimaryParameter();

		PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//		PreMedicalMapper.getAllMapValues();

		Preauth preauthList = preauthService.getPreauthById(tableDTO.getKey());

		Preauth preauth = preauthService.getPreauthById(tableDTO.getKey());

		Long preauthKey = preauth.getKey();

		PreauthDTO preauthDTO = premedicalMapper.getPreauthDTO(preauth);
		setpreauthTOPreauthDTO(premedicalMapper, preauth.getClaim(), preauth,
				preauthDTO, false);
		//preauthDTO.setRodHumanTask(tableDTO.getHumanTask());
		
		if(preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList() != null){
			List<DiagnosisDetailsTableDTO> diagnosisTableList = preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
			List<ExclusionDetails> exclusionDetailsList = masterService.getExclusionDetailsList();
			for (DiagnosisDetailsTableDTO diagnosisDetailsTableDTO : diagnosisTableList) {
				//List<ExclusionDetails> exclusionDetailsList = masterService.getExclusionDetailsList();
				if(diagnosisDetailsTableDTO.getPedList() != null){
					for (PedDetailsTableDTO pedDetail : diagnosisDetailsTableDTO.getPedList()) {
						pedDetail.setExclusionAllDetails(exclusionDetailsList);
					}
				}
			}
		}

		Double insuredSumInsured = calcService.getInsuredSumInsured(
				preauthDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), preauthDTO
						.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());

		Double balanceSI = 0d;
		List<Double> copayValue = new ArrayList<Double>();

		if(ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			balanceSI = calcService.getBalanceSIForGMC(preauthDTO.getNewIntimationDTO().getPolicy().getKey() ,preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(), preauth.getClaim().getKey());
			copayValue = calcService.getProductCoPayForGMC(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());

		}else{
			balanceSI = calcService.getBalanceSI(preauthDTO.getNewIntimationDTO().getPolicy().getKey() ,preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(), 0l, insuredSumInsured,preauthDTO.getNewIntimationDTO().getKey()).get(SHAConstants.TOTAL_BALANCE_SI);
			copayValue = calcService.getProductCoPay(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey() ,
					preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId(),
					preauthDTO.getNewIntimationDTO());
		}
		
		preauthDTO.setBalanceSI(balanceSI);
		preauthDTO.setProductCopay(copayValue);
		
		// Double balanceSI =
		// dbCalculationService.getBalanceSI(intimationDTO.getPolicy().getKey()
		// ,intimationDTO.getInsuredPatient().getKey(),
		// intimationDTO.getPolicy().getTotalSumInsured());
		// Double balanceSI =
		// dbCalculationService.getBalanceSI(intimationDTO.getPolicy().getKey()
		// ,intimationDTO.getInsuredPatient().getKey(),
		// Double.valueOf(insuredSumInsured.toString()));
		/*Double balanceSI = calcService.getBalanceSI(
				preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
				preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
				preauthDTO.getClaimKey(), insuredSumInsured,preauthDTO.getNewIntimationDTO().getKey()).get(
				SHAConstants.TOTAL_BALANCE_SI);*/
		/*List<Double> copayValue = calcService.getProductCoPay(
				preauthDTO.getNewIntimationDTO().getPolicy().getProduct()
						.getKey(), preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId(),preauthDTO.getNewIntimationDTO());
		preauthDTO.setBalanceSI(balanceSI);
		preauthDTO.setProductCopay(copayValue);*/

		BeanItemContainer<SelectValue> selectValueContainer = masterService
				.getConversionReasonByValue(ReferenceTable.DOWNSIZE_REASON);
		
		if(!ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {
			selectValueContainer = masterService
					.getConversionReasonByValue(ReferenceTable.DOWNSIZE_REASON_RETAIL);
		}		
		
		BeanItemContainer<SelectValue> escalateContainer = masterService
				.getConversionReasonByValue(ReferenceTable.ESCALATE_TO);

		Claim claim = preauthList.getClaim();

		List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
				.search(claim.getKey(), false);
		
		

		List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
		for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {
//			if ((tableDTO.getKey() != null && tableDTO.getKey().equals(
//					previousPreAuthTableDTO.getKey()))) {
				previousPreAuthTableDTO.setRequestedAmt(preauthService
						.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
								previousPreAuthTableDTO.getClaimKey()));
				newList.add(previousPreAuthTableDTO);
//			}
		}

		preauthDTO.setPreviousPreauthTableDTO(newList);
		
		/***
		 * find previous preauth
		 */
		
		List<Preauth> preauthByClaimKey = preauthService
				.getPreauthByClaimKey(preauth.getClaim().getKey());
		
		//Integer nextReferenceNo = 2;
		Preauth previousPreauth = null;
		if (!preauthByClaimKey.isEmpty()) {
			previousPreauth = preauthByClaimKey.get(0);

			/*String[] split = previousPreauth.getPreauthId().split("/");
			String defaultNumber = split[split.length - 1];*/
			//nextReferenceNo = Integer.valueOf(defaultNumber);
			for (Preauth preauth1 : preauthByClaimKey) {
				if (preauth1.getPreauthId() != null && ! preauth.getKey().equals(preauth1.getKey())
						&& ! preauth1.getStatus().getKey().equals(ReferenceTable.PREAUTH_REJECT_STATUS) 
						&& ! preauth1.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_REJECT_STATUS)) {
						previousPreauth = preauth1;
					}
				}
				
			if(ReferenceTable.PREMIUM_DEDUCTION_PRODUCT_KEYS.containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {
				PremiaService premiaService = new PremiaService();
				Integer uniqueInstallmentAmount = premiaService.getUniqueInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
				preauthDTO.getPreauthMedicalDecisionDetails().setUniquePremiumAmt(uniqueInstallmentAmount != null ? uniqueInstallmentAmount.doubleValue() : 0d);
				preauthDTO.getPreauthDataExtractionDetails().setApprovedAmountAftDeduction(previousPreauth.getApprovedAmtAftPremium());
			}
			
			preauthDTO.getPreauthDataExtractionDetails().setTotalOtherBenefitsApprovedAmt(previousPreauth.getOtherBenefitApprovedAmt());
			preauthDTO.setPreviousPreauthKey(previousPreauth.getKey());
		}

		if((ReferenceTable.getFHORevisedKeys().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
				|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
					(preauthDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
						|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
						|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
						&& ("G").equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan()))
				|| (preauthDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
						
				&& SHAConstants.YES_FLAG.equalsIgnoreCase(preauth.getOtherBenefitFlag())){
			List<OtherBenefitsTableDto> otherBenefitsList = premedicalService.getBenefitAmountDetailsByCashlessKey(preauth.getKey());
			preauthDTO.getPreauthDataExtractionDetails().setOtherBenefitsList(otherBenefitsList);
		}
		
		preauthDTO.setCopay(getCopay(preauthDTO.getNewIntimationDTO()
					.getInsuredAge(), preauth.getPolicy().getProduct().getKey(),preauth.getPolicy().getTotalSumInsured()));

		
//		preauthDTO.setPreviousPreauthKey(preauthKey);
//		preauthDTO.getPreauthDataExtractionDetails().setTotalApprAmt(previousPreauth.getTotalApprovalAmount());

		if (previousPreauth != null
				&& previousPreauth.getTotalApprovalAmount() != null) {
			preauthDTO.getPreauthDataExtractionDetails().setApprovedAmount(
					String.valueOf(previousPreauth
							.getTotalApprovalAmount().intValue()));
			preauthDTO.getPreauthDataExtractionDetails().setTotalApprAmt(previousPreauth.getTotalApprovalAmount());
			
		//IMSSUPPOR-28356 - ENHANCEMENT WITHDRAWN AND APPROVED CASES	
		if(ReferenceTable.WITHDRAW.equalsIgnoreCase(previousPreauth.getProcessType()) && ReferenceTable.ENHANCEMENT_PREAUTH_WITHDRAW_STATUS.equals(previousPreauth.getStatus().getKey())){
			preauthDTO.getPreauthDataExtractionDetails().setTotalApprAmt(0d);
		}
			
		if(ReferenceTable.PREMIUM_DEDUCTION_PRODUCT_KEYS.containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {
			PremiaService premiaService = new PremiaService();
			Integer uniqueInstallmentAmount = premiaService.getUniqueInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			preauthDTO.getPreauthMedicalDecisionDetails().setUniquePremiumAmt(uniqueInstallmentAmount.doubleValue());
			preauthDTO.getPreauthDataExtractionDetails().setApprovedAmountAftDeduction(previousPreauth.getApprovedAmtAftPremium());
		}
		
		preauthDTO.getPreauthDataExtractionDetails().setTotalOtherBenefitsApprovedAmt(previousPreauth.getOtherBenefitApprovedAmt());
		preauthDTO.setPreviousPreauthKey(previousPreauth.getKey());
	}

	if(ReferenceTable.getFHORevisedKeys().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) && SHAConstants.YES_FLAG.equalsIgnoreCase(preauth.getOtherBenefitFlag())){
		List<OtherBenefitsTableDto> otherBenefitsList = premedicalService.getBenefitAmountDetailsByCashlessKey(preauth.getKey());
		preauthDTO.getPreauthDataExtractionDetails().setOtherBenefitsList(otherBenefitsList);
	}
	
	preauthDTO.setCopay(getCopay(preauthDTO.getNewIntimationDTO()
				.getInsuredAge(), preauth.getPolicy().getProduct().getKey(),preauth.getPolicy().getTotalSumInsured()));
	

		preauthDTO.setReferenceType(preauth.getPreauthId());
		
		//preauthDTO.setRodHumanTask(tableDTO.getHumanTask());
		
		preauthDTO.setStrUserName(tableDTO.getUsername());
		preauthDTO.setStrPassword(tableDTO.getPassword());
		
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA4(tableDTO.getIsCheifMedicalOfficer());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA3(tableDTO.getIsZonalMedicalHead());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA2(tableDTO.getIsZonalSeniorMedicalApprover());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA1(tableDTO.getIsZonalMedicalApprover());
		
		if(! tableDTO.getIsSpecialistReply()){
			PreauthEscalate escalateByClaimKey = reimbursementService.getEscalateByClaimKey(preauth.getClaim().getKey());
			if(escalateByClaimKey != null){
				preauthDTO.getDownSizePreauthDataExtrationDetails().setEscalationRemarks(escalateByClaimKey.getEscalateRemarks());
				preauthDTO.getDownSizePreauthDataExtrationDetails().setEscalatedRole(escalateByClaimKey.getCreatedBy());
			}
		}else{
			preauthDTO.getDownSizePreauthDataExtrationDetails().setIsEscalateFromSpecialist(true);
			Specialist specialistByClaimKey = reimbursementService.getSpecialistByClaimKey(preauth.getClaim().getKey());
				if(specialistByClaimKey != null){
					preauthDTO.getDownSizePreauthDataExtrationDetails().setSpecialistType(specialistByClaimKey.getSpcialistType() != null ? 
							specialistByClaimKey.getSpcialistType().getValue() : "");
					preauthDTO.getDownSizePreauthDataExtrationDetails().setSpecialistRemarks(specialistByClaimKey.getSpecialistRemarks());
				}
		}
		
		if(preauth.getTotalApprovalAmount() != null){
			preauthDTO.setPreviousPreauthPayableAmount(preauth.getTotalApprovalAmount().intValue());
		}
		
		if(preauth.getRoomCategory() != null){
			SelectValue selected = new SelectValue();
			selected.setId(preauth.getRoomCategory().getKey());
			selected.setValue(preauth.getRoomCategory().getValue());
			preauthDTO.getPreauthDataExtractionDetails().setRoomCategory(selected);
			preauthDTO.getNewIntimationDTO().setRoomCategory(selected);
		}
		
		preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
		preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
		
		preauthDTO.setDbOutArray(tableDTO.getDbOutArray());
		
				
		if(null != preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode()){
		
			List<MasOmbudsman> ombudsmanDetailsList = getOmbudsmanOffiAddrByPIOCode(preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode());
			
			if(ombudsmanDetailsList != null &&  !ombudsmanDetailsList.isEmpty())
				preauthDTO.getClaimDTO().setOmbudsManAddressList(ombudsmanDetailsList);
			
			MasterGST masGstObj = masterService.getGSTByStateId(preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode());

			if(null != masGstObj){
	
				preauthDTO.setGstNumber(masGstObj.getGstNumber());
				preauthDTO.setArnNumber(masGstObj.getArnNumber());
				preauthDTO.setGstState(masGstObj.getStateName());
			}
		}
		
		// R1045
		preauthDTO.setCrcFlaggedReason(tableDTO.getCrcFlaggedReason());
		preauthDTO.setCrcFlaggedRemark(tableDTO.getCrcFlaggedRemark());
		preauthDTO.setCrmFlagged(tableDTO.getCrmFlagged());
		
		preauthDTO.setVipCustomer(tableDTO.getVipCustomer());
		
		Long hospital = claim.getIntimation().getHospital();
		Hospitals hospitalById = hospitalService.getHospitalById(hospital);
		
		if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
			preauthDTO.setIsSuspicious(hospitalById.getSuspiciousType());
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				preauthDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
			}
		}
		
		loadRRCRequestValues(preauthDTO,insuredSumInsured,SHAConstants.PROCESS_DOWNSIZE_REQUEST_PREAUTH);
		
		/*//CR2019202
		 Map<String, String> getFraudAlert = calcService.getFraudAlerts(preauthDTO.getNewIntimationDTO().getIntimationId());
		 if(getFraudAlert != null && !getFraudAlert.isEmpty()){
			 preauthDTO.setFraudAlertFlag(getFraudAlert.get(SHAConstants.FLAG) != null ? getFraudAlert.get(SHAConstants.FLAG) : "N");
			 preauthDTO.setFraudAlertMsg(getFraudAlert.get(SHAConstants.ALERT_MESSAGE) != null ? getFraudAlert.get(SHAConstants.ALERT_MESSAGE) : null);
		 }*/
		//added for installment payment process in policy level and product level check  
		Map<String, String> getPolicyInstallment = calcService.getInstallmentPaymentFlag(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(),preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
		if(getPolicyInstallment != null && !getPolicyInstallment.isEmpty()){
			preauthDTO.setPolicyInstalmentFlag(getPolicyInstallment.get(SHAConstants.FLAG) != null ? getPolicyInstallment.get(SHAConstants.FLAG) : "N");
			preauthDTO.setPolicyInstalmentMsg(getPolicyInstallment.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) != null ? getPolicyInstallment.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) : null);
		}
		if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
			PremiaService premiaService = new PremiaService();
			Integer policyInstallmentAmount = premiaService.getPolicyInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			preauthDTO.setPolicyInstalmentPremiumAmt(policyInstallmentAmount.doubleValue());	
		}
		if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
			PremiaService premiaService = new PremiaService();
			String policyDueDate = premiaService.getPolicyInstallmentDetails(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			if (preauthDTO.getNewIntimationDTO().getPolicy().getPolicySource() != null && preauthDTO.getNewIntimationDTO().getPolicy().getPolicySource().equalsIgnoreCase(SHAConstants.BANCS_POLICY)) {
				preauthDTO.setPolicyInstalmentDueDate(SHAUtils.formatTimeFromString(policyDueDate.toString()));	
    			}
    			else{
    				preauthDTO.setPolicyInstalmentDueDate(SHAUtils.dateformatFromString(policyDueDate.toString()));
    			}
		}
		view.setDownsizePreauthRequest(DownsizePreauthRequestWizard.class, preauthDTO,
				selectValueContainer, escalateContainer);

	}
	
//	protected void showProcessNegotiation(
//			@Observes @CDIEvent(MenuPresenter.NEGOTIATE_PREAUTH) final ParameterDTO parameters){
//		
//		SearchProcessNegotiationTableDTO tableDTO = (SearchProcessNegotiationTableDTO) parameters.getPrimaryParameter();
//		
//		Boolean isValid = true;
//		List<Map<String, Object>> taskProcedure = null ;
//		if(tableDTO.getIntimationNo() != null){
//			Map<String, Object> mapValues = new WeakHashMap<String, Object>();
//			mapValues.put(SHAConstants.INTIMATION_NO, tableDTO.getIntimationNo());
//			mapValues.put(SHAConstants.CURRENT_Q, SHAConstants.FLE_CURRENT_QUEUE);
//			Object[] setMapValues = SHAUtils.setRevisedObjArrayForGetTask(mapValues);
//			DBCalculationService dbCalculationService = new DBCalculationService();
//			taskProcedure = dbCalculationService.revisedGetTaskProcedure(setMapValues);
//		}
//		
//		PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//
//
//		Preauth preauthList = preauthService.getPreauthById(tableDTO.getKey());
//		Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(preauthList.getClaim().getKey());
//		
//
//		Preauth preauth = preauthService.getPreauthById(tableDTO.getKey());
//		
//		if((taskProcedure != null && !taskProcedure.isEmpty()) || 
//				preauth.getStatus().getKey().equals(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_SEND_FOR_PROCESSING_STATUS)){
//			isValid = false;
//			view.showErrorPopUp("Enhancement is Pending for action. Please complete the enhancement before processing the negotiation");
//		}
//		
//		
//		List<Preauth> preauthByClaimKeyDtls = preauthService
//				.getPreauthListByClaimKeyInDesc(preauth.getClaim().getKey());
//		Preauth previousPreauthLatest = null;
//		for (Preauth preauthdtls : preauthByClaimKeyDtls) {
//			//IMSSUPPOR-31741 - clear cashless added
//			if(preauthdtls.getStatus().getKey() != null && !preauthdtls.getStatus().getKey().equals(ReferenceTable.PREAUTH_REJECT_STATUS)
//					&& !preauthdtls.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_REJECT_STATUS)
//					&& !preauthdtls.getStatus().getKey().equals(ReferenceTable.CLEAR_CASHLESS_STATUS_FOR_PREAUTH)
//					&& !preauthdtls.getStatus().getKey().equals(ReferenceTable.CLEAR_CASHLESS_STATUS_FOR_ENHANCEMENT)){
//				previousPreauthLatest = preauthdtls;
//				break;
//			}
//		}
//		
//		if(previousPreauthLatest != null && isValid && (previousPreauthLatest.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_WITHDRAW_AND_REJECT)
//				|| previousPreauthLatest.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_AND_REJECT_STATUS))){
//			isValid = false;
//			view.showErrorPopUp("Withdraw/ Reject is done after referring the intimation to the Negotiation Process");
//		} else if(previousPreauthLatest != null && isValid && (previousPreauthLatest.getStatus().getKey().equals(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_SEND_FOR_PROCESSING_STATUS))){
//			isValid = false;
//			view.showErrorPopUp("Enhancement is Pending for action. Please complete the enhancement before processing the negotiation");
//		} 
//		/*Below condition removed as per satish sir comments
//		else	if(previousPreauthLatest != null && (previousPreauthLatest.getStatus().getKey().equals(ReferenceTable.DOWNSIZE_APPROVED_STATUS))){
//			isValid = false;
//			view.showErrorPopUp("DownSize is done after referring the intimation to the Negotiation Process");
//		}*/
//		
//		if(isValid) {
//		Long preauthKey = preauth.getKey();
//
//		PreauthDTO preauthDTO = premedicalMapper.getPreauthDTO(preauth);
//		setpreauthTOPreauthDTO(premedicalMapper, preauth.getClaim(), preauth,
//				preauthDTO, false);
//
//		
//		if(preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList() != null){
//			List<DiagnosisDetailsTableDTO> diagnosisTableList = preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
//			List<ExclusionDetails> exclusionDetailsList = masterService.getExclusionDetailsList();
//			for (DiagnosisDetailsTableDTO diagnosisDetailsTableDTO : diagnosisTableList) {
//
//				if(diagnosisDetailsTableDTO.getPedList() != null){
//					for (PedDetailsTableDTO pedDetail : diagnosisDetailsTableDTO.getPedList()) {
//						pedDetail.setExclusionAllDetails(exclusionDetailsList);
//					}
//				}
//			}
//		}
//
//		Double insuredSumInsured = calcService.getInsuredSumInsured(
//				preauthDTO.getNewIntimationDTO().getInsuredPatient()
//						.getInsuredId().toString(), preauthDTO
//						.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
//
//		Double balanceSI = calcService.getBalanceSI(
//				preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
//				preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
//				preauthDTO.getClaimKey(), insuredSumInsured,preauthDTO.getNewIntimationDTO().getKey()).get(
//				SHAConstants.TOTAL_BALANCE_SI);
//		List<Double> copayValue = calcService.getProductCoPay(
//				preauthDTO.getNewIntimationDTO().getPolicy().getProduct()
//						.getKey(), preauthDTO.getNewIntimationDTO()
//						.getInsuredPatient().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId(),preauthDTO.getNewIntimationDTO());
//		preauthDTO.setBalanceSI(balanceSI);
//		preauthDTO.setProductCopay(copayValue);
//
//		BeanItemContainer<SelectValue> selectValueContainer = masterService
//				.getConversionReasonByValue(ReferenceTable.DOWNSIZE_REASON);
//
//		BeanItemContainer<SelectValue> escalateContainer = masterService
//				.getConversionReasonByValue(ReferenceTable.ESCALATE_TO);
//
//		Claim claim = preauthList.getClaim();
//
//		List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
//				.search(claim.getKey(), false);
//		
//		
//
//		List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
//		for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {
//
//				previousPreAuthTableDTO.setRequestedAmt(preauthService
//						.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
//								previousPreAuthTableDTO.getClaimKey()));
//				newList.add(previousPreAuthTableDTO);
////			}
//		}
//		
//		/***
//		 * find previous preauth
//		 */
//		
//		List<Preauth> preauthByClaimKey = preauthService
//				.getPreauthListByClaimKeyInDesc(preauth.getClaim().getKey());
//		
//		//Integer nextReferenceNo = 2;
//		Preauth previousPreauth = null;
//		/*if (!preauthByClaimKey.isEmpty()) {
//			previousPreauth = preauthByClaimKey.get(0);
//
//			for (Preauth preauth1 : preauthByClaimKey) {
//				if (preauth1.getPreauthId() != null && ! preauth.getKey().equals(preauth1.getKey())
//						&& ! preauth1.getStatus().getKey().equals(ReferenceTable.PREAUTH_REJECT_STATUS) 
//						&& ! preauth1.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_REJECT_STATUS)) {
//						previousPreauth = preauth1;
//					}
//				}
//
//			}*/
//		for (Preauth preauth2 : preauthByClaimKey) {
//			if(preauth2.getStatus().getKey() != null && !preauth2.getStatus().getKey().equals(ReferenceTable.PREAUTH_REJECT_STATUS)
//					&& !preauth2.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_REJECT_STATUS)){
//				previousPreauth = preauth2;
//				break;
//			}
//		}
//		
//		
//		preauthDTO.setPreviousPreauthKey(preauthKey);
//		preauthDTO.getPreauthDataExtractionDetails().setTotalApprAmt(previousPreauth.getTotalApprovalAmount());
//
//		preauthDTO.setPreviousPreauthTableDTO(newList);
//
//		//preauthDTO.setReferenceType(preauth.getPreauthId());
//		//IMSSUPPOR-27038
//		preauthDTO.setReferenceType(preauthByClaimKey.get(0).getPreauthId());
//		
//
//		
//		preauthDTO.setStrUserName(tableDTO.getUsername());
//		preauthDTO.setStrPassword(tableDTO.getPassword());
//		
//		/*if(previousPreauth != null && previousPreauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_APPROVE_STATUS)){
//			if(!preauth.getKey().equals(previousPreauth.getKey())) {
//				preauthDTO.setIsNegotiationEnhnApproved(true);
//			}
//		}*/
//		
//		List<ClaimAmountDetails> findClaimAmountDetailsByPreauthKey = preauthService
//				.findClaimAmountDetailsByPreauthKey(previousPreauth.getKey());
//		preauthDTO
//				.getPreauthDataExtractionDetails()
//				.setClaimedDetailsList(
//						premedicalMapper
//								.getClaimedAmountDetailsDTOList(findClaimAmountDetailsByPreauthKey));
//		
//		preauthDTO
//		.getPreauthDataExtractionDetails().setAmtClaimed(previousPreauth.getClaimedAmt().toString());
//		preauthDTO
//		.getPreauthDataExtractionDetails().setNetAmt(previousPreauth.getNetAmount().toString());
//		
//		/*preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA4(tableDTO.getIsCheifMedicalOfficer());
//		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA3(tableDTO.getIsZonalMedicalHead());
//		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA2(tableDTO.getIsZonalSeniorMedicalApprover());
//		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA1(tableDTO.getIsZonalMedicalApprover());*/
//		
//		/*if(! tableDTO.getIsSpecialistReply()){
//			PreauthEscalate escalateByClaimKey = reimbursementService.getEscalateByClaimKey(preauth.getClaim().getKey());
//			if(escalateByClaimKey != null){
//				preauthDTO.getDownSizePreauthDataExtrationDetails().setEscalationRemarks(escalateByClaimKey.getEscalateRemarks());
//				preauthDTO.getDownSizePreauthDataExtrationDetails().setEscalatedRole(escalateByClaimKey.getCreatedBy());
//			}
//		}else{
//			preauthDTO.getDownSizePreauthDataExtrationDetails().setIsEscalateFromSpecialist(true);
//			Specialist specialistByClaimKey = reimbursementService.getSpecialistByClaimKey(preauth.getClaim().getKey());
//				if(specialistByClaimKey != null){
//					preauthDTO.getDownSizePreauthDataExtrationDetails().setSpecialistType(specialistByClaimKey.getSpcialistType() != null ? 
//							specialistByClaimKey.getSpcialistType().getValue() : "");
//					preauthDTO.getDownSizePreauthDataExtrationDetails().setSpecialistRemarks(specialistByClaimKey.getSpecialistRemarks());
//				}
//		}*/
//		
//		if(preauth.getTotalApprovalAmount() != null){
//			preauthDTO.setPreviousPreauthPayableAmount(preauth.getTotalApprovalAmount().intValue());
//		}
//		
//		preauthDTO.setDbOutArray(tableDTO.getDbOutArray());
//		
//		if(null != preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode()){
//			
//			MasterGST masGstObj = masterService.getGSTByStateId(preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode());
//
//			if(null != masGstObj){
//	
//				preauthDTO.setGstNumber(masGstObj.getGstNumber());
//				preauthDTO.setArnNumber(masGstObj.getArnNumber());
//				preauthDTO.setGstState(masGstObj.getStateName());
//			}
//		}
//		
//		loadRRCRequestValues(preauthDTO,insuredSumInsured,SHAConstants.PROCESS_DOWNSIZE_REQUEST_PREAUTH);
//		preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
//		preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
//		
//		if(tableDTO.getPointstoNegotiatedRemarks() != null) {
//			preauthDTO.setPointstoNegotiate(tableDTO.getPointstoNegotiatedRemarks());
//		}
//		if(tableDTO.getNegotiationAmt() != null){
//			preauthDTO.setAmtToNegotiate(String.valueOf(tableDTO.getNegotiationAmt()));
//		}
//		view.setNegotiationPreauthRequest(ProcessNegotiationWizard.class,preauthDTO,
//				selectValueContainer, escalateContainer);
//		}
//		
//	}

	/**
	 * used by cashless service.
	 * */

	protected void showSubmitSpecialist(
			@Observes @CDIEvent(MenuPresenter.SUBMIT_SPECIALIST) final ParameterDTO parameters) {
		SubmitSpecialistTableDTO bean = (SubmitSpecialistTableDTO) parameters
				.getPrimaryParameter();
		  Intimation intimation=intimationService.searchbyIntimationNo(bean.getIntimationNo());
		    
		  NewIntimationDto newIntimationDto=intimationService.getIntimationDto(intimation);
		
		  List<Claim> claimList = claimService.getClaimByIntimation(intimation.getKey());
		  Claim claimByKey = null;
		  if(null != claimList && !claimList.isEmpty())
		  {
			  claimByKey = claimList.get(0);
		  }
		
		if(bean.getKey() != null){
			Preauth preauthById = preauthService.getPreauthById(bean.getKey());
			bean.setPreauth(preauthById);
			
			String diagnosisForPreauthByKey = "";
			if(preauthById != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauthById.getKey());
				bean.setStageId(preauthById.getStage().getKey());
				
			}
			bean.setDiagnosis(diagnosisForPreauthByKey);
		}
		
		ClaimDto claimDTO = null;
		
		//NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			/*newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());*/
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(bean.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_SUBMIT_SPECIALIST_ADVISE_CASHLESS);
		/**
		 * Commented as of now , due to unknown stage.
		 * 
		 * */
	//	rrcDTO.setRequestedStageId(bean.getStageId());
		
		bean.setRrcDTO(rrcDTO);
		
		// R1045
		bean.setPreauthDTO(new PreauthDTO());
		bean.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
		
		bean.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
		bean.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		bean.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		
		bean.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
		bean.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		Long hospital = claimByKey.getIntimation().getHospital();
		Hospitals hospitalById = hospitalService.getHospitalById(hospital);
		
		if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
			bean.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				bean.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
			}
		}
		
		//R0474
		List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(bean.getPreauthDTO().getNewIntimationDTO().getInsuredPatient().getInsuredId());
		List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(bean.getPreauthDTO().getNewIntimationDTO().getInsuredPatient().getKey());

		bean.getPreauthDTO().setInsuredPedDetails(pedByInsured);
		bean.getPreauthDTO().setApprovedPedDetails(approvedPedByInsured);
		
		bean.getPreauthDTO().getNewIntimationDTO().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
		
		view.setSubmitSpecialist(SubmitSpecialistPageView.class, bean);
	}

	/**
	 * This method is not in use.
	 * 
	 * */
	
	protected void SubmitSpecialistAdviseReimbursement(
			@Observes @CDIEvent(MenuPresenter.SHOW_SUBMIT_SPECIALIST_ADVISE) final ParameterDTO parameters) {
		SubmitSpecialistTableDTO bean = (SubmitSpecialistTableDTO) parameters
				.getPrimaryParameter();
		
		 Intimation intimation=intimationService.searchbyIntimationNo(bean.getIntimationNo());
		    
		 NewIntimationDto newIntimationDto=intimationService.getIntimationDto(intimation);
		 
		 List<Claim> claimList = claimService.getClaimByIntimation(intimation.getKey());
		  Claim claimByKey = null;
		  if(null != claimList && !claimList.isEmpty())
		  {
			  claimByKey = claimList.get(0);
		  }

		ClaimDto claimDTO = null;
		
		//NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			/*newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());*/
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		Preauth PreauthByClaim = reimbursementService.getLatestPreauthByClaim(claimByKey.getKey());
		
		String diagnosisForPreauthByKey = "";
		if(PreauthByClaim != null ) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(PreauthByClaim.getKey());
			bean.setStageId(PreauthByClaim.getStage().getKey());
		}
		bean.setDiagnosis(diagnosisForPreauthByKey);
			
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(bean.getUsername());
		//rrcDTO.setStrUserName(bean.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_SUBMIT_SPECIALIST_ADVISE_REIMBURSEMENT);
	//	rrcDTO.setRequestedStageId(bean.get);
		bean.setRrcDTO(rrcDTO);
		
		// R1045
		bean.setPreauthDTO(new PreauthDTO());
		bean.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
		bean.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
		bean.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		bean.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark()); 
		
		bean.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
		bean.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		Long hospital = claimByKey.getIntimation().getHospital();
		Hospitals hospitalById = hospitalService.getHospitalById(hospital);
		
		if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
			bean.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				bean.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
			}
		}
		
		//R0474
		List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(bean.getPreauthDTO().getNewIntimationDTO().getInsuredPatient().getInsuredId());
		List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(bean.getPreauthDTO().getNewIntimationDTO().getInsuredPatient().getKey());

		bean.getPreauthDTO().setInsuredPedDetails(pedByInsured);
		bean.getPreauthDTO().setApprovedPedDetails(approvedPedByInsured);
		 
		bean.getPreauthDTO().getNewIntimationDTO().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
		    
		view.setSubmitSpecialistAdvise(SubmitSpecialistAdviseView.class, bean);
	}
	
	public void handleTarget(
			@Observes @CDIEvent(LoaderPresenter.LOAD_URL) final ParameterDTO parameters) {
		String url = (String) parameters.getPrimaryParameter(String.class);
		/*Object[] secondaryParameters = parameters.getSecondaryParameters();

		Object primaryParameter = null;

		if (secondaryParameters != null && secondaryParameters.length >= 1) {
			primaryParameter = secondaryParameters[0];
		}*/

		view.redirectAndLoad(LoaderView.class, url);
	}

	protected void showSearchClaim(
			@Observes @CDIEvent(MenuItemBean.SEARCH_CLAIM) final ParameterDTO parameters) {
		view.setViewG(SearchClaimView.class, true);
	}
//	Commented the below Cashless Screen
//	protected void showPreMedicalProcessingEnhancement(
//			@Observes @CDIEvent(MenuItemBean.PRE_MEDICAL_PROCESSING_ENHANCEMENT) final ParameterDTO parameters) {
//		// view.setViewG(SearchPreMedicalProcessingEnhancementView.class, true)
//		BeanItemContainer<SelectValue> selectValueContainerForIntimationSource = masterService
//				.getSelectValueContainer(ReferenceTable.INTIMATION_SOURCE);
////		BeanItemContainer<SelectValue> selectValueContainerForNetworkHospType = masterService
////				.getSelectValueContainer(ReferenceTable.NETWORK_HOSPITAL_TYPE);
//		
//		BeanItemContainer<SelectValue> selectValueContainerForNetworkHospType = masterService
//				.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
//		
////		BeanItemContainer<SelectValue> selectValueContainerForType = masterService
////				.getType(ReferenceTable.PRE_MEDICAL_PROCESSING_ENHANCEMENT);
//		
//		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getStageList();
//		
//		BeanItemContainer<SelectValue> specialityContainer = preauthService.getSpecialistTypeList();
//		
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
//				.getTmpCpuCodes();
//		
//		view.setViewG(SearchPreMedicalProcessingEnhancementView.class, true,
//				selectValueContainerForIntimationSource,
//				selectValueContainerForNetworkHospType, null,
//				selectValueContainerForType,specialityContainer,selectValueContainerForCPUCode,
//				SHAConstants.PRE_MEDICAL_PROCESSING_ENHANCEMENT);
//	}

	// Implementing new method for new menu CREATE_NEW_INTIMATION.

	protected void showNewPolicySearch(
			@Observes @CDIEvent(MenuItemBean.CREATE_NEW_INTIMATION) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> searchByContainer = masterService
				.getSelectValueContainer(ReferenceTable.INTIMATION_SEARCH_BY);

		BeanItemContainer<SelectValue> productNameContainer = masterService
				.getSelectValueContainerForProduct();

		BeanItemContainer<SelectValue> productTypeContainer = masterService
				.getSelectValueContainer(ReferenceTable.PRODUCT_TYPE);

		BeanItemContainer<SelectValue> policyCodeOrNameContainer = policyService
				.getSelectValueContainerForOrganization();

		view.setViewG(NewSearchPolicyView.class, true, searchByContainer,
				productNameContainer, productTypeContainer,
				policyCodeOrNameContainer);
	}
	
	protected void showOpRegisterClaimSearch(
			@Observes @CDIEvent(MenuItemBean.REGISTER_CLAIM_OP) final ParameterDTO parameters) {
		view.setViewG(OPRegisterClaimPolicyView.class, true);
	}
	
	protected void showOpExpiredPolicyClaimSearch(
			@Observes @CDIEvent(MenuItemBean.EXPIRED_POLICIES_CLAIM_OP) final ParameterDTO parameters) {
		view.setViewG(OPExpiredPolicyClaimView.class, true);
	}
//	Commented the below Cashless Screen
//	protected void showProcessRejection(
//			@Observes @CDIEvent(MenuItemBean.PROCESS_PREAUTH_REJECTION) final ParameterDTO parameters) {
//		
//		view.setViewG(SearchProcessRejectionView.class, true);
//	}

	protected void showAcknowledgeHospitalCommunication(
			@Observes @CDIEvent(MenuItemBean.ACKNOWLEDGE_HOSPITAL_COMMUNICATION) final ParameterDTO parameters) {
		
		BeanItemContainer<SelectValue> container = new BeanItemContainer<SelectValue>(SelectValue.class);
		
		BeanItemContainer<TmpCPUCode> tmpCpuCodes = cpuCodeService.getTmpCpuCodes();
		List<TmpCPUCode> itemIds = tmpCpuCodes.getItemIds();
		SelectValue selected = null;
		for (TmpCPUCode tmpCPUCode : itemIds) {
			selected = new SelectValue();
			selected.setId(tmpCPUCode.getCpuCode());
			selected.setValue(tmpCPUCode.getDescription());
			container.addBean(selected);
		}
		view.setViewForAcknowledgementSearch(SearchAcknowledgeHospitalCommunicationView.class,container, true,false);
	}

	protected void showEditHospitalDetailsSearch(
			@Observes @CDIEvent(MenuItemBean.EDIT_HOSPITAL_INFORMATION) final ParameterDTO parameters) {
		view.setViewG(SearchEditHospitalDetailsView.class, true);
	}

	protected void showPolicySearch(
			@Observes @CDIEvent(MenuItemBean.SEARCH_POLICY) final ParameterDTO parameters) {
		view.setViewG(SearchPolicyView.class, true);
	}

	protected void showStarfaxSimulation(
			@Observes @CDIEvent(MenuItemBean.STARFAX_SIMULATION) final ParameterDTO parameters) {
		//getTestTransaction();
		//view.setViewG(IStarFaxView.class, true);
	}
	
	protected void showSearchClaimPolicyWiseReport(
			@Observes @CDIEvent(MenuItemBean.SEARCH_CLAIM_POLICY_REPORT) final ParameterDTO parameters) {
		view.setViewG(SearchClaimPolicyReportView.class, true);
	}
	protected void showClaimsDailyReport(
			@Observes @CDIEvent(MenuItemBean.CLAIMS_DAILY_REPORT) final ParameterDTO parameters) {
//		view.setViewG(ClaimsDailyReportView.class, true);
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		BeanItemContainer<SelectValue> cpuContainer =  usertoCPUMapService.getRevisedUserCpuContainer(userId);
		
//		BeanItemContainer<SelectValue> cpuContainer =  masterService.getTmpCpuCodeList();
		BeanItemContainer<SelectValue> clmTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
		
		SelectValue cashlessClmTypeSelect = new SelectValue(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY,SHAConstants.CASHLESS_CLAIM_TYPE);
		SelectValue reimbClmTypeSelect = new SelectValue(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY,SHAConstants.REIMBURSEMENT_CLAIM_TYPE);
		clmTypeContainer.addBean(cashlessClmTypeSelect);
		clmTypeContainer.addBean(reimbClmTypeSelect);
		
		
		view.setClaimsDailyReportView(ClaimsDailyReportView.class,true, cpuContainer, clmTypeContainer);
		
	}
	
	protected void showGmcDailyReport(
			@Observes @CDIEvent(MenuItemBean.GMC_DAILY_REPORT) final ParameterDTO parameters) {
//		view.setViewG(ClaimsDailyReportView.class, true);
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		BeanItemContainer<SelectValue> cpuContainer =  usertoCPUMapService.getRevisedUserCpuContainer(userId);
		
//		BeanItemContainer<SelectValue> cpuContainer =  masterService.getTmpCpuCodeList();
		BeanItemContainer<SelectValue> clmTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
		
		SelectValue cashlessClmTypeSelect = new SelectValue(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY,SHAConstants.CASHLESS_CLAIM_TYPE);
		SelectValue reimbClmTypeSelect = new SelectValue(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY,SHAConstants.REIMBURSEMENT_CLAIM_TYPE);
		clmTypeContainer.addBean(cashlessClmTypeSelect);
		clmTypeContainer.addBean(reimbClmTypeSelect);
		
		
		view.setGmcDailyReportView(GmcDailyReportView.class,true, cpuContainer, clmTypeContainer);
		
	}
	
	protected void showPreauthFormDocReport(
			@Observes @CDIEvent(MenuItemBean.PREAUTH_FORM_DOCUMENT_REPORT) final ParameterDTO parameters) {
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		
		view.setViewG(SearchPreauthFormDocReportView.class,true);
		
	}
	//R1257
	protected void showNotAdheringToANHReport(
			@Observes @CDIEvent(MenuItemBean.NOT_ADHERING_TO_ANH_REPORT) final ParameterDTO parameters) {
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		
		view.setViewGG(SearchNotAdheringToANHReportView.class,true);
		
	}
	
	
	protected void showCallcenterDashBoardReport(
			@Observes @CDIEvent(MenuItemBean.CALL_CENTER_DASH_BOARD) final ParameterDTO parameters) {
		view.setViewG(CallcenterDashBoardReportView.class, true);
	}

	protected void showPreauthCPUwiseReport(
			@Observes @CDIEvent(MenuItemBean.SEARCH_PREAUTH_CPUWISE_REPORT) final ParameterDTO parameters) {
		
		
//		BeanItemContainer<SelectValue> cpuContainer =  masterService.getTmpCpuCodeList();
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		BeanItemContainer<SelectValue> cpuContainer =  usertoCPUMapService.getRevisedUserCpuContainer(userId);
		view.setCPUwisePreauthSearch(CPUwisePreauthReportView.class, true,cpuContainer);
	}	
	
	protected void showExecutiveStatusReport(
			@Observes @CDIEvent(MenuItemBean.EXECUTIVE_STATUS_REPORT) final ParameterDTO parameters) {

		BeanItemContainer<SelectValue> empTypeContainer = masterService.getEmpTypeContainer();
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
		BeanItemContainer<SelectValue> cpuContainer =  usertoCPUMapService.getRevisedUserCpuContainer(userId);
		
//		BeanItemContainer<SelectValue> empContainer = masterService.getEmployeeLoginNameContainer();
		
		BeanItemContainer<SelectValue> empContainer = masterService.getRevisedEmpLoginNameContainer();
		
		
		view.setEmployeeTypeExecutiveStatusSearch(ExecutiveStatusDetailReportView.class, true,empTypeContainer,cpuContainer,empContainer);
	}
	
	protected void showExecutiveStatusSummaryReport(
			@Observes @CDIEvent(MenuItemBean.EXECUTIVE_STATUS_SUMMARY_REPORT) final ParameterDTO parameters) {
		
		BeanItemContainer<SelectValue> empTypeContainer = masterService.getEmpTypeContainer();
		
//		BeanItemContainer<SelectValue> empTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
//		SelectValue callcenterEmpSelect = new SelectValue(null,SHAConstants.CALLCENTRE_EMPLOYEE);
//		empTypeContainer.addBean(callcenterEmpSelect);
//		SelectValue claimsEmpSelect = new SelectValue(null,SHAConstants.CLAIMS_EMPLOYEE);
//		empTypeContainer.addBean(claimsEmpSelect);
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		BeanItemContainer<SelectValue> empCPUContainer =  usertoCPUMapService.getRevisedUserCpuContainer(userId);
//		BeanItemContainer<SelectValue> empContainer = masterService.getEmployeeLoginNameContainer();
		
		BeanItemContainer<SelectValue> empContainer = masterService.getRevisedEmpLoginNameContainer();
		
		    view.setExecutiveStatusSummaryView(ExecutiveStatusSummaryReportView.class, true, empCPUContainer,empTypeContainer, empContainer);
	}
		
	protected void showClaimStatusCPUwiseReport(
			@Observes @CDIEvent(MenuItemBean.CLAIM_STATUS_CPUWISE_REPORT) final ParameterDTO parameters) {
//		BeanItemContainer<SelectValue> cpuContainer =  masterService.getTmpCpuCodeList();
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		BeanItemContainer<SelectValue> cpuContainer =  usertoCPUMapService.getRevisedUserCpuContainer(userId);
		BeanItemContainer<SelectValue> claimStageContainer = masterService.getClaimStageContainer();
		
		view.setClaimsStatusReportView(ClaimsStatusReportView.class, true,cpuContainer,claimStageContainer);
	}
	
	protected void showAdministrativeDashBoard(
			@Observes @CDIEvent(MenuItemBean.ADMINISTRATIVE_DASH_BOARD) final ParameterDTO parameters) {
		view.setAdminDashBoardView(CallcenterDashBoardReportView.class, true,true);
	}
	
	protected void showPlannedAdmissionReport(
			@Observes @CDIEvent(MenuItemBean.PLANNED_ADMISSION_REPORT) final ParameterDTO parameters) {
		view.setViewG(PlannedAdmissionReportView.class, true);
	}
	
	protected void showIntimatedRiskDetailsReport(
			@Observes @CDIEvent(MenuItemBean.INTIMATED_RISK_DETAILS_REPORT) final ParameterDTO parameters) {
		view.setViewG(IntimatedRiskDetailsReportView.class, true);
	}
	
	protected void showMedicalAuditClaimStatusReport(
			@Observes @CDIEvent(MenuItemBean.MEDICAL_AUDIT_CLAIM_STATUS_REPORT) final ParameterDTO parameters) {
		
		List<SelectValue> statusList = new ArrayList<SelectValue>();
		
		SelectValue settledStatus = new SelectValue();
		settledStatus.setId(ReferenceTable.FINANCIAL_APPROVE_STATUS);
		settledStatus.setValue(SHAConstants.SETTLED_STATUS);
		statusList.add(settledStatus);
		
		SelectValue rejectedStatus = new SelectValue();
		rejectedStatus.setValue(SHAConstants.REJECTED_STATUS);
		statusList.add(rejectedStatus);
		
		SelectValue closedStatus = new SelectValue();
		closedStatus.setValue(SHAConstants.CLOSED_STATUS);
		statusList.add(closedStatus);		
		
		SelectValue pendingStatus = new SelectValue();
		pendingStatus.setValue(SHAConstants.PENDING_STATUS);
		statusList.add(pendingStatus);
		
		BeanItemContainer<SelectValue> statusContainer =  new BeanItemContainer<SelectValue>(SelectValue.class);
		
		statusContainer.addAll(statusList);
		view.setMedicalAuditClaimStatusSearch(MedicalAuditClaimStatusReportView.class, true,statusContainer);
	}
	
	protected void showMedicalAuditCashlessIssuanceReport(
			@Observes @CDIEvent(MenuItemBean.MEDICAL_AUDIT_CASHLESS_ISSUANCE_REPORT) final ParameterDTO parameters) {
		
		List<SelectValue> statusList = new ArrayList<SelectValue>();
		
		SelectValue settledStatus = new SelectValue();
		settledStatus.setId(ReferenceTable.FINANCIAL_APPROVE_STATUS);
		settledStatus.setValue(SHAConstants.SETTLED_STATUS);
		statusList.add(settledStatus);
		
		SelectValue rejectedStatus = new SelectValue();
		rejectedStatus.setValue(SHAConstants.REJECTED_STATUS);
		statusList.add(rejectedStatus);
		
		SelectValue closedStatus = new SelectValue();
		closedStatus.setValue(SHAConstants.CLOSED_STATUS);
		statusList.add(closedStatus);		
		
		SelectValue pendingStatus = new SelectValue();
		pendingStatus.setValue(SHAConstants.PENDING_STATUS);
		statusList.add(pendingStatus);
		
		BeanItemContainer<SelectValue> statusContainer =  new BeanItemContainer<SelectValue>(SelectValue.class);
		
		statusContainer.addAll(statusList);
		view.setMedicalAuditCashlessIssuanceReportSearch(MedicalAuditCashlessIssuanceReportView.class, true,statusContainer);
	}
	
	protected void showIntimationAlternateCPUDetailsReport(
			@Observes @CDIEvent(MenuItemBean.INTIMATION_ALTERNATE_CPU_REPORT) final ParameterDTO parameters) {
		view.setViewG(IntimationAlternateCPUwiseReportView.class, true);
	}
	
//		Reports Implementation
	
//	protected void showBillReceivedStatusReport(
//			@Observes @CDIEvent(MenuItemBean.BILL_RECIECVED_STATUS_REPORT) final ParameterDTO parameters) {
//		view.setViewG(BillReceivedStatusReportView.class, true);
//	}
//	
//	protected void showPaymentProcessReport(
//			@Observes @CDIEvent(MenuItemBean.PAYMENT_PROCESS_REPORT) final ParameterDTO parameters) {
//		view.setViewG(PaymentProcessReportView.class, true);
//	}
//	

	
	
	// R3 TODO
	protected void showAddAdditionalDoc(
			@Observes @CDIEvent(MenuItemBean.ADD_ADDITIONAL_DOC) final ParameterDTO parameters) {
		view.setViewG(SearchAddAdditionalDocumentView.class, true);
	}
	
	protected void showUploadNEFTDetails(
			@Observes @CDIEvent(MenuItemBean.UPLOAD_NEFT_DETAILS) final ParameterDTO parameters) {
		view.setViewG(SearchUploadNEFTDetailsView.class, true);
	}
	
	//R1069
	protected void showAddAdditionalDocumentPaymentInfo(
			@Observes @CDIEvent(MenuItemBean.ADD_ADDITIONAL_DOCUMENT_PAYMENT_INFORMATION) final ParameterDTO parameters) {
		view.setViewG(SearchAddAdditionalDocumentPaymentInfoView.class, true);
	}
	
	protected void showPhysicalReceivedDocuments(
			@Observes @CDIEvent(MenuItemBean.PHYSICAL_DOCUMENT) final ParameterDTO parameters) {
		view.setPhysicalVerification(PhysicalDocumentReceivedMakerView.class, true,SHAConstants.PHYSICAL_DOCUMENT);
	}
	
	protected void showNegotiationReport(
			@Observes @CDIEvent(MenuItemBean.NEGOTIATION_REPORT) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodes();
		BeanItemContainer<SelectValue> empContainer = masterService.getRevisedEmpLoginNameContainer();
		view.setViewNegotiationReport(NegotiationReportView.class,true,selectValueContainerForCPUCode,empContainer);
	}
	
	protected void showFraudAnalysisReport(
			@Observes @CDIEvent(MenuItemBean.FRAUD_ANALYSIS_REPORT) final ParameterDTO parameters) {
		view.setViewFraudAnalysisReport(FraudReportView.class);
	}

	//Draft query
	
	protected void showDraftQueryLetterDetailView(
			@Observes @CDIEvent(MenuItemBean.DRAFT_QUERY_LETTER_DETAIL) final ParameterDTO parameters) {
		//BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
		//		.getTmpCpuCodes();

		SearchDraftQueryLetterTableDTO searchDraftQueryLetterTableDTO = (SearchDraftQueryLetterTableDTO) parameters
				.getPrimaryParameter();
		Long rodKey = searchDraftQueryLetterTableDTO.getRodKey();
				
		Reimbursement reimburment=reimbursementService.getReimbursementByKey(rodKey);
		String diagnosisForPreauthByKey = "";
		if(reimburment != null ) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimburment.getKey());
			
		}
		searchDraftQueryLetterTableDTO.setDiagnosis(diagnosisForPreauthByKey);
		
		Long reimbursementQueryKey = searchDraftQueryLetterTableDTO
				.getQueryKey();
		ReimbursementQueryDto reimbursementQueryDto = reimbursementQuerySerice
				.getReimbursementQuery(reimbursementQueryKey);
		/*Boolean isValidClaimForQuery = true;
		if(null != reimbursementQueryDto && null != reimbursementQueryDto.getReimbursementDto() && null != reimbursementQueryDto.getReimbursementDto().getClaimDto() && null != reimbursementQueryDto.getReimbursementDto().getClaimDto().getKey())
		{
			Claim claimByKey = claimService.getClaimByKey(reimbursementQueryDto.getReimbursementDto().getClaimDto().getKey());	
			if(null != claimByKey)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
				{
					isValidClaimForQuery = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
		}
		if(isValidClaimForQuery)
		{*/
			searchDraftQueryLetterTableDTO
					.setReimbursementQueryDto(reimbursementQueryDto);
	
			List<ViewQueryDTO> queryList = searchDraftQueryLetterService
					.getQueryValues(reimbursementQueryDto.getReimbursementDto()
							.getKey(), reimbursementQueryDto.getReimbursementDto()
							.getClaimDto().getKey());
			
			if(queryList != null && !queryList.isEmpty()){
				OptionGroup radio  = null ;
				for (ViewQueryDTO viewQueryDTO : queryList) {
					if(reimbursementQueryDto.getKey() == viewQueryDTO.getKey()){
						radio = new OptionGroup();
						radio.addItems("");			
						radio.select("");
						viewQueryDTO.setSelect(radio);					
					}
				}			
			}
	
			searchDraftQueryLetterTableDTO.setQueryDetailsList(queryList);
	
			if (reimbursementQueryDto != null) {
				searchDraftQueryLetterTableDTO
						.setReimbursementQueryDto(reimbursementQueryDto);
	
			}
	
//			view.setDraftQueryLetterDetailView(DraftQueryLetterDetailView.class,
//					searchDraftQueryLetterTableDTO);
			reimbursementQueryDto.setDbOutArray(searchDraftQueryLetterTableDTO.getDbOutArray());
			
			Boolean policyValidation = policyService.getPolicyValidationObject(reimburment.getClaim().getIntimation().getPolicy().getPolicyNumber());
			searchDraftQueryLetterTableDTO.setIsPolicyValidate(policyValidation);
			
			
			if(ReferenceTable.getGMCProductList().containsKey(reimburment.getClaim().getIntimation().getPolicy().getProduct().getKey()) ||
					ReferenceTable.STAR_GOLD_GROUP_FOR_BANK_CUSTOMERS_KEY.equals(reimburment.getClaim().getIntimation().getPolicy().getProduct().getKey())){
				
			      Insured insuredByKey = intimationService.getInsuredByKey(reimburment.getClaim().getIntimation().getInsured().getKey());
			      Insured MainMemberInsured = null;
			      
			      if(insuredByKey.getDependentRiskId() == null){
			    	  MainMemberInsured = insuredByKey;
			      }else{
			    	  Insured insuredByPolicyAndInsuredId = intimationService.getInsuredByPolicyAndInsuredNameForDefault(reimburment.getClaim().getIntimation().getPolicy().getPolicyNumber(), insuredByKey.getDependentRiskId());
			    	  MainMemberInsured = insuredByPolicyAndInsuredId;
			      }
			      
			      if(MainMemberInsured != null){
			    	  
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().setGmcMainMemberName(MainMemberInsured.getInsuredName());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().setEmployeeCode(MainMemberInsured.getInsuredEmployeeId());
			    	  
			    	  /**
			    	   * Part of CR R1186
			    	   */
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setAddress1(MainMemberInsured.getAddress1());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setAddress2(MainMemberInsured.getAddress2());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setAddress3(MainMemberInsured.getAddress3());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setCity(MainMemberInsured.getCity());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setInsuredPinCode(MainMemberInsured.getInsuredPinCode());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setInsuredState(MainMemberInsured.getInsuredState());
			    	  
			      }
				}	

			
			Claim claimObject = claimService.getClaimByClaimKey(reimburment.getClaim().getKey());
			NewIntimationDto newIntimationDto = intimationService
					.getIntimationDto(claimObject.getIntimation());                                 //R20181323  -- Nominee Details set in intiamtionDto
			
			
			
			searchDraftQueryLetterTableDTO.getPreAuthDto().setNewIntimationDTO(newIntimationDto);
			
			// R1045
			searchDraftQueryLetterTableDTO.getPreAuthDto().setCrmFlagged(claimObject.getCrcFlag());
			searchDraftQueryLetterTableDTO.setCrcFlaggedReason(claimObject.getCrcFlaggedReason());
			searchDraftQueryLetterTableDTO.setCrcFlaggedRemark(claimObject.getCrcFlaggedRemark());
			searchDraftQueryLetterTableDTO.setCrmFlagged(claimObject.getCrcFlag());
			
			searchDraftQueryLetterTableDTO.getPreAuthDto().setClaimPriorityLabel(claimObject.getClaimPriorityLabel());
			
			LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
			legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
			searchDraftQueryLetterTableDTO.getPreAuthDto().setLegalHeirDto(legalHeirDTO);

			if(reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getNomineeList() == null
					|| (reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getNomineeList() != null
					 && reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getNomineeList().isEmpty())) {
				
			
				
				List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(searchDraftQueryLetterTableDTO.getRodKey());	
				if(displayDto != null && !displayDto.isEmpty()) {
					List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
					LegalHeirDTO legalHeirDTODisplay;
						for (LegalHeir legalHeir : displayDto) {
							legalHeirDTODisplay = new LegalHeirDTO(legalHeir);			
							
							/*legalHeirDTODisplay.setHeirName(legalHeir.getLegalHeirName());
							SelectValue value = new SelectValue();
							value.setId(legalHeir.getRelationCode());
							value.setValue(legalHeir.getRelationDesc());
							legalHeirDTODisplay.setRelationship(value);
							legalHeirDTODisplay.setSharePercentage(legalHeir.getSharePercentage());
							legalHeirDTODisplay.setAddress(legalHeir.getAddress());
							SelectValue accValue = new SelectValue();
							accValue.setValue(legalHeir.getAccountType());
							legalHeirDTODisplay.setAccountType(accValue);
							legalHeirDTODisplay.setBeneficiaryName(legalHeir.getBeneficiaryName());
							legalHeirDTODisplay.setAccountNo(legalHeir.getAccountNo());
							legalHeirDTODisplay.setIfscCode(legalHeir.getIfscCode());
							SelectValue docValue = new SelectValue();
							docValue.setValue(legalHeir.getAccountType());
							legalHeirDTODisplay.setDocType(accValue);*/
							legalHeirDTODisplay.setRelationshipContainer(masterService.getRelationshipContainerValues());
							
							list.add(legalHeirDTODisplay);
							
						}		
					
						searchDraftQueryLetterTableDTO.getReimbursementQueryDto().getReimbursementDto().setLegalHeirDTOList(list);
				}
			}	

			//CR R201801323
			reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getPolicy().getKey(), reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().getKey()));
			
			view.setDraftQueryLetterDetailView(DecideOnDraftQueryDetailWizardViewImpl.class,
					searchDraftQueryLetterTableDTO);
			
	//}

	}

	//Process Draft query letter
	protected void showProcessDraftQueryLetterWizard(
			@Observes @CDIEvent(MenuItemBean.PROCESS_DRAFT_QUERY_LETTER_DETAIL) final ParameterDTO parameters) {
//		view.setViewG(SearchProcessDraftQueryView.class, true);

		SearchProcessDraftQueryTableDTO searchQueryLetterTableDto = (SearchProcessDraftQueryTableDTO) parameters
				.getPrimaryParameter();

		Long reimbursementQueryKey = searchQueryLetterTableDto.getQueryKey();
		
		Long rodKey = searchQueryLetterTableDto.getRodKey();
		
		Reimbursement reimburment=reimbursementService.getReimbursementByKey(rodKey);
		String diagnosisForPreauthByKey = "";
		if(reimburment != null ) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimburment.getKey());
			
		}
		searchQueryLetterTableDto.setDiagnosis(diagnosisForPreauthByKey);
		
		ClaimQueryDto claimQueryDto = new ClaimQueryDto();

		ReimbursementQueryDto reimbursementQueryDto = reimbursementQuerySerice
				.getReimbursementQuery(reimbursementQueryKey);
		
		claimQueryDto.setDiagnosis(diagnosisForPreauthByKey);
		
		/*Boolean isValidClaimForQuery = true;
		if(null != reimbursementQueryDto && null != reimbursementQueryDto.getReimbursementDto() && null != reimbursementQueryDto.getReimbursementDto().getClaimDto() && null != reimbursementQueryDto.getReimbursementDto().getClaimDto().getKey())
		{
			Claim claimByKey = claimService.getClaimByKey(reimbursementQueryDto.getReimbursementDto().getClaimDto().getKey());	
			if(null != claimByKey)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
				{
					isValidClaimForQuery = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
		}
		if(isValidClaimForQuery)
		{*/
			/*reimbursementQueryDto.setHumanTask(searchQueryLetterTableDto
					.getHumanTaskDTO());*/
			claimQueryDto.setReimbursementQueryDto(reimbursementQueryDto);
			List<ViewQueryDTO> queryList = searchDraftQueryLetterService
					.getQueryValues(reimbursementQueryDto.getReimbursementDto()
							.getKey(), reimbursementQueryDto.getReimbursementDto()
							.getClaimDto().getKey());
			
			if(queryList != null && !queryList.isEmpty()){
				OptionGroup radio = null;
				for (ViewQueryDTO viewQueryDTO : queryList) {
					if(reimbursementQueryDto.getKey() == viewQueryDTO.getKey()){
						radio = new OptionGroup();
						radio.addItems("");			
						radio.select("");
						viewQueryDTO.setSelect(radio);					
					}
				}			
			}		
	
			claimQueryDto.setQueryDetails(queryList);
			reimbursementQueryDto.setDbOutArray(searchQueryLetterTableDto.getDbOutArray());
			
			Boolean policyValidation = policyService.getPolicyValidationObject(reimburment.getClaim().getIntimation().getPolicy().getPolicyNumber());
			reimbursementQueryDto.setIsPolicyValidate(policyValidation);
			
			if(ReferenceTable.getGMCProductList().containsKey(reimburment.getClaim().getIntimation().getPolicy().getProduct().getKey()) ||
					ReferenceTable.STAR_GOLD_GROUP_FOR_BANK_CUSTOMERS_KEY.equals(reimburment.getClaim().getIntimation().getPolicy().getProduct().getKey())){
				
				
			      Insured insuredByKey = intimationService.getInsuredByKey(reimburment.getClaim().getIntimation().getInsured().getKey());
			      Insured MainMemberInsured = null;
			      
			      if(insuredByKey.getDependentRiskId() == null){
			    	  MainMemberInsured = insuredByKey;
			      }else{
			    	  Insured insuredByPolicyAndInsuredId = intimationService.getInsuredByPolicyAndInsuredNameForDefault(reimburment.getClaim().getIntimation().getPolicy().getPolicyNumber(), insuredByKey.getDependentRiskId());
			    	  MainMemberInsured = insuredByPolicyAndInsuredId;
			      }
			      
			      if(MainMemberInsured != null){
			    	  
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().setGmcMainMemberName(MainMemberInsured.getInsuredName());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().setEmployeeCode(MainMemberInsured.getInsuredEmployeeId());
			    	  
			    	  /**
			    	   * Part of CR R1186
			    	   */
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setAddress1(MainMemberInsured.getAddress1());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setAddress2(MainMemberInsured.getAddress2());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setAddress3(MainMemberInsured.getAddress3());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setCity(MainMemberInsured.getCity());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setInsuredPinCode(MainMemberInsured.getInsuredPinCode());
			    	  reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().setInsuredState(MainMemberInsured.getInsuredState());
			    	  
			      }
				}


			Claim claimObject = claimService.getClaimByClaimKey(reimburment.getClaim().getKey());
			NewIntimationDto newIntimationDto = intimationService
					.getIntimationDto(claimObject.getIntimation());
			claimQueryDto.getPreAuthDto().setNewIntimationDTO(newIntimationDto);
			
			/*if(reimburment != null ) {
				if(reimburment.getPatientStatus() != null 
						&& reimburment.getPatientStatus().getKey() != null 
						&& ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(reimburment.getPatientStatus().getKey())) {
					NomineeDetails nomineeObj = intimationService.getNomineeDetailsByInsuredId(reimburment.getClaim().getIntimation().getInsured().getKey());
					if(nomineeObj != null) {
						newIntimationDto.setNomineeName(nomineeObj.getNomineeName());
					}
					else {
						if(reimburment.getNomineeName() != null) {
							newIntimationDto.setNomineeName(reimburment.getNomineeName());
						}	
						if(reimburment.getNomineeAddr() != null) {
							newIntimationDto.setNomineeAddr(reimburment.getNomineeAddr());
						}
					}
				}		
			}*/			
						
			// R1045
			claimQueryDto.getPreAuthDto().setCrmFlagged(claimObject.getCrcFlag());
			claimQueryDto.setCrcFlaggedReason(claimObject.getCrcFlaggedReason());
			claimQueryDto.setCrcFlaggedRemark(claimObject.getCrcFlaggedRemark());
			claimQueryDto.setCrmFlagged(claimObject.getCrcFlag());
			
			claimQueryDto.getPreAuthDto().setClaimPriorityLabel(claimObject.getClaimPriorityLabel());
			//CR R201801323
			claimQueryDto.getReimbursementQueryDto().getReimbursementDto().getClaimDto().getNewIntimationDto().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getPolicy().getKey(), reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getInsuredPatient().getKey()));
			
			LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
			legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
			claimQueryDto.getPreAuthDto().setLegalHeirDto(legalHeirDTO);

			if(reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getNomineeList() == null
					|| (reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getNomineeList() != null
					 && reimbursementQueryDto.getReimbursementDto().getClaimDto().getNewIntimationDto().getNomineeList().isEmpty())) {
				
				
				List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(searchQueryLetterTableDto.getRodKey());	
				if(displayDto != null && !displayDto.isEmpty()) {
					List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
					LegalHeirDTO legalHeirDTODisplay;
						for (LegalHeir legalHeir : displayDto) {
							legalHeirDTODisplay = new LegalHeirDTO(legalHeir);			
							
							/*legalHeirDTODisplay.setHeirName(legalHeir.getLegalHeirName());
							SelectValue value = new SelectValue();
							value.setId(legalHeir.getRelationCode());
							value.setValue(legalHeir.getRelationDesc());
							legalHeirDTODisplay.setRelationship(value);
							legalHeirDTODisplay.setSharePercentage(legalHeir.getSharePercentage());
							legalHeirDTODisplay.setAddress(legalHeir.getAddress());
							SelectValue accValue = new SelectValue();
							accValue.setValue(legalHeir.getAccountType());
							legalHeirDTODisplay.setAccountType(accValue);
							legalHeirDTODisplay.setBeneficiaryName(legalHeir.getBeneficiaryName());
							legalHeirDTODisplay.setAccountNo(legalHeir.getAccountNo());
							legalHeirDTODisplay.setIfscCode(legalHeir.getIfscCode());
							SelectValue docValue = new SelectValue();
							docValue.setValue(legalHeir.getAccountType());
							legalHeirDTODisplay.setDocType(accValue);*/
							legalHeirDTODisplay.setRelationshipContainer(masterService.getRelationshipContainerValues());
							list.add(legalHeirDTODisplay);
							
						}		
					
						claimQueryDto.getReimbursementQueryDto().getReimbursementDto().setLegalHeirDTOList(list);
				}
			}	
			
			view.setDecideOnProcessDraftQueryWizardView(DecideOnProcessDraftQueryWizardViewImpl.class,
					claimQueryDto);
		//}
	}

	protected void showGenerateReminderLetterDetailView(
			@Observes @CDIEvent(MenuItemBean.GENERATE_REMINDER_LETTER_DETAIL) final ParameterDTO parameters) {
		view.setViewG(GenerateReminderLetterDetailView.class, true);

		SearchGenerateReminderTableDTO searchReminderLetterTableDto =
		 (SearchGenerateReminderTableDTO) parameters.getPrimaryParameter();
		 
		SearchDraftQueryLetterTableDTO	searchDraftQueryLetterTableDTO = new SearchDraftQueryLetterTableDTO();
		
		searchDraftQueryLetterTableDTO.setKey(searchDraftQueryLetterTableDTO.getQueryKey());
//		searchDraftQueryLetterTableDTO.setPolicyNo(searchReminderLetterTableDto.getPolicyNo());
//		searchDraftQueryLetterTableDTO.setIntimationkey(searchReminderLetterTableDto.getIntimationkey());
//		searchDraftQueryLetterTableDTO.setIntimationNo(searchReminderLetterTableDto.getIntimationNo());
//		searchDraftQueryLetterTableDTO.setClaimKey(searchReminderLetterTableDto.getClaimKey());
//		searchDraftQueryLetterTableDTO.setClaimNo(searchReminderLetterTableDto.getClaimNo());
//		searchDraftQueryLetterTableDTO.setClaimStatus(searchReminderLetterTableDto.getClaimStatus());
	/*	searchDraftQueryLetterTableDTO.setHumanTask(searchReminderLetterTableDto.getHumanTask());
		searchDraftQueryLetterTableDTO.setHumanTaskDTO(searchReminderLetterTableDto.getHumanTaskDTO());
		searchDraftQueryLetterTableDTO.setTaskNumber(searchReminderLetterTableDto.getHumanTaskDTO().getNumber());*/
		searchDraftQueryLetterTableDTO.setPassword(searchReminderLetterTableDto.getPassword());
		
		  Long reimbursementQueryKey = searchReminderLetterTableDto
					.getQueryKey();
			ReimbursementQueryDto reimbursementQueryDto = reimbursementQuerySerice
					.getReimbursementQuery(reimbursementQueryKey);
			
					searchDraftQueryLetterTableDTO
					.setReimbursementQueryDto(reimbursementQueryDto);
			/*Boolean isValidClaimForQuery = true;
			if(null != reimbursementQueryDto && null != reimbursementQueryDto.getReimbursementDto() && null != reimbursementQueryDto.getReimbursementDto().getClaimDto() && null != reimbursementQueryDto.getReimbursementDto().getClaimDto().getKey())
			{
				Claim claimByKey = claimService.getClaimByKey(reimbursementQueryDto.getReimbursementDto().getClaimDto().getKey());	
				if(null != claimByKey)
				{
					if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
					{
						isValidClaimForQuery = false;
						view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
					}
				}
			}
			if(isValidClaimForQuery)
			{*/
	
				List<ViewQueryDTO> queryList = searchDraftQueryLetterService
						.getQueryValues(reimbursementQueryDto.getReimbursementDto()
								.getKey(), reimbursementQueryDto.getReimbursementDto()
								.getClaimDto().getKey());
				
				if(queryList != null && !queryList.isEmpty()){
					OptionGroup radio = null ;
					for (ViewQueryDTO viewQueryDTO : queryList) {
						if(reimbursementQueryDto.getKey() == viewQueryDTO.getKey()){
							radio = new OptionGroup();
							radio.addItems("");			
							radio.select("");
							viewQueryDTO.setSelect(radio);					
						}
					}			
				}
	
				searchDraftQueryLetterTableDTO.setQueryDetailsList(queryList);
	
				if (reimbursementQueryDto != null) {
					searchDraftQueryLetterTableDTO
							.setReimbursementQueryDto(reimbursementQueryDto);
	
				}
			 	Claim claimObj = claimService.getClaimByClaimKey(searchReminderLetterTableDto.getClaimKey());
			 	ClaimDto claimDto = null;
			 	if(claimObj != null){
					
			 		claimDto =   ClaimMapper.getInstance().getClaimDto(claimObj);

				Intimation intimation = intimationService.getIntimationByKey(searchReminderLetterTableDto.getIntimationKey());
				 
				if(intimation != null){
					NewIntimationDto intimationDto = intimationService.getIntimationDto(intimation);
					
					if(claimDto == null){
						claimDto = new ClaimDto();
					}
					
					claimDto.setNewIntimationDto(intimationDto);
					searchDraftQueryLetterTableDTO.setClaimDto(claimDto);
				}
			
			view.setGenerateReminderLetterDetailView(
					GenerateReminderLetterDetailView.class,
					searchDraftQueryLetterTableDTO);
			//}
			 	}

	}

	protected void showDraftRejecionLetterDetailView(
			@Observes @CDIEvent(MenuItemBean.DRAFT_REJECTION_LETTER_DETAIL) final ParameterDTO parameters) {
		view.setViewG(DraftRejectionLetterDetailView.class, true);

		SearchDraftRejectionLetterTableDTO searchDraftRejectionLetterTableDTO = (SearchDraftRejectionLetterTableDTO) parameters
				.getPrimaryParameter();

		ReimbursementRejectionDto reimbursementRejectionDto = reimbursementRejectionService
				.getReimbursementRejectionByKey(searchDraftRejectionLetterTableDTO
						.getRodKey());

		if (reimbursementRejectionDto != null) {

			Reimbursement reimbursmentObj = reimbursementService
					.getReimbursementByKey(searchDraftRejectionLetterTableDTO
							.getRodKey());

			String diagnosisForPreauthByKey = "";
			if (reimbursmentObj != null) {
				diagnosisForPreauthByKey = preauthService
						.getDiagnosisForPreauthByKey(reimbursmentObj.getKey());

			}
			searchDraftRejectionLetterTableDTO
					.setDiagnosis(diagnosisForPreauthByKey);

			ReimbursementDto reimbursementDto = reimbursementRejectionDto
					.getReimbursementDto();
			String reconsiderCase = reimbursmentObj
					.getReconsiderationRequest();
			String reconsiderationReason = reimbursmentObj
					.getDocAcknowLedgement() != null
					&& reimbursmentObj.getDocAcknowLedgement()
							.getReconsiderationReasonId() != null ? reimbursmentObj
					.getDocAcknowLedgement().getReconsiderationReasonId()
					.getValue()
					: "";

			SelectValue rejectReconsider = new SelectValue(1l,
					reconsiderCase != null
							&& ("N").equalsIgnoreCase(reconsiderCase) ? "NO"
							: "YES");
			searchDraftRejectionLetterTableDTO
					.setReconsiderCase(rejectReconsider);

			SelectValue reconsiderReasonSelect = new SelectValue(1l,
					reconsiderationReason);
			searchDraftRejectionLetterTableDTO
					.setReconsiderReason(reconsiderReasonSelect);

			List<ReimbursementRejectionDetailsDto> rejectionDetailsList = getRejectionList(
					reimbursementRejectionDto.getReimbursementDto().getKey(),
					reimbursementRejectionDto.getKey());

			if (rejectionDetailsList != null && !rejectionDetailsList.isEmpty()) {
				searchDraftRejectionLetterTableDTO
						.setRejectionList(rejectionDetailsList);
			}

			List<Reimbursement> settledRodListbyClaimKey = reimbursementService.getSettledRecords(reimbursmentObj.getClaim().getKey());
			if(settledRodListbyClaimKey != null && !settledRodListbyClaimKey.isEmpty()){
				for (Reimbursement reimbursement : settledRodListbyClaimKey) {
					if(("Y").equalsIgnoreCase(reimbursement.getDocAcknowLedgement().getHospitalisationFlag())){
						reimbursementRejectionDto.setHospitalizationRodSettled(true);
						break;
					}
				}
			}
			
			reimbursementRejectionDto.setReimbursementDto(reimbursementDto);
			searchDraftRejectionLetterTableDTO
					.setReimbursementRejectionDto(reimbursementRejectionDto);

			reimbursementRejectionDto.setRejSubCategSelectValue(new SelectValue(reimbursmentObj.getRejSubCategoryId(),""));
			
			BeanItemContainer<SelectValue> rejectCategContainer = masterService
					.getReimbRejCategoryByValue();
			// masterService.getSelectValueContainer(ReferenceTable.REJECTION_CATEGORY);

			// add for corona grp product
			if(reimbursmentObj.getClaim().getIntimation().getPolicy().getProduct().getCode() != null && 
					(reimbursmentObj.getClaim().getIntimation().getPolicy().getProduct().getCode().equalsIgnoreCase(ReferenceTable.STAR_CORONA_GRP_PRODUCT_CODE)
							|| reimbursmentObj.getClaim().getIntimation().getPolicy().getProduct().getCode().equalsIgnoreCase(ReferenceTable.STAR_GRP_COVID_PROD_CODE))){
				if(reimbursmentObj.getClaim().getIntimation().getPolicy().getPolicyPlan().equalsIgnoreCase(SHAConstants.POLICY_COVID_GRP_PLAN_LUMPSUM)){
					rejectCategContainer = masterService.getReimbRejCategoryForCoronaFmlProd(reimbursmentObj.getClaim().getIntimation().getPolicy().getProduct().getKey() ,reimbursmentObj.getClaim().getIntimation().getPolicy().getPolicyPlan()); 
				}else if(reimbursmentObj.getClaim().getIntimation().getPolicy().getPolicyPlan().equalsIgnoreCase(SHAConstants.POLICY_COVID_GRP_PLAN_INDEMNITY)){
					rejectCategContainer =  masterService.getReimbRejCategoryForCoronaFmlProd(reimbursmentObj.getClaim().getIntimation().getPolicy().getProduct().getKey(),reimbursmentObj.getClaim().getIntimation().getPolicy().getPolicyPlan()); 
				}
			}
			if (reimbursmentObj.getDocAcknowLedgement()
					.getReconsiderationReasonId() != null
					&& ReferenceTable.SETTLED_RECONSIDERATION_ID
							.equals(reimbursmentObj.getDocAcknowLedgement()
									.getReconsiderationReasonId().getKey())) {
				rejectCategContainer = masterService
						.getSettledRejectionCategory();
			}

			searchDraftRejectionLetterTableDTO
					.setRejectCategList(rejectCategContainer.getItemIds());

			if (reimbursementRejectionDto.getReimbursementDto() != null) {
				ReimbursementDto reimbursementDto2 = reimbursementRejectionDto
						.getReimbursementDto();
				Policy policy = reimbursementDto2.getClaimDto()
						.getNewIntimationDto().getPolicy();

				if (policy.getHomeOfficeCode() != null) {
					
					List<MasOmbudsman> ombudsmanDetailsByCpuCode = getOmbudsmanOffiAddrByPIOCode(policy.getHomeOfficeCode());
					
					if(ombudsmanDetailsByCpuCode != null &&  !ombudsmanDetailsByCpuCode.isEmpty())
							reimbursementDto2.getClaimDto().setOmbudsManAddressList(ombudsmanDetailsByCpuCode);
				}											
			}
			reimbursementRejectionDto
					.setDbOutArray(searchDraftRejectionLetterTableDTO
							.getDbOutArray());
			// R1045
			Long rodKey = searchDraftRejectionLetterTableDTO.getRodKey();
			Reimbursement reimburment=reimbursementService.getReimbursementByKey(rodKey);
			Claim claimObject = claimService.getClaimByClaimKey(reimburment.getClaim().getKey());
			NewIntimationDto newIntimationDto = intimationService
					.getIntimationDto(claimObject.getIntimation());
			searchDraftRejectionLetterTableDTO.getPreAuthDto().setNewIntimationDTO(newIntimationDto);
			
			// R1045
			searchDraftRejectionLetterTableDTO.getPreAuthDto().setCrmFlagged(claimObject.getCrcFlag());
			searchDraftRejectionLetterTableDTO.setCrcFlaggedReason(claimObject.getCrcFlaggedReason());
			searchDraftRejectionLetterTableDTO.setCrcFlaggedRemark(claimObject.getCrcFlaggedRemark());
			searchDraftRejectionLetterTableDTO.setCrmFlagged(claimObject.getCrcFlag());
			
			searchDraftRejectionLetterTableDTO.getPreAuthDto().setClaimPriorityLabel(claimObject.getClaimPriorityLabel());
			
			LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
			legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
			searchDraftRejectionLetterTableDTO.getPreAuthDto().setLegalHeirDto(legalHeirDTO);
			
			List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(searchDraftRejectionLetterTableDTO.getRodKey());	
			if(displayDto != null && !displayDto.isEmpty()) {
				List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
				LegalHeirDTO legalHeirDTODisplay;
					for (LegalHeir legalHeir : displayDto) {
						legalHeirDTODisplay = new LegalHeirDTO(legalHeir);			
						
						/*legalHeirDTODisplay.setHeirName(legalHeir.getLegalHeirName());
						SelectValue value = new SelectValue();
						value.setId(legalHeir.getRelationCode());
						value.setValue(legalHeir.getRelationDesc());
						legalHeirDTODisplay.setRelationship(value);
						legalHeirDTODisplay.setSharePercentage(legalHeir.getSharePercentage());
						legalHeirDTODisplay.setAddress(legalHeir.getAddress());
						SelectValue accValue = new SelectValue();
						accValue.setValue(legalHeir.getAccountType());
						legalHeirDTODisplay.setAccountType(accValue);
						legalHeirDTODisplay.setBeneficiaryName(legalHeir.getBeneficiaryName());
						legalHeirDTODisplay.setAccountNo(legalHeir.getAccountNo());
						legalHeirDTODisplay.setIfscCode(legalHeir.getIfscCode());
						SelectValue docValue = new SelectValue();
						docValue.setValue(legalHeir.getAccountType());
						legalHeirDTODisplay.setDocType(accValue);*/
						legalHeirDTODisplay.setRelationshipContainer(masterService.getRelationshipContainerValues());
						list.add(legalHeirDTODisplay);
						
					}		
				
					searchDraftRejectionLetterTableDTO.getReimbursementRejectionDto().getReimbursementDto().setLegalHeirDTOList(list);
			}
			
			view.setDraftRejectionLetterDetailView(
					DraftRejectionLetterDetailView.class,
					searchDraftRejectionLetterTableDTO);
		}
	}
		
	private List<ReimbursementRejectionDetailsDto> getRejectionList(
			Long reimbKey,Long rejectionKey) {
		
		List<ReimbursementRejectionDetailsDto> rejectionDetailsList = reimbursementRejectionService
				.getRejectionTableDto(reimbKey);
		
		if(rejectionDetailsList != null && !rejectionDetailsList.isEmpty()){
			OptionGroup radio = null ;
			for (ReimbursementRejectionDetailsDto viewRejectionDetailsDTO : rejectionDetailsList) {
				if(rejectionKey != null && viewRejectionDetailsDTO.getRejectionKey() != null && rejectionKey.equals(viewRejectionDetailsDTO.getRejectionKey())){
					radio = new OptionGroup();
					radio.addItems("");			
					radio.select("");
					viewRejectionDetailsDTO.setSelect(radio);					
				}
			}
		}
		return rejectionDetailsList;
	}

	protected void showProcessDraftRejectionLetterWizard(
			@Observes @CDIEvent(MenuItemBean.DRAFT_REJECTION_LETTER_WIZARD) final ParameterDTO parameters) {

		view.setViewG(SearchDraftRejectionLetterView.class, true);

		SearchProcessDraftRejectionTableDTO searchProcssRejectionLetterTableDto = (SearchProcessDraftRejectionTableDTO) parameters
				.getPrimaryParameter();
		Long reimbursementKey = searchProcssRejectionLetterTableDto.getRodKey();
		ClaimRejectionDto claimRejectionDto = new ClaimRejectionDto();

		ReimbursementRejectionDto reimbursementRejectionDto = reimbursementRejectionService
				.getReimbursementRejectionByKey(reimbursementKey);
		
		String diagnosisForPreauthByKey = "";
		if(reimbursementKey != null ) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursementKey);
			
		}
		claimRejectionDto.setDiagnosis(diagnosisForPreauthByKey);
		
		/*Boolean isValidClaimForQuery = true;
		if(null != reimbursementRejectionDto && null != reimbursementRejectionDto.getReimbursementDto() && null != reimbursementRejectionDto.getReimbursementDto().getClaimDto() && null != reimbursementRejectionDto.getReimbursementDto().getClaimDto().getKey())
		{
			Claim claimByKey = claimService.getClaimByKey(reimbursementRejectionDto.getReimbursementDto().getClaimDto().getKey());	
			if(null != claimByKey)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
				{
					isValidClaimForQuery = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
		}
		if(isValidClaimForQuery)
		{*/
			if (reimbursementRejectionDto != null) {
	
				ReimbursementDto reimbursementDto = reimbursementRejectionDto
						.getReimbursementDto();
	
				/*reimbursementRejectionDto
						.setHumanTask(searchProcssRejectionLetterTableDto
								.getHumanTaskDTO());*/
	
				claimRejectionDto
						.setReimbursementRejectionDto(reimbursementRejectionDto);
	
				List<ReimbursementRejectionDetailsDto> rejectionDetailsList = getRejectionList(reimbursementRejectionDto.getReimbursementDto().getKey(), reimbursementRejectionDto.getKey());
	
				if (rejectionDetailsList != null && !rejectionDetailsList.isEmpty()) {
					
					claimRejectionDto.setRejectionDetailsList(rejectionDetailsList);
				}
	
//				String rejectionRole = "";
//				if (searchProcssRejectionLetterTableDto.getRejectionRole() != null) {
//					if (searchProcssRejectionLetterTableDto.getRejectionRole()
//							.equalsIgnoreCase(SHAConstants.SENIOR_MEDICAL_APPROVER)) {
//						rejectionRole = "Senior Medical Approver";
//					} else if (searchProcssRejectionLetterTableDto
//							.getRejectionRole().equalsIgnoreCase(
//									SHAConstants.MEDICAL_APPROVER_ROLE)) {
//						rejectionRole = "Medical Approver";
//					} else if (searchProcssRejectionLetterTableDto
//							.getRejectionRole().equalsIgnoreCase(SHAConstants.RCMO)) {
//						rejectionRole = "Reimbursement Chief Medical officer";
//					} else {
//						rejectionRole = "Financial Approver";
//					}
//				}
//				claimRejectionDto.setRejectionRole(rejectionRole);
				
				Reimbursement reimbursmentObj =reimbursementService.getReimbursementByKey(reimbursementRejectionDto
						.getReimbursementDto().getKey());
				
				String reconsiderCase = reimbursmentObj.getReconsiderationRequest();
				String reconsiderationReason =  reimbursmentObj.getDocAcknowLedgement() != null && reimbursmentObj.getDocAcknowLedgement().getReconsiderationReasonId() != null ? reimbursmentObj.getDocAcknowLedgement().getReconsiderationReasonId().getValue() : "";

				SelectValue rejectReconsider = new SelectValue(1l,reconsiderCase != null && ("N").equalsIgnoreCase(reconsiderCase) ? "NO":"YES");
				claimRejectionDto.setReconsiderCase(rejectReconsider);

				SelectValue reconsiderReasonSelect = new SelectValue(1l,reconsiderationReason);
				claimRejectionDto.setReconsiderReason(reconsiderReasonSelect);
				
				BeanItemContainer<SelectValue> rejectCategContainer = masterService.getReimbRejCategoryByValue();
//																	  masterService.getSelectValueContainer(ReferenceTable.REJECTION_CATEGORY);
				
				if(reimbursmentObj.getDocAcknowLedgement().getReconsiderationReasonId() != null && ReferenceTable.SETTLED_RECONSIDERATION_ID.equals(reimbursmentObj.getDocAcknowLedgement().getReconsiderationReasonId().getKey())){
					rejectCategContainer = masterService.getSettledRejectionCategory();
				}
				// add for corona grp product
				if(reimbursmentObj.getClaim().getIntimation().getPolicy().getProduct().getCode() != null && 
						(reimbursmentObj.getClaim().getIntimation().getPolicy().getProduct().getCode().equalsIgnoreCase(ReferenceTable.STAR_CORONA_GRP_PRODUCT_CODE)
								|| reimbursmentObj.getClaim().getIntimation().getPolicy().getProduct().getCode().equalsIgnoreCase(ReferenceTable.STAR_GRP_COVID_PROD_CODE))){
					if(reimbursmentObj.getClaim().getIntimation().getPolicy().getPolicyPlan().equalsIgnoreCase(SHAConstants.POLICY_COVID_GRP_PLAN_LUMPSUM)){
						rejectCategContainer = masterService.getReimbRejCategoryForCoronaFmlProd(reimbursmentObj.getClaim().getIntimation().getPolicy().getProduct().getKey() ,reimbursmentObj.getClaim().getIntimation().getPolicy().getPolicyPlan()); 
					}else if(reimbursmentObj.getClaim().getIntimation().getPolicy().getPolicyPlan().equalsIgnoreCase(SHAConstants.POLICY_COVID_GRP_PLAN_INDEMNITY)){
						rejectCategContainer =  masterService.getReimbRejCategoryForCoronaFmlProd(reimbursmentObj.getClaim().getIntimation().getPolicy().getProduct().getKey(),reimbursmentObj.getClaim().getIntimation().getPolicy().getPolicyPlan()); 
					}
				}
								
				claimRejectionDto.setRejectCategList(rejectCategContainer.getItemIds());
				
				reimbursementRejectionDto.setRejSubCategSelectValue(new SelectValue(reimbursmentObj.getRejSubCategoryId(),""));
				
				List<Reimbursement> settledRodListbyClaimKey = reimbursementService.getSettledRecords(reimbursmentObj.getClaim().getKey());
				if(settledRodListbyClaimKey != null && !settledRodListbyClaimKey.isEmpty()){
					for (Reimbursement reimbursement : settledRodListbyClaimKey) {
						if(("Y").equalsIgnoreCase(reimbursement.getDocAcknowLedgement().getHospitalisationFlag())){
							claimRejectionDto.getReimbursementRejectionDto().setHospitalizationRodSettled(true);
							break;
						}
					}
				}
								
				if(claimRejectionDto.getReimbursementRejectionDto() != null && claimRejectionDto.getReimbursementRejectionDto().getReimbursementDto() != null ){
					ReimbursementDto reimbursementDto2 = claimRejectionDto.getReimbursementRejectionDto().getReimbursementDto();
					Policy policy = reimbursementDto2.getClaimDto().getNewIntimationDto().getPolicy();
					
					if (policy.getHomeOfficeCode() != null) {
						List<MasOmbudsman> ombudsmanDetailsByCpuCode = getOmbudsmanOffiAddrByPIOCode(policy.getHomeOfficeCode());	
						if (ombudsmanDetailsByCpuCode != null && !ombudsmanDetailsByCpuCode.isEmpty()) {
							    reimbursementDto2.getClaimDto().setOmbudsManAddressList(ombudsmanDetailsByCpuCode);
						}
					}
				}
				
			}
				
			reimbursementRejectionDto.setDbOutArray(searchProcssRejectionLetterTableDto.getDbOutArray());
						
			Reimbursement reimburment=reimbursementService.getReimbursementByKey(reimbursementKey);
			
			if(reimburment != null) {
			
				Claim claimObject = claimService.getClaimByClaimKey(reimburment.getClaim().getKey());
				NewIntimationDto newIntimationDto = intimationService
						.getIntimationDto(claimObject.getIntimation());
				claimRejectionDto.getPreAuthDto().setNewIntimationDTO(newIntimationDto);
				
				// R1045
				claimRejectionDto.getPreAuthDto().setCrmFlagged(claimObject.getCrcFlag());
				claimRejectionDto.setCrcFlaggedReason(claimObject.getCrcFlaggedReason());
				claimRejectionDto.setCrcFlaggedRemark(claimObject.getCrcFlaggedRemark());
				claimRejectionDto.setCrmFlagged(claimObject.getCrcFlag());
				
				claimRejectionDto.getPreAuthDto().setClaimPriorityLabel(claimObject.getClaimPriorityLabel());
			
				if(reimburment.getPatientStatus() != null
						&& reimburment.getPatientStatus().getKey() != null 
						&& ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(reimburment.getPatientStatus().getKey())) {
					NomineeDetails nomineeObj = intimationService.getNomineeDetailsByInsuredId(reimburment.getClaim().getIntimation().getInsured().getKey());
					if(nomineeObj != null) {
						claimRejectionDto.getReimbursementRejectionDto().getReimbursementDto().getClaimDto().getNewIntimationDto().setNomineeName(nomineeObj.getNomineeName());
					}
					else{
						claimRejectionDto.getReimbursementRejectionDto().getReimbursementDto().getClaimDto().getNewIntimationDto().setNomineeName(null);
					}
				}
				//CR R201801323
				claimRejectionDto.getReimbursementRejectionDto().getReimbursementDto().getClaimDto().getNewIntimationDto().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(reimburment.getClaim().getIntimation().getPolicy().getKey(), reimburment.getClaim().getIntimation().getInsured().getKey()));
			}	
			
			LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
			legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
			claimRejectionDto.getPreAuthDto().setLegalHeirDto(legalHeirDTO);

			if(claimRejectionDto.getReimbursementRejectionDto().getReimbursementDto().getClaimDto().getNewIntimationDto().getNomineeList() == null
					|| (claimRejectionDto.getReimbursementRejectionDto().getReimbursementDto().getClaimDto().getNewIntimationDto().getNomineeList() != null
					 && claimRejectionDto.getReimbursementRejectionDto().getReimbursementDto().getClaimDto().getNewIntimationDto().getNomineeList().isEmpty())) {
				
				
				List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(searchProcssRejectionLetterTableDto.getRodKey());	
				if(displayDto != null && !displayDto.isEmpty()) {
					List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
					LegalHeirDTO legalHeirDTODisplay;
						for (LegalHeir legalHeir : displayDto) {
							legalHeirDTODisplay = new LegalHeirDTO(legalHeir);			
							
							/*legalHeirDTODisplay.setHeirName(legalHeir.getLegalHeirName());
							SelectValue value = new SelectValue();
							value.setId(legalHeir.getRelationCode());
							value.setValue(legalHeir.getRelationDesc());
							legalHeirDTODisplay.setRelationship(value);
							legalHeirDTODisplay.setSharePercentage(legalHeir.getSharePercentage());
							legalHeirDTODisplay.setAddress(legalHeir.getAddress());
							SelectValue accValue = new SelectValue();
							accValue.setValue(legalHeir.getAccountType());
							legalHeirDTODisplay.setAccountType(accValue);
							legalHeirDTODisplay.setBeneficiaryName(legalHeir.getBeneficiaryName());
							legalHeirDTODisplay.setAccountNo(legalHeir.getAcacountNo());
							legalHeirDTODisplay.setIfscCode(legalHeir.getIfscCode());
							SelectValue docValue = new SelectValue();
							docValue.setValue(legalHeir.getAccountType());
							legalHeirDTODisplay.setDocType(accValue);*/
							legalHeirDTODisplay.setRelationshipContainer(masterService.getRelationshipContainerValues());
							list.add(legalHeirDTODisplay);
							
						}		
					
						claimRejectionDto.getReimbursementRejectionDto().getReimbursementDto().setLegalHeirDTOList(list);
				}
			}	
				
			view.setDecideOnRejectionWizardView(
					DecideOnRejectionWizardViewImpl.class, claimRejectionDto);
		
	}

	/*
	 * protected void showProcessClaimRequestBenefits(
	 * 
	 * @Observes @CDIEvent(MenuItemBean.PROCESS_CLAIM_REQUEST_BENEFITS) final
	 * ParameterDTO parameters){
	 * view.setViewG(SearchProcessFieldVisitView.class, true); }
	 */

	
	protected void showCreateBatch(
			@Observes @CDIEvent(MenuItemBean.CREATE_BATCH) final ParameterDTO parameters) {
		
		String presenterString = "CREATE_BATCH";
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		//above code is commented since based on user cpu mapping cpu list has to shown in search batch screen by noufel
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodeList();
//		BeanItemContainer<SelectValue> selectValueContainerForNonKeralaCPUCode = masterService.getNonKeralaTmpCpuCodeList();
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = calcService.getTmpCpuCodeListByUser(userId);
		BeanItemContainer<SelectValue> selectValueContainerForNonKeralaCPUCode = calcService.getTmpCpuCodeListByUser(userId);
		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getTypeContainer(ReferenceTable.PAYMENT_STATUS);	
		BeanItemContainer<SelectValue> selectValueContainerForClaimant = masterService.getSelectValueContainer(ReferenceTable.ACK_DOC_RECEIVED_FROM);	
		BeanItemContainer<SelectValue> selectValueContainerForClaimType = masterService.getClaimTypeContainer(ReferenceTable.CLAIM_TYPE);
		BeanItemContainer<SelectValue> selectValueContainerForVerificationType = masterService.getClaimTypeContainer(ReferenceTable.VERIFICATION_TYPE);
		BeanItemContainer<SelectValue> selectValueContainerForPaymentStatus = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);	
		BeanItemContainer<SelectValue> selectValueContainerForBatchType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
		BeanItemContainer<SelectValue> selectValueContainerForZoneType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
		BeanItemContainer<SpecialSelectValue> selectValueContainerForProduct = masterService.getContainerForProduct();
		BeanItemContainer<SelectValue> selectValueContainerForPenalInstDays = masterService.getMasterValueByCode(SHAConstants.PENAL_INTEST_DUE);
		//BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_STATUS);
		
		//view.setViewCreateAndSearchLot(CreateAndSearchLotView.class, true);
	
		
		CreateAndSearchLotTableDTO  createAndSearchLotTableDTO= new CreateAndSearchLotTableDTO();
	/*	Claim claimObj = claimService.getClaimsByIntimationNumber(createAndSearchLotTableDTO.getIntimationNo()); 
		
		if(claimObj != null)
		{			
			ClaimDto claimDto = new ClaimMapper().getClaimDto(claimObj); 
			createAndSearchLotTableDTO.setClaimDto(claimDto);
		}*/
		
		MastersValue penalIntrestRate = masterService.getPenalIntrestRate(ReferenceTable.PENAL_INTREST);
		if(null != penalIntrestRate)
		{
			Double doublePenalIntrest = null != penalIntrestRate.getValue() ? Double.valueOf(penalIntrestRate.getValue()) : 0d;
		createAndSearchLotTableDTO.setIntrestRate(doublePenalIntrest);
		createAndSearchLotTableDTO.setInterestRateForCalculation(doublePenalIntrest);
		}
		
		view.setViewCreateBatch(SearchCreateBatchView.class, selectValueContainerForCPUCode,selectValueContainerForType,selectValueContainerForClaimant,selectValueContainerForClaimType,
				selectValueContainerForPaymentStatus,selectValueContainerForNonKeralaCPUCode,
				selectValueContainerForBatchType,selectValueContainerForZoneType,
				selectValueContainerForProduct,selectValueContainerForZoneType,createAndSearchLotTableDTO,
				selectValueContainerForPenalInstDays,selectValueContainerForVerificationType,true,presenterString);
		
		
	}
	
	protected void showCreateBatchLevel1(
			@Observes @CDIEvent(MenuItemBean.PAYMENT_VERIFICATION_LVL1) final ParameterDTO parameters) {
		
		String presenterString = "PAYMENT_VERIFICATION_L1";
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodeList();
//		BeanItemContainer<SelectValue> selectValueContainerForNonKeralaCPUCode = masterService.getNonKeralaTmpCpuCodeList();
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode =calcService.getTmpCpuCodeListByUser(userId);
		BeanItemContainer<SelectValue> selectValueContainerForNonKeralaCPUCode = calcService.getTmpCpuCodeListByUser(userId);
		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getTypeContainer(ReferenceTable.PAYMENT_STATUS);	
		BeanItemContainer<SelectValue> selectValueContainerForClaimant = masterService.getSelectValueContainer(ReferenceTable.ACK_DOC_RECEIVED_FROM);	
		BeanItemContainer<SelectValue> selectValueContainerForClaimType = masterService.getClaimTypeContainer(ReferenceTable.CLAIM_TYPE);	
		BeanItemContainer<SelectValue> selectValueContainerForVerificationType = masterService.getClaimTypeContainer(ReferenceTable.VERIFICATION_TYPE);	
		BeanItemContainer<SelectValue> selectValueContainerForPaymentStatus = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);	
		BeanItemContainer<SelectValue> selectValueContainerForBatchType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
		BeanItemContainer<SelectValue> selectValueContainerForZoneType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
		BeanItemContainer<SpecialSelectValue> selectValueContainerForProduct = masterService.getContainerForProduct();
		BeanItemContainer<SelectValue> selectValueContainerForPenalInstDays = masterService.getMasterValueByCode(SHAConstants.PENAL_INTEST_DUE);
		//BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_STATUS);
		
		//view.setViewCreateAndSearchLot(CreateAndSearchLotView.class, true);
	
		
		CreateAndSearchLotTableDTO  createAndSearchLotTableDTO= new CreateAndSearchLotTableDTO();
	/*	Claim claimObj = claimService.getClaimsByIntimationNumber(createAndSearchLotTableDTO.getIntimationNo()); 
		
		if(claimObj != null)
		{			
			ClaimDto claimDto = new ClaimMapper().getClaimDto(claimObj); 
			createAndSearchLotTableDTO.setClaimDto(claimDto);
		}*/
		
		MastersValue penalIntrestRate = masterService.getPenalIntrestRate(ReferenceTable.PENAL_INTREST);
		if(null != penalIntrestRate)
		{
			Double doublePenalIntrest = null != penalIntrestRate.getValue() ? Double.valueOf(penalIntrestRate.getValue()) : 0d;
		createAndSearchLotTableDTO.setIntrestRate(doublePenalIntrest);
		createAndSearchLotTableDTO.setInterestRateForCalculation(doublePenalIntrest);
		}
		
		view.setViewCreateBatch(SearchCreateBatchView.class, selectValueContainerForCPUCode,selectValueContainerForType,selectValueContainerForClaimant,selectValueContainerForClaimType,
				selectValueContainerForPaymentStatus,selectValueContainerForNonKeralaCPUCode,
				selectValueContainerForBatchType,selectValueContainerForZoneType,
				selectValueContainerForProduct,selectValueContainerForZoneType,createAndSearchLotTableDTO,
				selectValueContainerForPenalInstDays,selectValueContainerForVerificationType,true,presenterString);
		
		
	}
	
	protected void showCreateBatchLevel2(
			@Observes @CDIEvent(MenuItemBean.PAYMENT_VERIFICATION_LVL2) final ParameterDTO parameters) {
		
		String presenterString = "PAYMENT_VERIFICATION_L2";
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
		//above code is commented since based on user cpu mapping cpu list has to shown in search batch screen by noufel
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodeList();
//		BeanItemContainer<SelectValue> selectValueContainerForNonKeralaCPUCode = masterService.getNonKeralaTmpCpuCodeList();
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode =calcService.getTmpCpuCodeListByUser(userId);
		BeanItemContainer<SelectValue> selectValueContainerForNonKeralaCPUCode = calcService.getTmpCpuCodeListByUser(userId);
		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getTypeContainer(ReferenceTable.PAYMENT_STATUS);	
		BeanItemContainer<SelectValue> selectValueContainerForClaimant = masterService.getSelectValueContainer(ReferenceTable.ACK_DOC_RECEIVED_FROM);	
		BeanItemContainer<SelectValue> selectValueContainerForClaimType = masterService.getClaimTypeContainer(ReferenceTable.CLAIM_TYPE);	
		BeanItemContainer<SelectValue> selectValueContainerForVerificationType = masterService.getClaimTypeContainer(ReferenceTable.VERIFICATION_TYPE);	
		BeanItemContainer<SelectValue> selectValueContainerForPaymentStatus = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);	
		BeanItemContainer<SelectValue> selectValueContainerForBatchType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
		BeanItemContainer<SelectValue> selectValueContainerForZoneType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
		BeanItemContainer<SpecialSelectValue> selectValueContainerForProduct = masterService.getContainerForProduct();
		BeanItemContainer<SelectValue> selectValueContainerForPenalInstDays = masterService.getMasterValueByCode(SHAConstants.PENAL_INTEST_DUE);
		//BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_STATUS);
		
		//view.setViewCreateAndSearchLot(CreateAndSearchLotView.class, true);
	
		
		CreateAndSearchLotTableDTO  createAndSearchLotTableDTO= new CreateAndSearchLotTableDTO();
	/*	Claim claimObj = claimService.getClaimsByIntimationNumber(createAndSearchLotTableDTO.getIntimationNo()); 
		
		if(claimObj != null)
		{			
			ClaimDto claimDto = new ClaimMapper().getClaimDto(claimObj); 
			createAndSearchLotTableDTO.setClaimDto(claimDto);
		}*/
		
		MastersValue penalIntrestRate = masterService.getPenalIntrestRate(ReferenceTable.PENAL_INTREST);
		if(null != penalIntrestRate)
		{
			Double doublePenalIntrest = null != penalIntrestRate.getValue() ? Double.valueOf(penalIntrestRate.getValue()) : 0d;
		createAndSearchLotTableDTO.setIntrestRate(doublePenalIntrest);
		createAndSearchLotTableDTO.setInterestRateForCalculation(doublePenalIntrest);
		}
		
		view.setViewCreateBatch(SearchCreateBatchView.class, selectValueContainerForCPUCode,selectValueContainerForType,selectValueContainerForClaimant,selectValueContainerForClaimType,
				selectValueContainerForPaymentStatus,selectValueContainerForNonKeralaCPUCode,
				selectValueContainerForBatchType,selectValueContainerForZoneType,
				selectValueContainerForProduct,selectValueContainerForZoneType,createAndSearchLotTableDTO,
				selectValueContainerForPenalInstDays,selectValueContainerForVerificationType,true,presenterString);
		
		
	}

	protected void showProcessPaymentReturns(
			@Observes @CDIEvent(MenuItemBean.PROCESS_PAYMENT_RETURNS) final ParameterDTO parameters) {
		view.setViewG(SearchProcessPaymentReturnsView.class, true);
	}
	
	protected void showPaymentReprocess(
			@Observes @CDIEvent(MenuItemBean.PAYMENT_REPROCESS) final ParameterDTO parameters) {
		view.setViewG(PaymentReprocessSearchView.class, true);
	}
	
	protected void showPaymentIntiateRecovery(
			@Observes @CDIEvent(MenuItemBean.PAYMENT_INITIATE_RECOVERY) final ParameterDTO parameters) {
		view.setViewG(PaymentInitiateRecoverySearchView.class, true);
	}

	/*
	 * protected void showSearchClaimR3(
	 * 
	 * @Observes @CDIEvent(MenuItemBean.SEARCH_CLAIMR3) final ParameterDTO
	 * parameters) { view.setViewG(SearchClaimR3View.class, true); }
	 */

	protected void showRegisterClaimRefund(
			@Observes @CDIEvent(MenuItemBean.REGISTER_CLAIM_REFUND) final ParameterDTO parameters) {
		view.setViewG(SearchRegisterClaimRefundView.class, true);
	}

	protected void showProcessClaimRefund(
			@Observes @CDIEvent(MenuItemBean.PROCESS_CLAIM_REFUND) final ParameterDTO parameters) {
		view.setViewG(SearchProcessClaimRefundView.class, true);
	}
	
	protected void showSearchUserDoctor(
		@Observes @CDIEvent(MenuItemBean.USER_ACCESS_ALLOCATION) final ParameterDTO parameters) {
		
		view.setViewG(SearchDoctorDetailsView.class, true);
	}
	//for user management
	protected void searchDoctorDetails(
			@Observes @CDIEvent(MenuItemBean.USER_MANAGEMENT) final ParameterDTO parameters) {
		view.setViewG(UserManagementView.class, true);
	}
		
	
	protected void showSearchReallocationUserDoctor(
			@Observes @CDIEvent(MenuItemBean.USER_RE_ALLOCATION) final ParameterDTO parameters) {

		SearchReallocationDoctorDetailsTableDTO doctorDetailsDTO = new SearchReallocationDoctorDetailsTableDTO();

		view.setReallocationUserView(SearchReallocationDoctorDetailsView.class,
				true, doctorDetailsDTO);
	}

	/*
	 * SHOW_ACKNOWLEDGEMENT_DOCUMENT_RECEIVER // Implementing new method for new
	 * menu CREATE_NEW_INTIMATION. =======
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * /*SHOW_ACKNOWLEDGEMENT_DOCUMENT_RECEIVER // Implementing new method for
	 * new menu CREATE_NEW_INTIMATION. >>>>>>>
	 * dd3a19dd5b3a58c42739e0a200ed35b3713d959a
	 * 
	 * protected void showNewPolicySearch(
	 * 
	 * @Observes @CDIEvent(MenuItemBean.CREATE_NEW_INTIMATION) final
	 * ParameterDTO parameters) { view.setViewG(NewSearchPolicyView.class,
	 * true); }
	 */

	protected void showIntimationSearch(
			@Observes @CDIEvent(MenuItemBean.SEARCH_INTIMATION) final ParameterDTO parameters) {
		view.setViewG(SearchIntimationView.class, true);
	}
	
	protected void showIntimationAndViewDetails(
			@Observes @CDIEvent(MenuItemBean.INTIMATION_VIEW_DETAILS) final ParameterDTO parameters) {
		view.setViewG(SearchViewDetailView.class, true);
		
	}

	protected void showInternalNotes(
			@Observes @CDIEvent(MenuItemBean.SEARCH_INTERNAL_NOTES) final ParameterDTO parameters) {
		view.setViewG(SearchInternalNotesView.class, true);
		
	}
	
	protected void showDoctorNotes(
			@Observes @CDIEvent(MenuItemBean.SEARCH_INTERNAL_NOTES_PA) final ParameterDTO parameters) {
		view.setViewG(SearchInternalNotesView.class, true);
		
	}
	
//	protected void showUnlockIntimation(
//			@Observes @CDIEvent(MenuItemBean.UNLOCK_INTIMATION) final ParameterDTO parameters) {
//		view.setViewG(SearchUnlockIntimationView.class, true);
//		
//	}
	
	protected void showUnlockIntimationBPMNToDB(
			@Observes @CDIEvent(MenuItemBean.UNLOCK_INTIMATION_BPMN_TO_DB) final ParameterDTO parameters) {
		view.setViewG(SearchUnlockIntimationDBView.class, true);
		
	}
	
	protected void showTestComponent(
			@Observes @CDIEvent(MenuItemBean.TEST_COMPONENT) final ParameterDTO parameters) {
		view.setView(TestComponentView.class, true);
	}

	protected void updateHospitalDetails(
			@Observes @CDIEvent(MenuItemBean.UPDATE_HOSPITAL_INFORMATION) final ParameterDTO parameters) {

		List<State> stateList = masterService.getStateList();
		List<SelectValue> states = new ArrayList<SelectValue>();
		SelectValue selected = null ;
		for (State state : stateList) {
			selected = new SelectValue();
			selected.setId(state.getKey());
			selected.setValue(state.getValue());
			states.add(selected);
		}
		BeanItemContainer<SelectValue> selectValueContainer = new BeanItemContainer<SelectValue>(
				states);

		BeanItemContainer<SelectValue> modeOfIntimation = masterService
				.getConversionReasonByValue(ReferenceTable.MODE_OF_INTIMATION);

		BeanItemContainer<SelectValue> intimatedBy = masterService
				.getConversionReasonByValue(ReferenceTable.INTIMATED_BY);

		view.setViewHospital(UpdateHospitalDetailsView.class,
				selectValueContainer, modeOfIntimation, intimatedBy);
	}
//	Commented the below Cashless Screen
//	protected void showCovertClaim(
//			@Observes @CDIEvent(MenuItemBean.CONVERT_CLAIM) final ParameterDTO parameters) {
//		BeanItemContainer<SelectValue> selectValueContainer = masterService
//				.getTmpCpuCodes();
//		
//		view.setViewG(SearchConvertClaimView.class, true, selectValueContainer);
//	}

//	Commented the below Cashless Screen
//	protected void showCovertClaimBulk(
//			@Observes @CDIEvent(MenuItemBean.CONVERT_CLAIM_BULK) final ParameterDTO parameters) {
//		BeanItemContainer<SelectValue> selectValueContainer = masterService
//				.getTmpCpuCodes();
//		
////		BeanItemContainer<SelectValue> selectValueTypeContainer = masterService
////				.getConversionReasonByValue(ReferenceTable.REASON_FOR_CONVERSION);
//		
//		
////		List<SelectValue> selectValueList = selectValueTypeContainer.getItemIds();
//		
//		BeanItemContainer<SelectValue> typeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
//			
//			SelectValue allSelectValue = new SelectValue();
//			allSelectValue.setValue(SHAConstants.ALL);
//			typeContainer.addBean(allSelectValue);
//			
//			SelectValue preauthNotRec = new SelectValue();
//			
//			preauthNotRec.setValue(SHAConstants.PRE_AUTH_NOT_RECEIVED);	
//			typeContainer.addBean(preauthNotRec);
//			
//			SelectValue	withDraw = new SelectValue();
//			withDraw.setValue(SHAConstants.WITHDRAW);
//			typeContainer.addBean(withDraw);
//			
//			SelectValue	doc = new SelectValue();
//			doc.setValue(SHAConstants.CASHLESS_DENIAL);
//			typeContainer.addBean(doc);
//			
//			SelectValue	query = new SelectValue();
//			query.setValue(SHAConstants.QUERY);
//			typeContainer.addBean(query);
//						
//			List<SearchBatchConvertedTableDto> prevConvertedBatch = searchBulkConvertToReimbService.getPreviousBatchList();
//		
//		view.setBulkConvertReimbView(SearchBulkConvertReimbView.class, true, selectValueContainer,typeContainer,prevConvertedBatch);
//	}
	
//	Commented below Cashless Screen
//	protected void showConvertReimbursement(
//			@Observes @CDIEvent(MenuItemBean.CONVERT_CLAIM_OUTSIDE_PROCESS) final ParameterDTO parameters) {
//		BeanItemContainer<SelectValue> selectValueContainer = masterService
//				.getTmpCpuCodes();
//		view.setSearchConvertReimbursement(SearchConvertReimbursementView.class, true, selectValueContainer);
//	}

	protected void showConvertClaimPage(
			@Observes @CDIEvent(MenuPresenter.SHOW_CONVERT_CLAIM) final ParameterDTO parameters) {
		SearchConvertClaimTableDto searchFormDto = (SearchConvertClaimTableDto) parameters
				.getPrimaryParameter();
		ConvertClaimDTO convertClaimDto = new ConvertClaimDTO();
		//ConvertClaimDTO preauthDatas = new ConvertClaimDTO();
		//ConvertClaimDTO status = new ConvertClaimDTO();
		Claim claimDetails = claimService.getClaimByKey(searchFormDto.getKey());
		//Boolean isValidClaimForCoveringLetter = true;
		
		/*if(null != claimDetails)
		{
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimDetails.getLegalFlag()))
			{
				isValidClaimForCoveringLetter = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
		}*/
		/*if(isValidClaimForCoveringLetter)
		{*/
		
//		DocAcknowledgement docAcknowledgement = createRodService.getDocAcknowledgeByClaim(claimDetails.getKey());
		
		//IMSSUPPOR-27155
		if (null != claimDetails
				&& null != claimDetails.getStatus()
				&& null != claimDetails.getStatus().getKey()
				&& claimDetails.getStatus().getKey()
						.equals(ReferenceTable.CLAIM_CLOSED_STATUS)) {
			
			view.showErrorPopUp("Selected claim has been closed.Cannot proceed further.");
		}
		else{
		
		
		DocAcknowledgement docAcknowledgementBasedOnKey = null;
		
		Map<String, Object> wrkFlowMap = (Map<String, Object>) searchFormDto.getDbOutArray();
		//Object dbOutArray = searchFormDto.getDbOutArray();
		
		//HumanTask humanTask = searchFormDto.getHumanTask();
		if(null != wrkFlowMap){
		//if(humanTask != null && humanTask.getPayload() != null && humanTask.getPayload().getDocReceiptACK() != null){
			//Long acknowledgementKey = humanTask.getPayload().getDocReceiptACK().getKey();
			Long acknowledgementKey = (Long)wrkFlowMap.get(SHAConstants.PAYLOAD_ACK_KEY);
			
			if(acknowledgementKey != null && ! acknowledgementKey.equals(0l)){
			
				docAcknowledgementBasedOnKey = createRodService.getDocAcknowledgementBasedOnKey(acknowledgementKey);
			}
		}
		
		
		NewIntimationDto intimationDto = intimationService
				.getIntimationDto(claimDetails.getIntimation());

		/*Intimation intimation = intimationService
				.getIntimationByKey(intimationDto.getKey());*/
		
		ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimDetails);
		claimDTO.setNewIntimationDto(intimationDto);
		
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setNewIntimationDTO(intimationDto);
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setStrUserName(searchFormDto.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_CONVERT_CLAIM);
		searchFormDto.setRrcDTO(rrcDTO);

		// intimationDto.setIntimatdBy(intimation.getIntimatedBy().getValue());
		//
		// MastersValue intimationMod=intimation.getIntimationMode();
		//
		// SelectValue intimationMode=new SelectValue();
		// intimationMode.setId(intimationMod.getKey());
		// intimationMode.setValue(intimationMod.getValue());
		//
		// intimationDto.setModeOfIntimation(intimationMode);
		//
		// intimationDto.setClaimNo(claimDetails.getClaimId());
		//
		// intimationDto.setPolicyNumber(intimation.getPolicyNumber());
		//

		//
		// MastersValue policyType=intimation.getPolicy().getPolicyType();
		// SelectValue policy=new SelectValue();
		// policy.setId(policyType.getKey());
		// policy.setValue(policyType.getValue());
		//
		// intimationDto.setPolicyType(policy);
		//
		/*Hospitals hospitalDetails = hospitalService.getHospitalById(intimation
				.getHospital());*/
		//
		// intimationDto.setHospitalName(hospitalDetails.getName());
		// intimationDto.setHospitalName(intimation.getho);

		// Preauth preauthDetails = preauthService
		// .getPreauthListByClaimNo(claimDetails.getKey());
		if (claimDetails != null) {
			convertClaimDto = convertClaimMapper.getClaimDTO(claimDetails);
		}
		if (null != claimDetails.getStatus()) {
			convertClaimDto.setClaimStatus(claimDetails.getStatus()
					.getProcessValue());

			if (claimDetails.getStatus().getKey().equals(ReferenceTable.CLAIM_REGISTERED_STATUS)) {
				convertClaimDto.setDenialRemarks(claimDetails
						.getRegistrationRemarks());

			} else if (claimDetails.getStatus().getKey() == 19l
					|| claimDetails.getStatus().getKey() == 24l) {
				Preauth preauthDetails = preauthService
						.getPreauthClaimKey(claimDetails.getKey());

				PreauthQuery preauthQuery = preauthService
						.getPreauthQueryList(preauthDetails.getKey());

				convertClaimDto
						.setDenialRemarks(preauthQuery.getQueryRemarks());
			} else if(claimDetails.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS) || claimDetails.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS)){
				
				Preauth preauthDetails = preauthService
						.getLatestPreauthDetails(claimDetails.getKey());
				if(preauthDetails.getMedicalRemarks() != null){
					convertClaimDto.setDenialRemarks(preauthDetails.getMedicalRemarks());
				}else{
					convertClaimDto.setDenialRemarks(preauthDetails.getRemarks());
				}
				
				
			}
		}

		List<Long> keysList = new ArrayList<Long>();

		if (claimDetails != null) {
			List<Preauth> preauthList = preauthService
					.getPreauthByClaimKey(claimDetails.getKey());
			for (Preauth preauth : preauthList) {
				keysList.add(preauth.getKey());
			}

		}
		if (!keysList.isEmpty()) {
			Long preauthKey = Collections.max(keysList);
			Preauth preauth = preauthService.getPreauthById(preauthKey);
			if (null != preauth) {
				if (null != preauth.getStatus()) {
					if (preauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_DENIAL_OF_CASHLESS_STATUS) ) {
						convertClaimDto.setClaimStatus(preauth.getStatus()
								.getProcessValue());
						convertClaimDto.setDenialRemarks(preauth.getRemarks());
					}
				}
			}
		}
		
		DocUploadToPremia premiaData = processPremedicalService.getUploadedDataDocument(claimDetails.getIntimation().getIntimationId()/*"CLI/2015/141125/0003907"*/);
		
		if(premiaData != null && premiaData.getPfdUpFFAXAmt() != null){
			convertClaimDto.setClaimedAmount(Double.valueOf(premiaData.getPfdUpFFAXAmt()));
			// As per Yosuva's guidance, I have commented below code for showing correct provision amount.
//			convertClaimDto.setProvisionAmount(Double.valueOf("0"));
		}
		
		if(claimDetails.getStatus().getKey().equals(ReferenceTable.CLAIM_CLOSED_STATUS)){
			convertClaimDto.setProvisionAmount(claimDetails.getCurrentProvisionAmount());
		}

		// if (preauthDetails != null) {
		// preauthDatas = convertClaimMapper.getPreauthDTO(preauthDetails);
		// convertClaimDto.setDenialRemarks(preauthDatas.getDenialRemarks());
		// convertClaimDto.setClaimStatus(preauthDatas.getClaimStatus());
		// }
		BeanItemContainer<SelectValue> selectValueContainer = masterService
				.getConversionReasonByValue(ReferenceTable.REASON_FOR_CONVERSION);
		
		if(docAcknowledgementBasedOnKey != null){
			
			Double claimAmount =0d;
			
			if(docAcknowledgementBasedOnKey.getHospitalizationClaimedAmount() != null){
				claimAmount += docAcknowledgementBasedOnKey.getHospitalizationClaimedAmount();
			}
			if(docAcknowledgementBasedOnKey.getPreHospitalizationClaimedAmount() != null){
				claimAmount +=docAcknowledgementBasedOnKey.getPreHospitalizationClaimedAmount();
			}
			if(docAcknowledgementBasedOnKey.getPostHospitalizationClaimedAmount() != null){
				claimAmount +=docAcknowledgementBasedOnKey.getPostHospitalizationClaimedAmount();
			}

			convertClaimDto.setClaimedAmount(claimAmount);
			
		}
		convertClaimDto.setDbOutArray(searchFormDto.getDbOutArray());
		
		Long rodKey = searchFormDto.getRodKey();
		
		Reimbursement reimburment=reimbursementService.getReimbursementByKey(rodKey);
//		Claim claimObject = claimService.getClaimByClaimKey(reimburment.getClaim().getKey());
		NewIntimationDto newIntimationDto = intimationService
				.getIntimationDto(claimDetails.getIntimation());
		convertClaimDto.getPreAuthDto().setNewIntimationDTO(newIntimationDto);
		
		// R1045
		convertClaimDto.getPreAuthDto().setCrmFlagged(claimDetails.getCrcFlag());
		convertClaimDto.setCrcFlaggedReason(claimDetails.getCrcFlaggedReason());
		convertClaimDto.setCrcFlaggedRemark(claimDetails.getCrcFlaggedRemark());
		convertClaimDto.setCrmFlagged(claimDetails.getCrcFlag());
		
		convertClaimDto.getPreAuthDto().setClaimPriorityLabel(claimDetails.getClaimPriorityLabel());

		view.setConvertClaimView(ConvertClaimPageView.class, convertClaimDto,
				selectValueContainer, intimationDto, searchFormDto);
		}
		//}
	}
	
	protected void showConvertReimbursementPage(
			@Observes @CDIEvent(MenuPresenter.SHOW_CONVERT_REIMBURSEMENT) final ParameterDTO parameters) {
		SearchConvertClaimTableDto searchFormDto = (SearchConvertClaimTableDto) parameters
				.getPrimaryParameter();
		ConvertClaimDTO convertClaimDto = new ConvertClaimDTO();
		//ConvertClaimDTO preauthDatas = new ConvertClaimDTO();
		//ConvertClaimDTO status = new ConvertClaimDTO();
		Claim claimDetails = claimService.getClaimByKey(searchFormDto.getKey());

		//Boolean isValidClaimForCoveringLetter = true;
		
		/*if(null != claimDetails)
		{
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimDetails.getLegalFlag()))
			{
				isValidClaimForCoveringLetter = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
		}*/
		
		//if(isValidClaimForCoveringLetter)
		//{
		NewIntimationDto intimationDto = intimationService
				.getIntimationDto(claimDetails.getIntimation());

		//Intimation intimation = intimationService
		//		.getIntimationByKey(intimationDto.getKey());
		
		ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimDetails);
		claimDTO.setNewIntimationDto(intimationDto);
		
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setNewIntimationDTO(intimationDto);
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setStrUserName(searchFormDto.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_CONVERT_CLAIM);
		searchFormDto.setRrcDTO(rrcDTO);

		// intimationDto.setIntimatdBy(intimation.getIntimatedBy().getValue());
		//
		// MastersValue intimationMod=intimation.getIntimationMode();
		//
		// SelectValue intimationMode=new SelectValue();
		// intimationMode.setId(intimationMod.getKey());
		// intimationMode.setValue(intimationMod.getValue());
		//
		// intimationDto.setModeOfIntimation(intimationMode);
		//
		// intimationDto.setClaimNo(claimDetails.getClaimId());
		//
		// intimationDto.setPolicyNumber(intimation.getPolicyNumber());
		//

		//
		// MastersValue policyType=intimation.getPolicy().getPolicyType();
		// SelectValue policy=new SelectValue();
		// policy.setId(policyType.getKey());
		// policy.setValue(policyType.getValue());
		//
		// intimationDto.setPolicyType(policy);
		//
		/*Hospitals hospitalDetails = hospitalService.getHospitalById(intimation
				.getHospital());*/
		//
		// intimationDto.setHospitalName(hospitalDetails.getName());
		// intimationDto.setHospitalName(intimation.getho);

		// Preauth preauthDetails = preauthService
		// .getPreauthListByClaimNo(claimDetails.getKey());
		if (claimDetails != null) {
			convertClaimDto = convertClaimMapper.getClaimDTO(claimDetails);
		}
		if (null != claimDetails.getStatus()) {
			convertClaimDto.setClaimStatus(claimDetails.getStatus()
					.getProcessValue());

			if (claimDetails.getStatus().getKey().equals(ReferenceTable.CLAIM_REGISTERED_STATUS)) {
				convertClaimDto.setDenialRemarks(claimDetails
						.getRegistrationRemarks());

			} else if (claimDetails.getStatus().getKey() == 19l
					|| claimDetails.getStatus().getKey() == 24l) {
				Preauth preauthDetails = preauthService
						.getPreauthClaimKey(claimDetails.getKey());

				PreauthQuery preauthQuery = preauthService
						.getPreauthQueryList(preauthDetails.getKey());

				convertClaimDto
						.setDenialRemarks(preauthQuery.getQueryRemarks());
			} else if(claimDetails.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS) || claimDetails.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS)){
				
				Preauth preauthDetails = preauthService
						.getLatestPreauthDetails(claimDetails.getKey());
				if(preauthDetails.getMedicalRemarks() != null){
					convertClaimDto.setDenialRemarks(preauthDetails.getMedicalRemarks());
				}else{
					convertClaimDto.setDenialRemarks(preauthDetails.getRemarks());
				}
				
				
			}
		}

		List<Long> keysList = new ArrayList<Long>();

		if (claimDetails != null) {
			List<Preauth> preauthList = preauthService
					.getPreauthByClaimKey(claimDetails.getKey());
			for (Preauth preauth : preauthList) {
				keysList.add(preauth.getKey());
			}

		}
		if (!keysList.isEmpty()) {
			Long preauthKey = Collections.max(keysList);
			Preauth preauth = preauthService.getPreauthById(preauthKey);
			if (null != preauth) {
				if (null != preauth.getStatus()) {
					if (preauth.getStatus().getKey() == 26l) {
						convertClaimDto.setClaimStatus(preauth.getStatus()
								.getProcessValue());
						convertClaimDto.setDenialRemarks(preauth.getRemarks());
					}
				}
			}
		}
		
		
         DocUploadToPremia premiaData = processPremedicalService.getUploadedDataDocumentDetails(claimDetails.getIntimation().getIntimationId()/*"CLI/2015/141125/0003907"*/);
		
		if(premiaData  != null && premiaData.getPfdUpFFAXAmt() != null){
			convertClaimDto.setClaimedAmount(Double.valueOf(premiaData.getPfdUpFFAXAmt()));
		}
		

		// if (preauthDetails != null) {
		// preauthDatas = convertClaimMapper.getPreauthDTO(preauthDetails);
		// convertClaimDto.setDenialRemarks(preauthDatas.getDenialRemarks());
		// convertClaimDto.setClaimStatus(preauthDatas.getClaimStatus());
		// }
		BeanItemContainer<SelectValue> selectValueContainer = masterService
				.getConversionReasonByValue(ReferenceTable.REASON_FOR_CONVERSION);

		view.setConvertReimbursementView(ConvertReimbursementPageView.class, convertClaimDto,
				selectValueContainer, intimationDto, searchFormDto);
		//}
	}

	
	protected void showRevisedNewIntimation(
			@Observes @CDIEvent(MenuItemBean.NEW_INTIMATION) final ParameterDTO parameters) {

		//Object tmpPolicy = (Object) parameters.getPrimaryParameter();
		
//		if(tmpPolicy instanceof TmpPolicy){
//			
//			NewIntimationDto newIntimationDto = new NewIntimationDto();
//			Policy policy = populatePolicyFromTmpPolicy((TmpPolicy)tmpPolicy);
//			newIntimationDto.setPolicy(policy);
//			view.setNewIntimationView(IntimationDetailsView.class,
//					newIntimationDto, parameters);
//		} else {
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			//Policy policy = populatePolicyFromTmpPolicy(tmpPolicy);
			PremPolicy premPolicyDetails = (PremPolicy) parameters.getPrimaryParameter();
			
			LinkedHashMap<String,String> mapList  = (LinkedHashMap<String,String>) parameters.getSecondaryParameter(0, LinkedHashMap.class);
			String source = mapList.get("Policy Source");

			newIntimationDto.setPolicySummary(premPolicyDetails);
			
			Product product = null;
			if(source.equalsIgnoreCase(SHAConstants.BANCS_POLICY)){
				product = premiaPullService.getProductBySource(premPolicyDetails.getProductCode());
			}else{
				product = policyService.getProductByProductCode(premPolicyDetails.getProductCode());
			}
			newIntimationDto.getPolicySummary().setProduct(product);
			System.out.println(newIntimationDto.getPolicySummary().getSumInsured());

			

			String policyServiceType = "OTHERS";
			
			if(premPolicyDetails.getProductCode() != null){
				if(ReferenceTable.getGMCProductCodeList().containsKey(premPolicyDetails.getProductCode())){
					Boolean paayasPolicyDetails = intimationService.getPaayasPolicyDetails(premPolicyDetails.getPolicyNo());
					newIntimationDto.setIsPaayasPolicy(paayasPolicyDetails);
					if(! paayasPolicyDetails){
						Boolean jioPolicyDetails = intimationService.getJioPolicyDetails(premPolicyDetails.getPolicyNo());
					}
				}
				Product productByProductCode = null;
				if(source.equalsIgnoreCase(SHAConstants.BANCS_POLICY)){
					productByProductCode = premiaPullService.getProductBySource(premPolicyDetails.getProductCode());
				}else{
					productByProductCode = premiaPullService.getProductByProductCode(premPolicyDetails.getProductCode());
				}
				
				if(ReferenceTable.getGMCProductCodeList().containsKey(premPolicyDetails.getProductCode())){
					Boolean jioPolicy = intimationService.getJioPolicyDetails(premPolicyDetails.getPolicyNo());
					newIntimationDto.setIsJioPolicy(jioPolicy);
					if(! jioPolicy){
						Boolean paayasPolicyDetails = intimationService.getPaayasPolicyDetails(premPolicyDetails.getPolicyNo());
						newIntimationDto.setIsPaayasPolicy(paayasPolicyDetails);
					}
					
				}
				if(productByProductCode != null && productByProductCode.getProductService() != null){
					policyServiceType = productByProductCode.getProductService();
				}
			}
			newIntimationDto.setPolicyServiceType(policyServiceType);
			Boolean isIntegratedPolicy = false;
			PremPolicyDetails policyDetails = null;
			PremPolicyDetails portabilityPolicyDetails = null;

			/*if(policyServiceType.equalsIgnoreCase(SHAConstants.GMC_POL_SERIVICE)){
				policyDetails = premiaPullService.fetchGmcPolicyDetailsFromPremia(premPolicyDetails
						.getPolicyNo(), "");
				isIntegratedPolicy =premiaPullService. populateGMCandGPAPolicy(policyDetails, "");
				
			}else if(policyServiceType.equalsIgnoreCase(SHAConstants.GPA_POL_SERIVICE)){
				policyDetails = premiaPullService.fetchGpaPolicyDetailsFromPremia(premPolicyDetails
						.getPolicyNo(), "");
				policyDetails.setRiskSysId("");
				isIntegratedPolicy = premiaPullService.populateGMCandGPAPolicy(policyDetails, "");
			}else if(policyServiceType.equalsIgnoreCase(SHAConstants.JET_PRIVILLAGE_POL_SERVICE)){
				policyDetails = premiaPullService.fetchJetPrivillagePolicyDetailsFromPremia(premPolicyDetails
						.getPolicyNo());
				isIntegratedPolicy = premiaPullService.populatePolicyFromTmpPolicy(policyDetails,"");
			}else{
				policyDetails = premiaPullService.fetchPolicyDetailsFromPremia(premPolicyDetails
						.getPolicyNo());
				isIntegratedPolicy = premiaPullService.populatePolicyFromTmpPolicy(policyDetails,"");
			}*/
			
			if(source.equalsIgnoreCase(SHAConstants.BANCS_POLICY)){
				isIntegratedPolicy =true;
			}else{
				if(!(policyServiceType.equalsIgnoreCase(SHAConstants.GMC_POL_SERIVICE)
						|| policyServiceType.equalsIgnoreCase(SHAConstants.GPA_POL_SERIVICE)
						||policyServiceType.equalsIgnoreCase(SHAConstants.JET_PRIVILLAGE_POL_SERVICE))){
					
					policyDetails = premiaPullService.fetchPolicyDetailsFromPremia(premPolicyDetails
							.getPolicyNo());
					isIntegratedPolicy = premiaPullService.populatePolicyFromTmpPolicy(policyDetails,"",false);
				}else if(policyServiceType.equalsIgnoreCase(SHAConstants.JET_PRIVILLAGE_POL_SERVICE)){
					policyDetails = premiaPullService.fetchJetPrivillagePolicyDetailsFromPremia(premPolicyDetails
							.getPolicyNo());
					isIntegratedPolicy = premiaPullService.populatePolicyFromTmpPolicy(policyDetails,"",false);
				}
			}
	
			
			//Set Portability Poicy
			if(source.equalsIgnoreCase(SHAConstants.BANCS_POLICY)){
				newIntimationDto.setIsPortablity("");
			}else{
				if(policyServiceType.equalsIgnoreCase(SHAConstants.GMC_POL_SERIVICE)){
					  portabilityPolicyDetails = premiaPullService.fetchGmcPolicyDetailsFromPremia(premPolicyDetails.getPolicyNo(), "");
				}else if(policyServiceType.equalsIgnoreCase(SHAConstants.GPA_POL_SERIVICE)){
					  portabilityPolicyDetails = premiaPullService.fetchGpaPolicyDetailsFromPremia(premPolicyDetails.getPolicyNo(), "");
				}else if(policyServiceType.equalsIgnoreCase(SHAConstants.JET_PRIVILLAGE_POL_SERVICE)){
					policyDetails = premiaPullService.fetchJetPrivillagePolicyDetailsFromPremia(premPolicyDetails.getPolicyNo());
				}else{
					  portabilityPolicyDetails = premiaPullService.fetchPolicyDetailsFromPremia(premPolicyDetails.getPolicyNo());
				}
				 
				if(portabilityPolicyDetails != null && portabilityPolicyDetails.getPortedYN() != null){
					newIntimationDto.setIsPortablity(portabilityPolicyDetails.getPortedYN().equalsIgnoreCase("Y")?"Yes":"No");
				 }else{
					 newIntimationDto.setIsPortablity("");
				 }
			}

			//TODO: insert into db 
			
			/*newIntimationDto.setPolicy(populatePolicyFromTmpPolicy(premPolicyDetails));
			if(premPolicyDetails.getPolicyType() == null || (premPolicyDetails.getPolicyType() != null && !premPolicyDetails.getPolicyType().equalsIgnoreCase(SHAConstants.PORTABILITY_POLICY))){
				List<PremPreviousPolicyDetails> previousPolicyDetails = premPolicyDetails.getPreviousPolicyDetails();
				for (PremPreviousPolicyDetails previousPolicy : previousPolicyDetails) {
					Policy previousPolicyObj = policyService.getPolicy(previousPolicy.getPolicyNo());
					if(previousPolicyObj == null) {
						PremPolicyDetails policyDetails = policyService.fetchPolicyDetailsFromPremia(previousPolicy.getPolicyNo());
						if(policyDetails != null){
							populatePolicyFromTmpPolicy(policyDetails);
						}
					}
				}
			}*/
			
			if(isIntegratedPolicy){
				Policy policy = policyService.getPolicy(premPolicyDetails.getPolicyNo());
				newIntimationDto.setPolicy(policy);
				
				if(policy != null){
				OrganaizationUnit orgUnit = intimationService.getOrganizationUnit(policy.getHomeOfficeCode());
				if(orgUnit != null){
					newIntimationDto
					.setOrganizationUnit(orgUnit);
				}
				
				
					newIntimationDto.setPolicyCoverDetails(policyService.getPolicyCoverDetails(policy.getKey()));
				}
				
				view.setNewIntimationView(IntimationDetailsView.class,
						newIntimationDto, parameters);
			}else if((policyServiceType.equalsIgnoreCase(SHAConstants.GMC_POL_SERIVICE)
					|| policyServiceType.equalsIgnoreCase(SHAConstants.GPA_POL_SERIVICE)
					||policyServiceType.equalsIgnoreCase(SHAConstants.JET_PRIVILLAGE_POL_SERVICE))){
				
				OrganaizationUnit orgUnit = intimationService.getOrganizationUnit(premPolicyDetails.getOfficeCode());
				if(orgUnit != null){
					newIntimationDto
					.setOrganizationUnit(orgUnit);
				}
				view.setNewIntimationView(IntimationDetailsView.class,
						newIntimationDto, parameters);
//				view.showErrorPopUp("THIS PRODUCT IS NOT INTREGRATED IN GALAXY");
			}else{
				view.showErrorPopUp("THIS PRODUCT IS NOT INTREGRATED IN GALAXY");
			}
//		}
	}
	
	protected void savePremiaPolicyData(
			@Observes @CDIEvent(MenuPresenter.POPULATE_PREMIA_DATA) final ParameterDTO parameters)
	{
		//PremPolicyDetails premiaPolicy = (PremPolicyDetails) parameters.getPrimaryParameter();

		NewIntimationDto newIntimationDto = new NewIntimationDto();
		//Policy policy = populatePolicyFromTmpPolicy(tmpPolicy);
		PremPolicyDetails premPolicyDetails = (PremPolicyDetails) parameters.getPrimaryParameter();
		
		//TODO: insert into db 
		
		newIntimationDto.setPolicy(populatePolicyFromTmpPolicy(premPolicyDetails));
		List<PremPreviousPolicyDetails> previousPolicyDetails = premPolicyDetails.getPreviousPolicyDetails();
		for (PremPreviousPolicyDetails previousPolicy : previousPolicyDetails) {
			Policy previousPolicyObj = policyService.getPolicy(previousPolicy.getPolicyNo());
			if(previousPolicyObj == null) {
				PremPolicyDetails policyDetails = policyService.fetchPolicyDetailsFromPremia(previousPolicy.getPolicyNo());
				if(policyDetails != null){
					populatePolicyFromTmpPolicy(policyDetails);
				}
			}
		}
	}
	
//	private Policy populatePolicyFromTmpPolicy(TmpPolicy tmpPolicy) {
//		tmpPolicy = policyService.findTmppolicyByPolicyNo(tmpPolicy.getPolNo());
//
//		Policy policy = policyService.getPolicy(tmpPolicy.getPolNo());
//
//		List<PreviousPolicy> previousPolicyList = previousPolicyService
//				.getPrevPolicy(tmpPolicy.getPolAssrCode());
//		List<PolicyEndorsementDetails> endorsementDetailsList = policyService
//				.getEndorsementList(tmpPolicy.getPolNo());
//
//		List<TmpPrevPolicy> tmpPrevPolicyList = new ArrayList<TmpPrevPolicy>();
//		List<TmpEndorsementDetails> tmpEndorsementDetails = new ArrayList<TmpEndorsementDetails>();
//
//		if ((null == previousPolicyList || previousPolicyList.isEmpty())
//				&& (null == endorsementDetailsList || endorsementDetailsList
//						.isEmpty())) {
//			tmpPrevPolicyList = previousPolicyService
//					.findTmppolicyByPolicyNo((tmpPolicy.getPolAssrCode()));
//
//			tmpEndorsementDetails = policyService
//					.getTmpEndorsementList(tmpPolicy.getPolNo());
//
//			previousPolicyList = populatePreviousPolicy(tmpPrevPolicyList);
//			endorsementDetailsList = populatePolicyEndorsementDetails(tmpEndorsementDetails);
//		}
//
//		if (null == policy) {
//			policy = setMasterValuesToPolicy(tmpPolicy);
//		}
//
//		policyService
//				.create(policy, previousPolicyList, endorsementDetailsList);
//
//		return policy;
//	}
	
	private Policy populateMastersValueFromPremia(
			PremPolicyDetails premPolicyDetails) {
		premiaPolicyMapper.getAllMapValues();
		Policy policy = premiaPolicyMapper
				.getPolicyFromPremia(premPolicyDetails);
		MastersValue lineofBusiness = masterService
				.getKeyByValue(premPolicyDetails.getLob());
		policy.setLobId(lineofBusiness.getKey());
		Product product = masterService
				.getProductByProductCode(premPolicyDetails.getProductCode());
		MastersValue policyType = masterService.getMaster(premPolicyDetails
				.getPolicyType() != null ? StringUtils.trim(premPolicyDetails
				.getPolicyType().toLowerCase()) : null);
		/**
		 * Since premia doesn't have product type , we are hardcoding as of now.
		 * Once after receiving from premia , the same can be used.
		 */
		// MastersValue productType =
		// masterService.getMaster(tmpPolicy.getProductType() != null ?
		// StringUtils.trim(tmpPolicy.getProductType().toLowerCase()) : null);
		MastersValue productType = masterService.getMaster("Individual");

		/*List<OrganaizationUnit> insuredOfficeNameByDivisionCode = policyService
				.getInsuredOfficeNameByDivisionCode(premPolicyDetails
						.getOfficeCode());*/
		// policy.setHomeOfficeName(insuredOfficeNameByDivisionCode.get(0) !=
		// null ?
		// insuredOfficeNameByDivisionCode.get(0).getOrganizationUnitName() :
		// "");
		policy.setProduct(product);
		policy.setPolicyType(policyType);
		policy.setProductType(productType);
		List<Insured> insuredObjectList = premiaPolicyMapper
				.getInsuredFromPremia(premPolicyDetails.getInsuredDetails());
		List<PremInsuredDetails> premiaInsured = premPolicyDetails.getInsuredDetails();
		int i=0;
		for (Insured insured : insuredObjectList) {
			
//			MastersValue relationship = masterService
//					.getRelationsShipByValue(insured
//							.getRelationshipwithInsuredId().getValue());
//			insured.setRelationshipwithInsuredId(relationship);
			
			MastersValue gender = masterService.getKeyByValue(insured
					.getInsuredGender().getValue());
			insured.setInsuredGender(gender);

			List<InsuredPedDetails> insuredPedDetailsList = policyService
					.getPEDByInsured(insured.getInsuredId());

			if (null == insuredPedDetailsList
					|| insuredPedDetailsList.isEmpty()) {

				// List<TmpPED> tmpPedList =
				// policyService.getTmpPED(insured.getInsuredId());
				for (PremInsuredDetails premInsured : premPolicyDetails
						.getInsuredDetails()) {
					insuredPedDetailsList = premiaPolicyMapper
							.getInsuredPedFromPremia(premInsured
									.getPedDetails());
					for (InsuredPedDetails insuredDetails : insuredPedDetailsList) {
						insuredDetails.setInsuredKey(Long.valueOf(premInsured
								.getRiskSysId()));
					}

				}
				insured.setInsuredPedList(insuredPedDetailsList);
			}
			
			if(premPolicyDetails.getPolType() != null && premPolicyDetails.getPolType().equalsIgnoreCase(SHAConstants.PREMIA_POLTYPE_FLOATER)){
				insured.setInsuredSumInsured(policy.getTotalSumInsured());	
			}
			if(premiaInsured.get(i).getSelfDeclaredPed() != null && premiaInsured.get(i).getSelfDeclaredPed().length() >0){
				InsuredPedDetails selfDeclaredPed = new InsuredPedDetails();
				selfDeclaredPed.setInsuredKey(insured.getInsuredId());
				selfDeclaredPed.setPedDescription(premiaInsured.get(i).getSelfDeclaredPed());
				List<InsuredPedDetails> pedList = new ArrayList<InsuredPedDetails>();
				pedList.add(selfDeclaredPed);
				insured.setInsuredPedList(pedList);
			}
			i++;
			
		}
		policy.setInsured(insuredObjectList);
		return policy;
	}
	
	private Policy populatePolicyFromTmpPolicy(PremPolicyDetails premPolicyDetails) {
		//tmpPolicy = policyService.findTmppolicyByPolicyNo(tmpPolicy.getPolNo());

		
		premiaPolicyMapper.getAllMapValues();
		Policy policy = policyService.getPolicy(premPolicyDetails.getPolicyNo());
/*
		List<PreviousPolicy> previousPolicyList = previousPolicyService
				.getPrevPolicy(premPolicyDetails.getProposerCode());
		List<PolicyEndorsementDetails> endorsementDetailsList = policyService
				.getEndorsementList(premPolicyDetails.getPolicyNo());

		List<TmpPrevPolicy> tmpPrevPolicyList = new ArrayList<TmpPrevPolicy>();
		List<TmpEndorsementDetails> tmpEndorsementDetails = new ArrayList<TmpEndorsementDetails>();

		if ((null == previousPolicyList || previousPolicyList.isEmpty())
				&& (null == endorsementDetailsList || endorsementDetailsList
						.isEmpty())) {
			tmpPrevPolicyList = previousPolicyService
					.findTmppolicyByPolicyNo((premPolicyDetails.getProposerCode()));

			tmpEndorsementDetails = policyService
					.getTmpEndorsementList(premPolicyDetails.getPolicyNo());

			previousPolicyList = populatePreviousPolicy(tmpPrevPolicyList);
			endorsementDetailsList = populatePolicyEndorsementDetails(tmpEndorsementDetails);
		}*/

		if (null == policy) {
		 policy = premiaPolicyMapper.getPolicyFromPremia(premPolicyDetails);
		 
		 Double totalAmount = 0d;
		 totalAmount += policy.getGrossPremium() != null ? policy.getGrossPremium() : 0d;
		 totalAmount += policy.getPremiumTax() != null ? policy.getPremiumTax() : 0d;
		 totalAmount += policy.getStampDuty() != null ? policy.getStampDuty() : 0d;
		 policy.setTotalPremium(totalAmount);
		 
		 if(premPolicyDetails.getPolSysId() != null){
			 Long polSysId = SHAUtils.getLongFromString(premPolicyDetails.getPolSysId());
	
			 policy.setPolicySystemId(polSysId);
		 }
		 
		 if(premPolicyDetails.getPolicyPlan() != null){
			 if(premPolicyDetails.getPolicyPlan().equalsIgnoreCase(SHAConstants.POLICY_PLAN_A)){
				 policy.setPolicyPlan("A");
			 }else if(premPolicyDetails.getPolicyPlan().equalsIgnoreCase(SHAConstants.POLICY_PLAN_B)){
				 policy.setPolicyPlan("B");
			 }else if(premPolicyDetails.getPolicyPlan().equalsIgnoreCase(SHAConstants.POLICY_PLAN_GOLD)
					 || premPolicyDetails.getPolicyPlan().equalsIgnoreCase(SHAConstants.POLICY_PLAN_GOLD_NEW)){
				 policy.setPolicyPlan("G");
			 }else if(premPolicyDetails.getPolicyPlan().equalsIgnoreCase(SHAConstants.POLICY_PLAN_SILVER) || premPolicyDetails.getPolicyPlan().equalsIgnoreCase(SHAConstants.POLICY_PLAN_SILVER_SL)){
				 policy.setPolicyPlan("S");
			 }
		 }
		 
		 if(premPolicyDetails.getPolicyZone() != null){
			 policy.setPolicyZone(premPolicyDetails.getPolicyZone());
		 }
		 
		 String policyStrYear = SHAUtils.getTruncateWord(policy.getPolicyNumber(), 12, 16);
		 if(policyStrYear != null){
			 policy.setPolicyYear(SHAUtils.getLongFromString(policyStrYear));
		 }
		 
		 if(premPolicyDetails.getPolicyTerm() != null) {
			 // Below Cond for SCRC - MED-PRD-070 - R201811302
			 if(premPolicyDetails.getProductCode() != null && ReferenceTable.SENIOR_CITIZEN_REDCARPET_REVISED.equals(premPolicyDetails.getProductCode())){
				 if(premPolicyDetails.getPolicyTerm() != null && !premPolicyDetails.getPolicyTerm().isEmpty()) {
					 String policyTermYear[] = premPolicyDetails.getPolicyTerm().split(" ");
					 String policyTerm = policyTermYear[0];
					 policy.setPolicyTerm(SHAUtils.getLongFromString(policyTerm));
				 }
			 }
			 else  if(!"".equalsIgnoreCase(premPolicyDetails.getPolicyTerm())) {
				 Long policyTerm = SHAUtils.getLongFromString(premPolicyDetails.getPolicyTerm());
				 policy.setPolicyTerm(policyTerm);
			 } else if(premPolicyDetails.getProductCode() != null && ReferenceTable.STAR_UNIQUE_PRODUCT_CODE.equals(premPolicyDetails.getProductCode())) {
				 policy.setPolicyTerm(2l);
			 }
		 }
		 
		 if( (premPolicyDetails.getPolicyStartDate().equals("") || premPolicyDetails.getPolicyStartDate().isEmpty() ? false : true))
		 policy.setCreatedDate(new Date(premPolicyDetails.getPolicyStartDate()));
		 
		 if(premPolicyDetails.getPolicyStartDate().equals("") || premPolicyDetails.getPolicyStartDate().isEmpty() ? false : true)
			 policy.setPolicyFromDate(new Date(premPolicyDetails.getPolicyStartDate()));
		 
		 if(premPolicyDetails.getPolicyEndDate().equals("") || premPolicyDetails.getPolicyEndDate().isEmpty() ? false : true)
		 policy.setPolicyToDate(new Date(premPolicyDetails.getPolicyEndDate()));
		 
		 if(premPolicyDetails.getReceiptDate().equals("") || premPolicyDetails.getReceiptDate().isEmpty() ? false : true)
		 policy.setReceiptDate(new Date(premPolicyDetails.getReceiptDate()));
		 
		 if(premPolicyDetails.getProposerDOB().equals("") || premPolicyDetails.getProposerDOB().isEmpty() ? false : true)
			 policy.setProposerDob(new Date(premPolicyDetails.getProposerDOB()));
		 
		 if(null != masterService.getMasterByValue(premPolicyDetails.getLob()))
		 policy.setLobId(masterService.getMasterByValue(premPolicyDetails.getLob()).getKey());
		 
		 if(null != masterService.getMasterByValue(premPolicyDetails.getPolicyType()))
		 policy.setPolicyType(masterService.getMasterByValueAndMasList(premPolicyDetails.getPolicyType(),ReferenceTable.POLICY_TYPE));
		 
		 if(premPolicyDetails.getSchemeType() != null && premPolicyDetails.getSchemeType().length() > 0){
			 
			 MastersValue schemeId = masterService.getMasterByValue(premPolicyDetails.getSchemeType());
		
			 policy.setSchemeId(schemeId != null ? schemeId.getKey() : null);
		 }
		 
		//TODO:Get product type from premia 
//		 if(null != masterService.getMasterByValue(premPolicyDetails.getProductName()))
//		 policy.setProductType(masterService.getMasterByValue(premPolicyDetails.getProductName()));
		 

		 policy.setProduct((policyService.getProductByProductCode(premPolicyDetails.getProductCode())));
		 policy.setProductType(masterService.getMasterByValueAndMasList(policy.getProduct().getProductType(),ReferenceTable.PRODUCT_TYPE));
		 
		 List<PolicyEndorsementDetails> endorsementDetailsList = premiaPolicyMapper .getPolicyEndorsementDetailsFromPremia(premPolicyDetails.getEndorsementDetails());
	
		 List<PreviousPolicy> previousPolicyList = premiaPolicyMapper.getPreviousPolicyDetailsFromPremia(premPolicyDetails.getPreviousPolicyDetails());
		 //set Endrosement Date
		 for(int index = 0;index<premPolicyDetails.getEndorsementDetails().size(); index++ ){
			 if(premPolicyDetails.getEndorsementDetails().get(index).getEndEffFmDt().equals("") || premPolicyDetails.getEndorsementDetails().get(index).getEndEffFmDt().isEmpty() ? false : true){
			 endorsementDetailsList.get(index).setEffectiveFromDate(new Date(premPolicyDetails.getEndorsementDetails().get(index).getEndEffFmDt()));
			 endorsementDetailsList.get(index).setEndoresementDate(new Date(premPolicyDetails.getEndorsementDetails().get(index).getEndEffFmDt()));
			 }
			 if(premPolicyDetails.getEndorsementDetails().get(index).getEndEffToDt().equals("") || premPolicyDetails.getEndorsementDetails().get(index).getEndEffToDt().isEmpty() ? false : true){
				 endorsementDetailsList.get(index).setEffectiveToDate(new Date(premPolicyDetails.getEndorsementDetails().get(index).getEndEffToDt()));
				 }
		 }
		 //Set previous policy Date
		 for(int index = 0;index<premPolicyDetails.getPreviousPolicyDetails().size(); index++ ){
			 if(premPolicyDetails.getPreviousPolicyDetails().get(index).getPolicyFromDate().equals("") || premPolicyDetails.getPreviousPolicyDetails().get(index).getPolicyFromDate().isEmpty() ? false : true){
				 previousPolicyList.get(index).setPolicyFrmDate(new Date(premPolicyDetails.getPreviousPolicyDetails().get(index).getPolicyFromDate()));
			 }
			 if(null == premPolicyDetails.getPreviousPolicyDetails().get(index).getPolicyToDate()||premPolicyDetails.getPreviousPolicyDetails().get(index).getPolicyToDate().equals("") || premPolicyDetails.getPreviousPolicyDetails().get(index).getPolicyToDate().isEmpty() ? false : true){
				 previousPolicyList.get(index).setPolicyToDate(new Date(premPolicyDetails.getPreviousPolicyDetails().get(index).getPolicyToDate()));
			 }
		 }
		 
		 List<Insured> insured = premiaPolicyMapper.getInsuredFromPremia(premPolicyDetails.getInsuredDetails());
		
		 //set insured Date
		
		 
		 //List<InsuredPedDetails> insuredPedDetails = new ArrayList<InsuredPedDetails>();

		 for(int index = 0; index < premPolicyDetails.getInsuredDetails().size(); index++){
			MastersValue genderMaster =  masterService.getKeyByValue(premPolicyDetails.getInsuredDetails().get(index).getGender());
			 insured.get(index).setInsuredGender(genderMaster);
			
			 if(premPolicyDetails.getInsuredDetails().get(index).getDob().equals("") || premPolicyDetails.getInsuredDetails().get(index).getDob().isEmpty() ? false : true){
//				 insured.get(index).setInsuredDateOfBirth(new Date(premPolicyDetails.getInsuredDetails().get(index).getDob()));
//				 Date now = new Date();
//				 Date Dob = new Date(premPolicyDetails.getInsuredDetails().get(index).getDob());
//				 Double age = (double) (now.getYear() - Dob.getYear());
//				 if ((Dob.getMonth() > now.getMonth())  || (Dob.getMonth() == now.getMonth() && Dob.getMonth() > now.getMonth())) {
//					 age--;
//					    }
//				 insured.get(index).setInsuredAge(age);
				 
				 Date formatPremiaDate = SHAUtils.formatPremiaDate(premPolicyDetails.getInsuredDetails().get(index).getDob());
				 //Added for insured age caluculation.
				 //Date formatPolicyStartDate = SHAUtils.formatPremiaDate(SHAUtils.formatPremiaDateAsString(new Date(premPolicyDetails.getPolicyStartDate())));

				 //Date formatPolicyStartDate = SHAUtils.formatPremiaDate(new Date(premPolicyDetails.getPolicyStartDate()).toString());
				 if(formatPremiaDate != null) {
					 
					 insured.get(index).setInsuredDateOfBirth(formatPremiaDate);

//					 Integer age = SHAUtils.calculateInsuredAge(formatPolicyStartDate,formatPremiaDate);
//					 insured.get(index).setInsuredAge(Double.valueOf(age));
				 }
				 
			 }
			 Double insuredAge = SHAUtils.getDoubleValueFromString(premPolicyDetails.getInsuredDetails().get(index).getInsuredAge());
	 		 
	 		 if(insuredAge != null){
	 			 insured.get(index).setInsuredAge(insuredAge);
	 			 } 

		 }
		 
			 for(int index = 0 ; index < premPolicyDetails.getInsuredDetails().size(); index++){
				 insured.get(index).setInsuredPedList(premiaPolicyMapper.getInsuredPedFromPremia(premPolicyDetails.getInsuredDetails().get(index).getPedDetails()));
				 insured.get(index).setNomineeDetails(premiaPolicyMapper.getInsuredNomineeDetails(premPolicyDetails.getInsuredDetails().get(index).getNomineeDetails()));
				 
				 insured.get(index).setProposerInsuredNomineeDetails(premiaPolicyMapper.getProposerInsuredNomineeDetails(premPolicyDetails.getInsuredDetails().get(index).getNomineeDetails()));
		 }
			 
			   List<PremInsuredNomineeDetails> premProposerNomineeDetails = premPolicyDetails.getProperNomineeDetails();
		        
		        if(premProposerNomineeDetails != null && !premProposerNomineeDetails.isEmpty()){
		        	List<PolicyNominee> proposerNomineeDetails = premiaPolicyMapper.getProposerInsuredNomineeDetails(premProposerNomineeDetails);
		        	for (PolicyNominee proposerNominee : proposerNomineeDetails) {
						if(proposerNominee.getStrNomineeDOB() != null && !proposerNominee.getStrNomineeDOB().isEmpty()){
							proposerNominee.setNomineeDob(new Date(proposerNominee.getStrNomineeDOB()));
						}
					}
		        	
		        	policy.setProposerNomineeDetails(proposerNomineeDetails);
		        	
		        }
			 
			 
			 
		List<PremInsuredDetails> premiaInsured = premPolicyDetails.getInsuredDetails();
			 
		int i=0;
		InsuredPedDetails selfDeclaredPed = null;
		List<InsuredPedDetails> pedList = null ;
		for (Insured insured2 : insured) {
			
			if(premPolicyDetails.getPolType() != null && premPolicyDetails.getPolType().equalsIgnoreCase(SHAConstants.PREMIA_POLTYPE_FLOATER)){
				Double totalSumInsured = policy.getTotalSumInsured();
				Double size = Double.valueOf(insured.size());
				Double sumInsured = 0d;
				if(premPolicyDetails.getProductCode() != null && premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_29)
						|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_06)
						|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_62)
						|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_79)
						|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_82)
						|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PROD_PAC_PRD_013)){
					if(totalSumInsured != null && ! totalSumInsured.equals(0d)){
						sumInsured = totalSumInsured/size;
					}
					Long roundOfSI = Math.round(sumInsured);
					insured2.setInsuredSumInsured(Double.valueOf(roundOfSI));
				}else{
					insured2.setInsuredSumInsured(policy.getTotalSumInsured());	
				}
				
//				policy.setProductType(masterService.getMaster(ReferenceTable.FLOATER_POLICY));
				
			}else{
//				policy.setProductType(masterService.getMaster(ReferenceTable.INDIVIDUAL_POLICY));
			}
			
			/*Below code commented - record inserting two times 
			if(premiaInsured.get(i).getSelfDeclaredPed() != null && premiaInsured.get(i).getSelfDeclaredPed().length() >0){
				selfDeclaredPed = new InsuredPedDetails();
				selfDeclaredPed.setInsuredKey(insured2.getInsuredId());
				selfDeclaredPed.setPedDescription(premiaInsured.get(i).getSelfDeclaredPed());
				pedList = new ArrayList<InsuredPedDetails>();
				pedList.add(selfDeclaredPed);
				insured2.setInsuredPedList(pedList);
			}*/
			i++;
					
		}
		
		

	    policy.setInsured(insured);
	    
		 if(premPolicyDetails.getBankDetails() != null && !premPolicyDetails.getBankDetails().isEmpty()){
	        	List<PolicyBankDetails> bankDetailsFromPremia = premiaPolicyMapper.getBankDetailsFromPremia(premPolicyDetails.getBankDetails());
	        	for (PolicyBankDetails policyBankDetails : bankDetailsFromPremia) {
					if(policyBankDetails.getStrEffectiveFrom() != null && ! policyBankDetails.getStrEffectiveFrom().equalsIgnoreCase("") && !policyBankDetails.getStrEffectiveFrom().equalsIgnoreCase("null") ){
						policyBankDetails.setEffectiveFrom(new Date(policyBankDetails.getStrEffectiveFrom()));
					}
					if(policyBankDetails.getStrEffectiveTo() != null && ! policyBankDetails.getStrEffectiveTo().equalsIgnoreCase("") && ! policyBankDetails.getStrEffectiveTo().equalsIgnoreCase("null")){
						policyBankDetails.setEffectiveTo(new Date(policyBankDetails.getStrEffectiveTo()));
					}
				}
	        	policy.setPolicyBankDetails(bankDetailsFromPremia);
	        }
	    
        if(premPolicyDetails.getProductCode() != null && premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_22)
        		|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_35) || 
        		premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_17)
        		|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_70)
        		|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_42)
	        	|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_44)
	        	|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.STAR_MICRO_RORAL_AND_FARMERS_CARE)
	        	|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_77)
	        	|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_37)
	        	|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_78)
	        	|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_84)
	        	|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_83)
	        	|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_91)
	        	|| premPolicyDetails.getProductCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_88)
        		){
        	
        	 if(premPolicyDetails.getPolType() != null && premPolicyDetails.getPolType().equalsIgnoreCase(SHAConstants.PREMIA_POLTYPE_FLOATER)){
     	    	
        		 MastersValue productType = masterService.getMaster(ReferenceTable.FLOATER_POLICY);
        		 policy.setProductType(productType);
        		 
        		 Product product = masterService.getProductByCodeAndType(premPolicyDetails.getProductCode(), productType.getValue());
        		 if(product != null){
        			 policy.setProduct(product);
        		 }
        		 
     	    }else{
     	    	
     	    	 MastersValue productType = masterService.getMaster(ReferenceTable.INDIVIDUAL_POLICY);
        		 policy.setProductType(productType);
        		 
        		 Product product = masterService.getProductByCodeAndType(premPolicyDetails.getProductCode(), productType.getValue());
        		 if(product != null){
        			 policy.setProduct(product);
        		 }
     	    	
     	    }
        	
        }
	   
		policyService.create(policy, previousPolicyList, endorsementDetailsList);
		
		 policy = policyService.getPolicy(premPolicyDetails.getPolicyNo());
		}
		return policy;
	}


	protected void showPolicyDetails(
			@Observes @CDIEvent(MenuItemBean.SHOW_POLICY_DETAILS) final ParameterDTO parameters) {

		PremPolicyDetails policyDetails = (PremPolicyDetails) parameters
				.getPrimaryParameter();
		populatePolicyFromPremia(policyDetails);

	}

	private Policy populatePolicyFromPremia(PremPolicyDetails policyDetails) {

		Policy policy = policyService.getPolicy(policyDetails.getPolicyNo());

		List<PreviousPolicy> previousPolicyList = previousPolicyService
				.getPrevPolicy(policyDetails.getProposerCode());

		List<PolicyEndorsementDetails> endorsementDetailsList = policyService
				.getEndorsementList(policyDetails.getPolicyNo());

		if (null == policy) {
			// List<TmpPrevPolicy> tmpPrevPolicyList = new
			// ArrayList<TmpPrevPolicy>();
			// List<TmpEndorsementDetails> tmpEndorsementDetails = new
			// ArrayList<TmpEndorsementDetails>();
			policy = populateMastersValueFromPremia(policyDetails);
			if ((null == previousPolicyList || previousPolicyList.isEmpty())
					&& (null == endorsementDetailsList || endorsementDetailsList
							.isEmpty())) {
				/*
				 * tmpPrevPolicyList =
				 * previousPolicyService.findTmppolicyByPolicyNo((tmpPolicy
				 * .getPolAssrCode()));
				 */

				// tmpEndorsementDetails =
				// policyService.getTmpEndorsementList(tmpPolicy.getPolNo());

				// previousPolicyList =
				// populatePreviousPolicy(tmpPrevPolicyList);
				endorsementDetailsList = populatePolicyEndorsementDetailsFromPremia(policyDetails
						.getEndorsementDetails());
			}

			policy = populateMastersValueFromPremia(policyDetails);

			policyService.create(policy, previousPolicyList,
					endorsementDetailsList);
		}
		return policy;
	}

	

	private List<PolicyEndorsementDetails> populatePolicyEndorsementDetailsFromPremia(
			List<PremEndorsementDetails> premEndorsementDetails) {
		premiaPolicyMapper.getAllMapValues();
		List<PolicyEndorsementDetails> policyEndoresementDetailsList = premiaPolicyMapper
				.getPolicyEndorsementDetailsFromPremia(premEndorsementDetails);
		return policyEndoresementDetailsList;
	}

	

	protected void createPolicyRelatedData(
			@Observes @CDIEvent(POPULATE_POLICY_FROM_TMPPOLICY) final ParameterDTO parameters) {
//		TmpPolicy tmpPolicy = (TmpPolicy) parameters.getPrimaryParameter();
//		populatePolicyFromTmpPolicy(tmpPolicy);
	}

//	private List<PreviousPolicy> populatePreviousPolicy(
//			List<TmpPrevPolicy> tmpPrevPolicyList) {
//		List<PreviousPolicy> previousPolicyList = txnPolicyMapper
//				.getPreviousPolicyFromTmpPreviousPolicy(tmpPrevPolicyList);
//		return previousPolicyList;
//	}

//	private List<PolicyEndorsementDetails> populatePolicyEndorsementDetails(
//			List<TmpEndorsementDetails> tmpEndorsementDetails) {
//		List<PolicyEndorsementDetails> policyEndoresementDetailsList = txnPolicyMapper
//				.getPolicyEndorsementDetails(tmpEndorsementDetails);
//		return policyEndoresementDetailsList;
//	}

//	private Policy setMasterValuesToPolicy(TmpPolicy tmpPolicy) {
//
//		Policy policy = txnPolicyMapper.getPolicyFromTmpPolicy(tmpPolicy);
//		// Policy policy = new Policy();
//		// MastersValue gender = masterService.getKeyByValue(newIntimationDto
//		// .getInsuredPatient().getInsuredGender());
//		// MastersValue relationship = masterService
//		// .getRelationsShipKeyByValue(newIntimationDto
//		// .getInsuredPatient().getRelationshipwithInsuredId());
//		MastersValue lineofBusiness = masterService.getKeyByValue(tmpPolicy
//				.getLineofBusiness());
//		policy.setLobId(lineofBusiness.getKey());
//		Product product = masterService.getProductByProductCode(tmpPolicy
//				.getPolProductCode());
//		MastersValue policyType = masterService.getMaster(tmpPolicy
//				.getPolType() != null ? StringUtils.trim(tmpPolicy.getPolType()
//				.toLowerCase()) : null);
//		MastersValue productType = masterService.getMaster(tmpPolicy
//				.getProductType() != null ? StringUtils.trim(tmpPolicy
//				.getProductType().toLowerCase()) : null);
//		List<OrganaizationUnit> insuredOfficeNameByDivisionCode = policyService
//				.getInsuredOfficeNameByDivisionCode(tmpPolicy.getPolhDivnCode());
//		// policy.setHomeOfficeName(insuredOfficeNameByDivisionCode.get(0) !=
//		// null ?
//		// insuredOfficeNameByDivisionCode.get(0).getOrganizationUnitName() :
//		// "");
//		policy.setProduct(product);
//		policy.setPolicyType(policyType);
//		policy.setProductType(productType);
//		List<Insured> insuredObjectList = txnPolicyMapper
//				.getInsuredFromTmpInsured(insuredService
//						.getInsuredListByPoliycyNo(policy.getPolicyNumber()));
//		for (Insured insured : insuredObjectList) {
//
//			MastersValue relationship = masterService
//					.getRelationsShipByValue(insured
//							.getRelationshipwithInsuredId().getValue());
//			insured.setRelationshipwithInsuredId(relationship);
//			MastersValue gender = masterService.getKeyByValue(insured
//					.getInsuredGender().getValue());
//			insured.setInsuredGender(gender);
//
//			List<InsuredPedDetails> insuredPedDetailsList = policyService
//					.getPEDByInsured(insured.getInsuredId());
//
//			if (null == insuredPedDetailsList
//					|| insuredPedDetailsList.isEmpty()) {
//
//				List<TmpPED> tmpPedList = policyService.getTmpPED(insured
//						.getInsuredId());
//				insuredPedDetailsList = txnPolicyMapper
//						.getInsuredPedFromTmpPED(tmpPedList);
//				insured.setInsuredPedList(insuredPedDetailsList);
//			}
//
//		}
//
//		policy.setInsured(insuredObjectList);
//		return policy;
//	}

	protected void showRevisedEditIntimation(
			@Observes @CDIEvent(MenuItemBean.REVISED_EDIT_INTIMATION) final ParameterDTO parameters) {
		NewIntimationDto newIntimationDto = null;
		if (parameters.getPrimaryParameter() instanceof NewIntimationDto) {
			newIntimationDto = (NewIntimationDto) parameters
					.getPrimaryParameter();
		} else if (parameters.getPrimaryParameter() instanceof SearchEditHospitalDetailsTableDTO) {
			searchEditHospitalDto = (SearchEditHospitalDetailsTableDTO) parameters
					.getPrimaryParameter();
			Intimation editHospitalIntimation = intimationService
					.getIntimationByKey(searchEditHospitalDto.getKey());
			newIntimationDto = intimationService
					.getIntimationDto(editHospitalIntimation);
		}

		Long intimationId = newIntimationDto.getKey();
		// Long polsysId = newIntimationDto.getTmpPolicy().getPolSysId();
		//Long policyKey = newIntimationDto.getPolicy().getKey();
		// TmpPolicy policy = policyService.findTmppolicyById(polsysId);
		Policy policy = policyService.getPolicy(newIntimationDto.getPolicy().getPolicyNumber());
		/*
		 * TmpInsured insured = policyService.findByInsuredKey(newIntimationDto
		 * .getInsuredPatientId().getKey());
		 */
		Insured insured = policyService.findByClsInsuredKey(newIntimationDto
				.getInsuredPatient().getKey());
		newIntimationDto.setInsuredPatient(insured);
		GalaxyIntimation intimationToEdit = intimationService
				.getGalaxyIntimationByKey(intimationId);
		NewIntimationDto new_IntimationDto = intimationService
				.getGalaxyIntimationDto(intimationToEdit);
		// new_IntimationDto.setTmpPolicy(policy);
		new_IntimationDto.setPolicy(policy);
		if (new_IntimationDto.getHospitalDto() != null) {
			HospitalDto hospitalDto = hospitalService.read(new_IntimationDto
					.getHospitalDto().getKey(), newIntimationDto
					.getHospitalDto().getHospitalType());
			new_IntimationDto.setHospitalDto(hospitalDto);
			new_IntimationDto.setHospitalType(newIntimationDto.getHospitalDto()
					.getHospitalType());
			new_IntimationDto.setHospitalTypeValue(newIntimationDto
					.getHospitalDto().getHospitalType().getValue());

			CityTownVillage cityByKey = null;
			State stateByKey = null;
			if (hospitalDto.getRegistedHospitals() != null
					&& new_IntimationDto.getHospitalDto().getHospitalType()
							.getValue().toLowerCase().contains("network")) {
				cityByKey = masterService.getCityByKey(hospitalDto
						.getRegistedHospitals().getCityId());
				hospitalDto.setCpuId(hospitalDto.getRegistedHospitals()
						.getCpuId());
				
				stateByKey = masterService.getStateByKey(hospitalDto
						.getRegistedHospitals().getStateId());

			} else {
				cityByKey = masterService.getCityByKey(hospitalDto
						.getNotRegisteredHospitals().getCityId());
				stateByKey = masterService.getStateByKey(hospitalDto
						.getNotRegisteredHospitals().getStateId());
				hospitalDto.setCpuId(hospitalDto.getNotRegisteredHospitals()
						.getCpuId());
			}

			new_IntimationDto.getHospitalDto().setCity(cityByKey.getValue());
			new_IntimationDto.getHospitalDto().setState(stateByKey.getValue());
			new_IntimationDto.setCity(cityByKey);
			new_IntimationDto.setState(stateByKey);
		}
		if (new_IntimationDto.getNewBornFlag() != null
				&& new_IntimationDto.getNewBornFlag()) {
			List<NewBabyIntimation> babyIntimationList = intimationService
					.getListOfNewBabyByIntimation(new_IntimationDto.getKey());
			List<NewBabyIntimationDto> babyIntimationDtoList = new ArrayList<NewBabyIntimationDto>();
			if (babyIntimationList != null && !babyIntimationList.isEmpty()) {
				for (NewBabyIntimation newBabyIntimation : babyIntimationList) {
					babyIntimationDtoList.add(new NewBabyIntimationMapper()
							.getNewBabyIntimationDto(newBabyIntimation));
				}
			}
			if (!babyIntimationDtoList.isEmpty()) {
				new_IntimationDto
						.setNewBabyIntimationListDto(babyIntimationDtoList);
			}
		}
		new_IntimationDto.setInsuredPatient(insured);

		// view.setNewIntimationView(IntimationDetailsView.class,
		// new_IntimationDto);
		
		HashMap<String, String> enteredValues = new HashMap<String, String>();
		enteredValues.put("polNo", policy.getPolicyNumber());
		BeanItemContainer<PremPolicy> policyContainer =  policyService.filterPolicyDetailsPremia(enteredValues);
		if(policyContainer != null && policyContainer.getItemIds() != null && ! policyContainer.getItemIds().isEmpty()){
			new_IntimationDto.setPolicySummary(policyContainer.getItemIds().get(0));
			
			Product product = policyService.getProductByProductCode(policyContainer.getItemIds().get(0).getProductCode());
			new_IntimationDto.getPolicySummary().setProduct(product);

			String policyServiceType = "OTHERS";
			
			if(policyContainer.getItemIds().get(0).getProductCode() != null){
				Product productByProductCode = premiaPullService.getProductByProductCode(policyContainer.getItemIds().get(0).getProductCode());
				if(productByProductCode != null && productByProductCode.getProductService() != null){
					policyServiceType = productByProductCode.getProductService();
				}
			}
			
			newIntimationDto.setPolicyServiceType(policyServiceType);
			
		}

		view.setNewIntimationView(IntimationDetailsView.class,
				new_IntimationDto, parameters);
	}

	protected void showLoginSuccess(
			@Observes @CDIEvent(MenuPresenter.SHOW_SUCCESS_VIEW) final ParameterDTO parameters) {
		final ImsUser imsUser = (ImsUser) parameters.getPrimaryParameter();
		String empFirstName = (String) parameters.getSecondaryParameter(0, String.class);
		UI.getCurrent().getSession().setAttribute("imsUser", imsUser);
		String bancsPaymentFlag = null;
		TmpEmployee tmpEmployeeLoginValidation = userMagmtService.getEmployessValuesByInactiveStatus(imsUser.getUserName());
		MastersValue paymentMenuBasedOnMAsterFlag = masterService.getMasterCodeFlag(SHAConstants.MASTER_CODE);
		final Boolean cashlessMenu = BPMClientContext.showCashlessMenu();
		if(null != paymentMenuBasedOnMAsterFlag && null != paymentMenuBasedOnMAsterFlag.getMappingCode() && 
				paymentMenuBasedOnMAsterFlag.getMappingCode().equalsIgnoreCase(SHAConstants.YES_FLAG)) {
			bancsPaymentFlag = SHAConstants.YES_FLAG;
		}else {
			bancsPaymentFlag = SHAConstants.N_FLAG;
		}

		Boolean empDeactivated = false;
		if(imsUser != null){
			String userName = imsUser.getUserName();
			claimService.insertLoginDetails(userName);

			TmpEmployee tmpEmployee = claimService.getEmployeeName(userName);
			if(tmpEmployee != null) {
				tmpEmployee.setEmpFirstName(empFirstName);
				tmpEmployee.setModifiedDate(new Date());
				claimService.updateEmployeeDetails(tmpEmployee);
			} else {
				if(tmpEmployeeLoginValidation != null && tmpEmployeeLoginValidation.getActiveStatus()==0) {
					showInformation("This User has been deactivated in Galaxy");
					empDeactivated = true;
				}else{
					tmpEmployee = new TmpEmployee();
					tmpEmployee.setEmpId(imsUser.getUserName().toUpperCase());
					tmpEmployee.setLoginId(imsUser.getUserName().toUpperCase());
					tmpEmployee.setEmpFirstName(empFirstName);
					tmpEmployee.setActiveStatus(1L);
					tmpEmployee.setCreatedDate(new Date());
					claimService.insertEmployeeDetails(tmpEmployee);
				}
			}
			//IMSSUPPOR-27314
			MasUser masUser = claimService.getUserByUserName(userName);
			if(masUser != null) {
				masUser.setUserName(empFirstName);
				masUser.setModifiedDate(new Date());
				claimService.updateMasUserDetails(masUser);
			}
		}
		String loginUserIdLower = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
		final String loginUserId = loginUserIdLower.toUpperCase();
		BPMClientContext bpmClientContext = new BPMClientContext();
		//	List<ClaimMagazine> magObj = masterService.getMagazineByUserId(loginUserId);
		/*DBCalculationService service = new DBCalculationService();
		MagazineDTO magazineObj = null;
		//if(megazineList!=null && !megazineList.isEmpty()){
		if(magObj == null){
			     magazineObj = service.getDataFromMasMagazine();		
			     final Window popupWindow = new Window();
					popupWindow.setCaption("ORBIT-MMS (Medical Magazine of STAR)");
					List<MasMagazineDocument> megazineList = masterService.getMasMagazine();
					String docViewURL = SHAFileUtils.viewFileByTokenService(String.valueOf(megazineList.get(0).getDocumentKey()));
					System.out.println("Magazine URL :"+docViewURL);
					BrowserFrame pdfDoc = new BrowserFrame("", new ExternalResource(docViewURL));
					pdfDoc.setWidth("100%");
					pdfDoc.setHeight("600px");

					final CheckBox chkAgree = new CheckBox("I have read the magazine.");
					//Vaadin8-setImmediate() chkAgree.setImmediate(true);
					chkAgree.setStyleName(ValoTheme.CHECKBOX_LARGE);

					Button homeButton = new Button("OK");
					homeButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
					homeButton.setData(magazineObj);
					homeButton.addClickListener(new ClickListener() {
						private static final long serialVersionUID = 7396240433865727954L;
						@Override
						public void buttonClick(ClickEvent event) {
							if (chkAgree.getValue()) {
								popupWindow.close();
								MagazineDTO magazineObj = (MagazineDTO) event.getButton().getData();
								masterService.persistMagazine(loginUserId, magazineObj);
								view.showLoginSuccess(imsUser);
							}else{
								showAlertForMagazine();
							}
						}
					});

					HorizontalLayout frameHolder = new HorizontalLayout();
					frameHolder.addComponent(pdfDoc);
					frameHolder.setWidth("100%");

					HorizontalLayout butHolder = new HorizontalLayout();
					butHolder.addComponent(chkAgree);
					butHolder.addComponent(homeButton);
					butHolder.setComponentAlignment(chkAgree, Alignment.BOTTOM_CENTER);
					butHolder.setComponentAlignment(homeButton, Alignment.BOTTOM_CENTER);
					//butHolder.setWidth("25%");
					butHolder.setSpacing(true);
					butHolder.setMargin(true);

					VerticalLayout holderLayout = new VerticalLayout();
					holderLayout.addComponent(pdfDoc, 0);
					holderLayout.addComponent(butHolder, 1);
					holderLayout.setSpacing(true);
					holderLayout.setComponentAlignment(butHolder, Alignment.BOTTOM_CENTER);

					popupWindow.setContent(holderLayout);
					popupWindow.setWidth("60%");
					popupWindow.setHeight("100%");
					popupWindow.center();
					popupWindow.setClosable(false);
					popupWindow.setResizable(false);

					UI.getCurrent().addWindow(popupWindow);*/
		//if(magObj == null){
		ImsUser imsUser1 = null;
		String[] userRoles = null;
		if(VaadinSession.getCurrent().getAttribute(BPMClientContext.USER_OBJECT) != null) {
			imsUser1 = (ImsUser) VaadinSession.getCurrent().getAttribute(BPMClientContext.USER_OBJECT);
			userRoles = imsUser1.getUserRoleList();
		}
		if(!Arrays.asList(userRoles).contains(SHAConstants.CLM_OMP_TPA_INTIMATION)) {
			DBCalculationService service = new DBCalculationService();
			final MagazineDTO magazineObj = service.getDataFromMasMagazine();
			if(magazineObj != null && magazineObj.getMasMagCode() != null){
				List<ClaimMagazine> magObj =  masterService.getMagazineByUserId(loginUserId,magazineObj.getMasMagCode());
				if(magObj == null){
					final Window popupWindow = new Window();
					popupWindow.setCaption("ORBIT-MMS (Medical Magazine of STAR)");
					magazineObj.getMasDocKey();
					String docViewURL = SHAFileUtils.viewFileByTokenService(String.valueOf(magazineObj.getMasDocKey()));
					System.out.println("Magazine URL :"+docViewURL);
					//			BrowserFrame pdfDoc = new BrowserFrame("", new ExternalResource(docViewURL));
					BrowserFrame pdfDoc = new BrowserFrame("", new ExternalResource(docViewURL+"#toolbar=0"));
					pdfDoc.setWidth("100%");
					pdfDoc.setHeight("600px");

					final CheckBox chkAgree = new CheckBox("I have read the magazine.");
					//Vaadin8-setImmediate() chkAgree.setImmediate(true);
					chkAgree.setStyleName(ValoTheme.CHECKBOX_LARGE);

					Button homeButton = new Button("OK");
					homeButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
					homeButton.addClickListener(new ClickListener() {
						private static final long serialVersionUID = 7396240433865727954L;
						@Override
						public void buttonClick(ClickEvent event) {
							if (chkAgree.getValue()) {
								popupWindow.close();
								masterService.persistMagazine(loginUserId, magazineObj);
								/*As per Saran instruction switch module popup disabled
								if(!cashlessMenu && bpmClientContext.showActions() && !bpmClientContext.showReports()){
									loginpopup(imsUser);
								}else{*/
									view.showLoginSuccess(imsUser);
//								}	
							}else {
								showAlertForMagazine();
							}
						}
					});

					HorizontalLayout frameHolder = new HorizontalLayout();
					frameHolder.addComponent(pdfDoc);
					frameHolder.setWidth("100%");

					HorizontalLayout butHolder = new HorizontalLayout();
					butHolder.addComponent(chkAgree);
					butHolder.addComponent(homeButton);
					butHolder.setComponentAlignment(chkAgree, Alignment.BOTTOM_CENTER);
					butHolder.setComponentAlignment(homeButton, Alignment.BOTTOM_CENTER);
					//butHolder.setWidth("25%");
					butHolder.setSpacing(true);
					butHolder.setMargin(true);

					VerticalLayout holderLayout = new VerticalLayout();
					holderLayout.addComponent(pdfDoc, 0);
					holderLayout.addComponent(butHolder, 1);
					holderLayout.setSpacing(true);
					holderLayout.setComponentAlignment(butHolder, Alignment.BOTTOM_CENTER);

					popupWindow.setContent(holderLayout);
					popupWindow.setWidth("60%");
					popupWindow.setHeight("100%");
					popupWindow.center();
					popupWindow.setClosable(false);
					popupWindow.setResizable(false);

					UI.getCurrent().addWindow(popupWindow);
				}else{
					/*As per Saran instruction switch module popup disabled
					if(!cashlessMenu && bpmClientContext.showActions() && !bpmClientContext.showReports() ){
						loginpopup(imsUser);
					}else{*/
						view.showLoginSuccess(imsUser);
//					}		
				}
			}else{
				/*if(!cashlessMenu && bpmClientContext.showActions() && !bpmClientContext.showReports()){
					loginpopup(imsUser);
				}else{*/
					view.showLoginSuccess(imsUser);
//				}	
			}
		}
		else{
			/*if(!cashlessMenu && bpmClientContext.showActions() && !bpmClientContext.showReports()){
				loginpopup(imsUser);
			}else{*/
				view.showLoginSuccess(imsUser);
//			}	
		}
	}
	
	protected void showIntimationPageView(
			@Observes @CDIEvent(MenuPresenter.SHOW_INTIMATION_SERVLET_VIEW) final ParameterDTO parameters) {
		/*ImsUser imsUser = (ImsUser) parameters.getPrimaryParameter();
		String empFirstName = (String) parameters.getSecondaryParameter(0, String.class);
		UI.getCurrent().getSession().setAttribute("imsUser", imsUser);
		if(imsUser != null){
			String userName = imsUser.getUserName();
			claimService.insertLoginDetails(userName);
			
			TmpEmployee tmpEmployee = claimService.getEmployeeName(userName);
			if(tmpEmployee != null) {
				tmpEmployee.setEmpFirstName(empFirstName);
				tmpEmployee.setModifiedDate(new Date());
				claimService.updateEmployeeDetails(tmpEmployee);
			} else {
				tmpEmployee = new TmpEmployee();
				tmpEmployee.setEmpId(imsUser.getUserName().toUpperCase());
				tmpEmployee.setLoginId(imsUser.getUserName().toUpperCase());
				tmpEmployee.setEmpFirstName(empFirstName);
				tmpEmployee.setActiveStatus(1L);
				tmpEmployee.setCreatedDate(new Date());
				claimService.insertEmployeeDetails(tmpEmployee);
			}
		}*/
		view.showCreateIntimationView();
	}
	
	protected void updateLogoutSuccess(
			@Observes @CDIEvent(MenuPresenter.LOGOUT_UPDATE_DETAILS) final ParameterDTO parameters) {
		String userName = (String) parameters.getPrimaryParameter();
	    claimService.updateLoginDetails(userName);
	}

	protected void showRegisterView(
			@Observes @CDIEvent(MenuItemBean.SEARCH_REGISTER_CLAIM) final ParameterDTO parameters) {

		// view.setViewG(SearchClaimRegisterView.class, true);

		BeanItemContainer<SelectValue> hospitalTypeContainer = masterService
				.getSelectValueContainer(ReferenceTable.HOSPITAL_TYPE);
		Map<String, Object> referenceData = new HashMap<String, Object>();
		referenceData.put("hospitalType", hospitalTypeContainer);

		view.setViewG(SearchClaimRegisterView.class, true, referenceData);
	}

	protected void showGhiAllowRegisterView(
			@Observes @CDIEvent(MenuItemBean.SEARCH_GHI_ALLOW_REGISTER_CLAIM) final ParameterDTO parameters) {

		BeanItemContainer<SelectValue> hospitalTypeContainer = masterService
				.getSelectValueContainer(ReferenceTable.HOSPITAL_TYPE);
		Map<String, Object> referenceData = new HashMap<String, Object>();
		referenceData.put("hospitalType", hospitalTypeContainer);

		view.setViewAllowGHIRegister(SearchGhiAllowClaimRegisterView.class, referenceData);
	}
	
	protected void showSearchCoveringLetterView(
			@Observes @CDIEvent(MenuItemBean.GENERATE_COVERINGLETTER) final ParameterDTO parameters) {

		view.setView(GenerateLetterView.class, true);
	}

	protected void showRejectionLetterView(
			@Observes @CDIEvent(MenuItemBean.GENERATE_REJECTIONLETTER) final ParameterDTO parameters) {

		view.setView(GenerateLetterView.class, true, parameters);
	}
	
//	Commented the below Cashless Screen
//	protected void showSearchPreAuthView(
//			@Observes @CDIEvent(MenuItemBean.PROCESS_PREAUTH) final ParameterDTO parameters) {
//		
///*       >>>>>>>>>>>>>>>>>>>>>For Manual BPMN call<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
//		String [] intmationNumber={""};	
//		manualBPMNCall(intmationNumber);
//	*/
//		// System.out.println("Preauth !!!!!!!!!!!!!");
//		
////		DBCalculationService dbCalculationService = new DBCalculationService();
////		dbCalculationService.testingArrayAsInput();
//		
//		BeanItemContainer<SelectValue> selectValueContainerForIntimationSource = masterService
//				.getSelectValueContainer(ReferenceTable.INTIMATION_SOURCE);
////		BeanItemContainer<SelectValue> selectValueContainerForNetworkHospType = masterService
////				.getSelectValueContainer(ReferenceTable.NETWORK_HOSPITAL_TYPE);
//		BeanItemContainer<SelectValue> selectValueContainerForNetworkHospType = masterService
//				.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
//		BeanItemContainer<SelectValue> selectValueContainerForTreatmentType = masterService
//				.getSelectValueContainer(ReferenceTable.TREATMENT_MANAGEMENT);
//		BeanItemContainer<SelectValue> specialityContainer = preauthService.getSpecialistTypeList();
////		BeanItemContainer<SelectValue> selectValueContainerForType = masterService
////				.getType(ReferenceTable.PROCESS_PREAUTH);
//		
//		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getStageList();
//
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
//				.getTmpCpuCodes();
//		
//		view.setViewG(SearchPreauthView.class, true,
//				selectValueContainerForIntimationSource,
//				selectValueContainerForNetworkHospType,
//				selectValueContainerForTreatmentType,
//				selectValueContainerForType,specialityContainer,selectValueContainerForCPUCode, SHAConstants.PROCESS_PREAUTH);
//		// view.setView(SearchPreauthView.class, true);
//	}

//	Commented the below Cashless Screen
//	protected void showSearchPEDQueryView(
//			@Observes @CDIEvent(MenuItemBean.PROCESS_PED_QUERY) final ParameterDTO parameters) {
//		view.setViewG(SearchPEDQueryView.class, true);
//	}

//	Commented the below Cashless Screen
//	protected void showSearchWithDrawPreauthView(
//			@Observes @CDIEvent(MenuItemBean.WITHDRAW_PRE_AUTH) final ParameterDTO parameters) {
//
//		// preauthService.getClaimedAmountDetails();
//
//		// preauthService.getClaimedAmountDetails();
//		// view.setView(SearchWithdrawCashLessProcessView.class, true);
////		List<SublimitFunObject> claimedAmountDetails = calcService
////				.getClaimedAmountDetails(22, 200000D, 63d);
////		for (SublimitFunObject sublimitFunObject : claimedAmountDetails) {
////			System.out.println(sublimitFunObject.toString());
////		}
//
//		view.setViewG(SearchWithdrawCashLessProcessView.class, true);
//	}

//	Commented the below Cashless Screen
//	protected void showSearchDownSizePreauthView(
//			@Observes @CDIEvent(MenuItemBean.DOWNSIZE_PRE_AUTH) final ParameterDTO parameters) {
//		view.setViewG(SearchDownsizeCashLessProcessView.class, true);
//	}
	
//	Commented the below Cashless Screen
//	protected void showSearchWithDrawPostPreauthView(
//			@Observes @CDIEvent(MenuItemBean.WITHDRAW_PRE_AUTH_POST_PROCESS) final ParameterDTO parameters) {
//
//
//		view.setViewG(SearchWithdrawCashLessPostProcessView.class, true);
//	}
	
	
	/**
	 * process downsize request search screen
	 * @param parameters
	 */
//	Commented the below Cashless Screen
//	protected void showSearchDownSizePreauthRequestView(
//			@Observes @CDIEvent(MenuItemBean.DOWNSIZE_PRE_AUTH_REQUEST) final ParameterDTO parameters) {
//		view.setViewG(SearchDownsizeRequestView.class, true);
//	}

	protected void showSearchFieldVisitView(
			@Observes @CDIEvent(MenuItemBean.FIELD_VISIT_REPESENTATION) final ParameterDTO parameters) {
		view.setViewG(SearchFieldVisitView.class, true);
	}
	
	protected void showSearchReAssignFieldVisitView(
			@Observes @CDIEvent(MenuItemBean.REASSIGN_FIELD_VISIT_REPESENTATION) final ParameterDTO parameters) {
		view.setViewG(SearchReAssignFieldVisitView.class, true);
	}
	
	protected void showCPUSkipZMRView(
			@Observes @CDIEvent(MenuItemBean.CPU_SKIP_ZMR) final ParameterDTO parameters) {
		
		BeanItemContainer<SelectValue> cpuCodeContainer = masterService
				.getTmpCpuCodes();
		view.setSkipZMR(SkipZMRView.class, cpuCodeContainer);
	}

//	Commented the below Cashless Screen
//	protected void showClearCashlessView(
//			@Observes @CDIEvent(MenuItemBean.CLEAR_CASHLESS) final ParameterDTO parameters) {
//		view.setViewG(SearchCancelCashlessView.class, true);
//	}

//	Commented the below Cashless Screen
//	protected void showPreMedicalView(
//			@Observes @CDIEvent(MenuItemBean.PROCESS_PRE_MEDICAL) final ParameterDTO parameters) {
//		
////		DBCalculationService db = new DBCalculationService();
////		
////		db.callUnlockProcedure(100018l);
//
//		BeanItemContainer<SelectValue> selectValueContainerForIntimationSource = masterService
//				.getSelectValueContainer(ReferenceTable.INTIMATION_SOURCE);
////		BeanItemContainer<SelectValue> selectValueContainerForNetworkHospType = masterService
////				.getSelectValueContainer(ReferenceTable.HOSPITAL_TYPE);
//		
//		BeanItemContainer<SelectValue> selectValueContainerForNetworkHospType = masterService
//				.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
//		// BeanItemContainer<SelectValue> selectValueContainerForTreatmentType =
//		// masterService.getSelectValueContainer(ReferenceTable.TREATMENT_MANAGEMENT);
//		
////		BeanItemContainer<SelectValue> selectValueContainerForType = masterService
////				.getType(ReferenceTable.PROCESS_PRE_MEDICAL);
//		
//		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getStageList();
//		
//		BeanItemContainer<SelectValue> specialityContainer = preauthService.getSpecialistTypeList();
//		
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
//				.getTmpCpuCodes();
////		statusByStage.addBean(selectValue2);
//
//		view.setViewG(ProcessPreMedicalView.class, true,
//				selectValueContainerForIntimationSource,
//				selectValueContainerForNetworkHospType, null,
//				selectValueContainerForType,specialityContainer,selectValueContainerForCPUCode, SHAConstants.PROCESS_PRE_MEDICAL);
////		batch.doPremiaPullForDocNoClaim();
//
//		// view.setView(ProcessPreMedicalView.class, true);
//	}

	protected void showPreAuthWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_PREATUH_WIZARD) final ParameterDTO parameters) {
		Date startDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> SHOW PREAUTH WIZARD METHOD STARTED %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(startDate, new Date()));

		Date date1 = new Date();
		SearchPreauthTableDTO dto = (SearchPreauthTableDTO) parameters
				.getPrimaryParameter();
		PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//		PreMedicalMapper.getAllMapValues();
		Preauth preauth = preauthService.getPreauthById(dto.getKey());
		//Long preauthKey = preauth.getKey();
		
		Boolean isValidClaim = true;
		if(null != preauth.getClaim())
		{
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(preauth.getClaim().getLegalFlag()))
			{
				isValidClaim = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
		}
		if(isValidClaim){
		
		
		log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> TOTAL TIME CONSUMED BY PREAUTH DTO AND MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date1, new Date()));

			PreauthDTO preauthDTO = premedicalMapper.getPreauthDTO(preauth);

			log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> TOTAL TIME CONSUMED BY PREAUTH DTO AND MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date1, new Date()));

			// preauthDTO.setAmountRequested(dto.getPreAuthReqAmt());

			//preauthDTO.setRodHumanTask(dto.getHumanTask());
			preauthDTO.setTaskNumber(dto.getTaskNumber());

			preauthDTO.setCrmFlagged(dto.getCrmFlagged());

			preauthDTO.setStrUserName(dto.getUsername());
			preauthDTO.setStrPassword(dto.getPassword());

			preauthDTO.setSfxMatchedQDate(dto.getDocReceivedTimeForMatch());
			preauthDTO.setSfxRegisteredQDate(dto.getDocReceivedTimeForReg());
			
			preauthDTO.setPreauthClaimedAmountAsPerBill(dto.getClaimedAmountAsPerBill());

			preauthDTO.setStatusKey(preauth.getStatus().getKey());
			/*
			 * <<<<<<< HEAD
			 * 
			 * if (preauth .getStatus() .getKey()
			 * .equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SUGGEST_REJECTION_STATUS
			 * )) {
			 * preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
			 * preauth.getRemarks()); //
			 * preauthDTO.getPreauthMedicalProcessingDetails
			 * ().setRejectionRemarks(preauth.getRemarks()); } // else if
			 * (preauthDTO.getStatusKey() == //
			 * ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS) {
			 * else if (preauth .getStatus() .getKey()
			 * .equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS
			 * )) {
			 * preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
			 * preauth.getRemarks()); } else if (preauth.getStatus().getKey()
			 * .equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_QUERY_STATUS) ||
			 * preauth.getStatus().getKey()
			 * .equals(ReferenceTable.PREAUTH_QUERY_STATUS) ||
			 * preauth.getStatus().getKey()
			 * .equals(ReferenceTable.PREAUTH_QUERY_RECEIVED_STATUS)) {
			 * preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
			 * preauth.getRemarks()); } else if (preauth.getStatus().getKey()
			 * .equals(ReferenceTable.PREAUTH_ESCALATION_STATUS)) {
			 * preauthDTO.getPreauthMedicalDecisionDetails().setEscalationRemarks(
			 * preauth.getRemarks()); =======
			 */

		//preauthDTO.setRodHumanTask(dto.getHumanTask());
		preauthDTO.setTaskNumber(dto.getTaskNumber());
		
		preauthDTO.setCrmFlagged(dto.getCrmFlagged());

		preauthDTO.setStrUserName(dto.getUsername());
		preauthDTO.setStrPassword(dto.getPassword());

		preauthDTO.setSfxMatchedQDate(dto.getDocReceivedTimeForMatch());
		preauthDTO.setSfxRegisteredQDate(dto.getDocReceivedTimeForReg());
		
		preauthDTO.setStatusKey(preauth.getStatus().getKey());
		
		//added for FLP auto allocation UserId overriding issue on 09-03-2020
		preauthDTO.setFlpAaUserID(preauth.getFlpUserID());
		preauthDTO.setFlpAaUserSubmittedDate(preauth.getFLPSubmitDate());
		/*
		 * <<<<<<< HEAD
		 * 
		 * if (preauth .getStatus() .getKey()
		 * .equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SUGGEST_REJECTION_STATUS
		 * )) {
		 * preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
		 * preauth.getRemarks()); //
		 * preauthDTO.getPreauthMedicalProcessingDetails
		 * ().setRejectionRemarks(preauth.getRemarks()); } // else if
		 * (preauthDTO.getStatusKey() == //
		 * ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS) {
		 * else if (preauth .getStatus() .getKey()
		 * .equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS
		 * )) {
		 * preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
		 * preauth.getRemarks()); } else if (preauth.getStatus().getKey()
		 * .equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_QUERY_STATUS) ||
		 * preauth.getStatus().getKey()
		 * .equals(ReferenceTable.PREAUTH_QUERY_STATUS) ||
		 * preauth.getStatus().getKey()
		 * .equals(ReferenceTable.PREAUTH_QUERY_RECEIVED_STATUS)) {
		 * preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
		 * preauth.getRemarks()); } else if (preauth.getStatus().getKey()
		 * .equals(ReferenceTable.PREAUTH_ESCALATION_STATUS)) {
		 * preauthDTO.getPreauthMedicalDecisionDetails().setEscalationRemarks(
		 * preauth.getRemarks()); =======
		 */
		
		if(preauth.getCatastrophicLoss() != null) {
			
			SelectValue value = masterService.getCatastropheData(preauth.getCatastrophicLoss());
			preauthDTO.getPreauthDataExtractionDetails().setCatastrophicLoss(value);
		}

		if(preauth.getNatureOfLoss() != null) {
			
			SelectValue value = masterService.getMasterValueForNatureCause(preauth.getNatureOfLoss());
			preauthDTO.getPreauthDataExtractionDetails().setNatureOfLoss(value);
		}
		if(preauth.getCauseOfLoss() != null) {
			SelectValue value = masterService.getMasterValueForNatureCause(preauth.getCauseOfLoss());
			preauthDTO.getPreauthDataExtractionDetails().setCauseOfLoss(value);
		}
		
		if (preauth
				.getStatus()
				.getKey()
				.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SUGGEST_REJECTION_STATUS)) {
			preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
					preauth.getRemarks());
			// preauthDTO.getPreauthMedicalProcessingDetails().setRejectionRemarks(preauth.getRemarks());
		} // else if (preauthDTO.getStatusKey() ==
			// ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS) {
		else if (preauth
				.getStatus()
				.getKey()
				.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS)) {
			preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
					preauth.getRemarks());
		} else if (preauth.getStatus().getKey()
				.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_QUERY_STATUS)
				|| preauth.getStatus().getKey()
						.equals(ReferenceTable.PREAUTH_QUERY_STATUS)
				|| preauth.getStatus().getKey()
						.equals(ReferenceTable.PREAUTH_QUERY_RECEIVED_STATUS)) {
			preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
					preauth.getRemarks());
		} else if (preauth.getStatus().getKey()
				.equals(ReferenceTable.PREAUTH_ESCALATION_STATUS)) {
			preauthDTO.getPreauthMedicalDecisionDetails().setEscalationRemarks(
					preauth.getRemarks());
			// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
		} else if(preauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_COORDINATOR_REPLY_RECEIVED_STATUS) ||
				preauth.getStatus().getKey().equals(ReferenceTable.PREMEDICAL_PREAUTH_COORDINATOR_REPLY) ||
				preauth.getStatus().getKey().equals(ReferenceTable.PREMEDICAL_ENHANCEMENT_COORDINATOR_REPLY) ||
				preauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_COORDINATOR_REPLY_RECEIVED_STATUS)|| preauth.getStatus()
				.getKey().equals(ReferenceTable.PREAUTH_REFER_TO_COORDINATOR_STATUS)){
			Coordinator coordinatorByPreauthKey = coordinatorService.getCoordinatorByPreauthKey(preauth.getClaim().getKey());
			preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(coordinatorByPreauthKey.getCoordinatorRemarks());
			preauthDTO.getCoordinatorDetails().setCoordinatorRemarks(coordinatorByPreauthKey.getCoordinatorRemarks());
		}else if(preauth!=null && (preauth.getStatus().getKey().equals(ReferenceTable.VB_COMPLIANCE_TO_PREAUTH)|| 
				preauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_REFER_64_VB_COMPLIANCE))){
			VB64ApprovalRequest approvalRequest = preauthService.getProcess64ById(preauth.getKey());
			if(approvalRequest!=null){
				preauthDTO.getPreauthMedicalProcessingDetails().setVbApprovalRemark(approvalRequest.getApproverRemarks());
				preauthDTO.getPreauthMedicalProcessingDetails().setVbPaymentStatus(approvalRequest.getPaymentStatus());
				if(approvalRequest.getStatusFlag()!=null){
					if(approvalRequest.getStatusFlag().equalsIgnoreCase("A")){
						preauthDTO.getPreauthMedicalProcessingDetails().setVbApprovalStatus("Approve");
					}else{
						preauthDTO.getPreauthMedicalProcessingDetails().setVbApprovalStatus("Disapprove");
					}
				}
			}
			
		}
		Claim claimByKey = claimService.getClaimByKey(preauth.getClaim()
				.getKey());
		
		if(claimByKey!=null){
			
			Long hospital = claimByKey.getIntimation().getHospital();
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				preauthDTO.setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
					preauthDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}
		}
		
	    Date date3 = new Date();
		setpreauthTOPreauthDTO(premedicalMapper, claimByKey, preauth,
				preauthDTO, true);
		log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> TOTAL TIME CONSUMED BY SET PREAUTH TO PREAUTH DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date3, new Date()));
		
		if(!ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
	    	Policy policy = claimByKey.getIntimation().getPolicy();
	    	List<Claim> claimList = claimService.getClaimsByPolicyNumber(policy.getPolicyNumber());
	    	for (Claim claim : claimList) {
	    		Boolean isPedPending = false;
	    		List<OldInitiatePedEndorsement> pedInitiateDetail = pedQueryService.getPedInitiateDetail(claim.getKey());
	    		for (OldInitiatePedEndorsement oldInitiatePedEndorsement : pedInitiateDetail) {
	    			if(oldInitiatePedEndorsement.getStatus().getKey().equals(ReferenceTable.PED_PENDING_ENDORSEMENT_STATUS)){
	    				preauthDTO.setIsPedPending(true);
	    				isPedPending = true;
	    				break;
	    			}
	    		}
	    		
	    		if(isPedPending){
	    			break;
	    		}
	    	}
	    	
	    }

		preauthDTO.setCopay(getCopay(preauthDTO.getNewIntimationDTO()
				.getInsuredAge(), preauth.getPolicy().getProduct().getKey(),preauth.getPolicy().getTotalSumInsured()));

		/*String reasonForAdmission = preauthDTO.getNewIntimationDTO()
				.getReasonForAdmission();*/

		/*if (reasonForAdmission != null) {
//			reasonForAdmission = SHAUtils.removeLastChar(reasonForAdmission);
//			preauthDTO.getNewIntimationDTO().setReasonForAdmission(
//					reasonForAdmission);
//			preauthDTO.getPreauthDataExtractionDetails().setReasonForAdmission(
//					reasonForAdmission);
//			preauthDTO.setReasonForAdmission(reasonForAdmission);
		}*/
		
		
		Double insuredSumInsured = calcService
				.getInsuredSumInsured(preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getInsuredId().toString(),
						preauthDTO.getPolicyDto().getKey(),preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getLopFlag());
		Date date4 = new Date();
	//	loadRRCRequestValues(preauthDTO,insuredSumInsured,SHAConstants.PROCESS_PREAUTH);
		
		log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> TOTAL TIME CONSUMED BY LOAD RRC REQUEST VALUES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date4, new Date()));
		
		String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
		if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
			Date date5 = new Date();
			String get64vbStatus = preauthDTO.getNewIntimationDTO().getPolicy().getChequeStatus();
			log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> TOTAL TIME CONSUMED BY GET 64VSTATUS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date5, new Date()));
			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
				preauthDTO.setIsDishonoured(true);
			} else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
				preauthDTO.setIsPending(true);
			}
		}
		
		/* maternity flag
		 * from db
		 */
		String maternityFlag=calcService.getMaternityFlagForProduct(preauth.getIntimation().getPolicy().getProduct().getKey());
		if(maternityFlag != null && maternityFlag.equalsIgnoreCase("Y")){
			preauthDTO.setMaternityFlag(true);
		}
		
		preauthDTO.setSittingsAmount(calcService.getDialysisAmount(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
		
		Map<String, String> popupMessages = calcService.getPOPUPMessages(preauthDTO.getPolicyKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
		preauthDTO.setPopupMap(popupMessages);
		
		List<String> popupSIRestrication = calcService.getSIRestrication(preauthDTO.getNewIntimationDTO().getIntimationId(),preauthDTO.getNewIntimationDTO().getKey(), preauthDTO.getPolicyKey());
		preauthDTO.setPopupSIRestrication(popupSIRestrication);
		
		if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
				&& preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
			//if(preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
				Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
				preauthDTO.setSuspiciousPopupMap(suspiciousMap);
			//}
		}
		if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
				&& preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
			//if(preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
				Map<String, String> nonPreferredMap = SHAUtils.getNonPreferredMap(preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
				preauthDTO.setNonPreferredPopupMap(nonPreferredMap);
			//}
		}
		
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA6(dto.getCMA6());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA5(dto.getCMA5());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA4(dto.getCMA4());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA3(dto.getCMA3());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA2(dto.getCMA2());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA1(dto.getCMA1());
//		preauthDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(preauthDTO.getNewIntimationDTO().getAdmissionDate(), preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
		
		String policyYear = preauthDTO.getNewIntimationDTO().getPolicyYear();
	    if(policyYear != null){
	    	String intValue = policyYear.replaceAll("[^0-9]", "");
	    	Integer policyAgeing = SHAUtils.getIntegerFromStringWithComma(intValue);
	    	preauthDTO.setAdmissionDatePopup(policyAgeing != null ? policyAgeing.equals(0) ? true : false :false);
	    }
//		preauthDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(preauthDTO.getNewIntimationDTO().getAdmissionDate(), preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
		log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> TOTAL TIME CONSUMED BY LOAD RRC REQUEST VALUES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date4, new Date()));
		preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
		preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
		
		//CR  R1186
		if(preauthDTO.getIsPEDInitiated()){
			boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			preauthDTO.setInsuredDeleted(isInsuredDeleted);

			//CR R1156
			boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			preauthDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);	
		}
				
		
		 if(preauthDTO.getNewIntimationDTO() != null && preauthDTO.getNewIntimationDTO().getPolicy() != null &&
				 preauthDTO.getNewIntimationDTO().getPolicy().getKey() != null){
				Long claimCount = preauthService.getClaimCount(preauthDTO.getNewIntimationDTO().getPolicy().getKey());
				if(claimCount != null){
					preauthDTO.setClaimCount(claimCount);
				}
			}
		
		//SHAUtils.setDefaultCopayValue(preauthDTO);
		
		Date policyFromDate = preauthDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
		
		Date admissionDate = preauthDTO.getNewIntimationDTO().getAdmissionDate();
		
	
//		bean.getPolicyDto().getPolicyType();
		Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
		if(diffDays != null && diffDays<90){
			//preauthDTO.setIs64VBChequeStatusAlert(true);
			preauthDTO.setIs64VBChequeStatusAlert(false);
		}
		
		log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> TOTAL TIME CONSUMED BY SHOW PREAUTH WIZARD %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(startDate, new Date()));
		//SHAUtils.setDefaultCopayValue(preauthDTO);
		
		if(ReferenceTable.PREMIUM_DEDUCTION_PRODUCT_KEYS.containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {
			PremiaService premiaService = new PremiaService();
			Integer uniqueInstallmentAmount = premiaService.getUniqueInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			preauthDTO.getPreauthMedicalDecisionDetails().setUniquePremiumAmt(uniqueInstallmentAmount.doubleValue());
		}
		
		ViewFVRDTO additionalTrgptsDto = null;
    	List<ViewFVRDTO> additionalTrgptsList = new ArrayList<ViewFVRDTO>();
    	ViewFVRDTO trgptsDto = null;
    	List<ViewFVRDTO> trgptsList = new ArrayList<ViewFVRDTO>();
    	
    	FieldVisitRequest fieldVisitRequest = viewFVRService.getFVRByClaimKey(preauth.getClaim().getKey());	
    	
    	if(fieldVisitRequest != null){
    		
    		List<FvrTriggerPoint> triggerPointsList= reimbursementService.getFVRTriggerPoints(fieldVisitRequest.getKey());
    		for (FvrTriggerPoint fvrTriggerPoint : triggerPointsList) {
    			additionalTrgptsDto = new ViewFVRDTO();
    			additionalTrgptsDto.setRemarks(fvrTriggerPoint.getRemarks());
    			additionalTrgptsDto.setKey(fvrTriggerPoint.getKey());
    			additionalTrgptsDto.setCreatedDate(fvrTriggerPoint.getCreatedDate());
    			additionalTrgptsDto.setCreatedBy(fvrTriggerPoint.getCreatedBy());
    			additionalTrgptsDto.setTriggerPointsAlreadyExist(Boolean.TRUE);
    			additionalTrgptsList.add(additionalTrgptsDto);
    	}
    	
		}
    	if(null != additionalTrgptsList && !additionalTrgptsList.isEmpty()){
    		preauthDTO.getPreauthMedicalDecisionDetails().setFvrAdditionalTriggerPtsList(additionalTrgptsList);
    		trgptsList.addAll(additionalTrgptsList);
    		preauthDTO.getPreauthMedicalDecisionDetails().setFvrTriggerPtsList(trgptsList);
    	}
    	else
    	{
    		for(int i = 1; i<=5;i++){
        		trgptsDto = new ViewFVRDTO();
        		trgptsDto.setRemarks("");
        		trgptsList.add(trgptsDto);
        	}
    			preauthDTO.getPreauthMedicalDecisionDetails().setFvrTriggerPtsList(trgptsList);
    	}
    	
		FieldVisitRequest fvrObj = preauthService.getPendingFVRByClaimKey(preauth.getClaim().getKey());
		if(fvrObj != null && fvrObj.getFvrId() != null && !fvrObj.getFvrId().isEmpty()){
			String fvrPendingReason = starFaxFVRRevisedService.getFvrRequestPendingReason(fvrObj.getFvrId());
			preauthDTO.setFVRPendingRsn("FVR kept pending due to "+ fvrPendingReason);					
		}
    	
		preauthDTO.setDbOutArray(dto.getDbOutArray());
		if((ReferenceTable.getFHORevisedKeys().containsKey(preauth.getClaim().getIntimation().getPolicy().getProduct().getKey()) 
				|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(preauth.getClaim().getIntimation().getPolicy().getProduct().getKey())*/
					(preauth.getClaim().getIntimation().getPolicy().getProduct() != null 
						&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(preauth.getClaim().getIntimation().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(preauth.getClaim().getIntimation().getPolicy().getProduct().getCode()))
						|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(preauth.getClaim().getIntimation().getPolicy().getProduct().getCode())
						|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(preauth.getClaim().getIntimation().getPolicy().getProduct().getCode()))
						&& ("G").equalsIgnoreCase(preauth.getClaim().getIntimation().getInsured().getPolicyPlan()))
				|| (preauth.getClaim().getIntimation().getPolicy().getProduct() != null 
						&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(preauth.getClaim().getIntimation().getPolicy().getProduct().getCode()) || 
								SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(preauth.getClaim().getIntimation().getPolicy().getProduct().getCode()))))
						
				&& SHAConstants.YES_FLAG.equalsIgnoreCase(preauth.getOtherBenefitFlag())){
			List<OtherBenefitsTableDto> otherBenefitsList = premedicalService.getBenefitAmountDetailsByCashlessKey(preauth.getKey());
			preauthDTO.getPreauthDataExtractionDetails().setOtherBenefitsList(otherBenefitsList);
		}
		
		preauthDTO.setDbOutArray(dto.getDbOutArray());

		preauthDTO.setIsPreauthAutoAllocationQ(dto.getIsPreauthAutoAllocationQ());
		
		if(ReferenceTable.getGMCProductListWithoutOtherBanks().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			Map<String, Integer> stopLossProcedure = calcService.getStopLossProcedure(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), preauth.getClaim().getKey(), 0l);

			if(stopLossProcedure != null){
				Integer stopLossFlag = stopLossProcedure.get(SHAConstants.STOP_LOSS_FLAG) != null ? stopLossProcedure.get(SHAConstants.STOP_LOSS_FLAG) : 0;
				preauthDTO.getPreauthMedicalDecisionDetails().setStopLossFlag(stopLossFlag == 0 ? true : false);
				Integer stopLossAmt = stopLossProcedure.get(SHAConstants.STOP_LOSS_AVAILABLE) != null ? stopLossProcedure.get(SHAConstants.STOP_LOSS_AVAILABLE) : 0;
				preauthDTO.getPreauthMedicalDecisionDetails().setStopLossAvailableAmt(stopLossAmt);
			}
		}
		
		//gmc
		Intimation intimation = claimByKey.getIntimation();
		Long mainNo = 0L;
		if(intimation.getInsured().getDependentRiskId() !=null){
			mainNo = intimation.getInsured().getDependentRiskId();
		}else{
			mainNo = intimation.getInsured().getInsuredId();
		}
		Map<String, Double> values = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_CB,intimation.getPolicy().getPolicyNumber(),intimation.getInsured().getKey(),mainNo,claimByKey.getKey());
		
		if(values != null && !values.isEmpty()){
			if(values.get(SHAConstants.LN_POLICY_BUFFER_SI) != null){
				preauthDTO.getPreauthDataExtractionDetails().setCorpBufferSI(values.get(SHAConstants.LN_POLICY_BUFFER_SI));	
			}
			if(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT) != null){
				preauthDTO.getPreauthDataExtractionDetails().setCorpBufferUtilisedAmt(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT));	
			}
			if(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) != null){
				preauthDTO.getPreauthDataExtractionDetails().setCorpBufferLimit(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT));	
				preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAllocatedClaim(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT).intValue());
			}
			if(values.get(SHAConstants.LN_INSURED_UTIL_AMT) != null &&
					values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) !=null){
				Double avlbBalance = values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) - values.get(SHAConstants.LN_INSURED_UTIL_AMT);
				preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAvalBal(avlbBalance);
			}		
		}
		Map<String, Integer> productBenefitMap = calcService.getProductBenefitFlag(claimByKey.getKey(), claimByKey.getIntimation().getPolicy().getProduct().getKey());
		
		if(productBenefitMap != null && productBenefitMap.containsKey(SHAConstants.OTHER_BENEFITS_FLAG) && productBenefitMap.get(SHAConstants.OTHER_BENEFITS_FLAG) != null){
			
			int benefitFlag = (int)productBenefitMap.get(SHAConstants.OTHER_BENEFITS_FLAG);
			
			preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(benefitFlag);
		}
		else{
			preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(0);
		}
		
		if(ReferenceTable.JET_PRIVILEGE_PRODUCT.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(0);
		}
		
		if(preauth != null && ReferenceTable.getStatusForSuppDoc().contains(preauth.getStatus().getKey())){
			preauthDTO.setIsReconsiderationRequest(true);
		}
		if(preauth != null && ReferenceTable.PREAUTH_REJECT_STATUS.equals(preauth.getStatus().getKey())){
			preauthDTO.setIsRejectReconsidered(Boolean.TRUE);
		}
		preauthDTO.getPreauthMedicalDecisionDetails().setWithoutSuppDoc(preauth.getPreauthWithoutDoc());
		

		if(null != preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode()){
			
			MasterGST masGstObj = masterService.getGSTByStateId(preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode());

			if(null != masGstObj){
	
				preauthDTO.setGstNumber(masGstObj.getGstNumber());
				preauthDTO.setArnNumber(masGstObj.getArnNumber());
				preauthDTO.setGstState(masGstObj.getStateName());
			}
			
		}
		
		Boolean isZUAQueryAvailable = masterService.getZUAQueryDetails(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());		
		if(null != isZUAQueryAvailable){
			
			preauthDTO.setIsZUAQueryAvailable(isZUAQueryAvailable);
		}

		preauthDTO.getPreauthMedicalDecisionDetails().setIsFvrIntiated(preauthService.getFVRStatusIdByClaimKey(preauthDTO.getClaimKey()));
		
		Boolean policyValidation = policyService.getPolicyValidationObject(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
		preauthDTO.setIsPolicyValidate(policyValidation);
		preauthDTO.setIsAutoAllocationCorpUser(dto.getIsAutoAllocationCorpUser());
		preauthDTO.setIsAutoAllocationCPUUser(dto.getIsAutoAllocationCPUUser());
		if(dto.getAboveCPULimitCorp() != null){
			if(dto.getAboveCPULimitCorp().equalsIgnoreCase(SHAConstants.CPU_ALLOCATION_CORP_ADVISE)){
				preauthDTO.setIsAboveLimitCorpAdvise(true);
				preauthDTO.setIsAboveLimitCorpProcess(false);
			}else if(dto.getAboveCPULimitCorp().equalsIgnoreCase(SHAConstants.CPU_ALLOCATION_CORP_PROCESS)){
				preauthDTO.setIsAboveLimitCorpProcess(true);
				preauthDTO.setIsAboveLimitCorpAdvise(false);
			}else{
				preauthDTO.setIsAboveLimitCorpProcess(false);
				preauthDTO.setIsAboveLimitCorpAdvise(false);
			}
		}else{
			preauthDTO.setIsAboveLimitCorpProcess(false);
			preauthDTO.setIsAboveLimitCorpAdvise(false);
		}
		
//		Portal Flag updated in cashless table
		if(dto.getNhpUpdDocumentKey() != null){
			preauthDTO.setNhpUpdKey(dto.getNhpUpdDocumentKey());
		}
		
		
		Product product = preauthDTO.getNewIntimationDTO().getPolicy()
				.getProduct();
		if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())
				 && preauthDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && preauthDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
			List<UpdateOtherClaimDetails> updateOtherClaimDetailsList = preauthService.getUpdateOtherClaimDetailsList(preauth.getKey());
			
			if(updateOtherClaimDetailsList != null){
				Integer admissionAmt = 0;
				for (UpdateOtherClaimDetails updateOtherClaimDetailDTO : updateOtherClaimDetailsList) {
					if(updateOtherClaimDetailDTO.getAdmissibleAmount() != null){
						admissionAmt += updateOtherClaimDetailDTO.getAdmissibleAmount().intValue();
					}
				}
				
				preauthDTO.setOtherInsurerAdmissibleAmt(admissionAmt);
				
			}
		}
		
		Boolean popupMessagesForProduct = calcService.getPOPUPMessagesForProduct(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), claimByKey.getIntimation().getInsured().getKey(), claimByKey.getIntimation().getPolicy().getProduct().getKey());
		preauthDTO.setIsChangeInsumInsuredAlert(popupMessagesForProduct);
		List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
		List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
		
		preauthDTO.setInsuredPedDetails(pedByInsured);
		preauthDTO.setApprovedPedDetails(approvedPedByInsured);
		
		preauthDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		preauthDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		preauthDTO.setCrmFlagged(claimByKey.getCrcFlag());
		
		preauthDTO.setVipCustomer(claimByKey.getIsVipCustomer());
		preauthDTO.setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		preauthDTO.getPreauthMedicalDecisionDetails().setIsInvsInitiated(preauthService.isInvsInitiated(preauthDTO.getClaimDTO().getKey()));
		preauthDTO.getPreauthMedicalDecisionDetails().setIsFvrReplyReceived(preauthService.isFVRReplyReceived(preauthDTO.getClaimKey()));
		
		/**
		 *  CR R1136 
		 */
		List<DiagnosisDetailsTableDTO> diagnosisTableList = preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
		SublimitFunObject sublimitObj = null;
		for (DiagnosisDetailsTableDTO diagnosisDetailsTableDTO : diagnosisTableList) {
			
			sublimitObj = icdSublimitMapService.getSublimitDetailsBasedOnIcdCode(diagnosisDetailsTableDTO.getIcdCodeKey());
			if(diagnosisDetailsTableDTO.getSublimitApplicable() != null && 
					diagnosisDetailsTableDTO.getSublimitApplicable().getId().equals(ReferenceTable.COMMONMASTER_YES) && 
					sublimitObj != null && 
					diagnosisDetailsTableDTO.getSublimitName() != null &&
					sublimitObj.getName().equalsIgnoreCase(diagnosisDetailsTableDTO.getSublimitName().getName())){
				diagnosisDetailsTableDTO.setSublimitMapAvailable(Boolean.TRUE);
			}
		}	
		
		Policy policy = preauthDTO.getNewIntimationDTO().getPolicy();
		
		if(ReferenceTable.getGMCProductList().containsKey(policy.getProduct().getKey())){
			List<SelectValue> duplicateInsuredDetails = calcService.getDuplicateInsuredDetails(policy.getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			preauthDTO.setDuplicateInsuredList(duplicateInsuredDetails);
		}
		
		//R1152
		if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getCpuId() != null && preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode() != null){
			TmpCPUCode cpu = rodService.getCpuDetails(preauthDTO.getNewIntimationDTO().getHospitalDto().getCpuId());
			
			OrganaizationUnit branch = rodService.getBranchCode(preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode());
			
			
			if(cpu != null && branch != null && branch.getCpuCode() != null){
				if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
					preauthDTO.setIsGeoSame(Boolean.FALSE);
				}
			}
		}
		
		//CR2019017 - Start
		if(preauth.getScoringFlag() == null || preauth.getScoringFlag().equals("N")){
			preauthDTO.setScoringClicked(false);
			preauthDTO.setIsSDEnabled(preauthService.getScoringDetails(claimByKey.getIntimation().getKey()));
		}else{
			preauthDTO.setScoringClicked(true);
			preauthDTO.setIsSDEnabled(preauthService.getScoringDetails(claimByKey.getIntimation().getKey()));
		}
		
		if(preauthDTO.getStatusKey().intValue() == ReferenceTable.PREAUTH_REJECT_STATUS.intValue()){
			preauthDTO.setIsValidationReq(true);
		}else{
			preauthDTO.setIsValidationReq(false);
		}
		//CR2019017 - End
		
		String topAlertFlag = claimService.getTopUpPolicyDetails(policy.getPolicyNumber(),preauthDTO);
		preauthDTO.setTopUpPolicyAlertFlag(topAlertFlag);
		//R1257
		preauthDTO.getPreauthDataExtractionDetails().setNotAdheringToANHReportFlag(preauth.getNotAdheringToANHReport());
		//Below code for R20181286
		List<NegotiationAmountDetails> negDtls = preauthService.getNegotiationDetails(claimByKey.getIntimation().getKey());
		NegotiationAmountDetails latestNegAmt = null;
		if(negDtls != null && !negDtls.isEmpty()){
			latestNegAmt = negDtls.get(0);
		}
		
		MastersValue preauthType=masterService.getMaster(preauth.getStpProcessLevel());
		if(preauthType != null && preauthType.getKey() != null){
			preauthDTO.getPreauthDataExtractionDetails().setPreAuthType(new SelectValue(preauthType.getKey(),preauthType.getValue()));
		}
		
		List<Preauth> preauthInDesc = preauthService.getPreauthListByClaimKey(claimByKey.getKey());
		if(preauthInDesc != null && !preauthInDesc.isEmpty()){
			Preauth latestPreuth = preauthInDesc.get(0);
			if(latestPreuth.getStatus().getKey().equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS)
					|| latestPreuth.getStatus().getKey().equals(ReferenceTable.PREAUTH_QUERY_RECEIVED_STATUS)){
				if(latestNegAmt != null){
					preauthDTO.getPreauthMedicalDecisionDetails().setNegotiationWith(latestNegAmt.getNegotiationWith());
					preauthDTO.getPreauthMedicalDecisionDetails().setNegotiationAmount(latestNegAmt.getNegotiatedAmt());
					preauthDTO.getPreauthMedicalDecisionDetails().setNegotiationMade(true);
				}
			}
		}
		
		//added for hold claim issue in auto allocation
		if(preauthDTO.getStatusKey() != null){
			preauthDTO.setOldStatusKey(preauthDTO.getStatusKey());
		}
		
		//CR2019202
		 Map<String, String> getFraudAlert = calcService.getCashlessFraudAlert(preauthDTO.getNewIntimationDTO().getIntimationId());
		 if(getFraudAlert != null && !getFraudAlert.isEmpty()){
			 preauthDTO.setFraudAlertFlag(getFraudAlert.get(SHAConstants.FLAG) != null ? getFraudAlert.get(SHAConstants.FLAG) : "N");
			 preauthDTO.setFraudAlertMsg(getFraudAlert.get(SHAConstants.ALERT_MESSAGE) != null ? getFraudAlert.get(SHAConstants.ALERT_MESSAGE) : null);
		 }
		
		/*List<PreviousPreAuthTableDTO> searchPrevPreAuthReport = previousPreAuthService.searchPrevPreAuthReport(preauthDTO.getIntimationKey());
		preauthDTO.setPreviousPreauthTableDTOReportList(searchPrevPreAuthReport);
		*/
		 
		//CR2019217
		 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(preauthDTO.getNewIntimationDTO().getIntimationId()); 
		 if(icrAgent != null && !icrAgent.isEmpty()) {
				String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
				preauthDTO.setIcrAgentValue(agentScorePoint);
				//added by noufel for SM agent points
				String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
				preauthDTO.setSmAgentValue(smScorepoint);
			 
		 }
		 
		 //CR2019234
		if(preauth.getIntimation().getIntimatedBy().getKey() != null && 
				preauth.getIntimation().getIntimatedBy().getKey().toString().equalsIgnoreCase(SHAConstants.AGENT_CODE) 
				|| preauth.getIntimation().getIntimatedBy().getKey().toString().equalsIgnoreCase(SHAConstants.SALES_MANAGER_CODE)){
			view.showInfoPopUp("This claim has been intimated by" + preauth.getIntimation().getIntimatedBy().getValue());
		}

		preauthDTO.setAuditFlag(masterService.getCVCAuditQryFlagByIntimationKey(preauthDTO.getNewIntimationDTO().getKey())); 

		//added for installment payment process in policy level and product level check  
		Map<String, String> getPolicyInstallment = calcService.getInstallmentPaymentFlag(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(),preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
		if(getPolicyInstallment != null && !getPolicyInstallment.isEmpty()){
			preauthDTO.setPolicyInstalmentFlag(getPolicyInstallment.get(SHAConstants.FLAG) != null ? getPolicyInstallment.get(SHAConstants.FLAG) : "N");
			preauthDTO.setPolicyInstalmentMsg(getPolicyInstallment.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) != null ? getPolicyInstallment.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) : null);
		}
		 if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
         	PremiaService premiaService = new PremiaService();
 			Integer policyInstallmentAmount = premiaService.getPolicyInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
 			preauthDTO.setPolicyInstalmentPremiumAmt(policyInstallmentAmount.doubleValue());	
         }
         if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
         	PremiaService premiaService = new PremiaService();
 			String policyDueDate = premiaService.getPolicyInstallmentDetails(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
 			if (preauthDTO.getNewIntimationDTO().getPolicy().getPolicySource() != null && preauthDTO.getNewIntimationDTO().getPolicy().getPolicySource().equalsIgnoreCase(SHAConstants.BANCS_POLICY)) {
				preauthDTO.setPolicyInstalmentDueDate(SHAUtils.formatTimeFromString(policyDueDate.toString()));	
    			}
    			else{
    				preauthDTO.setPolicyInstalmentDueDate(SHAUtils.dateformatFromString(policyDueDate.toString()));
    			}
         }
         if(preauth.getClaim().getIcacFlag() != null && preauth.getClaim().getIcacFlag().equalsIgnoreCase(SHAConstants.YES_FLAG)){
        	 preauthDTO.setIcacProcessFlag(SHAConstants.YES_FLAG);
         }
         
		if(claimByKey != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
			view.showErrorPopUp("Preauth can not be processed. Since claim Type is Reimbursement.");
		}else{
			view.setPreauthWizardView(PreauthWizard.class, preauthDTO,
					(Boolean) parameters.getSecondaryParameter(0, Boolean.class));
			}
		Long hospitalId = claimByKey.getIntimation().getHospital();
		Hospitals hospitalCode = hospitalService.getHospitalById(hospitalId);
		
		if(hospitalCode.getHospitalCode() != null) {
			String seriousDeficiency = dBCalculationService.getSeriousDeficiency(hospitalCode.getHospitalCode());
			if(seriousDeficiency != null && !seriousDeficiency.isEmpty() && 
					seriousDeficiency.equalsIgnoreCase(SHAConstants.YES_FLAG)) {
				
				view.showInfoPopUp("Serious Deficiency noted in <br>" +hospitalCode.getHospitalCode() + "-" +hospitalCode.getName() + "<br>" + "For Details View Serious Deficiency Button");
				
			}
		}
		
		
		
		}

	}

	private Double getCopay(String insuredAge, Long productKey,Double totalSumInsured) {
		
		MasCopay masCopay;
		if(productKey != null && (productKey.equals(ReferenceTable.SENIOR_CITIZEN_RED_CARPET_REVISED_PRODUCT_INDIVIDUAL)||
				productKey.equals(ReferenceTable.SENIOR_CITIZEN_RED_CARPET_REVISED_PRODUCT_FLOATER))) {
			masCopay = copayservice.getByProductAndSi(productKey,totalSumInsured);
		} else {
			masCopay = copayservice.getByProduct(productKey);
		}
		
		Long lInsuredAge = Long.parseLong(insuredAge != null ? ! insuredAge.equalsIgnoreCase("") ? insuredAge : "0" : "0");
		if (masCopay != null) {
			if (null != masCopay.getEntryAgeFrom()
					&& (lInsuredAge >= masCopay.getEntryAgeFrom())) {
				return masCopay.getMaxPercentage();
			} else if (null == masCopay.getEntryAgeFrom()) {
				return masCopay.getMaxPercentage();
			} else {
				return new Double("0");
			}
		} else {
			return new Double("0");
		}
	}

	protected void showPreAuthEnhancementWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_PREAUTH_ENHANCEMENT_WIZARD) final ParameterDTO parameters) {
		SearchPreauthTableDTO dto = (SearchPreauthTableDTO) parameters
				.getPrimaryParameter();
		PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//		PreMedicalMapper.getAllMapValues();
		Preauth preauth = preauthService.getPreauthById(dto.getKey());
		//Long preauthKey = preauth.getKey();
		Boolean isValidClaim = true;
		if(null != preauth.getClaim())
		{
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(preauth.getClaim().getLegalFlag()))
			{
				isValidClaim = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
		}
		if(isValidClaim){
		PreauthDTO preauthDTO = premedicalMapper.getPreauthDTO(preauth);
		preauthDTO.getPreauthDataExtractionDetails().setDischargeDate(
				preauth.getDateOfDischarge());

		getResidualAmount(preauth, preauthDTO);
		//preauthDTO.setRodHumanTask(dto.getHumanTask());
		preauthDTO.setTaskNumber(dto.getTaskNumber());

		preauthDTO.setStrUserName(dto.getUsername());
		preauthDTO.setStrPassword(dto.getPassword());

		preauthDTO.setAmountRequested(dto.getPreAuthReqAmt());
		
		preauthDTO.setPreauthClaimedAmountAsPerBill(dto.getClaimedAmountAsPerBill());  /*dto.getPreAuthReqAmt() != null ? Double.valueOf(dto.getPreAuthReqAmt()) : 0d);*/
		
		//added for FLP auto allocation UserId overriding issue on 09-03-2020
		preauthDTO.setFlpAaUserID(preauth.getFlpUserID());
		preauthDTO.setFlpAaUserSubmittedDate(preauth.getFLPSubmitDate());
				
		Intimation intimationByKey = intimationService.getIntimationByKey(preauth.getIntimation().getKey());
		
        preauthDTO.setCpuProvisionAmt(intimationByKey.getCpuCode() != null ? intimationByKey.getCpuCode().getProvisionAmount() : null);
        
if(preauth.getCatastrophicLoss() != null) {
			
			SelectValue value = masterService.getCatastropheData(preauth.getCatastrophicLoss());
			preauthDTO.getPreauthDataExtractionDetails().setCatastrophicLoss(value);
		}

		if(preauth.getNatureOfLoss() != null) {
			
			SelectValue value = masterService.getMasterValueForNatureCause(preauth.getNatureOfLoss());
			preauthDTO.getPreauthDataExtractionDetails().setNatureOfLoss(value);
		}
		if(preauth.getCauseOfLoss() != null) {
			SelectValue value = masterService.getMasterValueForNatureCause(preauth.getCauseOfLoss());
			preauthDTO.getPreauthDataExtractionDetails().setCauseOfLoss(value);
		}
        
		if (preauth
				.getStatus()
				.getKey()
				.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SUGGEST_REJECTION_STATUS)
				|| preauth
						.getStatus()
						.getKey()
						.equals(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_SUGGEST_REJECTION_STATUS)) {
			// preauthDTO.getPreauthMedicalProcessingDetails().setRejectionRemarks(preauth.getRemarks());
			preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
					preauth.getRemarks());
		} else if (preauthDTO.getStatusKey().equals(
				ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS)
				|| preauthDTO
						.getStatusKey()
						.equals(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_SEND_FOR_PROCESSING_STATUS)) {
			preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
					preauth.getRemarks());
		} else if (preauthDTO.getStatusKey().equals(
				ReferenceTable.PRE_MEDICAL_PRE_AUTH_QUERY_STATUS)
				|| preauthDTO.getStatusKey().equals(
						ReferenceTable.ENHANCEMENT_QUERY_STATUS)
				|| preauthDTO.getStatusKey().equals(
						ReferenceTable.PRE_MEDICAL_ENHANCEMENT_QUERY_STATUS)
						|| preauthDTO.getStatusKey().equals(ReferenceTable.ENHANCEMENT_QUERY_RECEIVED_STATUS)) {
			preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
					preauth.getRemarks());
		} else if (preauth.getStatus().getKey()
				.equals(ReferenceTable.ENHANCEMENT_ESCALATION_STATUS)) {
			preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(
					preauth.getRemarks());
		} else if(preauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_COORDINATOR_REPLY_RECEIVED_STATUS) ||
				preauth.getStatus().getKey().equals(ReferenceTable.PREMEDICAL_PREAUTH_COORDINATOR_REPLY) ||
				preauth.getStatus().getKey().equals(ReferenceTable.PREMEDICAL_ENHANCEMENT_COORDINATOR_REPLY) ||
				preauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_COORDINATOR_REPLY_RECEIVED_STATUS) || preauth.getStatus()
				.getKey().equals(ReferenceTable.ENHANCEMENT_REFER_TO_COORDINATOR_STATUS)){
			Coordinator coordinatorByPreauthKey = coordinatorService.getCoordinatorByPreauthKey(preauth.getClaim().getKey());
			preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(coordinatorByPreauthKey.getCoordinatorRemarks());
			preauthDTO.getCoordinatorDetails().setCoordinatorRemarks(coordinatorByPreauthKey.getCoordinatorRemarks());
		}
		
	
		Claim claimByKey = claimService.getClaimByKey(preauth.getClaim()
				.getKey());
		
		if(claimByKey!=null){
			
			Long hospital = claimByKey.getIntimation().getHospital();
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				preauthDTO.setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
					preauthDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}
		}
		
	    //String[] split = preauth.getPreauthId().split("/");
		//Integer seqNumber = Integer.valueOf(split[split.length - 1]);

		List<Preauth> preauthByClaimKey = preauthService
				.getPreauthByClaimKey(claimByKey.getKey());
		
		Preauth preauthRec = null;
		
		for (Preauth eachPreauth : preauthByClaimKey) {
			//String[] eachSplit = eachPreauth.getPreauthId().split("/");
			//Integer eachSeqNumber = Integer.valueOf(eachSplit[eachSplit.length - 1]);
//			if(eachSeqNumber.equals(1)) {
				preauthRec = eachPreauth;
				break;
//			}
		}

		Preauth previousPreauthDetails = new Preauth();
		if (!preauthByClaimKey.isEmpty()) {
			for (Preauth previousPreauth : preauthByClaimKey) {
				/*String[] preauthSplit = previousPreauth.getPreauthId().split(
						"/");
				Integer previousSeqNumber = Integer
						.valueOf(preauthSplit[preauthSplit.length - 1]);*/
				
				if(!preauth.equals(previousPreauth)) {
//					previousPreauthDetails = previousPreauth;

					if (previousPreauth.getPreauthId() != null && ! preauth.getKey().equals(previousPreauth.getKey())
							&& ! previousPreauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_REJECT_STATUS) 
							&& ! previousPreauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_REJECT_STATUS)) {
						previousPreauthDetails = previousPreauth;
						
						}
					/** The below code is added for CR - R1117**/
					/* if(previousPreauth.getPreauthId() != null && ! preauth.getKey().equals(previousPreauth.getKey())){
						preauthDTO.getPreauthMedicalDecisionDetails().setInitiateFieldVisitRequest(previousPreauth.getInitiateFvr());
					}*/
					
				} else {
					break;
				}
				
			
			}
		}
		// preauthDTO.setCopay(getCopay(preauth.getPolicy().getProduct().getKey()));

		if (previousPreauthDetails != null) {
			preauthDTO.setPreviousPreauthKey(previousPreauthDetails.getKey());
			preauthDTO.getPreauthDataExtractionDetails().setTotalOtherBenefitsApprovedAmt(previousPreauthDetails.getOtherBenefitApprovedAmt());
			if(previousPreauthDetails.getStatus() != null && (previousPreauthDetails.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_WITHDRAW_AND_REJECT) || previousPreauthDetails.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_AND_REJECT_STATUS))) {
				preauthDTO.setPreviousPreauthKey(0l);
			}
			List<ClaimAmountDetails> claimAmountDetailsByPreauth = preauthService
					.getClaimAmountDetailsByPreauth(previousPreauthDetails
							.getKey());
			Float amount = 0f;
			for (ClaimAmountDetails claimAmountDetails : claimAmountDetailsByPreauth) {
				if (claimAmountDetails.getPaybleAmount() != null) {
					amount += claimAmountDetails.getPaybleAmount();
				}
			}
			
			if(previousPreauthDetails.getStatus() != null && (previousPreauthDetails.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_PREAUTH_WITHDRAW_STATUS) ||  
					previousPreauthDetails.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_WITHDRAW_AND_REJECT) || 
					previousPreauthDetails.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_AND_REJECT_STATUS) || 
				    previousPreauthDetails.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS))) {
				preauthDTO.setIsPreviousPreauthWithdraw(true);
				
			}

			preauthDTO.setPreviousPreauthPayableAmount(previousPreauthDetails
					.getTotalApprovalAmount() != null ? previousPreauthDetails
					.getTotalApprovalAmount().intValue() : 0);
			
			//IMSSUPPOR-28356 - ENHANCEMENT WITHDRAWN AND APPROVED CASES
			if(ReferenceTable.WITHDRAW.equalsIgnoreCase(previousPreauthDetails.getProcessType()) && ReferenceTable.ENHANCEMENT_PREAUTH_WITHDRAW_STATUS.equals(previousPreauthDetails.getStatus().getKey())){
				preauthDTO.setPreviousPreauthPayableAmount(0);
			}
		}
		
		
		setpreauthTOPreauthDTO(premedicalMapper, claimByKey, preauth,
				preauthDTO, true);
		
		
		if(!ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
	    	Policy policy = claimByKey.getIntimation().getPolicy();
	    	List<Claim> claimList = claimService.getClaimsByPolicyNumber(policy.getPolicyNumber());
	    	for (Claim claim : claimList) {
	    		Boolean isPedPending = false;
	    		List<OldInitiatePedEndorsement> pedInitiateDetail = pedQueryService.getPedInitiateDetail(claim.getKey());
	    		for (OldInitiatePedEndorsement oldInitiatePedEndorsement : pedInitiateDetail) {
	    			if(oldInitiatePedEndorsement.getStatus().getKey().equals(ReferenceTable.PED_PENDING_ENDORSEMENT_STATUS)){
	    				preauthDTO.setIsPedPending(true);
	    				isPedPending = true;
	    			}
	    		}
	    		
	    		if(isPedPending){
	    			break;
	    		}
	    	}
	    	
	    }
		
		if(preauth.getStatus().getKey().equals(ReferenceTable.VB_COMPLIANCE_TO_ENHANCEMENT)){
			
		VB64ApprovalRequest approvalRequest = preauthService.getProcess64ById(preauthDTO.getKey());
		
		if(approvalRequest!=null){
			preauthDTO.getPreauthMedicalProcessingDetails().setVbApprovalRemark(approvalRequest.getApproverRemarks());
			preauthDTO.getPreauthMedicalProcessingDetails().setVbPaymentStatus(approvalRequest.getPaymentStatus());
			if(approvalRequest.getStatusFlag()!=null){
				if(approvalRequest.getStatusFlag().equalsIgnoreCase("A")){
					preauthDTO.getPreauthMedicalProcessingDetails().setVbApprovalStatus("Approve");
				}else{
					preauthDTO.getPreauthMedicalProcessingDetails().setVbApprovalStatus("Disapprove");
				}
			}
		}
		}
		
		if (previousPreauthDetails != null
				&& previousPreauthDetails.getTotalApprovalAmount() != null) {
			preauthDTO.getPreauthDataExtractionDetails().setApprovedAmount(
					String.valueOf(previousPreauthDetails
							.getTotalApprovalAmount().intValue()));
			preauthDTO.getPreauthDataExtractionDetails().setTotalApprAmt(previousPreauthDetails.getTotalApprovalAmount());
			
		//IMSSUPPOR-28356 - ENHANCEMENT WITHDRAWN AND APPROVED CASES	
		if(ReferenceTable.WITHDRAW.equalsIgnoreCase(previousPreauthDetails.getProcessType()) && ReferenceTable.ENHANCEMENT_PREAUTH_WITHDRAW_STATUS.equals(previousPreauthDetails.getStatus().getKey())){
			preauthDTO.getPreauthDataExtractionDetails().setTotalApprAmt(0d);
		}
			if(ReferenceTable.PREMIUM_DEDUCTION_PRODUCT_KEYS.containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {
				preauthDTO.getPreauthDataExtractionDetails().setApprovedAmountAftDeduction(previousPreauthDetails.getApprovedAmtAftPremium());
			}
		}

		preauthDTO.setCopay(getCopay(preauthDTO.getNewIntimationDTO()
				.getInsuredAge(), preauth.getPolicy().getProduct().getKey(),preauth.getPolicy().getTotalSumInsured()));
		preauthDTO
				.setTreatmentRemarksList(getTreatmentRemarksHistory(preauthDTO
						.getClaimKey()));
		
		
		
		Double insuredSumInsured = calcService
				.getInsuredSumInsured(preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getInsuredId().toString(),
						preauthDTO.getPolicyDto().getKey(),preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getLopFlag());
	//	loadRRCRequestValues(preauthDTO,insuredSumInsured,SHAConstants.PROCESS_ENHANCEMENT);
		
		if(preauthDTO.getPreauthMedicalDecisionDetails().getInvestigatorCode() != null){
			TmpInvestigation tmpInvestigationByInvestigatorCode = investigationService.getTmpInvestigationByInvestigatorCode(preauthDTO.getPreauthMedicalDecisionDetails().getInvestigatorCode());
			preauthDTO.getPreauthMedicalDecisionDetails().setInvestigatorName(tmpInvestigationByInvestigatorCode);
		}
		
		/*NegotiationAmountDetails negotiationAmtDetails = preauthService.getNegotiationDetails(preauthDTO.getNewIntimationDTO().getKey());
		if(negotiationAmtDetails != null){
			preauthDTO.getPreauthMedicalDecisionDetails().setNegotiationAmount(String.valueOf(negotiationAmtDetails.getNegotiatedAmt()));
		}*/
		
		String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
		if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
			String get64vbStatus = PremiaService.getInstance().get64VBStatus(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), preauthDTO.getNewIntimationDTO().getIntimationId());
			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
				preauthDTO.setIsDishonoured(true);
			} else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
				preauthDTO.setIsPending(true);
			}
		}
		
		/* maternity flag
		 * from db
		 */
		String maternityFlag=calcService.getMaternityFlagForProduct(preauth.getIntimation().getPolicy().getProduct().getKey());
		if(maternityFlag !=null && maternityFlag.equalsIgnoreCase("Y")){
			preauthDTO.setMaternityFlag(true);
		}
		
		preauthDTO.setSittingsAmount(calcService.getDialysisAmount(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
		Map<String, String> popupMessages = calcService.getPOPUPMessages(preauthDTO.getPolicyKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
		preauthDTO.setPopupMap(popupMessages);
		
		List<String> popupSIRestrication = calcService.getSIRestrication(preauthDTO.getNewIntimationDTO().getIntimationId(),preauthDTO.getNewIntimationDTO().getKey(), preauthDTO.getPolicyKey());
		preauthDTO.setPopupSIRestrication(popupSIRestrication);
		
		
		if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
				&& preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
			//if(preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
				Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
				preauthDTO.setSuspiciousPopupMap(suspiciousMap);
			//}
		}
		if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
				&& preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
			//if(preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
				Map<String, String> nonPreferredMap = SHAUtils.getNonPreferredMap(preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
				preauthDTO.setNonPreferredPopupMap(nonPreferredMap);
			//}
		}
		
		if(preauthRec != null) {
			preauthDTO.getPreauthDataExtractionDetails().setPreauthTotalApprAmt(preauthRec.getTotalApprovalAmount());
		}
		
		if(null != dto.getDocReceivedTimeForMatch())
			preauthDTO.setSfxMatchedQDate(dto.getDocReceivedTimeForMatch());
		
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA6(dto.getCMA6());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA5(dto.getCMA5());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA4(dto.getCMA4());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA3(dto.getCMA3());
		preauthDTO.getDownSizePreauthDataExtrationDetails().setCMA2(dto.getCMA2());
		preauthDTO.getDownSizePreauthDataExtractionDetails().setCMA1(dto.getCMA1());
		
//<<<<<<< HEAD
		preauthDTO.setAdmissionDatePopup(calcService.getPolicyAgeingForPopup(preauthDTO.getNewIntimationDTO().getAdmissionDate(), preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
//		
//		String policyYear = preauthDTO.getNewIntimationDTO().getPolicyYear();
//	    if(policyYear != null){
//	    	String intValue = policyYear.replaceAll("[^0-9]", "");
//	    	Integer policyAgeing = SHAUtils.getIntegerFromStringWithComma(intValue);
//	    	preauthDTO.setAdmissionDatePopup(policyAgeing != null ? policyAgeing.equals(0) ? true : false :false);
//	    }
//		
//
//=======
//>>>>>>> balanceSIwithPaidAmt
		 if(preauthDTO.getNewIntimationDTO() != null && preauthDTO.getNewIntimationDTO().getPolicy() != null &&
				 preauthDTO.getNewIntimationDTO().getPolicy().getKey() != null){
				Long claimCount = preauthService.getClaimCount(preauthDTO.getNewIntimationDTO().getPolicy().getKey());
				if(claimCount != null){
					preauthDTO.setClaimCount(claimCount);
				}
			}
		
		preauthDTO.setAdmissionDatePopup(calcService.getPolicyAgeingForPopup(preauthDTO.getNewIntimationDTO().getAdmissionDate(), preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));

		preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
		preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
				
		//SHAUtils.setDefaultCopayValue(preauthDTO);
		if(ReferenceTable.PREMIUM_DEDUCTION_PRODUCT_KEYS.containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {
			PremiaService premiaService = new PremiaService();
			Integer uniqueInstallmentAmount = premiaService.getUniqueInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			preauthDTO.getPreauthMedicalDecisionDetails().setUniquePremiumAmt(uniqueInstallmentAmount.doubleValue());
		}

//		preauthDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(preauthDTO.getNewIntimationDTO().getAdmissionDate(), preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
		
		String policyYear = preauthDTO.getNewIntimationDTO().getPolicyYear();
	    if(policyYear != null){
	    	String intValue = policyYear.replaceAll("[^0-9]", "");
	    	Integer policyAgeing = SHAUtils.getIntegerFromStringWithComma(intValue);
	    	preauthDTO.setAdmissionDatePopup(policyAgeing != null ? policyAgeing.equals(0) ? true : false :false);
	    }
		

		 if(preauthDTO.getNewIntimationDTO() != null && preauthDTO.getNewIntimationDTO().getPolicy() != null &&
				 preauthDTO.getNewIntimationDTO().getPolicy().getKey() != null){
				Long claimCount = preauthService.getClaimCount(preauthDTO.getNewIntimationDTO().getPolicy().getKey());
				if(claimCount != null){
					preauthDTO.setClaimCount(claimCount);
				}
			}
		
		preauthDTO.setAdmissionDatePopup(calcService.getPolicyAgeingForPopup(preauthDTO.getNewIntimationDTO().getAdmissionDate(), preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
		preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
		preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
		
		//CR  R1186
		if(preauthDTO.getIsPEDInitiated()){
			boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			preauthDTO.setInsuredDeleted(isInsuredDeleted);
			
			//CR R1156
			boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			preauthDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);
		}
				
		//SHAUtils.setDefaultCopayValue(preauthDTO);
		
		Date policyFromDate = preauthDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
		
		Date admissionDate = preauthDTO.getNewIntimationDTO().getAdmissionDate();
		
	
//		bean.getPolicyDto().getPolicyType();
		Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
		if(diffDays != null && diffDays<90){
			preauthDTO.setIs64VBChequeStatusAlert(true);
		}
		if(ReferenceTable.PREMIUM_DEDUCTION_PRODUCT_KEYS.containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {
			PremiaService premiaService = new PremiaService();
			Integer uniqueInstallmentAmount = premiaService.getUniqueInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			preauthDTO.getPreauthMedicalDecisionDetails().setUniquePremiumAmt(uniqueInstallmentAmount.doubleValue());
		}
		
		ViewFVRDTO additionalTrgptsDto = null;
    	List<ViewFVRDTO> additionalTrgptsList = new ArrayList<ViewFVRDTO>();
    	ViewFVRDTO trgptsDto = null;
    	List<ViewFVRDTO> trgptsList = new ArrayList<ViewFVRDTO>();
    	
    	FieldVisitRequest fieldVisitRequest = viewFVRService.getFVRByClaimKey(preauth.getClaim().getKey());	
    	
    	if(fieldVisitRequest != null){
    		List<FvrTriggerPoint> triggerPointsList= reimbursementService.getFVRTriggerPoints(fieldVisitRequest.getKey());
    		for (FvrTriggerPoint fvrTriggerPoint : triggerPointsList) {
    			additionalTrgptsDto = new ViewFVRDTO();
    			additionalTrgptsDto.setRemarks(fvrTriggerPoint.getRemarks());
    			additionalTrgptsDto.setKey(fvrTriggerPoint.getKey());
    			additionalTrgptsDto.setCreatedDate(fvrTriggerPoint.getCreatedDate());
    			additionalTrgptsDto.setCreatedBy(fvrTriggerPoint.getCreatedBy());
    			additionalTrgptsDto.setTriggerPointsAlreadyExist(Boolean.TRUE);
    			additionalTrgptsList.add(additionalTrgptsDto);
    		}
    		
    	}
    	if(null != additionalTrgptsList && !additionalTrgptsList.isEmpty()){
    		preauthDTO.getPreauthMedicalDecisionDetails().setFvrAdditionalTriggerPtsList(additionalTrgptsList);
    		trgptsList.addAll(additionalTrgptsList);
    		preauthDTO.getPreauthMedicalDecisionDetails().setFvrTriggerPtsList(trgptsList);
    	}
    	else
    	{
    		for(int i = 1; i<=5;i++){
        		trgptsDto = new ViewFVRDTO();
        		trgptsDto.setRemarks("");
        		trgptsList.add(trgptsDto);
        	}
    			preauthDTO.getPreauthMedicalDecisionDetails().setFvrTriggerPtsList(trgptsList);
    	}
    	
		FieldVisitRequest fvrObj = preauthService.getPendingFVRByClaimKey(preauth.getClaim().getKey());
		if(fvrObj != null && fvrObj.getFvrId() != null && !fvrObj.getFvrId().isEmpty()){
			String fvrPendingReason = starFaxFVRRevisedService.getFvrRequestPendingReason(fvrObj.getFvrId());
			preauthDTO.setFVRPendingRsn("FVR kept pending due to "+ fvrPendingReason);					
		}	
		
		
		if((ReferenceTable.getFHORevisedKeys().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) 
			|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
				(preauthDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
					&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
							SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
					|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
					|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
					&& ("G").equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan()))
			|| (preauthDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
						
			&& SHAConstants.YES_FLAG.equalsIgnoreCase(preauth.getOtherBenefitFlag())){
			List<OtherBenefitsTableDto> otherBenefitsList = premedicalService.getBenefitAmountDetailsByCashlessKey(preauth.getKey());
			preauthDTO.getPreauthDataExtractionDetails().setOtherBenefitsList(otherBenefitsList);
		}		
		
		preauthDTO.setDbOutArray(dto.getDbOutArray());
		
		preauthDTO.setIsPreauthAutoAllocationQ(dto.getIsPreauthAutoAllocationQ());
		preauthDTO.setIsAutoAllocationCorpUser(dto.getIsAutoAllocationCorpUser());
		preauthDTO.setIsAutoAllocationCPUUser(dto.getIsAutoAllocationCPUUser());
		
		if(dto.getAboveCPULimitCorp() != null){
			if(dto.getAboveCPULimitCorp().equalsIgnoreCase(SHAConstants.CPU_ALLOCATION_CORP_ADVISE)){
				preauthDTO.setIsAboveLimitCorpAdvise(true);
				preauthDTO.setIsAboveLimitCorpProcess(false);
			}else if(dto.getAboveCPULimitCorp().equalsIgnoreCase(SHAConstants.CPU_ALLOCATION_CORP_PROCESS)){
				preauthDTO.setIsAboveLimitCorpProcess(true);
				preauthDTO.setIsAboveLimitCorpAdvise(false);
			}else{
				preauthDTO.setIsAboveLimitCorpProcess(false);
				preauthDTO.setIsAboveLimitCorpAdvise(false);
			}
		}else{
			preauthDTO.setIsAboveLimitCorpProcess(false);
			preauthDTO.setIsAboveLimitCorpAdvise(false);
		}
		
		//gmc
		Intimation intimation = claimByKey.getIntimation();
		Long mainNo = 0L;
		if(intimation.getInsured().getDependentRiskId() !=null){
			mainNo = intimation.getInsured().getDependentRiskId();
		}else{
			mainNo = intimation.getInsured().getInsuredId();
		}
		Map<String, Double> values = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_CB,intimation.getPolicy().getPolicyNumber(),intimation.getInsured().getKey(),mainNo,claimByKey.getKey());
		
		if(values != null && !values.isEmpty()){
			if(values.get(SHAConstants.LN_POLICY_BUFFER_SI) != null){
				preauthDTO.getPreauthDataExtractionDetails().setCorpBufferSI(values.get(SHAConstants.LN_POLICY_BUFFER_SI));	
			}
			if(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT) != null){
				preauthDTO.getPreauthDataExtractionDetails().setCorpBufferUtilisedAmt(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT));	
			}
			if(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) != null){
				preauthDTO.getPreauthDataExtractionDetails().setCorpBufferLimit(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT));	
				preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAllocatedClaim(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT).intValue());
			}
			if(values.get(SHAConstants.LN_INSURED_UTIL_AMT) != null &&
					values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) !=null){
				Double avlbBalance = values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) - values.get(SHAConstants.LN_INSURED_UTIL_AMT);
				preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAvalBal(avlbBalance);
			}		
		}

		Map<String, Integer> productBenefitMap = calcService.getProductBenefitFlag(
				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
				.getProduct().getKey());
		
		if(productBenefitMap != null && productBenefitMap.containsKey(SHAConstants.OTHER_BENEFITS_FLAG) && productBenefitMap.get(SHAConstants.OTHER_BENEFITS_FLAG) != null){
			
			int benefitFlag = (int)productBenefitMap.get(SHAConstants.OTHER_BENEFITS_FLAG);
			
			preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(benefitFlag);
			
			
		}
		else{
			preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(0);
		}	
		
		if(ReferenceTable.JET_PRIVILEGE_PRODUCT.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(0);
		}

		
		if(null != preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode()){
			
			MasterGST masGstObj = masterService.getGSTByStateId(preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode());

			if(null != masGstObj){
	
				preauthDTO.setGstNumber(masGstObj.getGstNumber());
				preauthDTO.setArnNumber(masGstObj.getArnNumber());
				preauthDTO.setGstState(masGstObj.getStateName());
			}
		}
		
		Boolean isZUAQueryAvailable = masterService.getZUAQueryDetails(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());		
		if(null != isZUAQueryAvailable){
			
			preauthDTO.setIsZUAQueryAvailable(isZUAQueryAvailable);
		}
		Boolean policyValidation = policyService.getPolicyValidationObject(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
		preauthDTO.setIsPolicyValidate(policyValidation);
		
		Product product = preauthDTO.getNewIntimationDTO().getPolicy()
				.getProduct();
		if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())
				 && preauthDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && preauthDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
			List<UpdateOtherClaimDetails> updateOtherClaimDetailsList = preauthService.getUpdateOtherClaimDetailsList(preauth.getKey());
			
			if(updateOtherClaimDetailsList != null){
				Integer admissionAmt = 0;
				for (UpdateOtherClaimDetails updateOtherClaimDetailDTO : updateOtherClaimDetailsList) {
					if(updateOtherClaimDetailDTO.getAdmissibleAmount() != null){
						admissionAmt += updateOtherClaimDetailDTO.getAdmissibleAmount().intValue();
					}
				}
				
				preauthDTO.setOtherInsurerAdmissibleAmt(admissionAmt);
				
			}
		}
		

		preauthDTO.getPreauthMedicalDecisionDetails().setIsFvrIntiated(preauthService.getFVRStatusIdByClaimKey(preauthDTO.getClaimKey()));
		
		if (previousPreauthDetails != null) {
			preauthDTO.getPreauthDataExtractionDetails().setTotalOtherBenefitsApprovedAmt(previousPreauthDetails.getOtherBenefitApprovedAmt());
		}
		
		
		
		  //R1152
		
			if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getCpuId() != null && preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode() != null){
				TmpCPUCode cpu = rodService.getCpuDetails(preauthDTO.getNewIntimationDTO().getHospitalDto().getCpuId());
				
				OrganaizationUnit branch = rodService.getBranchCode(preauthDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode());
				
				
				if(cpu != null && branch != null && branch.getCpuCode() != null){
					if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
						preauthDTO.setIsGeoSame(Boolean.FALSE);
					}
				}
			}
		
		List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
		List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
		
		preauthDTO.setInsuredPedDetails(pedByInsured);
		preauthDTO.setApprovedPedDetails(approvedPedByInsured);
		
		preauthDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		preauthDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		preauthDTO.setCrmFlagged(claimByKey.getCrcFlag());
		
		preauthDTO.setVipCustomer(claimByKey.getIsVipCustomer());
		preauthDTO.setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		preauthDTO.getPreauthMedicalDecisionDetails().setIsInvsInitiated(preauthService.isInvsInitiated(preauthDTO.getClaimDTO().getKey()));
		preauthDTO.getPreauthMedicalDecisionDetails().setIsFvrReplyReceived(preauthService.isFVRReplyReceived(preauthDTO.getClaimKey()));
		
		Policy policy = preauthDTO.getNewIntimationDTO().getPolicy();
		
		if(ReferenceTable.getGMCProductList().containsKey(policy.getProduct().getKey())){
			List<SelectValue> duplicateInsuredDetails = calcService.getDuplicateInsuredDetails(policy.getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			preauthDTO.setDuplicateInsuredList(duplicateInsuredDetails);
		}
		
		//CR2019017 - Start
		if(preauth.getScoringFlag() ==  null || preauth.getScoringFlag().equals("N")){
			preauthDTO.setScoringClicked(false);
			preauthDTO.setIsSDEnabled(preauthService.getScoringDetails(claimByKey.getIntimation().getKey()));
		}else{
			preauthDTO.setScoringClicked(true);
			preauthDTO.setIsSDEnabled(preauthService.getScoringDetails(claimByKey.getIntimation().getKey()));
		}
		
		if(preauthDTO.getStatusKey().intValue() == ReferenceTable.PRE_MEDICAL_ENHANCEMENT_SEND_FOR_PROCESSING_STATUS.intValue()){
			preauthDTO.setIsValidationReq(preauthService.getCashlessEnhStatus(preauthDTO.getIntimationKey()));
		}else{
			preauthDTO.setIsValidationReq(false);
		}
		//CR2019017 - End
		String topAlertFlag = claimService.getTopUpPolicyDetails(policy.getPolicyNumber(),preauthDTO);
		preauthDTO.setTopUpPolicyAlertFlag(topAlertFlag);
		
		List<NegotiationAmountDetails> negDtls = preauthService.getNegotiationDetails(intimationByKey.getKey());
		NegotiationAmountDetails latestNegAmt = null;
		if(negDtls != null && !negDtls.isEmpty()){
			latestNegAmt = negDtls.get(0);
		}
		List<Preauth> preauthInDesc = preauthService.getPreauthListByClaimKey(claimByKey.getKey());
		if(preauthInDesc != null && !preauthInDesc.isEmpty()){
			Preauth latestPreuth = preauthInDesc.get(0);
			if(latestPreuth.getStatus().getKey().equals(ReferenceTable.PREAUTH_APPROVE_STATUS)
					|| latestPreuth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_APPROVE_STATUS)
					|| latestPreuth.getStatus().getKey().equals(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_SEND_FOR_PROCESSING_STATUS)
					|| latestPreuth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_QUERY_RECEIVED_STATUS)){
				if(latestNegAmt != null){
					preauthDTO.getPreauthMedicalDecisionDetails().setNegotiationWith(latestNegAmt.getNegotiationWith());
					preauthDTO.getPreauthMedicalDecisionDetails().setNegotiationAmount(latestNegAmt.getNegotiatedAmt());
					preauthDTO.getPreauthMedicalDecisionDetails().setNegotiationMade(true);
				}
			}
		}
		Long hospitalId = claimByKey.getIntimation().getHospital();
		Hospitals hospitalCode = hospitalService.getHospitalById(hospitalId);
		
		//added for hold claim issue in auto allocation
		if(preauthDTO.getStatusKey() != null){
			preauthDTO.setOldStatusKey(preauthDTO.getStatusKey());
		}
		///CR2019202
		 Map<String, String> getFraudAlert = calcService.getCashlessFraudAlert(preauthDTO.getNewIntimationDTO().getIntimationId());
		 if(getFraudAlert != null && !getFraudAlert.isEmpty()){
			 preauthDTO.setFraudAlertFlag(getFraudAlert.get(SHAConstants.FLAG) != null ? getFraudAlert.get(SHAConstants.FLAG) : "N");
			 preauthDTO.setFraudAlertMsg(getFraudAlert.get(SHAConstants.ALERT_MESSAGE) != null ? getFraudAlert.get(SHAConstants.ALERT_MESSAGE) : null);
		 }
		 
		if(hospitalCode.getHospitalCode() != null) {
			String seriousDeficiency = dBCalculationService.getSeriousDeficiency(hospitalCode.getHospitalCode());
			if(seriousDeficiency != null && !seriousDeficiency.isEmpty() && 
					seriousDeficiency.equalsIgnoreCase(SHAConstants.YES_FLAG)) {
				
				view.showInfoPopUp("Serious Deficiency noted in <br>" +hospitalCode.getHospitalCode() + "-" +hospitalCode.getName() + "<br>" + "For Details View Serious Deficiency Button");
				
			}
		}
		
		//CR2019217
		 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(preauthDTO.getNewIntimationDTO().getIntimationId()); 
		 if(icrAgent != null && !icrAgent.isEmpty()) {
				String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
				preauthDTO.setIcrAgentValue(agentScorePoint);
				//added for SM Points suggested by Sathish Sir added by Noufel
				String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
				preauthDTO.setSmAgentValue(smScorepoint);
		 }
		
		PccRemarks  escalateRemarks = preauthService.getEscalateRemarks(preauthDTO.getNewIntimationDTO().getKey());
		if(escalateRemarks != null){
		preauthDTO.getPreauthDataExtractionDetails().setEscalatePccRemarksvalue(escalateRemarks.getPccRemarks());
		}

		//CR2019234
		if(preauth.getIntimation().getIntimatedBy().getKey() != null && 
				preauth.getIntimation().getIntimatedBy().getKey().toString().equalsIgnoreCase(SHAConstants.AGENT_CODE) 
				|| preauth.getIntimation().getIntimatedBy().getKey().toString().equalsIgnoreCase(SHAConstants.SALES_MANAGER_CODE)){
			view.showInfoPopUp("This claim has been intimated by" + preauth.getIntimation().getIntimatedBy().getValue());
		}
		
		preauthDTO.setAuditFlag(masterService.getCVCAuditQryFlagByIntimationKey(preauthDTO.getNewIntimationDTO().getKey())); 

		//added for installment payment process in policy level and product level check  
		Map<String, String> getPolicyInstallment = calcService.getInstallmentPaymentFlag(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(),preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
		if(getPolicyInstallment != null && !getPolicyInstallment.isEmpty()){
			preauthDTO.setPolicyInstalmentFlag(getPolicyInstallment.get(SHAConstants.FLAG) != null ? getPolicyInstallment.get(SHAConstants.FLAG) : "N");
			preauthDTO.setPolicyInstalmentMsg(getPolicyInstallment.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) != null ? getPolicyInstallment.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) : null);
		}
		 if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
         	PremiaService premiaService = new PremiaService();
 			Integer policyInstallmentAmount = premiaService.getPolicyInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
 			preauthDTO.setPolicyInstalmentPremiumAmt(policyInstallmentAmount.doubleValue());	
         }
         if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
         	PremiaService premiaService = new PremiaService();
 			String policyDueDate = premiaService.getPolicyInstallmentDetails(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
 			preauthDTO.setPolicyInstalmentDueDate(SHAUtils.dateformatFromString(policyDueDate.toString()));	
         }
         
         if (previousPreauthDetails != null
 				&& previousPreauthDetails.getTotalApprovalAmount() != null) {
        	 if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
        		 preauthDTO.getPreauthDataExtractionDetails().setApprovedAmountAftDeduction(previousPreauthDetails.getApprovedAmtAftPremium());
        	 }
         }
         
// 		Portal Flag updated in cashless table
 		if(dto.getNhpUpdDocumentKey() != null){
 			preauthDTO.setNhpUpdKey(dto.getNhpUpdDocumentKey());
 		}
 		
		view.setPreauthEnhancementWizardView(PreauthEnhancementWizard.class,
				preauthDTO);
		}
	}

	protected void showPreMedicalEnhancementWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_PREMEDICAL_ENHANCEMENT_WIZARD) final ParameterDTO parameters) {
		
		Date startDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% PREMEDICAL_ENHANCEMENT STARTING TIME FOR DB FETCHING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+startDate);
		
		SearchPreMedicalProcessingEnhancementTableDTO dto = (SearchPreMedicalProcessingEnhancementTableDTO) parameters
				.getPrimaryParameter();
		
		PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//		PreMedicalMapper.getAllMapValues();
		Claim claimByKey = claimService.getClaimByKey(dto.getKey());
		
		
		
		Boolean isValidClaim = true;
		if(null != claimByKey)
		{
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
			{
				isValidClaim = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
		}
		if(isValidClaim)
		{
		
			PreauthDTO preauthDTO = new PreauthDTO();
			List<Preauth> preauthByClaimKey = preauthService
					.getPreauthByClaimKey(claimByKey.getKey());
			
			if(null != dto.getDocsReceivedDate())
				preauthDTO.setSfxMatchedQDate(dto.getDocsReceivedDate());
			//preauthDTO.setSfxRegisteredQDate(dto.getDocReceivedTimeForReg());
			
			
			Boolean isQueryOrTranslate = false;
			if (!preauthByClaimKey.isEmpty()) {
				for (Preauth preauth : preauthByClaimKey) {
					/*String[] split = preauth.getPreauthId().split("/");
					Integer seqNumber = Integer.valueOf(split[split.length - 1]);*/
	//				if (seqNumber == 2) {
						if (preauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_COORDINATOR_REPLY_RECEIVED_STATUS) ||
								preauth.getStatus().getKey().equals(ReferenceTable.PREMEDICAL_PREAUTH_COORDINATOR_REPLY) ||
								preauth.getStatus().getKey().equals(ReferenceTable.PREMEDICAL_ENHANCEMENT_COORDINATOR_REPLY) ||
								preauth.getStatus().getKey().equals(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_QUERY_RECEIVED_STATUS) ||
								preauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_REFER_TO_FLP_STATUS) || 
								preauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_COORDINATOR_REPLY_RECEIVED_STATUS) || preauth.getStatus().getKey()
										.equals(ReferenceTable.ENHANCEMENT_QUERY_RECEIVED_STATUS) || preauth.getStatus().getKey().equals(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_SEND_FOR_PROCESSING_STATUS) || preauth.getStatus().getKey().equals(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_QUERY_STATUS) || preauth.getStatus().getKey().equals(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_SUGGEST_REJECTION_STATUS)) {
							preauthDTO = premedicalMapper.getPreauthDTO(preauth);
						//	preauthDTO.setHumanTask(dto.getHumanTask());
						//	preauthDTO.setRodHumanTask(dto.getHumanTask());
							preauthDTO.setDbOutArray(dto.getDbOutArray());
							setpreauthTOPreauthDTO(premedicalMapper, claimByKey,
									preauth, preauthDTO, false);
							preauthDTO.getPreauthDataExtractionDetails().setAdmissionDate(preauth.getDataOfAdmission());
							CoordinatorDTO coordinatorDTO = new CoordinatorDTO();
							coordinatorDTO.setRefertoCoordinator(false);
							preauthDTO.setCoordinatorDetails(coordinatorDTO);
							isQueryOrTranslate = true;
							
							 List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsDTO = preauthService.getUpdateOtherClaimDetailsDTO(preauth.getKey());
							 preauthDTO.setUpdateOtherClaimDetailDTO(updateOtherClaimDetailsDTO);
							//added for doc received date null in REFER to FLP
								if(null != preauth.getSfxMatchedQDate())
									preauthDTO.setSfxMatchedQDate(preauth.getSfxMatchedQDate());
								/*if(null !=tableDTO.getDocReceivedTimeForReg())
									preauthDTO.setSfxRegisteredQDate(SHAUtils.formatDateForStarfax(tableDTO.getDocReceivedTimeForReg()));*/
								if(null != preauth.getSfxRegisteredQDate())
									preauthDTO.setSfxRegisteredQDate(preauth.getSfxRegisteredQDate());
								
								//commented since for query reply handled in batch level(for latest reply date upate)
//								//added for query reply with final bill date issue for auto allocation
//								if(preauth.getStatus().getKey().equals(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_QUERY_RECEIVED_STATUS)){
//									if(null != dto.getDocsReceivedDate())
//										preauthDTO.setSfxMatchedQDate(dto.getDocsReceivedDate());
//								}
							
							break;
						}
	//				}
						
				}
			}
	
			if(claimByKey!=null){
				
				Long hospital = claimByKey.getIntimation().getHospital();
				Hospitals hospitalById = hospitalService.getHospitalById(hospital);
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					preauthDTO.setIsSuspicious(hospitalById.getSuspiciousType());
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
						preauthDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
					}
				}
			}
			if (!isQueryOrTranslate) {
				Integer nextReferenceNo = 2;
				Preauth previousPreauth = null;
				if (!preauthByClaimKey.isEmpty()) {
					int size = preauthByClaimKey.size();
					previousPreauth = preauthByClaimKey.get(size-1);
	
					String[] split = previousPreauth.getPreauthId().split("/");
					String defaultNumber = split[split.length - 1];
					nextReferenceNo = Integer.valueOf(defaultNumber);
					for (Preauth preauth : preauthByClaimKey) {
						if (preauth.getPreauthId() != null) {
							String[] splitNumber = preauth.getPreauthId()
									.split("/");
							String number = splitNumber[splitNumber.length - 1];
	
							if (Integer.valueOf(number) > Integer
									.valueOf(defaultNumber)) {
								previousPreauth = preauth;
								nextReferenceNo = Integer.valueOf(number);
								preauthDTO.setIsPreMedicalForCoordinator(true);
								break;
							}
						}
	
					}
				}
	
				if (previousPreauth != null) {
					preauthDTO = premedicalMapper.getPreauthDTO(previousPreauth);
					
					//IMSSUPPOR-27229
					if(preauthDTO.getPreauthMedicalDecisionDetails() != null && preauthDTO.getPreauthMedicalDecisionDetails().getCorporateBufferUtilizedAmt() != null){
						preauthDTO.getPreauthMedicalDecisionDetails().setCorporateBufferUtilizedAmt(null);
					}
					
					 List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsDTO = preauthService.getUpdateOtherClaimDetailsDTO(previousPreauth.getKey());
					 preauthDTO.setUpdateOtherClaimDetailDTO(updateOtherClaimDetailsDTO);
					
					getResidualAmount(previousPreauth, preauthDTO);
					List<Preauth> preauthByClaimKeyWithClearCashless = preauthService
							.getPreauthByClaimKeyWithClearCashless(claimByKey.getKey());
					String referenceNo = claimByKey.getClaimId() + "/00" + String.valueOf(nextReferenceNo + 1);
					if(!preauthByClaimKeyWithClearCashless.isEmpty()) {
						referenceNo = claimByKey.getClaimId() + "/00" + String.valueOf(preauthByClaimKeyWithClearCashless.size() + 1);
					}
					preauthDTO.getPreauthDataExtractionDetails().setReferenceNo(referenceNo);
				//	preauthDTO.setHumanTask(dto.getHumanTask());
					//preauthDTO.setRodHumanTask(dto.getHumanTask());
	
					
	
					// if(previousPreauth.getStatus().getKey() ==
					// ReferenceTable.PRE_MEDICAL_PRE_AUTH_SUGGEST_REJECTION_STATUS)
					// {
					// preauthDTO.getPreauthMedicalProcessingDetails().setRejectionRemarks(previousPreauth.getRemarks());
					// } else if (preauthDTO.getStatusKey() ==
					// ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS)
					// {
					// preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks(previousPreauth.getRemarks());
					// }
	
					setpreauthTOPreauthDTO(premedicalMapper, claimByKey,
							previousPreauth, preauthDTO, false);
					preauthDTO.getPreauthDataExtractionDetails().setAdmissionDate(previousPreauth.getDataOfAdmission());
				}
			}
			preauthDTO.setIsRepremedical(isQueryOrTranslate);
			preauthDTO
					.setTreatmentRemarksList(getTreatmentRemarksHistory(preauthDTO
							.getClaimKey()));
			
			preauthDTO.getPreauthMedicalProcessingDetails().setMedicalRemarks("");
			
			
			Double insuredSumInsured = calcService
					.getInsuredSumInsured(preauthDTO.getNewIntimationDTO()
							.getInsuredPatient().getInsuredId().toString(),
							preauthDTO.getPolicyDto().getKey(),preauthDTO.getNewIntimationDTO()
							.getInsuredPatient().getLopFlag());
			
			preauthDTO.setStrUserName(dto.getUsername());
			
		//	loadRRCRequestValues(preauthDTO,insuredSumInsured,SHAConstants.PRE_MEDICAL_PROCESSING_ENHANCEMENT);
			
			String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
			if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
				String get64vbStatus = PremiaService.getInstance().get64VBStatus(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), preauthDTO.getNewIntimationDTO().getIntimationId());
				if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
					preauthDTO.setIsDishonoured(true);
				} else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
					preauthDTO.setIsPending(true);
				}
			}
			Preauth preauthRec = null;
			
			for (Preauth eachPreauth : preauthByClaimKey) {
				/*String[] eachSplit = eachPreauth.getPreauthId().split("/");
				Integer eachSeqNumber = Integer.valueOf(eachSplit[eachSplit.length - 1]);*/
				preauthRec = eachPreauth;
				break;
//				if(eachSeqNumber.equals(1)) {
//					preauthRec = eachPreauth;
//					break;
//				}
			}
			
			if(preauthRec != null) {
				preauthDTO.getPreauthDataExtractionDetails().setPreauthTotalApprAmt(preauthRec.getTotalApprovalAmount());
			}
			preauthDTO.setStrUserName(dto.getUsername());
			preauthDTO.setStrPassword(dto.getPassword());
			preauthDTO.setSittingsAmount(calcService.getDialysisAmount(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
			Map<String, String> popupMessages = calcService.getPOPUPMessages(preauthDTO.getPolicyKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
			preauthDTO.setPopupMap(popupMessages);
			
			if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
					&& preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
				//if(preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
					Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
					preauthDTO.setSuspiciousPopupMap(suspiciousMap);
				//}
			}
			if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
					&& preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
				//if(preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
					Map<String, String> nonPreferredMap = SHAUtils.getNonPreferredMap(preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
					preauthDTO.setNonPreferredPopupMap(nonPreferredMap);
				//}
			}
			
		/*	if(null != dto.getDocsRecievedTime())
				preauthDTO.setSfxMatchedQDate(SHAUtils.formatDateForStarfax(dto.getDocsRecievedTime()));*/
			if(null != dto.getDocsReceivedDate())
				preauthDTO.setSfxMatchedQDate(dto.getDocsReceivedDate());
			
			preauthDTO.setAdmissionDatePopup(calcService.getPolicyAgeingForPopup(preauthDTO.getNewIntimationDTO().getAdmissionDate(), preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
			
//			String policyYear = preauthDTO.getNewIntimationDTO().getPolicyYear();
//		    if(policyYear != null){
//		    	String intValue = policyYear.replaceAll("[^0-9]", "");
//		    	Integer policyAgeing = SHAUtils.getIntegerFromStringWithComma(intValue);
//		    	preauthDTO.setAdmissionDatePopup(policyAgeing != null ? policyAgeing.equals(0) ? true : false :false);
//		    }
			
			preauthDTO.setTaskNumber(dto.getTaskNumber());
			
			if((ReferenceTable.getFHORevisedKeys().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
					||	/*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
						(preauthDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
							&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
							|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
							|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
							&& ("G").equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan()))
					|| (preauthDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
				&& SHAConstants.YES_FLAG.equalsIgnoreCase(preauthDTO.getPreauthDataExtractionDetails().getOtherBenfitFlag())){
				List<OtherBenefitsTableDto> otherBenefitsList = premedicalService.getBenefitAmountDetailsByCashlessKey(preauthDTO.getKey());
				preauthDTO.getPreauthDataExtractionDetails().setOtherBenefitsList(otherBenefitsList);
			}
			
//			 if(preauthDTO.getNewIntimationDTO() != null && preauthDTO.getNewIntimationDTO().getInsuredPatient() != null &&
//					 preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
//					Long claimCount = preauthService.getClaimCount(preauthDTO.getNewIntimationDTO().getPolicy().getKey());
//					if(claimCount != null){
//						preauthDTO.setClaimCount(claimCount);
//					}
//				}
			
			preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
			preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
			//SHAUtils.setDefaultCopayValue(preauthDTO);
						
			//CR  R1086
			if(preauthDTO.getIsPEDInitiated()){
				boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				preauthDTO.setInsuredDeleted(isInsuredDeleted);
				
				//CR R1156
				boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				preauthDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);
			}
			
			Date policyFromDate = preauthDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
			
			Date admissionDate = preauthDTO.getNewIntimationDTO().getAdmissionDate();
			
		
//			bean.getPolicyDto().getPolicyType();
			Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
			if(diffDays != null && diffDays<90){
				preauthDTO.setIs64VBChequeStatusAlert(true);
			}
			
			preauthDTO.setDbOutArray(dto.getDbOutArray());
			
			//gmc
			Intimation intimation = claimByKey.getIntimation();
			Long mainNo = 0L;
			if(intimation.getInsured().getDependentRiskId() !=null){
				mainNo = intimation.getInsured().getDependentRiskId();
			}else{
				mainNo = intimation.getInsured().getInsuredId();
			}
			Map<String, Double> values = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_CB,intimation.getPolicy().getPolicyNumber(),intimation.getInsured().getKey(),mainNo,claimByKey.getKey());
			
			if(values != null && !values.isEmpty()){
				if(values.get(SHAConstants.LN_POLICY_BUFFER_SI) != null){
					preauthDTO.getPreauthDataExtractionDetails().setCorpBufferSI(values.get(SHAConstants.LN_POLICY_BUFFER_SI));	
				}
				if(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT) != null){
					preauthDTO.getPreauthDataExtractionDetails().setCorpBufferUtilisedAmt(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT));	
				}
				if(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) != null){
					preauthDTO.getPreauthDataExtractionDetails().setCorpBufferLimit(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT));	
				}
				if(values.get(SHAConstants.LN_INSURED_UTIL_AMT) != null &&
						values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) !=null){
					Double avlbBalance = values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) - values.get(SHAConstants.LN_INSURED_UTIL_AMT);
					preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAvalBal(avlbBalance);
				}		
			}
				
			Map<String, Integer> productBenefitMap = calcService.getProductBenefitFlag(
					claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
					.getProduct().getKey());
			
			if(productBenefitMap != null && productBenefitMap.containsKey(SHAConstants.OTHER_BENEFITS_FLAG) && productBenefitMap.get(SHAConstants.OTHER_BENEFITS_FLAG) != null){
				
				int benefitFlag = (int)productBenefitMap.get(SHAConstants.OTHER_BENEFITS_FLAG);
				
				preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(benefitFlag);
			}
			else{
				preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(0);
			}
			
			if(ReferenceTable.JET_PRIVILEGE_PRODUCT.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(0);
			}
			
			if(claimByKey!=null){
				
				Long hospital = claimByKey.getIntimation().getHospital();
				Hospitals hospitalById = hospitalService.getHospitalById(hospital);
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					preauthDTO.setIsSuspicious(hospitalById.getSuspiciousType());
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
						preauthDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
					}
				}
			}
			
			Boolean policyValidation = policyService.getPolicyValidationObject(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			preauthDTO.setIsPolicyValidate(policyValidation);
			
			Boolean popupMessagesForProduct = calcService.getPOPUPMessagesForProduct(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), claimByKey.getIntimation().getInsured().getKey(), claimByKey.getIntimation().getPolicy().getProduct().getKey());
			preauthDTO.setIsChangeInsumInsuredAlert(popupMessagesForProduct);
			List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
			List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			
			preauthDTO.setInsuredPedDetails(pedByInsured);
			preauthDTO.setApprovedPedDetails(approvedPedByInsured);
			
			
			preauthDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			preauthDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			preauthDTO.setCrmFlagged(claimByKey.getCrcFlag());
			
			preauthDTO.setVipCustomer(claimByKey.getIsVipCustomer());
			preauthDTO.setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
			
			Policy policy = preauthDTO.getNewIntimationDTO().getPolicy();
			
			if(ReferenceTable.getGMCProductList().containsKey(policy.getProduct().getKey())){
				List<SelectValue> duplicateInsuredDetails = calcService.getDuplicateInsuredDetails(policy.getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				preauthDTO.setDuplicateInsuredList(duplicateInsuredDetails);
			}
			String topAlertFlag = claimService.getTopUpPolicyDetails(policy.getPolicyNumber(),preauthDTO);
			preauthDTO.setTopUpPolicyAlertFlag(topAlertFlag);
			
			List<String> popupSIRestrication = calcService.getSIRestrication(preauthDTO.getNewIntimationDTO().getIntimationId(),preauthDTO.getNewIntimationDTO().getKey(), preauthDTO.getPolicyKey());
			preauthDTO.setPopupSIRestrication(popupSIRestrication);
			
			
			//CR2019217
			 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(preauthDTO.getNewIntimationDTO().getIntimationId()); 
			 if(icrAgent != null && !icrAgent.isEmpty()) {
					String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
					preauthDTO.setIcrAgentValue(agentScorePoint);
					//added for SM Points suggested by Sathish Sir added by Noufel
					String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
					preauthDTO.setSmAgentValue(smScorepoint);
				 
			 }
			//added auto allocation 
			preauthDTO.setIsPreauthAutoAllocationQ(dto.isAutoAllocation());
			
//			Portal Flag updated in cashless table
			if(dto.getNhpUpdDocumentKey() != null){
				preauthDTO.setNhpUpdKey(dto.getNhpUpdDocumentKey());
			}
				
			view.setPreMedicalEnhancementView(PremedicalEnhancementWizard.class,
					preauthDTO);
			
			 Date endDate = new Date();
			 log.info("%%%%%%%%%%%%%%%%%%%%%% PREMEDICAL_ENHANCEMENT ENDING TIME FOR DB FETCHING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+endDate);
			 
			 log.info("%%%%%%%%%%%%%%%%%%%%%% PREMEDICAL_ENHANCEMENT TOTAL TIME FOR DB FETCHING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(startDate, endDate));
		
		}
	}

	private void getResidualAmount(Preauth previousPreauth,
			PreauthDTO preauthDTO) {
		ResidualAmount residualAmtByPreauthKey = preauthService
				.getResidualAmtByPreauthKey(previousPreauth.getKey());
		if (null != residualAmtByPreauthKey) {
			ResidualAmountDTO residualDTO = new ResidualAmountDTO();
			residualDTO.setKey(residualAmtByPreauthKey.getKey());
			residualDTO.setPreauthKey(previousPreauth.getKey());
			residualDTO.setApprovedAmount(residualAmtByPreauthKey
					.getApprovedAmount());
			residualDTO.setNetApprovedAmount(residualAmtByPreauthKey.getNetApprovedAmount() != null ? residualAmtByPreauthKey.getNetApprovedAmount(): 0d);
			residualDTO.setRemarks(residualAmtByPreauthKey.getRemarks());			
				
			if(null != residualAmtByPreauthKey.getCoPayTypeId()){		
					SelectValue copayTypeValue = new SelectValue();
					copayTypeValue.setValue(residualAmtByPreauthKey.getCoPayTypeId().getValue());
					copayTypeValue.setId(residualAmtByPreauthKey.getCoPayTypeId().getKey());
					residualDTO.setCoPayTypeId(copayTypeValue);
				}
			preauthDTO.setResidualAmountDTO(residualDTO);
		}

	}

	private List<String> getTreatmentRemarksHistory(Long claimKey) {
		List<String> treatmentRemarksList = new ArrayList<String>();
		List<Preauth> preauthByClaimKey = preauthService
				.getPreauthByClaimKey(claimKey);

		for (Preauth preauth : preauthByClaimKey) {
			treatmentRemarksList.add(preauth.getTreatmentRemarks());
		}
		return treatmentRemarksList;
	}

	/*private List<SpecificProductDeductibleTableDTO> getPreviousClaimsSuperSurplusTable(
			List<Claim> claimList, String strClaimNumber, PreauthDTO preauthDTO) {
		List<Claim> objClaimList = new ArrayList<Claim>();
		List<SpecificProductDeductibleTableDTO> previousClaimList = new ArrayList<SpecificProductDeductibleTableDTO>();

		for (Claim objClaim : claimList) {
			if (!(strClaimNumber.equalsIgnoreCase(objClaim.getClaimId()))) {
				objClaimList.add(objClaim);
			}
		}
		Preauth preauth = null;
		int i = 1;
		if (!objClaimList.isEmpty()) {
			for (Claim claim : objClaimList) {
				SpecificProductDeductibleTableDTO dto = new SpecificProductDeductibleTableDTO();
				List<Preauth> preauthByClaimKey = preauthService
						.getPreauthByClaimKey(claim.getKey());
				if (!preauthByClaimKey.isEmpty()) {
					preauth = preauthByClaimKey.get(0);
					String[] split = preauth.getPreauthId().split("/");
					Integer id = Integer.valueOf(split[split.length - 1]);
					for (Preauth eachPreauth : preauthByClaimKey) {
						String[] split2 = eachPreauth.getPreauthId().split("/");
						Integer eachPreauthId = Integer
								.valueOf(split2[split2.length - 1]);
						if (eachPreauthId > id) {
							id = eachPreauthId;
							preauth = eachPreauth;
						}
					}
				}
				if (preauth != null) {
					String calculatePreRequestedAmt = preauthService
							.getPreauthReqAmt(preauth.getKey(), preauth
									.getClaim().getKey());
					if (SHAUtils.isValidFloat(calculatePreRequestedAmt)) {
						dto.setClaims("Claims " + (i++));
						Integer floatFromString = SHAUtils
								.getFloatFromString(calculatePreRequestedAmt);
						dto.setAmountConsidered(floatFromString);
						dto.setOriginalSI(preauth.getPolicy()
								.getTotalSumInsured() != null ? preauth
								.getPolicy().getTotalSumInsured().intValue()
								: 0);
						dto.setAmountPayable(preauth.getTotalApprovalAmount() != null ? preauth
								.getTotalApprovalAmount().intValue() : 0);
						dto.setDeductible(300000);
						Integer max = Math.max(dto.getAmountConsidered(),
								dto.getOriginalSI());
						dto.setAmountToBeConsidered(max);
						Integer value = max - dto.getDeductible();
						dto.setEligibleAmountPayable(value);
						dto.setBalanceSI(preauthDTO.getBalanceSI() != null ? preauthDTO
								.getBalanceSI().intValue() : 0);
						Integer payableAmt = Math
								.min(value, dto.getBalanceSI());
						dto.setPayableAmount(payableAmt);
						previousClaimList.add(dto);
					}
				}
			}

		}
		return previousClaimList;
	}*/

	public List<ViewTmpClaim> getPreviousClaimForPreviousPolicy(String policyNumber, List<ViewTmpClaim> generatedList) {
		try {
			Policy renewalPolNo = policyService.getByPolicyNumber(policyNumber);
			if(renewalPolNo != null) {
				List<ViewTmpIntimation> intimationKeys = intimationService.getIntimationByPolicyKey(renewalPolNo.getKey());
				List<ViewTmpClaim> claimsByPolicyNumber = claimService
						.getViewTmpClaimsByIntimationKeys(intimationKeys);
//				List<ViewTmpClaim> previousPolicyPreviousClaims = claimService.getViewTmpClaimsByPolicyNumber(renewalPolNo.getPolicyNumber());
				if(claimsByPolicyNumber != null && !claimsByPolicyNumber.isEmpty()) {
					for (ViewTmpClaim viewTmpClaim : claimsByPolicyNumber) {
						if(!generatedList.contains(viewTmpClaim)) {
							generatedList.add(viewTmpClaim);
						}
					}
				}
				if(renewalPolNo != null && renewalPolNo.getRenewalPolicyNumber() != null ) {
					getPreviousClaimForPreviousPolicy(renewalPolNo.getRenewalPolicyNumber(), generatedList);
				} else {
					return generatedList;
				}
			}
		} catch(Exception e) {
			
		}
		return generatedList;
	}
	
	protected void getDiagnosisDetails(
			@Observes @CDIEvent(MenuPresenter.DIAGNOSIS_DETAILS) final ParameterDTO parameters) {
		Map<String,Object> hrmMap = (Map<String,Object>) parameters.getPrimaryParameter();
		if(null != hrmMap)
		{
			PreMedicalMapper premedicalMapper = null;
			Claim claim = null;
			Preauth preauth = null;
			PreauthDTO preauthDto = null;
			Boolean isenabled = true;
			
				premedicalMapper = (PreMedicalMapper)hrmMap.get("premedicalMapper");
				claim = (Claim) hrmMap.get("claim");
				preauth = (Preauth) hrmMap.get("preauth");
				preauthDto = (PreauthDTO) hrmMap.get("preauthDTO");
				isenabled = (Boolean) hrmMap.get("isEnabled");
				
				setpreauthTOPreauthDTO(premedicalMapper, claim, preauth, preauthDto, isenabled);
				
				//setReimbursmentTOPreauthDTO(reimbursementMapper, claimByKey, reimbursement, preauthDTO, isEnabled, screenName)
			
		}
		
		
	}
	
	public void setpreauthTOPreauthDTO(PreMedicalMapper premedicalMapper,
			Claim claimByKey, Preauth previousPreauth, PreauthDTO preauthDTO,
			Boolean isEnabled) {
		Date mapperStartDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
		if (claimByKey != null) {
			setClaimValuesToDTO(preauthDTO, claimByKey);
			NewIntimationDto newIntimationDto = intimationService
					.getIntimationDto(claimByKey.getIntimation());
			/*if(newIntimationDto != null){
				if(newIntimationDto.getPolicy().getCommunicationType() != null && 
						((newIntimationDto.getPolicy().getCommunicationType().equalsIgnoreCase(SHAConstants.GMC_COMMUNCATION_TYPE_EMPLOYEE)) || (newIntimationDto.getPolicy().getCommunicationType().equalsIgnoreCase(SHAConstants.GMC_COMMUNCATION_TYPE_BOTH)))){
					Insured insuredDetails = insuredService.getInsuredByInsuredKey(newIntimationDto.getInsuredKey());
					Map<String, String> linkPolicyDetails = calcService.getLinkedPolicyDetails(newIntimationDto.getPolicy().getPolicyNumber(), insuredDetails.getLinkEmpNumber());
					newIntimationDto.setEmployeeCode(linkPolicyDetails.get(SHAConstants.EMPLOYEE_ID));
					newIntimationDto.setGmcMainMemberName(linkPolicyDetails.get(SHAConstants.INSURED_NAME));
					
				}
			}*/

			//CR R201801323
			newIntimationDto.setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
			
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			
			//gmc
			if(claimByKey.getGmcCorpBufferLmt() != null){
				claimDTO.setGmcCorpBufferLmt(claimByKey.getGmcCorpBufferLmt().intValue());	
			}
			if(claimByKey.getGmcCorpBufferFlag() != null){
				claimDTO.setIsgmcCorpBuffer(claimByKey.getGmcCorpBufferFlag().equalsIgnoreCase(SHAConstants.YES_FLAG) ? 1L: 0L);
			}
			

			preauthDTO.setNewIntimationDTO(newIntimationDto);
			preauthDTO.setClaimDTO(claimDTO);
			
			 if (claimByKey.getIntimation().getPolicy().getHomeOfficeCode() != null) {
				 List<MasOmbudsman> ombudsmanOfficeList = getOmbudsmanOffiAddrByPIOCode(claimByKey.getIntimation().getPolicy().getHomeOfficeCode());
				 if(ombudsmanOfficeList !=null && !ombudsmanOfficeList.isEmpty())
					 preauthDTO.getClaimDTO().setOmbudsManAddressList(ombudsmanOfficeList);
			 }			
		}
		
		Date mapperEndDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
		
		log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));
		

		
		mapperStartDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR GETTING PREVIOUS CLAIM DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);

		
		/*String policyNumber = preauthDTO.getPolicyDto().getPolicyNumber();
		List<ViewTmpClaim> previousclaimsList = new ArrayList<ViewTmpClaim>();
//		List<ViewTmpClaim> claimsByPolicyNumber = claimService
//				.getViewTmpClaimsByPolicyNumber(policyNumber);
		Policy byPolicyNumber = policyService.getByPolicyNumber(policyNumber);
		List<ViewTmpIntimation> intimationKeys = intimationService.getIntimationByPolicyKey(byPolicyNumber.getKey());
		List<ViewTmpClaim> claimsByPolicyNumber = claimService
							.getViewTmpClaimsByIntimationKeys(intimationKeys);
		previousclaimsList.addAll(claimsByPolicyNumber);
		
		previousclaimsList = getPreviousClaimForPreviousPolicy(byPolicyNumber.getRenewalPolicyNumber(), previousclaimsList);

//		List<PreviousClaimsTableDTO> previousClaimDTOList = SHAUtils
//				.getPreviousClaims(claimsByPolicyNumber,
//						claimByKey.getClaimId(), pedValidationService,
//						masterService);
		
		List<PreviousClaimsTableDTO> previousClaimDTOList = preauthService
				.getPreviousClaims(previousclaimsList,
						claimByKey.getClaimId());

		// List<PreviousClaimsTableDTO> previousClaimDTOList = new
		// PreviousClaimMapper().getPreviousClaimDTOList(claimsByPolicyNumber);

		preauthDTO.setPreviousClaimsList(previousClaimDTOList);*/

		
		mapperEndDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR GETTING PREVIOUS CLAIM DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
		
		log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR GETTING PREVIOUS CLAIM DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));

		if(null != previousPreauth)
		{
		if (previousPreauth.getCoordinatorFlag().equalsIgnoreCase("y")) {

			CoordinatorDTO coordinatorDTO = premedicalMapper
					.getCoordinatorDTO(preauthService
							.findCoordinatorByClaimKey(previousPreauth
									.getClaim().getKey()));
			coordinatorDTO.setRefertoCoordinator(true);
			preauthDTO.setCoordinatorDetails(coordinatorDTO);
		}
		
		if(previousPreauth.getCatastrophicLoss() != null) {
			
			SelectValue value = masterService.getCatastropheData(previousPreauth.getCatastrophicLoss());
			preauthDTO.getPreauthDataExtractionDetails().setCatastrophicLoss(value);
		}

		if(previousPreauth.getNatureOfLoss() != null) {
			
			SelectValue value = masterService.getMasterValueForNatureCause(previousPreauth.getNatureOfLoss());
			preauthDTO.getPreauthDataExtractionDetails().setNatureOfLoss(value);
		}
		if(previousPreauth.getCauseOfLoss() != null) {
			SelectValue value = masterService.getMasterValueForNatureCause(previousPreauth.getCauseOfLoss());
			preauthDTO.getPreauthDataExtractionDetails().setCauseOfLoss(value);
		}
		
		List<SpecialityDTO> specialityDTOList = premedicalMapper
				.getSpecialityDTOList(preauthService
						.findSpecialityByClaimKey(previousPreauth.getClaim()
								.getKey()));
		for (SpecialityDTO specialityDTO : specialityDTOList) {
			specialityDTO.setEnableOrDisable(isEnabled);
		}
		preauthDTO.getPreauthDataExtractionDetails().setSpecialityList(
				specialityDTOList);

	

		List<PedValidation> findPedValidationByPreauthKey = preauthService
				.findPedValidationByPreauthKey(previousPreauth.getKey());
		List<DiagnosisDetailsTableDTO> newPedValidationTableListDto = premedicalMapper
				.getNewPedValidationTableListDto(findPedValidationByPreauthKey);

		
		// Fix for issue 732 starts.
		
		/*TreatingDoctor populate CR2019211 */
		List<TreatingDoctorDetails> findQualificationByTransactionKey = preauthService.findTreatingDoctorDetailsByClaimKey(previousPreauth.getClaim().getKey());
		if(findQualificationByTransactionKey !=null && !findQualificationByTransactionKey.isEmpty()){
			List<TreatingDoctorDTO> newTreatingDoctorListDto = premedicalMapper.gettreatingDoctorDTOList(findQualificationByTransactionKey);
			preauthDTO.getPreauthDataExtractionDetails().setTreatingDoctorDTOs(newTreatingDoctorListDto);
		}		
		mapperStartDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR DB PROCEDURE CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
		
		DBCalculationService dbCalculationService = new DBCalculationService();
		Double insuredSumInsured = 0d;
		
		if(ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			
			insuredSumInsured = dbCalculationService.getInsuredSumInsuredForGMC(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
					preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getPolicy().getSectionCode());
		}
		else{
			insuredSumInsured = dbCalculationService.getInsuredSumInsured(
					preauthDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), preauthDTO.getPolicyDto()
							.getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		}
		
		preauthDTO.getPolicyDto().setInsuredSumInsured(insuredSumInsured);

		Double balanceSI = 0d;
		List<Double> copayValue = new ArrayList<Double>();
		if(ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			balanceSI = dbCalculationService.getBalanceSIForGMC(
					preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
					preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
					preauthDTO.getClaimKey());
			copayValue = dbCalculationService.getProductCoPayForGMC(
					preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
		}else{
			balanceSI = dbCalculationService.getBalanceSI(
					preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
					preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
					preauthDTO.getClaimKey(), insuredSumInsured,
					preauthDTO.getNewIntimationDTO().getKey()).get(
					SHAConstants.TOTAL_BALANCE_SI);
			 copayValue = dbCalculationService.getProductCoPay(
					preauthDTO.getNewIntimationDTO().getPolicy().getProduct()
							.getKey(), preauthDTO.getNewIntimationDTO()
							.getInsuredPatient().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId(),preauthDTO.getNewIntimationDTO());
		}

		
		mapperEndDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR DB PROCEDURE CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
		
		log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR DB PROCEDURE CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));

		
		if (preauthDTO.getNewIntimationDTO() != null) {
			Product product = preauthDTO.getNewIntimationDTO().getPolicy()
					.getProduct();
			if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())) {
				// BalanceSumInsuredDTO claimsOutstandingAmt =
				// dbCalculationService.getClaimsOutstandingAmt(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
				// preauthDTO.getNewIntimationDTO().getIntimationId(),
				// insuredSumInsured);
				preauthDTO.setSettledAmount(0d);
				preauthDTO
						.setDeductibleAmount((preauthDTO.getNewIntimationDTO()
								.getInsuredPatient() != null && preauthDTO
								.getNewIntimationDTO().getInsuredPatient()
								.getDeductibleAmount() != null) ? preauthDTO
								.getNewIntimationDTO().getInsuredPatient()
								.getDeductibleAmount() : 0d);
			}
		}

		preauthDTO.setBalanceSI(balanceSI);
		preauthDTO.setProductCopay(copayValue);

		if (preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()
				.equals(ReferenceTable.SUPER_SURPLUS_INDIVIDUAL)
				|| preauthDTO.getNewIntimationDTO().getPolicy().getProduct()
						.getKey().equals(ReferenceTable.SUPER_SURPLUS_FLOATER)) {
			// preauthDTO.setSpecificProductDeductibleDTO(getPreviousClaimsSuperSurplusTable(claimsByPolicyNumber
			// ,claimByKey.getClaimId(), preauthDTO));
		}

		String policyPlan = preauthDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null ? preauthDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() : "0";
		
		/*if(ReferenceTable.MEDI_CLASSIC_BASIC_PRODUCT_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) || ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {*/
		if(preauthDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
				|| ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
						SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
						|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
						|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
				|| ((SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
						SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
						&& preauthDTO.getNewIntimationDTO().getPolicy().getProductType().getKey().equals(ReferenceTable.INDIVIDUAL_POLICY))) {
			policyPlan = preauthDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() != null ? preauthDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() : "0";
		}
		
		Long siRestrictionKey = newPedValidationTableListDto != null && !newPedValidationTableListDto.isEmpty() && newPedValidationTableListDto.get(0).getSumInsuredRestriction() != null ? newPedValidationTableListDto.get(0).getSumInsuredRestriction().getId() : 0l;
				
		Map<Long, SublimitFunObject> sublimitFunObjMap = getSublimitFunObjMap(
				preauthDTO.getPolicyDto().getProduct().getKey(),
				insuredSumInsured, preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getInsuredAge(), preauthDTO.getPreauthDataExtractionDetails().getSection(), policyPlan, (preauthDTO.getPreauthDataExtractionDetails().getSectionDetailsDTO().getSubCover() != null ? preauthDTO.getPreauthDataExtractionDetails().getSectionDetailsDTO().getSubCover().getCommonValue() : preauthDTO.getClaimDTO().getClaimSubCoverCode() )
						,preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId(),siRestrictionKey);
		// Fix for issue 732 ends
		
		
		List<ProcedureDTO> procedureMainDTOList = premedicalMapper
				.getProcedureMainDTOList(preauthService
						.findProcedureByPreauthKey(previousPreauth.getKey()));
		for (ProcedureDTO procedureDTO : procedureMainDTOList) {
			procedureDTO.setEnableOrDisable(isEnabled);
			if (procedureDTO.getSublimitName() != null) {
				SublimitFunObject objSublimitFun = sublimitFunObjMap
						.get(procedureDTO
								.getSublimitName().getLimitId());
				if(objSublimitFun != null) {
					procedureDTO.setSublimitName(objSublimitFun);
					procedureDTO.setSublimitDesc(objSublimitFun.getDescription());
					procedureDTO.setSublimitAmount(String.valueOf(objSublimitFun.getAmount().intValue()));
				}
				
			}
			/*Below Code added for GLX2020092*/
			if(procedureDTO.getProcedureName() != null){
				SelectValue procedureNameValues = masterService.getProcedureDescriptionByKey(procedureDTO.getProcedureName().getId());
				procedureDTO.getProcedureName().setValue(procedureNameValues.getValue());
				procedureDTO.getProcedureName().setCommonValue(procedureNameValues.getCommonValue());

			}
		}
		
		preauthDTO.getPreauthMedicalProcessingDetails()
				.setProcedureExclusionCheckTableList(procedureMainDTOList);

		SublimitFunObject sublimitObj = null;
		for (DiagnosisDetailsTableDTO pedValidationTableDTO : newPedValidationTableListDto) {
			pedValidationTableDTO.setEnableOrDisable(isEnabled);
			if (pedValidationTableDTO.getDiagnosisName() != null) {
				String diagnosis = masterService
						.getDiagnosis(pedValidationTableDTO.getDiagnosisName()
								.getId());
				pedValidationTableDTO.setDiagnosis(diagnosis);
				pedValidationTableDTO.getDiagnosisName().setValue(diagnosis);
			}
			
			if(pedValidationTableDTO.getPrimaryDiagnosisFlag()!=null && pedValidationTableDTO.getPrimaryDiagnosisFlag().equalsIgnoreCase(SHAConstants.YES_FLAG))
			{
				pedValidationTableDTO.setPrimaryDiagnosis(true);
			}
			else
			{
				pedValidationTableDTO.setPrimaryDiagnosis(null);
			}
		  
			
			
			/*Below Code added for R20181279*/
			if(pedValidationTableDTO.getIcdCode() != null){
				SelectValue icdValues = masterService.getIcdDescriptionKey(pedValidationTableDTO.getIcdCode().getId());
				pedValidationTableDTO.getIcdCode().setValue(icdValues.getValue());
				pedValidationTableDTO.getIcdCode().setCommonValue(icdValues.getCommonValue());
				
			}
			

			if (pedValidationTableDTO.getSublimitName() != null) {
				// Fix for issue 732 starts.
				SublimitFunObject objSublimitFun = sublimitFunObjMap
						.get(pedValidationTableDTO.getSublimitName()
								.getLimitId());
				// ClaimLimit limit =
				// claimService.getClaimLimitByKey(pedValidationTableDTO.getSublimitName().getLimitId());
				if (objSublimitFun != null) {
					pedValidationTableDTO.setOldSublimitName(objSublimitFun);
					pedValidationTableDTO.setSublimitName(objSublimitFun);
					pedValidationTableDTO.setSublimitAmt(String
							.valueOf(objSublimitFun.getAmount()));
				}
				// Fix for issue 732 ends
				
				/**
				 *  CR R1136 - start
				 */
				sublimitObj = icdSublimitMapService.getSublimitDetailsBasedOnIcdCode(pedValidationTableDTO.getIcdCodeKey());
				if(pedValidationTableDTO.getSublimitApplicable() != null && 
						pedValidationTableDTO.getSublimitApplicable().getId().equals(ReferenceTable.COMMONMASTER_YES) && 
						sublimitObj != null && 
								pedValidationTableDTO.getSublimitName() != null &&
						sublimitObj.getName().equalsIgnoreCase(pedValidationTableDTO.getSublimitName().getName())){
					pedValidationTableDTO.setSublimitMapAvailable(Boolean.TRUE);
				}
				
			}

			/**
			 *  CR R1136 - end
			 */
			
			if (pedValidationTableDTO.getSumInsuredRestriction() != null) {
				MastersValue master = masterService
						.getMaster(pedValidationTableDTO
								.getSumInsuredRestriction().getId());
				pedValidationTableDTO.getSumInsuredRestriction().setValue(
						master.getValue());

			}
			List<DiagnosisPED> pedDiagnosisByPEDValidationKey = preauthService
					.getPEDDiagnosisByPEDValidationKey(pedValidationTableDTO
							.getKey());
			List<PedDetailsTableDTO> dtoList = new ArrayList<PedDetailsTableDTO>();
			SelectValue value = null;
			SelectValue exclusionValue = null;
			PedDetailsTableDTO dto = null;
			for (DiagnosisPED diagnosisPED : pedDiagnosisByPEDValidationKey) {
				dto = new PedDetailsTableDTO();
				// Added for disabling the procedure that is coming from
				// preauth.
				dto.setEnableOrDisable(isEnabled);
				dto.setDiagnosisName(pedValidationTableDTO.getDiagnosis());
				dto.setPolicyAgeing(pedValidationTableDTO.getPolicyAgeing());
				dto.setKey(diagnosisPED.getKey());
				dto.setPedCode(diagnosisPED.getPedCode());
				dto.setPedName(diagnosisPED.getPedName());

//				if (diagnosisPED.getDiagonsisImpact() != null) {
//					value = new SelectValue();
//					value.setId(diagnosisPED.getDiagonsisImpact().getKey());
//					value.setValue(diagnosisPED.getDiagonsisImpact().getValue());
//					dto.setPedExclusionImpactOnDiagnosis(value);
//				}

//				if (diagnosisPED.getExclusionDetails() != null) {
//					exclusionValue = new SelectValue();
//					exclusionValue.setId(diagnosisPED.getExclusionDetails()
//							.getKey());
//					exclusionValue.setValue(diagnosisPED.getExclusionDetails()
//							.getExclusion());
//					dto.setExclusionDetails(exclusionValue);
//				}

				dto.setRemarks(diagnosisPED.getDiagnosisRemarks());
				dtoList.add(dto);
			}
			pedValidationTableDTO.setPedList(dtoList);			
		}

		// TODO: Need to change this behaviour..
		preauthDTO.getPreauthDataExtractionDetails().setDiagnosisTableList(
				newPedValidationTableListDto);

		// preauthDTO.getPreauthMedicalProcessingDetails().setPedValidationTableList(newPedValidationTableListDto);

		List<ClaimAmountDetails> findClaimAmountDetailsByPreauthKey = preauthService
				.findClaimAmountDetailsByPreauthKey(previousPreauth.getKey());
		preauthDTO
				.getPreauthDataExtractionDetails()
				.setClaimedDetailsList(
						premedicalMapper
								.getClaimedAmountDetailsDTOList(findClaimAmountDetailsByPreauthKey));
		
		Map<String, Object> autoRestroation = dbCalculationService.getAutoRestroation(preauthDTO.getNewIntimationDTO().getIntimationId());
		preauthDTO.getPreauthDataExtractionDetails().setAutoRestoration(String.valueOf(autoRestroation.get(SHAConstants.AUTO_RESTORATION_CHK)));
		if(null != autoRestroation.get(SHAConstants.AUTO_RESTORATION_COUNT)){
		preauthDTO.getPreauthDataExtractionDetails().setRestorationCount(Integer.parseInt(autoRestroation.get(SHAConstants.AUTO_RESTORATION_COUNT).toString()));
		}
		if(preauthDTO.getPreauthDataExtractionDetails().getAutoRestoration().equalsIgnoreCase(SHAConstants.AUTO_RESTORATION_DONE)) {
			preauthDTO.setIsAutoRestorationDone(true);
		}
		
		if(preauthDTO.getPreauthDataExtractionDetails().getPtcaCabg() != null && preauthDTO.getPreauthDataExtractionDetails().getPtcaCabg().getId() != null){
			MastersValue master = masterService
					.getMaster(preauthDTO.getPreauthDataExtractionDetails().getPtcaCabg().getId());
			if(master != null){
				preauthDTO.getPreauthDataExtractionDetails().getPtcaCabg().setValue(master.getValue());	
			}
		}
		
		
		if(previousPreauth.getCatastrophicLoss() != null) {
			SelectValue catastropheData = masterService.getCatastropheData(previousPreauth.getCatastrophicLoss());
			if(catastropheData != null){
			 preauthDTO.getPreauthDataExtractionDetails().setCatastrophicLoss(new SelectValue(previousPreauth.getCatastrophicLoss(),catastropheData.getValue()));
			}
		}
		
		if(previousPreauth.getNatureOfLoss() != null) {
			MastersValue master = masterService.getMaster(previousPreauth.getNatureOfLoss());
			if(master != null){
			 preauthDTO.getPreauthDataExtractionDetails().setNatureOfLoss(new SelectValue(previousPreauth.getNatureOfLoss(),master.getValue()));
			}
		}
		
		if(previousPreauth.getCauseOfLoss() != null) {
			
			MastersValue causeOfLoss =  masterService.getMaster(previousPreauth.getCauseOfLoss());
			
			if(causeOfLoss != null){
				
				preauthDTO.getPreauthDataExtractionDetails().setCauseOfLoss(new SelectValue(previousPreauth.getCauseOfLoss(),causeOfLoss.getValue()));
			}
		}
		
		}

		preauthDTO.setClsProsAllowed(masterService.getClsProsAllowedByPolicyNo(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
		
		if(previousPreauth.getImplantFlag() != null ){
			if(previousPreauth.getImplantFlag().equals("Y")){
				preauthDTO.getPreauthDataExtractionDetails().setImplantApplicable(true);
			}
		}
		
		/*ImplantDetails populate GLX2020057 */
		List<ImplantDetails> findImplantDetailsByclaimKey = preauthService.findImplantDetailsByClaimKey(previousPreauth.getClaim().getKey());
		if(findImplantDetailsByclaimKey !=null && !findImplantDetailsByclaimKey.isEmpty()){
			List<ImplantDetailsDTO> implantDetailsDTOs = premedicalMapper.getimplantDetailsDTOList(findImplantDetailsByclaimKey);
			preauthDTO.getPreauthDataExtractionDetails().setImplantDetailsDTOs(implantDetailsDTOs);
		}	
	}

	private List<MasOmbudsman> getOmbudsmanOffiAddrByPIOCode(String pioCode) {
		
		List<MasOmbudsman> ombudsmanDetailsByCpuCode = new ArrayList<MasOmbudsman>();
		if(pioCode != null){
			OrganaizationUnit branchOffice = claimService
					.getInsuredOfficeNameByDivisionCode(pioCode);
			if (branchOffice != null) {
				String ombudsManCode = branchOffice.getOmbudsmanCode();
				if (ombudsManCode != null) {
					ombudsmanDetailsByCpuCode = masterService
							.getOmbudsmanDetailsByCpuCode(ombudsManCode);
				}
			}
		}
		return ombudsmanDetailsByCpuCode;
	}
	
	
	/*private PreauthDTO setReimbursmentTOPreauthDTOForMA(
			ZonalMedicalReviewMapper reimbursementMapper, Claim claimByKey,
			Reimbursement reimbursement, PreauthDTO preauthDTO,
			Boolean isEnabled, String screenName) {
		
		Date mapperStartDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
		
		if (claimByKey != null) {
			setClaimValuesToDTO(preauthDTO, claimByKey);
			NewIntimationDto newIntimationDto = intimationService
					.getIntimationDto(claimByKey.getIntimation());
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
				 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
			 }
			
			//Date admissionDate = newIntimationDto.getAdmissionDate();
			try{
//				String duration = dbCalculationService.getPolicyAgeing(admissionDate, newIntimationDto.getPolicy().getPolicyNumber());
				String duration = newIntimationDto.getPolicyYear();
				newIntimationDto.setPolicyAgeing(duration);
			}catch(Exception e){
				e.printStackTrace();
			}
			preauthDTO.setNewIntimationDTO(newIntimationDto);
			preauthDTO.setClaimDTO(claimDTO);
			preauthDTO.getClaimDTO().setNewIntimationDto(newIntimationDto);
		}
		
		Date mapperEndDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
		
		log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));
		
		
		preauthDTO.setKey(reimbursement.getKey());
		//String policyNumber = preauthDTO.getPolicyDto().getPolicyNumber();
		//if(screenName != null && (!SHAConstants.BILLING.equalsIgnoreCase(screenName) && !SHAConstants.FINANCIAL.equalsIgnoreCase(screenName)) ) {
			//Policy byPolicyNumber = policyService.getByPolicyNumber(policyNumber);
			//List<ViewTmpIntimation> intimationKeys = intimationService.getIntimationByPolicyKey(byPolicyNumber.getKey());
			
			
			//mapperStartDate = new Date();
			//log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR GETTING PREVIOUS CLAIM DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
			
			
			List<ViewTmpClaim> previousclaimsList = new ArrayList<ViewTmpClaim>();
//			List<ViewTmpClaim> claimsByPolicyNumber = claimService
//					.getViewTmpClaimsByPolicyNumber(policyNumber);
			List<ViewTmpClaim> claimsByPolicyNumber = claimService
					.getViewTmpClaimsByIntimationKeys(intimationKeys);
			
			previousclaimsList.addAll(claimsByPolicyNumber);
			
			previousclaimsList = getPreviousClaimForPreviousPolicy(byPolicyNumber.getRenewalPolicyNumber(), previousclaimsList);

//			List<PreviousClaimsTableDTO> previousClaimDTOList = SHAUtils
//					.getPreviousClaims(claimsByPolicyNumber,
//							claimByKey.getClaimId(), pedValidationService,
//							masterService);
			
			List<PreviousClaimsTableDTO> previousClaimDTOList = preauthService
					.getPreviousClaims(previousclaimsList,
							claimByKey.getClaimId());

			// List<PreviousClaimsTableDTO> previousClaimDTOList = new
			// PreviousClaimMapper().getPreviousClaimDTOList(claimsByPolicyNumber);

			preauthDTO.setPreviousClaimsList(previousClaimDTOList);
			
			//mapperEndDate = new Date();
			//log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR GETTING PREVIOUS CLAIM DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
			
			//log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR GETTING PREVIOUS CLAIM DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));

		//}
		

		if (null != reimbursement.getCoordinatorFlag()
				&& reimbursement.getCoordinatorFlag().equalsIgnoreCase("y")) {

			CoordinatorDTO coordinatorDTO = reimbursementMapper
					.getCoordinatorDTO(preauthService
							.findCoordinatorByClaimKey(reimbursement.getClaim()
									.getKey()));
			coordinatorDTO.setRefertoCoordinator(true);
			preauthDTO.setCoordinatorDetails(coordinatorDTO);
		}

		UpdateHospital updateHospitalByReimbursementKey = reimbursementService
				.updateHospitalByReimbursementKey(reimbursement.getKey());
		if (updateHospitalByReimbursementKey != null) {
			ZonalReviewUpdateHospitalDetailsDTO updateHospitalDTO = reimbursementMapper
					.getUpdateHospitalDTO(updateHospitalByReimbursementKey);
			preauthDTO.getPreauthDataExtractionDetails()
					.setUpdateHospitalDetails(updateHospitalDTO);
		}

		PreviousClaimedHistory claimedHistoryByTransactionKey = reimbursementService
				.getClaimedHistoryByTransactionKey(reimbursement.getKey());
		if (claimedHistoryByTransactionKey != null) {
			preauthDTO.getPreauthDataExtractionDetails()
					.setCoveredPreviousClaim(true);
			preauthDTO
					.getPreauthDataExtractionDetails()
					.setOtherClaimDetails(
							reimbursementMapper
									.getClaimedHistoryDTO(claimedHistoryByTransactionKey));

			List<PreviousClaimedHospitalization> claimedHospitalizationByClaimedHistoryKey = reimbursementService
					.getClaimedHospitalizationByClaimedHistoryKey(claimedHistoryByTransactionKey
							.getKey());
			List<OtherClaimDiagnosisDTO> otherClaimDiagnosisDTOList = reimbursementMapper
					.getOtherClaimDiagnosisDTOList(claimedHospitalizationByClaimedHistoryKey);

			preauthDTO.getPreauthDataExtractionDetails()
					.setOtherClaimDetailsList(otherClaimDiagnosisDTOList);
		}

		List<SpecialityDTO> specialityDTOList = reimbursementMapper
				.getSpecialityDTOList(preauthService
						.findSpecialityByClaimKey(reimbursement.getClaim()
								.getKey()));
		for (SpecialityDTO specialityDTO : specialityDTOList) {
			specialityDTO.setEnableOrDisable(isEnabled);
		}
		preauthDTO.getPreauthDataExtractionDetails().setSpecialityList(
				specialityDTOList);


		List<PedValidation> findPedValidationByPreauthKey = preauthService
				.findPedValidationByPreauthKey(reimbursement.getKey());
		
		HashMap<String, String> mapAsList = preauthService.diagnosisNameAndIcdCode(findPedValidationByPreauthKey);
		preauthDTO.setFinalDiagnosis(mapAsList.get("diagnosis"));
		preauthDTO.setIcdCodeDesc(mapAsList.get("icdCode"));

		List<DiagnosisDetailsTableDTO> newPedValidationTableListDto = reimbursementMapper
				.getNewPedValidationTableListDto(findPedValidationByPreauthKey);

		mapperStartDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR DB PROCEDURE CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
		
		// Fix for issue 732 starts.
		DBCalculationService dbCalculationService = new DBCalculationService();

		Double insuredSumInsured = dbCalculationService.getInsuredSumInsured(
				preauthDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), preauthDTO.getPolicyDto()
						.getKey());
		preauthDTO.getPolicyDto().setInsuredSumInsured(insuredSumInsured);

		Double balanceSI = dbCalculationService.getBalanceSI(
				preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
				preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
				preauthDTO.getClaimKey(), insuredSumInsured,preauthDTO.getNewIntimationDTO().getKey()).get(
				SHAConstants.TOTAL_BALANCE_SI);
		List<Double> copayValue = dbCalculationService.getProductCoPay(
				preauthDTO.getNewIntimationDTO().getPolicy().getProduct()
						.getKey(), preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());

		if (preauthDTO.getNewIntimationDTO() != null) {
			Product product = preauthDTO.getNewIntimationDTO().getPolicy()
					.getProduct();
			if (product.getCode() != null
					&& ((ReferenceTable.SUPER_SURPLUS_INDIVIDUAL_CODE
							.equalsIgnoreCase(product.getCode())) || (ReferenceTable.SUPER_SURPLUS_FLOATER_CODE
							.equalsIgnoreCase(product.getCode())))) {
				// BalanceSumInsuredDTO claimsOutstandingAmt =
				// dbCalculationService.getClaimsOutstandingAmt(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
				// preauthDTO.getNewIntimationDTO().getIntimationId(),
				// insuredSumInsured);
				preauthDTO.setSettledAmount(0d);
				preauthDTO
						.setDeductibleAmount((preauthDTO.getNewIntimationDTO()
								.getInsuredPatient() != null && preauthDTO
								.getNewIntimationDTO().getInsuredPatient()
								.getDeductibleAmount() != null) ? preauthDTO
								.getNewIntimationDTO().getInsuredPatient()
								.getDeductibleAmount() : 0d);
			}
		}

		preauthDTO.setBalanceSI(balanceSI);
		preauthDTO.setProductCopay(copayValue);

		mapperEndDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR DB PROCEDURE CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
		
		log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR DB PROCEDURE CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));

		
		if (preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()
				.equals(ReferenceTable.SUPER_SURPLUS_INDIVIDUAL)
				|| preauthDTO.getNewIntimationDTO().getPolicy().getProduct()
						.getKey().equals(ReferenceTable.SUPER_SURPLUS_FLOATER)) {
			// preauthDTO.setSpecificProductDeductibleDTO(getPreviousClaimsSuperSurplusTable(claimsByPolicyNumber
			// ,claimByKey.getClaimId(), preauthDTO));
		}

		Map<Long, SublimitFunObject> sublimitFunObjMap = getSublimitFunObjMap(
				preauthDTO.getPolicyDto().getProduct().getKey(),
				insuredSumInsured, preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getInsuredAge(), preauthDTO.getPreauthDataExtractionDetails().getSection(), preauthDTO.getNewIntimationDTO().getPolicy().getPolicyPlan(), (preauthDTO.getPreauthDataExtractionDetails().getSectionDetailsDTO().getSubCover() != null ? preauthDTO.getPreauthDataExtractionDetails().getSectionDetailsDTO().getSubCover().getCommonValue() : preauthDTO.getClaimDTO().getClaimSubCoverCode()));
		// Fix for issue 732 ends

		List<ProcedureDTO> procedureMainDTOList = reimbursementMapper
				.getProcedureMainDTOList(preauthService
						.findProcedureByPreauthKey(reimbursement.getKey()));
		for (ProcedureDTO procedureDTO : procedureMainDTOList) {
			procedureDTO.setEnableOrDisable(isEnabled);
			
			 * This is for Reverse Allocation . 
			 * if any modifictation between Approved amount or 
			 * Net Approved Amount then we have to set reverse allocation into PreauthDTO.
			 * 
			
			if(procedureDTO.getApprovedAmount() != null && procedureDTO.getNetApprovedAmount() != null && !procedureDTO.getApprovedAmount().equals(procedureDTO.getNetApprovedAmount())) {
				preauthDTO.setIsReverseAllocation(true);
			}
			if (procedureDTO.getSublimitName() != null) {
				SublimitFunObject objSublimitFun = sublimitFunObjMap
						.get(procedureDTO
								.getSublimitName().getLimitId());
				if(objSublimitFun != null) {
					procedureDTO.setSublimitName(objSublimitFun);
					procedureDTO.setSublimitDesc(objSublimitFun.getDescription());
					procedureDTO.setSublimitAmount(String.valueOf(objSublimitFun.getAmount().intValue()));
				}
			}
			if (preauthDTO.getIsPostHospitalization()
					&& !preauthDTO.getHospitalizaionFlag()) {
				procedureDTO.setAmountConsideredAmount(0d);
				procedureDTO.setCopayAmount(0d);
				procedureDTO.setNetAmount(0d);
				procedureDTO.setApprovedAmount(0d);
				procedureDTO.setIsAmbChargeApplicable(false);
				procedureDTO.setAmbulanceCharge(0);
				procedureDTO.setAmtWithAmbulanceCharge(0);
			}

		}

		preauthDTO.getPreauthMedicalProcessingDetails()
				.setProcedureExclusionCheckTableList(procedureMainDTOList);

		for (DiagnosisDetailsTableDTO pedValidationTableDTO : newPedValidationTableListDto) {
			pedValidationTableDTO.setEnableOrDisable(isEnabled);
			
			 * This is for Reverse Allocation . 
			 * if any modifictation between Approved amount or 
			 * Net Approved Amount then we have to set reverse allocation into PreauthDTO.
			 * 
			
			if(pedValidationTableDTO.getApprovedAmount() != null && pedValidationTableDTO.getNetApprovedAmount() != null && !pedValidationTableDTO.getApprovedAmount().equals(pedValidationTableDTO.getNetApprovedAmount())) {
				preauthDTO.setIsReverseAllocation(true);
			}
			if (pedValidationTableDTO.getDiagnosisName() != null) {
				String diagnosis = masterService
						.getDiagnosis(pedValidationTableDTO.getDiagnosisName()
								.getId());
				pedValidationTableDTO.setDiagnosis(diagnosis);
				pedValidationTableDTO.getDiagnosisName().setValue(diagnosis);
				if (preauthDTO.getIsPostHospitalization()
						&& !preauthDTO.getHospitalizaionFlag()) {
					pedValidationTableDTO.setAmountConsideredAmount(0d);
					pedValidationTableDTO.setCopayAmount(0d);
					pedValidationTableDTO.setNetAmount(0d);
					pedValidationTableDTO.setApprovedAmount(0d);
					pedValidationTableDTO.setIsAmbChargeApplicable(false);
					pedValidationTableDTO.setAmbulanceCharge(0);
					pedValidationTableDTO.setAmtWithAmbulanceCharge(0);
				}
			}

			if (pedValidationTableDTO.getSublimitName() != null) {
				// Fix for issue 732 starts.
				SublimitFunObject objSublimitFun = sublimitFunObjMap
						.get(pedValidationTableDTO.getSublimitName()
								.getLimitId());
				// ClaimLimit limit =
				// claimService.getClaimLimitByKey(pedValidationTableDTO.getSublimitName().getLimitId());
				if (objSublimitFun != null) {
					pedValidationTableDTO.setSublimitName(objSublimitFun);
					pedValidationTableDTO.setSublimitAmt(String
							.valueOf(objSublimitFun.getAmount()));
				}
				// Fix for issue 732 ends
			}

			if (pedValidationTableDTO.getSumInsuredRestriction() != null) {
				MastersValue master = masterService
						.getMaster(pedValidationTableDTO
								.getSumInsuredRestriction().getId());
				pedValidationTableDTO.getSumInsuredRestriction().setValue(
						master.getValue());
			}
			List<DiagnosisPED> pedDiagnosisByPEDValidationKey = preauthService
					.getPEDDiagnosisByPEDValidationKey(pedValidationTableDTO
							.getKey());
			List<PedDetailsTableDTO> dtoList = new ArrayList<PedDetailsTableDTO>();
			PedDetailsTableDTO dto = null;
			SelectValue value = null;
			SelectValue exclusionValue = null;
			for (DiagnosisPED diagnosisPED : pedDiagnosisByPEDValidationKey) {
				dto = new PedDetailsTableDTO();
				// Added for disabling the procedure that is coming from
				// preauth.
				dto.setEnableOrDisable(isEnabled);
				dto.setDiagnosisName(pedValidationTableDTO.getDiagnosis());
				dto.setPolicyAgeing(pedValidationTableDTO.getPolicyAgeing());
				dto.setKey(diagnosisPED.getKey());
				dto.setPedCode(diagnosisPED.getPedCode());
				dto.setPedName(diagnosisPED.getPedName());

				if (diagnosisPED.getDiagonsisImpact() != null) {
					value = new SelectValue();
					value.setId(diagnosisPED.getDiagonsisImpact().getKey());
					value.setValue(diagnosisPED.getDiagonsisImpact().getValue());
					dto.setPedExclusionImpactOnDiagnosis(value);
					value =null;
					BeanItemContainer<ExclusionDetails> contaniner = masterService
							.getExclusionDetailsByImpactKey(diagnosisPED
									.getDiagonsisImpact().getKey());
					dto.setExclusionAllDetails(contaniner.getItemIds());
				}

				if (diagnosisPED.getExclusionDetails() != null) {
					exclusionValue = new SelectValue();
					exclusionValue.setId(diagnosisPED.getExclusionDetails()
							.getKey());
					exclusionValue.setValue(diagnosisPED.getExclusionDetails()
							.getExclusion());
					dto.setExclusionDetails(exclusionValue);
				}

				dto.setRemarks(diagnosisPED.getDiagnosisRemarks());
				dtoList.add(dto);
			}
			pedValidationTableDTO.setPedList(dtoList);
			
			if ((preauthDTO.getIsPostHospitalization() || preauthDTO.getIsPreHospApplicable())
					&& !preauthDTO.getHospitalizaionFlag() && ! preauthDTO.getPartialHospitalizaionFlag()) {
				pedValidationTableDTO.setAmountConsideredAmount(0d);
			}
		}

		// TODO: Need to change this behaviour..
		preauthDTO.getPreauthDataExtractionDetails().setDiagnosisTableList(
				newPedValidationTableListDto);

		// preauthDTO.getPreauthMedicalProcessingDetails().setPedValidationTableList(newPedValidationTableListDto);
		
		String autoRestroation = dbCalculationService.getAutoRestroation(preauthDTO.getNewIntimationDTO().getIntimationId());
		preauthDTO.getPreauthDataExtractionDetails().setAutoRestoration(autoRestroation);
		if(autoRestroation.equalsIgnoreCase(SHAConstants.AUTO_RESTORATION_DONE)) {
			preauthDTO.setIsAutoRestorationDone(true);
		}
		return preauthDTO;
	}*/
	

	private PreauthDTO setReimbursmentTOPreauthDTO(
			ZonalMedicalReviewMapper reimbursementMapper, Claim claimByKey,
			Reimbursement reimbursement, PreauthDTO preauthDTO,
			Boolean isEnabled, String screenName) {
		
		Date mapperStartDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
		
		if (claimByKey != null) {
			setClaimValuesToDTO(preauthDTO, claimByKey);
			NewIntimationDto newIntimationDto = intimationService
					.getIntimationDto(claimByKey.getIntimation());
			//CR R201801323
			newIntimationDto.setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
			
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
				 //IMSSUPPOR-29537 - Null handled
				 if(latestPreauthByClaim != null) {
					 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
				 }
			 }
			
			//Date admissionDate = newIntimationDto.getAdmissionDate();
			try{
//				String duration = dbCalculationService.getPolicyAgeing(admissionDate, newIntimationDto.getPolicy().getPolicyNumber());
				String duration = newIntimationDto.getPolicyYear();
				newIntimationDto.setPolicyAgeing(duration);
			}catch(Exception e){
				
			}
												
			preauthDTO.setNewIntimationDTO(newIntimationDto);
			preauthDTO.setClaimDTO(claimDTO);
			preauthDTO.getClaimDTO().setNewIntimationDto(newIntimationDto);
			
			//added for corpbuff CR by noufel
			if(ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				CoorporateBuffer buffer = null;
				Long mainNo = 0L;
				if(claimByKey.getIntimation().getInsured().getDependentRiskId() !=null){
					mainNo = claimByKey.getIntimation().getInsured().getDependentRiskId();
				}else{
					mainNo = claimByKey.getIntimation().getInsured().getInsuredId();
				}
				 buffer = masterService.getBufferbyMainMemeberID(mainNo,SHAConstants.PRC_BUFFERTYPE_WINTAGE);
				 
				 if(buffer != null){
					 preauthDTO.getPreauthDataExtractionDetails().setIsWintageApplicable(true);
					 if(buffer.getBufferType() != null && buffer.getBufferType().equalsIgnoreCase(SHAConstants.PRC_BUFFERTYPE_WINTAGE)){
						 Map<String, Double> disBufferValues = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_WINTAGE,
								 claimByKey.getIntimation().getPolicy().getPolicyNumber(),claimByKey.getIntimation().getInsured().getKey(),mainNo,claimByKey.getKey());
						 preauthDTO.getPreauthDataExtractionDetails().setBufferType(buffer.getBufferType());	
						 preauthDTO.getPreauthDataExtractionDetails().setBufferTypeValue("Vintage");
						 claimDTO.setIsgmcCorpBuffer(1L);
						 preauthDTO.getPreauthDataExtractionDetails().setCorpBuffer(true);
						 preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAllocatedClaim(disBufferValues.get(SHAConstants.LN_INSURED_ALLOCATE_AMT).intValue());
						 claimDTO.setGmcCorpBufferLmt(disBufferValues.get(SHAConstants.LN_INSURED_ALLOCATE_AMT).intValue());
						 preauthDTO.getPreauthDataExtractionDetails().setCorpBufferUtilizedAmt(disBufferValues.get(SHAConstants.LN_INSURED_UTIL_AMT).intValue());
					 Integer availableBalance =  preauthDTO.getPreauthDataExtractionDetails().getCorpBufferAllocatedClaim() - preauthDTO.getPreauthDataExtractionDetails().getCorpBufferUtilizedAmt();
					 preauthDTO.getPreauthDataExtractionDetails().setEmpBufferAvlBal(availableBalance);
					 if(availableBalance != null && availableBalance ==0){
						 preauthDTO.getPreauthDataExtractionDetails().setIsWinBufUtlzed(true);
					 }
					 } 
				 }
				 if(preauthDTO.getPreauthDataExtractionDetails().getIsWintageApplicable().equals(false)){
					 buffer = masterService.getBufferbyMainMemeberID(mainNo,SHAConstants.PRC_BUFFERTYPE_CB);
					 if(buffer != null){
						 preauthDTO.getPreauthDataExtractionDetails().setIsDiscreationaryAplicable(true);
						 if(buffer.getBufferType() != null && buffer.getBufferType().equalsIgnoreCase(SHAConstants.PRC_BUFFERTYPE_CB)){
							 Map<String, Double> disBufferValues = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_CB,
									 claimByKey.getIntimation().getPolicy().getPolicyNumber(),claimByKey.getIntimation().getInsured().getKey(),mainNo,claimByKey.getKey());
							 preauthDTO.getPreauthDataExtractionDetails().setBufferType(buffer.getBufferType());	
							 preauthDTO.getPreauthDataExtractionDetails().setBufferTypeValue("Discretionary");
							 claimDTO.setIsgmcCorpBuffer(1L);
							 preauthDTO.getPreauthDataExtractionDetails().setCorpBuffer(true);
							 preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAllocatedClaim(disBufferValues.get(SHAConstants.LN_INSURED_ALLOCATE_AMT).intValue());
							 claimDTO.setGmcCorpBufferLmt(disBufferValues.get(SHAConstants.LN_INSURED_ALLOCATE_AMT).intValue());
							 preauthDTO.getPreauthDataExtractionDetails().setCorpBufferUtilizedAmt(disBufferValues.get(SHAConstants.LN_INSURED_UTIL_AMT).intValue());
							 Integer availableBalance =  preauthDTO.getPreauthDataExtractionDetails().getCorpBufferAllocatedClaim() - preauthDTO.getPreauthDataExtractionDetails().getCorpBufferUtilizedAmt();
							 preauthDTO.getPreauthDataExtractionDetails().setEmpBufferAvlBal(availableBalance);
							 if(availableBalance != null && availableBalance ==0){
								 preauthDTO.getPreauthDataExtractionDetails().setIsDisBufUtlzed(true);
							 }
						 }
					 }
				 }else if(preauthDTO.getPreauthDataExtractionDetails().getIsWintageApplicable().equals(true)
						 && preauthDTO.getPreauthDataExtractionDetails().getIsWinBufUtlzed().equals(true)){
					 buffer = masterService.getBufferbyMainMemeberID(mainNo,SHAConstants.PRC_BUFFERTYPE_CB);
					 if(buffer != null){
						 preauthDTO.getPreauthDataExtractionDetails().setIsDiscreationaryAplicable(true);
						 if(buffer.getBufferType() != null && buffer.getBufferType().equalsIgnoreCase(SHAConstants.PRC_BUFFERTYPE_CB)){
							 Map<String, Double> disBufferValues = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_CB,
									 claimByKey.getIntimation().getPolicy().getPolicyNumber(),claimByKey.getIntimation().getInsured().getKey(),mainNo,claimByKey.getKey());
							 preauthDTO.getPreauthDataExtractionDetails().setBufferType(buffer.getBufferType());	
							 preauthDTO.getPreauthDataExtractionDetails().setBufferTypeValue("Discretionary");
							 claimDTO.setIsgmcCorpBuffer(1L);
							 preauthDTO.getPreauthDataExtractionDetails().setCorpBuffer(true);
							 preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAllocatedClaim(disBufferValues.get(SHAConstants.LN_INSURED_ALLOCATE_AMT).intValue());
							 claimDTO.setGmcCorpBufferLmt(disBufferValues.get(SHAConstants.LN_INSURED_ALLOCATE_AMT).intValue());
							 preauthDTO.getPreauthDataExtractionDetails().setCorpBufferUtilizedAmt(disBufferValues.get(SHAConstants.LN_INSURED_UTIL_AMT).intValue());
							 Integer availableBalance =  preauthDTO.getPreauthDataExtractionDetails().getCorpBufferAllocatedClaim() - preauthDTO.getPreauthDataExtractionDetails().getCorpBufferUtilizedAmt();
							 preauthDTO.getPreauthDataExtractionDetails().setEmpBufferAvlBal(availableBalance);
							 if(availableBalance != null && availableBalance ==0){
								 preauthDTO.getPreauthDataExtractionDetails().setIsDisBufUtlzed(true);
							 }
						 }
					 }
				 }
				 if(preauthDTO.getPreauthDataExtractionDetails().getIsWintageApplicable().equals(false)
						 && (preauthDTO.getPreauthDataExtractionDetails().getIsWinBufUtlzed().equals(false))){
					 buffer = masterService.getBufferbyMainMemeberID(mainNo,SHAConstants.PRC_BUFFERTYPE_NACB);
					 if(buffer != null){
						 if((reimbursement.getDocAcknowLedgement() != null && reimbursement.getDocAcknowLedgement().getDocumentReceivedFromId() != null && reimbursement.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_INSURED)) &&
								 reimbursement.getDocAcknowLedgement().getReconsiderationRequest() != null && 
								 reimbursement.getDocAcknowLedgement().getReconsiderationRequest().equalsIgnoreCase(SHAConstants.YES_FLAG)){
						 Map<String, Double> disBufferValues = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_NACB,
								 claimByKey.getIntimation().getPolicy().getPolicyNumber(),claimByKey.getIntimation().getInsured().getKey(),mainNo,claimByKey.getKey());
						 preauthDTO.getPreauthDataExtractionDetails().setBufferType(buffer.getBufferType());	
						 preauthDTO.getPreauthDataExtractionDetails().setBufferTypeValue("NACB");
						 claimDTO.setIsgmcCorpBuffer(1L);
						 preauthDTO.getPreauthDataExtractionDetails().setCorpBuffer(true);
						 preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAllocatedClaim(disBufferValues.get(SHAConstants.LN_INSURED_ALLOCATE_AMT).intValue());
						 claimDTO.setGmcCorpBufferLmt(disBufferValues.get(SHAConstants.LN_INSURED_ALLOCATE_AMT).intValue());
						 preauthDTO.getPreauthDataExtractionDetails().setCorpBufferUtilizedAmt(disBufferValues.get(SHAConstants.LN_INSURED_UTIL_AMT).intValue());
						 if(reimbursement.getNacBufferUtilAmt() != null){
							 preauthDTO.getPreauthDataExtractionDetails().setNacBufferUtilizedAmount(reimbursement.getNacBufferUtilAmt());
						 }
						 Integer availableBalance =  preauthDTO.getPreauthDataExtractionDetails().getCorpBufferAllocatedClaim() - preauthDTO.getPreauthDataExtractionDetails().getCorpBufferUtilizedAmt();
						 preauthDTO.getPreauthDataExtractionDetails().setEmpBufferAvlBal(availableBalance);
						 List<RODBillDetails> billEntryDetails = ackDocReceivedService.getBillEntryDetails(reimbursement.getParentKey());
						 if(billEntryDetails != null && !billEntryDetails.isEmpty()){
							 Double nonPayableAmt = 0d;
							 Double deductibleAmt = 0d;
							 for (RODBillDetails rodBillDetails : billEntryDetails) {
								 nonPayableAmt += rodBillDetails.getNonPayableAmount() != null ?  rodBillDetails.getNonPayableAmount() : 0d;
								 deductibleAmt += rodBillDetails.getDeductibleAmount() != null ?  rodBillDetails.getDeductibleAmount() : 0d;
							 }
							 preauthDTO.getPreauthDataExtractionDetails().setNonPayableAmt(nonPayableAmt.intValue());
							 preauthDTO.getPreauthDataExtractionDetails().setDeductibleAmt(deductibleAmt.intValue());
						 }
					 }
				 }
				 }
				 
			}
		}
		
		Date mapperEndDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
		
		log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));
		
		
		preauthDTO.setKey(reimbursement.getKey());
		//String policyNumber = preauthDTO.getPolicyDto().getPolicyNumber();
		//if(screenName != null && (!SHAConstants.BILLING.equalsIgnoreCase(screenName) && !SHAConstants.FINANCIAL.equalsIgnoreCase(screenName)) ) {
			//Policy byPolicyNumber = policyService.getByPolicyNumber(policyNumber);
			//List<ViewTmpIntimation> intimationKeys = intimationService.getIntimationByPolicyKey(byPolicyNumber.getKey());
			
			
			//mapperStartDate = new Date();
			//log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR GETTING PREVIOUS CLAIM DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
			
			
			/*List<ViewTmpClaim> previousclaimsList = new ArrayList<ViewTmpClaim>();
//			List<ViewTmpClaim> claimsByPolicyNumber = claimService
//					.getViewTmpClaimsByPolicyNumber(policyNumber);
			List<ViewTmpClaim> claimsByPolicyNumber = claimService
					.getViewTmpClaimsByIntimationKeys(intimationKeys);
			
			previousclaimsList.addAll(claimsByPolicyNumber);
			
			previousclaimsList = getPreviousClaimForPreviousPolicy(byPolicyNumber.getRenewalPolicyNumber(), previousclaimsList);

//			List<PreviousClaimsTableDTO> previousClaimDTOList = SHAUtils
//					.getPreviousClaims(claimsByPolicyNumber,
//							claimByKey.getClaimId(), pedValidationService,
//							masterService);
			
			List<PreviousClaimsTableDTO> previousClaimDTOList = preauthService
					.getPreviousClaims(previousclaimsList,
							claimByKey.getClaimId());

			// List<PreviousClaimsTableDTO> previousClaimDTOList = new
			// PreviousClaimMapper().getPreviousClaimDTOList(claimsByPolicyNumber);

			preauthDTO.setPreviousClaimsList(previousClaimDTOList);*/
			
			//mapperEndDate = new Date();
			//log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR GETTING PREVIOUS CLAIM DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
			
			//log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR GETTING PREVIOUS CLAIM DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));

		//}
		

		if (null != reimbursement.getCoordinatorFlag()
				&& reimbursement.getCoordinatorFlag().equalsIgnoreCase("y")) {

			CoordinatorDTO coordinatorDTO = reimbursementMapper
					.getCoordinatorDTO(preauthService
							.findCoordinatorByClaimKey(reimbursement.getClaim()
									.getKey()));
			coordinatorDTO.setRefertoCoordinator(true);
			preauthDTO.setCoordinatorDetails(coordinatorDTO);
		}

		UpdateHospital updateHospitalByReimbursementKey = reimbursementService
				.updateHospitalByReimbursementKey(reimbursement.getKey());
		if (updateHospitalByReimbursementKey != null) {
			ZonalReviewUpdateHospitalDetailsDTO updateHospitalDTO = reimbursementMapper
					.getUpdateHospitalDTO(updateHospitalByReimbursementKey);
			preauthDTO.getPreauthDataExtractionDetails()
					.setUpdateHospitalDetails(updateHospitalDTO);
		}

		PreviousClaimedHistory claimedHistoryByTransactionKey = reimbursementService
				.getClaimedHistoryByTransactionKey(reimbursement.getKey());
		if (claimedHistoryByTransactionKey != null) {
			preauthDTO.getPreauthDataExtractionDetails()
					.setCoveredPreviousClaim(true);
			preauthDTO
					.getPreauthDataExtractionDetails()
					.setOtherClaimDetails(
							reimbursementMapper
									.getClaimedHistoryDTO(claimedHistoryByTransactionKey));

			List<PreviousClaimedHospitalization> claimedHospitalizationByClaimedHistoryKey = reimbursementService
					.getClaimedHospitalizationByClaimedHistoryKey(claimedHistoryByTransactionKey
							.getKey());
			List<OtherClaimDiagnosisDTO> otherClaimDiagnosisDTOList = reimbursementMapper
					.getOtherClaimDiagnosisDTOList(claimedHospitalizationByClaimedHistoryKey);

			preauthDTO.getPreauthDataExtractionDetails()
					.setOtherClaimDetailsList(otherClaimDiagnosisDTOList);
		}

		List<SpecialityDTO> specialityDTOList = reimbursementMapper
				.getSpecialityDTOList(preauthService
						.findSpecialityByClaimKey(reimbursement.getClaim()
								.getKey()));
		for (SpecialityDTO specialityDTO : specialityDTOList) {
			specialityDTO.setEnableOrDisable(isEnabled);
		}
		preauthDTO.getPreauthDataExtractionDetails().setSpecialityList(
				specialityDTOList);


		List<PedValidation> findPedValidationByPreauthKey = preauthService
				.findPedValidationByPreauthKey(reimbursement.getKey());
		
		HashMap<String, String> mapAsList = preauthService.diagnosisNameAndIcdCode(findPedValidationByPreauthKey);
		preauthDTO.setFinalDiagnosis(mapAsList.get("diagnosis"));
		preauthDTO.setIcdCodeDesc(mapAsList.get("icdCode"));
		
		List<DiagnosisDetailsTableDTO> newPedValidationTableListDto = reimbursementMapper
				.getNewPedValidationTableListDto(findPedValidationByPreauthKey);

		/*TreatingDoctor populate CR2019211 */
		List<TreatingDoctorDetails> findQualificationByTransactionKey = preauthService.findTreatingDoctorDetailsByClaimKey(reimbursement.getClaim().getKey());
		if(findQualificationByTransactionKey !=null && !findQualificationByTransactionKey.isEmpty()){
			List<TreatingDoctorDTO> newTreatingDoctorListDto = reimbursementMapper.gettreatingDoctorDTOList(findQualificationByTransactionKey);
			preauthDTO.getPreauthDataExtractionDetails().setTreatingDoctorDTOs(newTreatingDoctorListDto);
		}		
		
		mapperStartDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR DB PROCEDURE CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
		
		// Fix for issue 732 starts.
		DBCalculationService dbCalculationService = new DBCalculationService();

		Double insuredSumInsured = dbCalculationService.getInsuredSumInsured(
				preauthDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), preauthDTO.getPolicyDto()
						.getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		preauthDTO.getPolicyDto().setInsuredSumInsured(insuredSumInsured);

		Double balanceSI = 0d;
		List<Double> copayValue = new ArrayList<Double>();
		if(ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			balanceSI = dbCalculationService.getBalanceSIForGMC(
					preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
					preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
					preauthDTO.getClaimKey());
			copayValue = dbCalculationService.getProductCoPayForGMC(
					preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
		}else{
			balanceSI = dbCalculationService.getBalanceSI(
					preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
					preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
					preauthDTO.getClaimKey(), insuredSumInsured,
					preauthDTO.getNewIntimationDTO().getKey()).get(
					SHAConstants.TOTAL_BALANCE_SI);
			 copayValue = dbCalculationService.getProductCoPay(
					preauthDTO.getNewIntimationDTO().getPolicy().getProduct()
							.getKey(), preauthDTO.getNewIntimationDTO()
							.getInsuredPatient().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId(),preauthDTO.getNewIntimationDTO());
		}

		if (preauthDTO.getNewIntimationDTO() != null) {
			Product product = preauthDTO.getNewIntimationDTO().getPolicy()
					.getProduct();
			if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())) {
				// BalanceSumInsuredDTO claimsOutstandingAmt =
				// dbCalculationService.getClaimsOutstandingAmt(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
				// preauthDTO.getNewIntimationDTO().getIntimationId(),
				// insuredSumInsured);
				preauthDTO.setSettledAmount(0d);
				preauthDTO
						.setDeductibleAmount((preauthDTO.getNewIntimationDTO()
								.getInsuredPatient() != null && preauthDTO
								.getNewIntimationDTO().getInsuredPatient()
								.getDeductibleAmount() != null) ? preauthDTO
								.getNewIntimationDTO().getInsuredPatient()
								.getDeductibleAmount() : 0d);
			}
		}

		preauthDTO.setBalanceSI(balanceSI);
		preauthDTO.setProductCopay(copayValue);

		mapperEndDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR DB PROCEDURE CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
		
		log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR DB PROCEDURE CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));

		
		if (preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()
				.equals(ReferenceTable.SUPER_SURPLUS_INDIVIDUAL)
				|| preauthDTO.getNewIntimationDTO().getPolicy().getProduct()
						.getKey().equals(ReferenceTable.SUPER_SURPLUS_FLOATER)) {
			// preauthDTO.setSpecificProductDeductibleDTO(getPreviousClaimsSuperSurplusTable(claimsByPolicyNumber
			// ,claimByKey.getClaimId(), preauthDTO));
		}

		String policyPlan = preauthDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null ? preauthDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() : "0";
		
		/*if(ReferenceTable.MEDI_CLASSIC_BASIC_PRODUCT_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) || ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {*/
		if(preauthDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
				|| ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
						SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
						|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
						|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
				|| ((SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
						SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
						&& preauthDTO.getNewIntimationDTO().getPolicy().getProductType().getKey().equals(ReferenceTable.INDIVIDUAL_POLICY))) {
			policyPlan = preauthDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() != null ? preauthDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() : "0";
		}
		
		Long siRestrictionKey = newPedValidationTableListDto != null && !newPedValidationTableListDto.isEmpty() && newPedValidationTableListDto.get(0).getSumInsuredRestriction() != null ? newPedValidationTableListDto.get(0).getSumInsuredRestriction().getId() : 0l;
		
		Map<Long, SublimitFunObject> sublimitFunObjMap = getSublimitFunObjMap(
				preauthDTO.getPolicyDto().getProduct().getKey(),
				insuredSumInsured, preauthDTO.getNewIntimationDTO()
						.getInsuredPatient().getInsuredAge(), preauthDTO.getPreauthDataExtractionDetails().getSection(), policyPlan, (preauthDTO.getPreauthDataExtractionDetails().getSectionDetailsDTO().getSubCover() != null ? preauthDTO.getPreauthDataExtractionDetails().getSectionDetailsDTO().getSubCover().getCommonValue() : preauthDTO.getClaimDTO().getClaimSubCoverCode())
						,preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId(),siRestrictionKey);
		
		preauthDTO.setSublimitFunMap(sublimitFunObjMap);
		// Fix for issue 732 ends

		List<ProcedureDTO> procedureMainDTOList = reimbursementMapper
				.getProcedureMainDTOList(preauthService
						.findProcedureByPreauthKey(reimbursement.getKey()));
		for (ProcedureDTO procedureDTO : procedureMainDTOList) {
			procedureDTO.setEnableOrDisable(isEnabled);
			/*
			 * This is for Reverse Allocation . 
			 * if any modifictation between Approved amount or 
			 * Net Approved Amount then we have to set reverse allocation into PreauthDTO.
			 * */
			
			if(procedureDTO.getApprovedAmount() != null && procedureDTO.getNetApprovedAmount() != null && !procedureDTO.getApprovedAmount().equals(procedureDTO.getNetApprovedAmount())) {
				//preauthDTO.setIsReverseAllocation(true);
			}
			if (procedureDTO.getSublimitName() != null) {
				SublimitFunObject objSublimitFun = sublimitFunObjMap
						.get(procedureDTO
								.getSublimitName().getLimitId());
				if(objSublimitFun != null) {
					procedureDTO.setSublimitName(objSublimitFun);
					procedureDTO.setSublimitDesc(objSublimitFun.getDescription());
					procedureDTO.setSublimitAmount(String.valueOf(objSublimitFun.getAmount().intValue()));
				}
			}
			if (preauthDTO.getIsPostHospitalization()
					&& !preauthDTO.getHospitalizaionFlag()) {
				procedureDTO.setAmountConsideredAmount(0d);
				procedureDTO.setCopayAmount(0d);
				procedureDTO.setNetAmount(0d);
				procedureDTO.setApprovedAmount(0d);
				procedureDTO.setIsAmbChargeApplicable(false);
				procedureDTO.setAmbulanceCharge(0);
				procedureDTO.setAmtWithAmbulanceCharge(0);
			}

		}

		preauthDTO.getPreauthMedicalProcessingDetails()
				.setProcedureExclusionCheckTableList(procedureMainDTOList);
		Boolean icdMpavAlilable = false;
		String hospIcdMapFlag = "";
		for (DiagnosisDetailsTableDTO pedValidationTableDTO : newPedValidationTableListDto) {
			pedValidationTableDTO.setEnableOrDisable(isEnabled);
			/*
			 * This is for Reverse Allocation . 
			 * if any modifictation between Approved amount or 
			 * Net Approved Amount then we have to set reverse allocation into PreauthDTO.
			 * */
			
			if(pedValidationTableDTO.getApprovedAmount() != null && pedValidationTableDTO.getNetApprovedAmount() != null && !pedValidationTableDTO.getApprovedAmount().equals(pedValidationTableDTO.getNetApprovedAmount())) {
				//preauthDTO.setIsReverseAllocation(true);
			}
			if (pedValidationTableDTO.getDiagnosisName() != null) {
				String diagnosis = masterService
						.getDiagnosis(pedValidationTableDTO.getDiagnosisName()
								.getId());
				pedValidationTableDTO.setDiagnosis(diagnosis);
				pedValidationTableDTO.getDiagnosisName().setValue(diagnosis);
				if (preauthDTO.getIsPostHospitalization()
						&& !preauthDTO.getHospitalizaionFlag()) {
					pedValidationTableDTO.setAmountConsideredAmount(0d);
					pedValidationTableDTO.setCopayAmount(0d);
					pedValidationTableDTO.setNetAmount(0d);
					pedValidationTableDTO.setApprovedAmount(0d);
					pedValidationTableDTO.setIsAmbChargeApplicable(false);
					pedValidationTableDTO.setAmbulanceCharge(0);
					pedValidationTableDTO.setAmtWithAmbulanceCharge(0);
				}
			}

			if (pedValidationTableDTO.getSublimitName() != null) {
				// Fix for issue 732 starts.
				SublimitFunObject objSublimitFun = sublimitFunObjMap
						.get(pedValidationTableDTO.getSublimitName()
								.getLimitId());
				// ClaimLimit limit =
				// claimService.getClaimLimitByKey(pedValidationTableDTO.getSublimitName().getLimitId());
				if (objSublimitFun != null) {
					pedValidationTableDTO.setOldSublimitName(objSublimitFun);
					pedValidationTableDTO.setSublimitName(objSublimitFun);
					pedValidationTableDTO.setSublimitAmt(String
							.valueOf(objSublimitFun.getAmount()));
				}
				// Fix for issue 732 ends
			}
			
			if(pedValidationTableDTO.getIcdCode() != null){
				SelectValue icdValues = masterService.getIcdDescriptionKey(pedValidationTableDTO.getIcdCode().getId());
				if(icdValues != null) {
					pedValidationTableDTO.getIcdCode().setValue(icdValues.getValue());
					pedValidationTableDTO.getIcdCode().setCommonValue(icdValues.getCommonValue());
				}	
				
				/*if(preauthDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalCode() != null) {
					
					hospIcdMapFlag = dBCalculationService.getHospIcdMappingAvailable(preauthDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalCode(), pedValidationTableDTO.getIcdCode().getId());
					
					if((SHAConstants.YES_FLAG).equalsIgnoreCase(hospIcdMapFlag)) {
						icdMpavAlilable = true;
					}
				}*/
			}

			if (pedValidationTableDTO.getSumInsuredRestriction() != null) {
				MastersValue master = masterService
						.getMaster(pedValidationTableDTO
								.getSumInsuredRestriction().getId());
				pedValidationTableDTO.getSumInsuredRestriction().setValue(
						master.getValue());
			}
			List<DiagnosisPED> pedDiagnosisByPEDValidationKey = preauthService
					.getPEDDiagnosisByPEDValidationKey(pedValidationTableDTO
							.getKey());
			List<PedDetailsTableDTO> dtoList = new ArrayList<PedDetailsTableDTO>();
			PedDetailsTableDTO dto = null;
			SelectValue value = null;
			SelectValue exclusionValue = null;
			for (DiagnosisPED diagnosisPED : pedDiagnosisByPEDValidationKey) {
				dto = new PedDetailsTableDTO();
				// Added for disabling the procedure that is coming from
				// preauth.
				dto.setEnableOrDisable(isEnabled);
				dto.setDiagnosisName(pedValidationTableDTO.getDiagnosis());
				dto.setPolicyAgeing(pedValidationTableDTO.getPolicyAgeing());
				dto.setKey(diagnosisPED.getKey());
				dto.setPedCode(diagnosisPED.getPedCode());
				dto.setPedName(diagnosisPED.getPedName());

				if (diagnosisPED.getDiagonsisImpact() != null) {
					value = new SelectValue();
					value.setId(diagnosisPED.getDiagonsisImpact().getKey());
					value.setValue(diagnosisPED.getDiagonsisImpact().getValue());
					dto.setPedExclusionImpactOnDiagnosis(value);
					BeanItemContainer<ExclusionDetails> contaniner = masterService
							.getExclusionDetailsByImpactKey(diagnosisPED
									.getDiagonsisImpact().getKey());
					dto.setExclusionAllDetails(contaniner.getItemIds());
				}

				if (diagnosisPED.getExclusionDetails() != null) {
					exclusionValue = new SelectValue();
					exclusionValue.setId(diagnosisPED.getExclusionDetails()
							.getKey());
					exclusionValue.setValue(diagnosisPED.getExclusionDetails()
							.getExclusion());
					dto.setExclusionDetails(exclusionValue);
				}

				dto.setRemarks(diagnosisPED.getDiagnosisRemarks());
				dtoList.add(dto);
			}
			pedValidationTableDTO.setPedList(dtoList);
			
			if ((preauthDTO.getIsPostHospitalization() || preauthDTO.getIsPreHospApplicable())
					&& !preauthDTO.getHospitalizaionFlag() && ! preauthDTO.getPartialHospitalizaionFlag()) {
				pedValidationTableDTO.setAmountConsideredAmount(0d);
			}
		}
		//added for 
		//added for modern sublimit CR
		List<DiagnosisDetailsTableDTO> diagnosisDetailsTableDTOList = newPedValidationTableListDto;
		List<ProcedureDTO> procedureDetailsTableDTOList = procedureMainDTOList;
		Object icdCodeList[] = new Object[diagnosisDetailsTableDTOList.size()];
		Object modernSublimitDiagSelected[] =  new Object[diagnosisDetailsTableDTOList.size()];;
		Object modernSublimitProcSelected[] =  new Object[procedureDetailsTableDTOList.size()];;
		for (int i= 0; i < diagnosisDetailsTableDTOList.size() ; i++ ) {
			DiagnosisDetailsTableDTO diagnosisDetailsTableDTO = diagnosisDetailsTableDTOList.get(i);
			if( diagnosisDetailsTableDTO.getSublimitName() != null &&  diagnosisDetailsTableDTO.getSublimitName().getLimitId() != null){
			modernSublimitDiagSelected[i] = diagnosisDetailsTableDTO.getSublimitName().getLimitId();
			}
			
			if(ReferenceTable.STAR_CARDIAC_CARE_PLATIANUM.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				if(null != preauthDTO.getPreauthDataExtractionDetails().getSection() && null != preauthDTO.getPreauthDataExtractionDetails().getSection().getId()
						&& (ReferenceTable.POL_SECTION_2.equals(preauthDTO.getPreauthDataExtractionDetails().getSection().getId()))){
					if( diagnosisDetailsTableDTO.getSublimitName() != null &&  diagnosisDetailsTableDTO.getSublimitName().getLimitId() != null
							&& ReferenceTable.getMasClaimLimitSublimitKeysProd().containsKey(diagnosisDetailsTableDTO.getSublimitName().getLimitId())){
						preauthDTO.setIsBalSIForSublimitCardicSelected(true);
					}else {
						preauthDTO.setIsBalSIForSublimitCardicSelected(false);
					}
				}
			}
		}
		if(procedureDetailsTableDTOList != null && !procedureDetailsTableDTOList.isEmpty()){
		for (int i= 0; i < procedureDetailsTableDTOList.size() ; i++ ) {
			ProcedureDTO procedureDetailsTableDTO = procedureDetailsTableDTOList.get(i);
			if( procedureDetailsTableDTO != null && procedureDetailsTableDTO.getSublimitName() != null &&  procedureDetailsTableDTO.getSublimitName().getLimitId() != null){
			modernSublimitProcSelected[i] = procedureDetailsTableDTO.getSublimitName().getLimitId();
			}
		}	
		}
		 Object modernSublimitSelected[] =preauthService.concatenate(modernSublimitDiagSelected,modernSublimitProcSelected); 
		 if(modernSublimitSelected != null){
				String modernSublimitFlag = dbCalculationService.getModernSublimitFlag(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), modernSublimitSelected);
				if(modernSublimitFlag != null && modernSublimitFlag.equalsIgnoreCase(SHAConstants.YES_FLAG))
				{
					preauthDTO.setIsModernSublimitSelected(true);
					Double modernBalanceSI = dbCalculationService.getBalanceSIForModernSublimit(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getClaimKey(),preauthDTO.getKey()).get(SHAConstants.TOTAL_BALANCE_SI);;
					preauthDTO.setBalanceSI(modernBalanceSI);
					if(modernBalanceSI != null && modernBalanceSI <= 0d){
					preauthDTO.setIsModernSublimitSIExhaust(true);
					}
				}else{
					preauthDTO.setIsModernSublimitSelected(false);
				}
		 }
		 if(preauthDTO.getIsBalSIForSublimitCardicSelected()){
			 balanceSI = dbCalculationService.getBalanceSIForCardicCarePlatRemb(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getClaimKey(),preauthDTO.getKey()).get(SHAConstants.TOTAL_BALANCE_SI);;
			 preauthDTO.setBalanceSI(balanceSI);
		 }
		//CR2019056
		if((ReferenceTable.STAR_CRITICARE_OTHER_BANKS_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
				||!ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()))
						&& preauthDTO.getClaimDTO().getClaimType() != null
						&& ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY.equals(preauthDTO.getClaimDTO().getClaimType().getId())) {
			
			if(icdMpavAlilable) {
				preauthDTO.setHospIcdMappingAlertFlag(hospIcdMapFlag);
			}
			
			/*String multiClaimAvailFlag = dBCalculationService.getAnyClaimsAvailable(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
					preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getKey());
			preauthDTO.setMulticlaimAvailFlag(multiClaimAvailFlag);*/
			
			String invPendingFlag = dBCalculationService.getInvPending(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
					preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getKey());
			preauthDTO.setInvPendingFlag(invPendingFlag);
			
		}
		
		

		// TODO: Need to change this behaviour..
		preauthDTO.getPreauthDataExtractionDetails().setDiagnosisTableList(
				newPedValidationTableListDto);

		// preauthDTO.getPreauthMedicalProcessingDetails().setPedValidationTableList(newPedValidationTableListDto);
		
		Map<String, Object> autoRestroation = dbCalculationService.getAutoRestroation(preauthDTO.getNewIntimationDTO().getIntimationId());
		preauthDTO.getPreauthDataExtractionDetails().setAutoRestoration(String.valueOf(autoRestroation.get(SHAConstants.AUTO_RESTORATION_CHK)));
		preauthDTO.getPreauthDataExtractionDetails().setRestorationCount(Integer.parseInt(autoRestroation.get(SHAConstants.AUTO_RESTORATION_COUNT).toString()));
		if(preauthDTO.getPreauthDataExtractionDetails().getAutoRestoration().equalsIgnoreCase(SHAConstants.AUTO_RESTORATION_DONE)) {
			preauthDTO.setIsAutoRestorationDone(true);
		}
		/*ImplantDetails populate GLX2020057 */
		List<ImplantDetails> findImplantDetailsByclaimKey = preauthService.findImplantDetailsByClaimKey(reimbursement.getClaim().getKey());
		if(findImplantDetailsByclaimKey !=null && !findImplantDetailsByclaimKey.isEmpty()){
			List<ImplantDetailsDTO> implantDetailsDTOs = reimbursementMapper.getimplantDetailsDTOList(findImplantDetailsByclaimKey);
			preauthDTO.getPreauthDataExtractionDetails().setImplantDetailsDTOs(implantDetailsDTOs);
		}
		

		//added for GMC 

		if(ReferenceTable.STAR_GMC_PRODUCT_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) || ReferenceTable.STAR_GMC_NBFC_PRODUCT_KEY.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			Double sumInsured = dbCalculationService.getInsuredSumInsuredForGMC(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getPolicy().getSectionCode());
			MasRoomRentLimit prorataValue = intimationService.getMasRoomRentLimitbySuminsured(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),sumInsured);
			
			preauthDTO.setIccuProportionalDeductionFlg(false);
			preauthDTO.setOtProportionalDeductionFlg(false);
			preauthDTO.setProfFeesProportionalDeductionFlg(false);
			preauthDTO.setMedicineProportionalDeductionFlg(false);
			preauthDTO.setAmbulanceProportionalDeductionFlg(false);
			preauthDTO.setOtherPackProportionalDeductionFlg(false);
			preauthDTO.setOthersProportionalDeductionFlg(false);
			preauthDTO.setInvestigationProportionalDeductionFlg(false);
			preauthDTO.setaNHProportionalDeductionFlg(false);
			preauthDTO.setCompositeProportionalDeductionFlg(false);
			preauthDTO.setMisWithHosProportionalDeductionFlg(false);
			preauthDTO.setMisWithoutHosProportionalDeductionFlg(false);
			preauthDTO.setProcedureProportionalDeductionFlg(false);
			
			if(prorataValue != null) {
				List<ClaimAmountDetails> findClaimAmountDetailsByPreauthKey = new ArrayList<ClaimAmountDetails>();
				if(claimByKey.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)){
					Reimbursement hospitalizationRod = reimbursementService.getReimbursementByKey(preauthDTO.getKey());
					if(hospitalizationRod != null && hospitalizationRod.getDocAcknowLedgement() != null && hospitalizationRod.getDocAcknowLedgement().getHospitalisationFlag() != null
							&& hospitalizationRod.getDocAcknowLedgement().getHospitalisationFlag().equals(SHAConstants.YES_FLAG)){
						preauthDTO.setIsCashlessPropDedSelected(true);
					Preauth latestPreauthByClaim = createRodService.getLatestPreauthByClaim(claimByKey.getKey());
					findClaimAmountDetailsByPreauthKey = preauthService
							.findClaimAmountDetailsByPreauthKey(latestPreauthByClaim.getKey());
					}
				}
//				List<Hospitalisation> hospitalisationList = createRodService.getHospitalisationList(preauthDTO.getKey());
//
//				if(hospitalisationList != null){
//					for (Hospitalisation hospitalisation : hospitalisationList) {
//						if(hospitalisation.getGmcProportionateFlag() != null && hospitalisation.getBillTypeNumber() != null && hospitalisation.getGmcProportionateFlag().equalsIgnoreCase("Y")){
//							if(hospitalisation.getBillTypeNumber().equals(ReferenceTable.OTHERS_WITH_PRORORTIONATE_DEDUCTION)){
//								preauthDTO.setOthersProportionalDeductionFlg(true);
//							}else if(hospitalisation.getBillTypeNumber().equals(ReferenceTable.OT_CHARGES)){
//								preauthDTO.setOtProportionalDeductionFlg(true);
//							}
//							else if(hospitalisation.getBillTypeNumber().equals(ReferenceTable.PROFESSIONAL_CHARGES)){
//								preauthDTO.setProfFeesProportionalDeductionFlg(true);
//							}else if(hospitalisation.getBillTypeNumber().equals(ReferenceTable.ANH_PACKAGES)){
//								preauthDTO.setaNHProportionalDeductionFlg(true);	
//							}else if(hospitalisation.getBillTypeNumber().equals(ReferenceTable.COMPOSITE_PACKAGES)){
//								preauthDTO.setCompositeProportionalDeductionFlg(true);
//							}else if(hospitalisation.getBillTypeNumber().equals(ReferenceTable.OTHER_PACKAGES)){
//								preauthDTO.setOtherPackProportionalDeductionFlg(true);
//							}else if(hospitalisation.getBillTypeNumber().equals(ReferenceTable.PROCEDURES)){
//								preauthDTO.setProcedureProportionalDeductionFlg(true);
//							}else if(hospitalisation.getBillTypeNumber().equals(ReferenceTable.MISC_WITHIN_HOSPITAL)){
//								preauthDTO.setMisWithHosProportionalDeductionFlg(true);
//							}else if(hospitalisation.getBillTypeNumber().equals(ReferenceTable.MISC_OUTSIDE_HOSPITAL)){
//								preauthDTO.setMisWithoutHosProportionalDeductionFlg(true);
//							}
//						}
//					}
//				}else 
					if(findClaimAmountDetailsByPreauthKey != null && !findClaimAmountDetailsByPreauthKey.isEmpty() && preauthDTO.getIsCashlessPropDedSelected()){
					for (ClaimAmountDetails claimedAmountDetails : findClaimAmountDetailsByPreauthKey) {
						if(claimedAmountDetails.getBenefitId() != null && claimedAmountDetails.getBenefitChargesFlag() != null && claimedAmountDetails.getBenefitChargesFlag().equalsIgnoreCase("Y")){
							if(claimedAmountDetails.getBenefitId().equals(19l) && claimedAmountDetails.getSequenceNumber() == null){
								preauthDTO.setOthersProportionalDeductionChecked(true);
							}else if(claimedAmountDetails.getBenefitId().equals(10l)){
								preauthDTO.setOtProportionalDeductionChecked(true);
							}
							else if(claimedAmountDetails.getBenefitId().equals(11l)){
								preauthDTO.setProfFeesProportionalDeductionChecked(true);
							}else if(claimedAmountDetails.getBenefitId().equals(16l)){
								preauthDTO.setaNHProportionalDeductionChecked(true);	
							}else if(claimedAmountDetails.getBenefitId().equals(17l)){
								preauthDTO.setCompositeProportionalDeductionChecked(true);
							}else if(claimedAmountDetails.getBenefitId().equals(18l)){
								preauthDTO.setOtherPackProportionalDeductionChecked(true);
							}
						}
					}
				}
				else if(prorataValue != null && prorataValue.getCharges() != null && (prorataValue.getProportionateFlag()).equalsIgnoreCase("Y")){

					if(prorataValue.getCharges() != null && !prorataValue.getCharges().isEmpty())
					{
						String [] chargesList = (prorataValue.getCharges()).split(",");

						for(String charges : chargesList)
						{
							if(charges.equals("All Charges"))
							{
								preauthDTO.setIccuProportionalDeductionFlg(true);
								preauthDTO.setOtProportionalDeductionFlg(true);
								preauthDTO.setProfFeesProportionalDeductionFlg(true);
								preauthDTO.setOtherPackProportionalDeductionFlg(true);
								preauthDTO.setOthersProportionalDeductionFlg(true);
								preauthDTO.setaNHProportionalDeductionFlg(true);
								preauthDTO.setCompositeProportionalDeductionFlg(true);
								preauthDTO.setMisWithHosProportionalDeductionFlg(true);
								preauthDTO.setMisWithoutHosProportionalDeductionFlg(true);
								preauthDTO.setProcedureProportionalDeductionFlg(true);
							}

							if(charges.equals("ICCU charges"))
							{
								preauthDTO.setIccuProportionalDeductionFlg(true);
							}

							if(charges.equals("OT Charges"))
							{
								preauthDTO.setOtProportionalDeductionFlg(true);
							}

							if(charges.equals("Professional"))
							{
								preauthDTO.setProfFeesProportionalDeductionFlg(true);
							}

							if(charges.equals("Miscellaneou"))
							{
								preauthDTO.setMisWithoutHosProportionalDeductionFlg(true);
								preauthDTO.setMisWithHosProportionalDeductionFlg(true);
							}
							if(charges.equals("Package"))
							{
								preauthDTO.setOtherPackProportionalDeductionFlg(true);
								preauthDTO.setaNHProportionalDeductionFlg(true);
								preauthDTO.setCompositeProportionalDeductionFlg(true);
							}
							if(charges.equals("Procedure"))
							{
								preauthDTO.setProcedureProportionalDeductionFlg(true);	
							}
							if( charges.equals("Others"))
							{
								preauthDTO.setOthersProportionalDeductionFlg(true);
							}

						}
					}
				}
			}
		}
		 //code added for CR glx2020167 by noufel
		if(preauthDTO.getNewIntimationDTO().getPolicy().getTopupPolicyNo() != null && 
				!preauthDTO.getNewIntimationDTO().getPolicy().getTopupPolicyNo().isEmpty()){
			Policy isHCpolicy	= createRodService.getByPolicyNumber(preauthDTO.getNewIntimationDTO().getPolicy().getTopupPolicyNo());
		if(isHCpolicy != null){
			if(isHCpolicy.getProduct().getCode().equalsIgnoreCase(SHAConstants.HOSPITAL_CASH_POLICY)){
				preauthDTO.setIsHcTopupPolicyAvail(true);
			}
		}
		}
		return preauthDTO;
	}

	/*private SublimitFunObject getSublimitFunctionObj(ClaimLimit limit) {
		SublimitFunObject obj = new SublimitFunObject();
		obj.setLimitId(limit.getKey());
		obj.setAmount(Double.valueOf(limit.getMaxPerClaimAmount()));
		obj.setName(limit.getLimitName());
		obj.setDescription(limit.getLimitDescription());
		return obj;
	}*/

	/**
	 * Method to load SublimitFunObject via procedure call from DB.
	 * */
	private Map<Long, SublimitFunObject> getSublimitFunObjMap(Long productKey,
			Double insuredSumInsured, Double insuredAge, SelectValue section, String plan, String sectionCode,Long policyKey,Long insuredKey,Long siRestrictionKey) {
		DBCalculationService dbCalculationService = new DBCalculationService();
		Map<Long, SublimitFunObject> sublimitFunMap = new HashMap<Long, SublimitFunObject>();
		List<SublimitFunObject> sublimitList = null;
		if(ReferenceTable.getGMCProductList().containsKey(productKey)){
			sublimitList = dbCalculationService
					.getClaimedAmountDetailsForSectionForGMC(policyKey, insuredSumInsured,
							insuredAge,section != null ? section.getId() : 0l,plan, sectionCode);
		}else{
			
			sublimitList = dbCalculationService
					.getClaimedAmountDetailsForSection(productKey, insuredSumInsured, siRestrictionKey,
							insuredAge,section != null ? section.getId() : 0l,plan, sectionCode,insuredKey);
		}
		
		
		if (null != sublimitList && !sublimitList.isEmpty()) {
			for (SublimitFunObject sublimitFunObj : sublimitList) {
				sublimitFunMap.put(sublimitFunObj.getLimitId(), sublimitFunObj);
			}
		}
		return sublimitFunMap;

	}

	protected void showHospitalWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_HOSPITAL) final ParameterDTO parameters) {

		SearchAcknowledgeHospitalCommunicationTableDTO hospitalFormDto = (SearchAcknowledgeHospitalCommunicationTableDTO) parameters
				.getPrimaryParameter();

		Preauth preauthList = preauthService
				.getPreauthListByKey(hospitalFormDto.getKey());
		String diagnosisForPreauthByKey = "";
		if(preauthList != null ) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauthList.getKey());
			
		}
		hospitalFormDto.setDiagnosis(diagnosisForPreauthByKey);
		//Boolean isValidClaimForHosp = true;
		/*if(null != preauthList)
		{
			Claim claimByKey = claimService.getClaimByKey(preauthList.getClaim().getKey());	
			if(null != claimByKey)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
				{
					isValidClaimForHosp = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
		}*/
	/*	if(isValidClaimForHosp)
		{*/
			NewIntimationDto intimationDto = intimationService
					.getIntimationDto(preauthList.getIntimation());
			// Status
			// status=preauthService.getStatusByPreauth(preauthList.getStatus());
			Intimation intimationList = intimationService
					.getIntimationByKey(preauthList.getIntimation().getKey());
			Long hospitalId = intimationList.getHospital();
			Hospitals hospital = hospitalService.getHospitalById(hospitalId);
	
			HospitalAcknowledgeDTO hospitalDto = acknowledgeMapper
					.getHospitalDetailsDto(hospital);
			//HospitalAcknowledgeDTO claimDetails = acknowledgeMapper
			//		.getClaimDetailsDto(preauthList.getClaim());
			HospitalAcknowledgeDTO preauthDetails = acknowledgeMapper
					.getPreauthDetailsDto(preauthList);
			// HospitalAcknowledgeDTO
			// statusDetails=AcknowledgeMapper.getStatusDetailsDto(status);
	
			hospitalDto.setClaimedAmount(preauthList.getClaim().getClaimedAmount());
			hospitalDto.setApprovedAmount(preauthDetails.getApprovedAmount());
			hospitalDto.setDenialRemarks(preauthDetails.getDenialRemarks());
			hospitalDto.setClaimStatus(preauthList.getClaim().getStatus().getProcessValue());
			hospitalDto.setIntimationNumber(intimationList.getIntimationId());
			// hospitalDto.setClaim(preauthList.getClaim());
			hospitalDto.setPreauth(preauthList);
			hospitalDto.setPolicy(preauthList.getPolicy());
			hospitalDto.setIntimation(preauthList.getIntimation());
			hospitalFormDto.setClaimNo(preauthList.getClaim().getClaimId());
			if (null != intimationList.getRoomCategory()) {
				hospitalDto.setRoomCategory(intimationList.getRoomCategory()
						.getValue());
			}
	
			Claim claim = preauthList.getClaim();
	
			ClaimDto claimDto = new ClaimDto();
			 claimDto =  ClaimMapper.getInstance().getClaimDto(claim);
			claimDto.setClaimId(claim.getClaimId());
			MastersValue currency = claim.getCurrencyId();
			SelectValue currencyId = new SelectValue();
			currencyId.setId(currency.getKey());
			currencyId.setValue(currency.getValue());
	
			claimDto.setCurrencyId(currencyId);
	
			/*
			 * view.setHospitalView(HospitalView.class, hospitalDto,
			 * hospitalFormDto.getKey());
			 */
			
			NewIntimationDto newIntimationDto = null;
			//Claim claimByKey = preauth.getClaim();
			ClaimDto claimDTO = null;
			
			if (claim != null) {
				newIntimationDto = intimationService.getIntimationDto(claim
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claim);
				claimDTO.setNewIntimationDto(newIntimationDto);
				
			}
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(hospitalFormDto.getUsername());
			
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ACKNOWLEDGE_HOSPITAL_COMMUNICATION);
			
			hospitalFormDto.setRrcDTO(rrcDTO);
			view.setHospitalView(HospitalView.class, hospitalDto, hospitalFormDto,
					intimationDto, claimDto);
		//}
	}

	protected void showRejection(
			@Observes @CDIEvent(MenuPresenter.PROCESS_REJECTION) final ParameterDTO parameters) {
		SearchProcessRejectionTableDTO searchDto = (SearchProcessRejectionTableDTO) parameters
				.getPrimaryParameter();

		Preauth preauth = preauthService
				.getPreauthListByIntimationKey(searchDto.getKey());
		
		NewIntimationDto newIntimationDto = null;
		Claim claimByKey = null;
		if(preauth != null){
			claimByKey = preauth.getClaim();
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
		}else{
			claimByKey = claimService.getClaimforIntimation(searchDto.getKey());
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
		}
		searchDto.setIntimationDTO(newIntimationDto);
		ClaimDto claimDTO = null;
		Boolean isValidClaim = true;
		
	
		if (claimByKey != null) {
			
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
			{
				isValidClaim = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
			else
			{
				
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				claimDTO.setNewIntimationDto(newIntimationDto);
			}
			
		}
		if(isValidClaim)
		{
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(searchDto.getUsername());
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_REJECTION);
			
			searchDto.setRrcDTO(rrcDTO);
	
			
			
			if (preauth != null) {
				searchDto.setIsPremedical(true);
			}
			
			claimByKey = claimService.getClaimforIntimation(searchDto.getKey());
			NewIntimationDto newIntimationDTO = intimationService
					.getIntimationDto(claimByKey.getIntimation());
			searchDto.getPreAuthDto().setNewIntimationDTO(newIntimationDTO);
			
			if(newIntimationDTO != null && newIntimationDTO.getPolicy().getGmcPolicyType() != null){
				setClaimValuesToDTO(searchDto.getPreAuthDto(), claimByKey);
			}
			
			// R1045
			searchDto.getPreAuthDto().setCrmFlagged(claimByKey.getCrcFlag());
			searchDto.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			searchDto.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			searchDto.setCrmFlagged(claimByKey.getCrcFlag());
			
			searchDto.getPreAuthDto().setVipCustomer(claimByKey.getIsVipCustomer());
			searchDto.getPreAuthDto().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
	
			view.setRejectionView(ProcessRejectionWizard.class, searchDto);
		}
	}

	protected void showFileUpload(
			@Observes @CDIEvent(MenuPresenter.FILE_UPLOAD_TABLE) final ParameterDTO parameters) {
		SearchProcessTranslationTableDTO tableDTO = (SearchProcessTranslationTableDTO) parameters
		.getPrimaryParameter();
		
		Intimation intimation=intimationService.getIntimationByNo(tableDTO.getIntimationNo());
		
		NewIntimationDto newIntimationDto=intimationService.getIntimationDto(intimation);
		
		if(null != tableDTO.getKey())
		{
		Preauth preauthDetails = preauthService.getPreauthById(tableDTO.getKey());
		String diagnosisForPreauthByKey = "";
		if(preauthDetails != null ) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauthDetails.getKey());
			
		}
		tableDTO.setDiagnosis(diagnosisForPreauthByKey);
		
		Claim claimByKey = preauthDetails.getClaim();
		ClaimDto claimDTO = null;
		
		if (claimByKey != null) {
		/*	newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());*/
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setPreauthKey(tableDTO.getKey());
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(tableDTO.getUsername());

		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_COORDINATOR_REPLY);
		rrcDTO.setRequestedStageId(tableDTO.getStageId());
		tableDTO.setRrcDTO(rrcDTO);
		/*view.setFileUploadTableView(FileUploadView.class,
				(SearchProcessTranslationTableDTO) parameters
						.getPrimaryParameter());*/
		}
		else if (null != tableDTO.getRodKey())
		{
			/*Intimation intimation=intimationService.getIntimationByNo(tableDTO.getIntimationNo());
			
			NewIntimationDto newIntimationDto=intimationService.getIntimationDto(intimation);*/
			
			//Preauth preauthDetails=preauthService.getPreauthById(tableDTO.getKey());
			Reimbursement reimbursement = ackDocReceivedService.getReimbursement(tableDTO.getRodKey());
			
			String diagnosisForPreauthByKey = "";
			if(reimbursement != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
				
			}
			tableDTO.setDiagnosis(diagnosisForPreauthByKey);

			
			Claim claimByKey = reimbursement.getClaim();
			ClaimDto claimDTO = null;
			
			if (claimByKey != null) {
			/*	newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());*/
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				claimDTO.setNewIntimationDto(newIntimationDto);
				
			}
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setPreauthKey(tableDTO.getKey());
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDTO.getUsername());
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_COORDINATOR_REPLY_REIMBURSEMENT);
			rrcDTO.setRequestedStageId(tableDTO.getStageId());
			tableDTO.setRrcDTO(rrcDTO);
		}
		view.setFileUploadTableView(FileUploadView.class,
				tableDTO);
	}

	protected void showUploadTranslated(
			@Observes @CDIEvent(MenuPresenter.UPLOAD_TRANSLATED_DOCUMENT_REIMBURSEMENT) final ParameterDTO parameters) {
		
		
		SearchProcessTranslationTableDTO tableDTO = (SearchProcessTranslationTableDTO) parameters
		.getPrimaryParameter();
		
		Intimation intimation=intimationService.getIntimationByNo(tableDTO.getIntimationNo());
		
		NewIntimationDto newIntimationDto=intimationService.getIntimationDto(intimation);
		
		//Preauth preauthDetails=preauthService.getPreauthById(tableDTO.getKey());
		Reimbursement reimbursement = ackDocReceivedService.getReimbursement(tableDTO.getRodKey());
		
		String diagnosisForPreauthByKey = "";
		if(reimbursement != null ) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
			
		}
		tableDTO.setDiagnosis(diagnosisForPreauthByKey);

		
		Claim claimByKey = reimbursement.getClaim();
		ClaimDto claimDTO = null;
		
		if (claimByKey != null) {
		/*	newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());*/
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setPreauthKey(tableDTO.getKey());
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(tableDTO.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_COORDINATOR_REPLY_REIMBURSEMENT);
		rrcDTO.setRequestedStageId(tableDTO.getStageId());
		tableDTO.setRrcDTO(rrcDTO);
		
		
		/*view.setFileUploadTranslatedView(UploadTranslatedDocumentView.class,
				(SearchProcessTranslationTableDTO) parameters
						.getPrimaryParameter());*/
		view.setFileUploadTranslatedView(UploadTranslatedDocumentView.class,
				tableDTO);
	}

	protected void fieldVisitProcess(
			@Observes @CDIEvent(MenuPresenter.PROCESS_FIELD_VISIT) final ParameterDTO parameters) {
		
		NewIntimationDto newIntimationDto = null;
		ClaimDto claimDTO = null;
		Intimation intimation = null;
		//List<ViewFVRDTO> fvrDTOList = null;
		SearchFieldVisitTableDTO searchTableDto = (SearchFieldVisitTableDTO) parameters
				.getPrimaryParameter();
		FieldVisitDTO fieldVisitDto = fieldVisitSerivice
				.getDetailsByKey(searchTableDto.getKey());
		if (fieldVisitDto != null) {
			List<FieldVisitRequest> fieldVisitRequestList = fieldVisitSerivice
					.getFieldVisitRequestByKey(fieldVisitDto.getKey());
			if (!fieldVisitRequestList.isEmpty()) {
				Claim claim = claimService
						.getClaimByClaimKey(fieldVisitRequestList.get(0)
								.getClaim().getKey());
				intimation = intimationService.getIntimationByKey(claim
						.getIntimation().getKey());
				newIntimationDto = intimationService
						.getIntimationDto(intimation);
				claimMapper.getAllMapValues();
				claimDTO = claimMapper.getClaimDto(claim);
				
				Reimbursement reimbursement = reimbursementService.getLatestActiveROD(claim.getKey());
				if(reimbursement==null){
					Preauth preauth= preauthService.getLatestPreauthByClaim(claim.getKey());
					
					String diagnosisForPreauthByKey = "";
					if(preauth != null ) {
						diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
						
					}
					searchTableDto.setDiagnosis(diagnosisForPreauthByKey);
				}else{
					String diagnosisForPreauthByKey = "";
					if(reimbursement != null ) {
						diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
						
					}
					searchTableDto.setDiagnosis(diagnosisForPreauthByKey);
				}
				
				searchTableDto.setRodKey(reimbursement.getKey());
			}
		}
		
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(searchTableDto.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		
		//HumanTask humanTask = searchTableDto.getHumanTask();
		/*if(null != humanTask)
		{
			rrcDTO.setHumanTask(humanTask);
		}*/
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.FIELD_VISIT);
		searchTableDto.setRrcDTO(rrcDTO);		
		
		/*
		view.setFieldVisitView(FieldVisitPageView.class,
				(SearchFieldVisitTableDTO) parameters.getPrimaryParameter());*/
		view.setFieldVisitView(FieldVisitPageView.class,
				searchTableDto);
	}
	
	protected void reAssignFieldVisitProcess(
			@Observes @CDIEvent(MenuPresenter.RE_ASSIGN_PROCESS_FIELD_VISIT) final ParameterDTO parameters) {
		
		NewIntimationDto newIntimationDto = null;
		ClaimDto claimDTO = null;
		Intimation intimation = null;
		//List<ViewFVRDTO> fvrDTOList = null;
		SearchReAssignFieldVisitTableDTO searchTableDto = (SearchReAssignFieldVisitTableDTO) parameters
				.getPrimaryParameter();
		FieldVisitDTO fieldVisitDto = fieldVisitSerivice
				.getDetailsByKey(searchTableDto.getKey());
		if (fieldVisitDto != null) {
			List<FieldVisitRequest> fieldVisitRequestList = fieldVisitSerivice
					.getFieldVisitRequestByKey(fieldVisitDto.getKey());
			if (!fieldVisitRequestList.isEmpty()) {
				Claim claim = claimService
						.getClaimByClaimKey(fieldVisitRequestList.get(0)
								.getClaim().getKey());
				intimation = intimationService.getIntimationByKey(claim
						.getIntimation().getKey());
				newIntimationDto = intimationService
						.getIntimationDto(intimation);
				claimMapper.getAllMapValues();
				claimDTO = claimMapper.getClaimDto(claim);
				
				Reimbursement reimbursement = reimbursementService.getLatestActiveROD(claim.getKey());
				if(reimbursement==null){
					Preauth preauth= preauthService.getLatestPreauthByClaim(claim.getKey());
					
					String diagnosisForPreauthByKey = "";
					if(preauth != null ) {
						diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
						
					}
					searchTableDto.setDiagnosis(diagnosisForPreauthByKey);
				}else{
					String diagnosisForPreauthByKey = "";
					if(reimbursement != null ) {
						diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
						
					}
					searchTableDto.setDiagnosis(diagnosisForPreauthByKey);
				}
			}
		}
		
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(searchTableDto.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		
		//HumanTask humanTask = searchTableDto.getHumanTask();
		/*if(null != humanTask)
		{
			rrcDTO.setHumanTask(humanTask);
		}*/
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.FIELD_VISIT);
		searchTableDto.setRrcDTO(rrcDTO);
		/*
		view.setFieldVisitView(FieldVisitPageView.class,
				(SearchFieldVisitTableDTO) parameters.getPrimaryParameter());*/
		view.setReAssignFieldVisitView(ReAssignFieldVisitView.class,
				searchTableDto);
	}

	protected void showEnhanceWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_ENHANCEMENT_WIZARD) final ParameterDTO parameters) {
		view.setPreauthWizardView(PreauthWizard.class,
				(PreauthDTO) parameters.getPrimaryParameter(),
				(Boolean) parameters.getSecondaryParameter(0, Boolean.class));
	}
//	Commented the below Cashless Screen
//	protected void showEnhancementView(
//			@Observes @CDIEvent(MenuItemBean.PROCESS_ENHANCEMENT) final ParameterDTO parameters) {
//
//		BeanItemContainer<SelectValue> selectValueContainerForIntimationSource = masterService
//				.getSelectValueContainer(ReferenceTable.INTIMATION_SOURCE);
////		BeanItemContainer<SelectValue> selectValueContainerForNetworkHospType = masterService
////				.getSelectValueContainer(ReferenceTable.NETWORK_HOSPITAL_TYPE);
//		
//		BeanItemContainer<SelectValue> selectValueContainerForNetworkHospType = masterService
//				.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
//		
//		
//		BeanItemContainer<SelectValue> selectValueContainerForTreatmentType = masterService
//				.getSelectValueContainer(ReferenceTable.TREATMENT_MANAGEMENT);
////		BeanItemContainer<SelectValue> selectValueContainerForType = masterService
////				.getType(ReferenceTable.PROCESS_ENHANCEMENT_TYPE);
//		
//		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getStageList();
//		
//		BeanItemContainer<SelectValue> specialityContainer = preauthService.getSpecialistTypeList();
//		
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
//				.getTmpCpuCodes();
//		
//		view.setViewG(SearchEnhancementView.class, true,
//				selectValueContainerForIntimationSource,
//				selectValueContainerForNetworkHospType,
//				selectValueContainerForTreatmentType,
//				selectValueContainerForType,specialityContainer,selectValueContainerForCPUCode, SHAConstants.PROCESS_ENHANCEMENT);
//	}
	
//	Commented the below Cashless Screen
//	protected void showPreauthAutoAllocationView(
//			@Observes @CDIEvent(MenuItemBean.PROCESS_PREAUTH_AUTO_ALLOCATION) final ParameterDTO parameters) {
//		
//		view.setViewG(SearchPreauthAutoAllocationView.class, true, SHAConstants.PROCESS_PREAUTH_AUTO_ALLOCATION);
//		
//	}
	
	protected void showProcessRRCRequest(
			@Observes @CDIEvent(MenuItemBean.PROCESS_RRC_REQUEST) final ParameterDTO parameters) {

		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodeList();
		BeanItemContainer<SelectValue> selectValueForRRCRequestType = masterService
				.getMasterValueByReference(ReferenceTable.RRC_REQUEST_TYPE);
		

		view.setProcessRRCRequestSearch(SearchProcessRRCRequestView.class, true,
				selectValueContainerForCPUCode,selectValueForRRCRequestType);
	}
	
	protected void showProcessRRCRequestDetailsPage(
			@Observes @CDIEvent(MenuPresenter.SHOW_PROCESS_RRC_REQUEST_DETAILS) final ParameterDTO parameters) {
		
		SearchProcessRRCRequestTableDTO tableDTO = (SearchProcessRRCRequestTableDTO) parameters.getPrimaryParameter();
		
		Reimbursement reimbursementObjectByKey = null;
		Claim claimByKey = null;
		if(null != tableDTO.getRodKey())
		{
			reimbursementObjectByKey = rodService
				.getReimbursementObjectByKey(tableDTO.getRodKey());
			claimByKey = reimbursementObjectByKey.getClaim();
		}
		else if(null != tableDTO.getClaimKey())
		{
			claimByKey = claimService.getClaimByClaimKey(tableDTO.getClaimKey());
			
		}
		/*PreauthDTO preauthDTO = mapper
				.getReimbursementDTO(reimbursementObjectByKey);*/
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setRrcRequestKey(tableDTO.getKey());
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			setClaimValuesToRRCDTO(rrcDTO, claimByKey);
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			// newIntimationDto.getPolicy().getProduct().getAutoRestoration()
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setClaimDTO(claimDTO);
		}
		
		Double insuredSumInsured = 0d;

		if(ReferenceTable.getGMCProductList().containsKey(rrcDTO.getPolicyDto().getProduct().getKey())){
			insuredSumInsured = calcService.getInsuredSumInsuredForGMC(rrcDTO
					.getPolicyDto().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey(),claimByKey.getIntimation().getPolicy().getSectionCode());
		}else if((ReferenceTable.getGPAProducts().containsKey(rrcDTO.getPolicyDto().getProduct().getKey()))){
			insuredSumInsured = calcService.getGPAInsuredSumInsured(rrcDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId().toString(), rrcDTO.getPolicyDto().getKey());
		}
		else{
			insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO
						.getPolicyDto().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		}
		
		Integer sumInsured = preauthService.getSumInsured(rrcDTO
				.getPolicyDto().getProduct().getKey(),
				(insuredSumInsured == 0) ? (rrcDTO.getPolicyDto()
						.getTotalSumInsured() != null ? rrcDTO.getPolicyDto()
								.getTotalSumInsured() : 0d) : insuredSumInsured);
		
		rrcDTO.setStrUserName(tableDTO.getUsername());
		rrcDTO.setStrPassword(tableDTO.getPassword());
		//rrcDTO.setRrcHumanTask(tableDTO.getRrcHumanTask());
		
		if(null != sumInsured)
			rrcDTO.setSumInsured(Double.valueOf(sumInsured));
		loadRRCRequestValuesForProcessing(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_RRC_REQUEST);
		Long rrcRequestKey = tableDTO.getKey();
	//	rrcDTO.setEmployeeEffortList(getEmployeeDetailsFromRRCDetails(rrcRequestKey));
		QuantumReductionDetailsDTO quantumReductionDetails = getQuantumReductionDetailsDTOFromRRCRequest(rrcRequestKey);
		if(null != claimByKey)
			rrcDTO.setQuantumReductionListForClaimWiseRRCHistory(getQuantumReductionDetailsDTOListForClaimWiseRRCHistory(claimByKey.getKey()));
		rrcDTO.setQuantumReductionDetailsDTO(quantumReductionDetails);
		rrcDTO.setRrcRequestNo(quantumReductionDetails.getRequestNo());
		
		rrcDTO.setSavedAmount(null != quantumReductionDetails.getSavedAmount() ? String.valueOf(quantumReductionDetails.getSavedAmount()): null);
		rrcDTO.setSignificantClinicalInformationValue(quantumReductionDetails.getSignificantClinicalInformationValue());
		rrcDTO.setDataSourcesMap(getContainerDataSources(newIntimationDto,rrcDTO));
		rrcDTO.setRrcCategoryList(reviewRRCRequestService.getCategoryDetailsFromRRCCategory(rrcDTO.getRrcRequestKey()));
		rrcDTO.setDbOutArray(tableDTO.getDbOutArray());
		view.setProcessRRCRequestWizard(
				ProcessRRCRequestDataExtractionWizard.class, rrcDTO);
		//preauthDTO.getRrcDTO().setQuantumReductionDetailsDTOList(getQuantumReductionDetailsList(rrcRequestKey));
		/*processRRCRequestDataExtractionPage.initPresenter(SHAConstants.PROCESS_RRC_REQUEST);
		processRRCRequestDataExtractionPage.init(preauthDTO,getContainerDataSources());*/
		
	}
	
	protected void showReviewRRCRequest(
			@Observes @CDIEvent(MenuItemBean.REVIEW_RRC_REQUEST) final ParameterDTO parameters) {

		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodeList();
		BeanItemContainer<SelectValue> selectValueForRRCRequestType = masterService
				.getMasterValueByReference(ReferenceTable.RRC_REQUEST_TYPE);
		BeanItemContainer<SelectValue> selectValueForEligibility = masterService
				.getMasterValueByReference(ReferenceTable.RRC_ELIGIBLITY);
		

		view.setReviewRequestRRCSearch(SearchReviewRRCRequestView.class, true,
				selectValueContainerForCPUCode,selectValueForRRCRequestType,selectValueForEligibility);
	}
	
	protected void showReviewRRCRequestDetailsPage(
			@Observes @CDIEvent(MenuPresenter.SHOW_REVIEW_RRC_REQUEST_DETAILS) final ParameterDTO parameters) {
		
		SearchReviewRRCRequestTableDTO tableDTO = (SearchReviewRRCRequestTableDTO) parameters.getPrimaryParameter();
		
		/*Reimbursement reimbursementObjectByKey = rodService
				.getReimbursementObjectByKey(tableDTO.getRodKey());*/
		
		Reimbursement reimbursementObjectByKey = null;
		Claim claimByKey = null;
		if(null != tableDTO.getRodKey())
		{
			reimbursementObjectByKey = rodService
				.getReimbursementObjectByKey(tableDTO.getRodKey());
			claimByKey = reimbursementObjectByKey.getClaim();
		}
		else if(null != tableDTO.getClaimKey())
		{
			claimByKey = claimService.getClaimByClaimKey(tableDTO.getClaimKey());
			
		}
		
		/*PreauthDTO preauthDTO = mapper
				.getReimbursementDTO(reimbursementObjectByKey);*/
		RRCDTO rrcDTO = new RRCDTO();
		
		rrcDTO.setRrcRequestKey(tableDTO.getKey());
		
	//	Claim claimByKey = reimbursementObjectByKey.getClaim();
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			setClaimValuesToRRCDTO(rrcDTO, claimByKey);
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			// newIntimationDto.getPolicy().getProduct().getAutoRestoration()
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setClaimDTO(claimDTO);
		}
		
		Double insuredSumInsured = 0d;
		
		if(ReferenceTable.getGMCProductList().containsKey(rrcDTO.getPolicyDto().getProduct().getKey())){
			insuredSumInsured = calcService.getInsuredSumInsuredForGMC(rrcDTO
					.getPolicyDto().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey(),claimByKey.getIntimation().getPolicy().getSectionCode());
		}else if((ReferenceTable.getGPAProducts().containsKey(rrcDTO.getPolicyDto().getProduct().getKey()))){
			insuredSumInsured = calcService.getGPAInsuredSumInsured(rrcDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId().toString(), rrcDTO.getPolicyDto().getKey());
		}else{
			insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO
						.getPolicyDto().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		}
		Integer sumInsured = preauthService.getSumInsured(rrcDTO
				.getPolicyDto().getProduct().getKey(),
				(insuredSumInsured == 0) ? (rrcDTO.getPolicyDto()
						.getTotalSumInsured() != null ? rrcDTO.getPolicyDto()
								.getTotalSumInsured() : 0d) : insuredSumInsured);
		
		rrcDTO.setStrUserName(tableDTO.getUsername());
		rrcDTO.setStrPassword(tableDTO.getPassword());
	//	rrcDTO.setRrcHumanTask(tableDTO.getRrcHumanTask());
		
		if(null != sumInsured)
			rrcDTO.setSumInsured(Double.valueOf(sumInsured));
		
		loadRRCRequestValuesForProcessing(rrcDTO, insuredSumInsured, SHAConstants.REVIEW_RRC_REQUEST);
		Long rrcRequestKey = tableDTO.getKey();
		//rrcDTO.setEmployeeEffortList(getEmployeeDetailsFromRRCDetails(rrcRequestKey));
		QuantumReductionDetailsDTO quantumReductionDetails = getQuantumReductionDetailsDTOFromRRCRequest(rrcRequestKey);
		
		if(null != claimByKey)
			rrcDTO.setQuantumReductionListForClaimWiseRRCHistory(getQuantumReductionDetailsDTOListForClaimWiseRRCHistory(claimByKey.getKey()));
		rrcDTO.setQuantumReductionDetailsDTO(quantumReductionDetails);
		rrcDTO.setRrcRequestNo(quantumReductionDetails.getRequestNo());
		//rrcDTO.setSavedAmount(null != quantumReductionDetails.getSavedAmount() ? String.valueOf(quantumReductionDetails.getSavedAmount()): null);
		rrcDTO.setSignificantClinicalInformationValue(quantumReductionDetails.getSignificantClinicalInformationValue());
		rrcDTO.setDataSourcesMap(getContainerDataSources(newIntimationDto,rrcDTO));
		rrcDTO.setDbOutArray(tableDTO.getDbOutArray());
		rrcDTO.setSavedAmount(String.valueOf(quantumReductionDetails.getSavedAmount()));
		view.setReviewRRCRequestWizard(
				ReviewRRCRequestDataExtractionWizard.class, rrcDTO);
		//preauthDTO.getRrcDTO().setQuantumReductionDetailsDTOList(getQuantumReductionDetailsList(rrcRequestKey));
		/*processRRCRequestDataExtractionPage.initPresenter(SHAConstants.PROCESS_RRC_REQUEST);
		processRRCRequestDataExtractionPage.init(preauthDTO,getContainerDataSources());*/
		
	}
	
	
	protected void showSearchRRCRequestView(
			@Observes @CDIEvent(MenuPresenter.SHOW_SEARCH_RRC_REQUEST_VIEW) final ParameterDTO parameters) {
		
		SearchRRCRequestTableDTO tableDTO = (SearchRRCRequestTableDTO) parameters.getPrimaryParameter();
		SearchRRCRequestTable searchTable = (SearchRRCRequestTable) parameters.getSecondaryParameter(0, SearchRRCRequestTable.class);
		
		
		Long claimKey = tableDTO.getClaimKey();
		Claim claimByKey = claimService.getClaimByKey(claimKey);
		
		/*ZonalMedicalReviewMapper mapper = new ZonalMedicalReviewMapper();
		Reimbursement reimbursementObjectByKey = rodService
				.getReimbursementObjectByKey(tableDTO.getRodKey());*/
		/*PreauthDTO preauthDTO = mapper
				.getReimbursementDTO(reimbursementObjectByKey);*/
		RRCDTO rrcDTO = new RRCDTO();
		
		rrcDTO.setRrcRequestKey(tableDTO.getKey());
		
		//Claim claimByKey = reimbursementObjectByKey.getClaim();
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			setClaimValuesToRRCDTO(rrcDTO, claimByKey);
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			// newIntimationDto.getPolicy().getProduct().getAutoRestoration()
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setClaimDTO(claimDTO);
		}
		
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO
						.getPolicyDto().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		/*Integer sumInsured = preauthService.getSumInsured(rrcDTO
				.getPolicyDto().getProduct().getKey(),
				(insuredSumInsured == 0) ? rrcDTO.getPolicyDto()
						.getTotalSumInsured() : insuredSumInsured);*/
		
	/*	rrcDTO.setStrUserName(tableDTO.getUsername());
		rrcDTO.setStrPassword(tableDTO.getPassword());
		rrcDTO.setRrcHumanTask(tableDTO.getRrcHumanTask());*/
		
		loadRRCRequestValuesForProcessing(rrcDTO, insuredSumInsured, SHAConstants.SEARCH_RRC_REQUEST);
		Long rrcRequestKey = tableDTO.getKey();
	//	rrcDTO.setEmployeeEffortList(getEmployeeDetailsFromRRCDetails(rrcRequestKey));
		QuantumReductionDetailsDTO quantumReductionDetails = getQuantumReductionDetailsDTOFromRRCRequest(rrcRequestKey);
		rrcDTO.setQuantumReductionDetailsDTO(quantumReductionDetails);
		rrcDTO.setRrcRequestNo(quantumReductionDetails.getRequestNo());
		//rrcDTO.setSavedAmount(null != quantumReductionDetails.getSavedAmount() ? String.valueOf(quantumReductionDetails.getSavedAmount()): null);
		rrcDTO.setSignificantClinicalInformationValue(quantumReductionDetails.getSignificantClinicalInformationValue());
		rrcDTO.setSavedAmount(String.valueOf(quantumReductionDetails.getSavedAmount()));
		rrcDTO.setDataSourcesMap(getContainerDataSources(newIntimationDto,rrcDTO));
		searchTable.showSearchRRCRequestView(rrcDTO);
	/*	view.setRRCRequestSearch(
				SearchRRCRequestView.class, rrcDTO);*/
		
		//preauthDTO.getRrcDTO().setQuantumReductionDetailsDTOList(getQuantumReductionDetailsList(rrcRequestKey));
		/*processRRCRequestDataExtractionPage.initPresenter(SHAConstants.PROCESS_RRC_REQUEST);
		processRRCRequestDataExtractionPage.init(preauthDTO,getContainerDataSources());*/
		
	}
	
	
	// Dinesh

	protected void showRRCStatusScreenView(
			@Observes @CDIEvent(MenuPresenter.SHOW_RRC_STATUS_SCREEN_VIEW) final ParameterDTO parameters) {

		SearchRRCStatusTableDTO tableDTO = (SearchRRCStatusTableDTO) parameters
				.getPrimaryParameter();
		SearchRRCStatusTable searchTable = (SearchRRCStatusTable) parameters
				.getSecondaryParameter(0, SearchRRCStatusTable.class);

		Long claimKey = tableDTO.getClaimKey();
		Claim claimByKey = claimService.getClaimByKey(claimKey);

		RRCDTO rrcDTO = new RRCDTO();

		rrcDTO.setRrcRequestKey(tableDTO.getKey());
		
		rrcDTO.setIsRrcStatusScreen(tableDTO.getIsRrcStatusScreen());

		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			setClaimValuesToRRCDTO(rrcDTO, claimByKey);
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			ClaimDto claimDTO = ClaimMapper.getInstance().getClaimDto(
					claimByKey);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setClaimDTO(claimDTO);
		}
		rrcDTO.setStrUserName(tableDTO.getUsername());
		rrcDTO.setStrPassword(tableDTO.getPassword());

		Double insuredSumInsured = calcService.getInsuredSumInsured(rrcDTO
				.getNewIntimationDTO().getInsuredPatient().getInsuredId()
				.toString(), rrcDTO.getPolicyDto().getKey(), rrcDTO
				.getNewIntimationDTO().getInsuredPatient().getLopFlag());

		loadRRCRequestValuesForProcessing(rrcDTO, insuredSumInsured,
				SHAConstants.RRC_STATUS_SCREEN);
		Long rrcRequestKey = tableDTO.getKey();
		QuantumReductionDetailsDTO quantumReductionDetails = getQuantumReductionDetailsDTOFromRRCRequest(rrcRequestKey);
		rrcDTO.setQuantumReductionDetailsDTO(quantumReductionDetails);
		rrcDTO.setRrcRequestNo(quantumReductionDetails.getRequestNo());
		rrcDTO.setSignificantClinicalInformationValue(quantumReductionDetails
				.getSignificantClinicalInformationValue());
		rrcDTO.setDataSourcesMap(getContainerDataSources(newIntimationDto,rrcDTO));
		rrcDTO.setSavedAmount(String.valueOf(quantumReductionDetails.getSavedAmount()));
		searchTable.showRRCStatusScreenView(rrcDTO);

	}
	
	
	protected void showModifyRRCRequestDetailsPage(
			@Observes @CDIEvent(MenuPresenter.SHOW_MODIFY_RRC_REQUEST_DETAILS) final ParameterDTO parameters) {
		
		SearchModifyRRCRequestTableDTO tableDTO = (SearchModifyRRCRequestTableDTO) parameters.getPrimaryParameter();
		
		/*Reimbursement reimbursementObjectByKey = rodService
				.getReimbursementObjectByKey(tableDTO.getRodKey());*/
		
		Reimbursement reimbursementObjectByKey = null;
		Claim claimByKey = null;
		if(null != tableDTO.getRodKey())
		{
			reimbursementObjectByKey = rodService
				.getReimbursementObjectByKey(tableDTO.getRodKey());
			claimByKey = reimbursementObjectByKey.getClaim();
		}
		else if(null != tableDTO.getClaimKey())
		{
			claimByKey = claimService.getClaimByClaimKey(tableDTO.getClaimKey());
			
		}
		
		/*PreauthDTO preauthDTO = mapper
				.getReimbursementDTO(reimbursementObjectByKey);*/
		RRCDTO rrcDTO = new RRCDTO();
		
		rrcDTO.setRrcRequestKey(tableDTO.getKey());
		
		/*Claim claimByKey = reimbursementObjectByKey.getClaim();*/
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			setClaimValuesToRRCDTO(rrcDTO, claimByKey);
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			// newIntimationDto.getPolicy().getProduct().getAutoRestoration()
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setClaimDTO(claimDTO);
		}
		
		Double insuredSumInsured = 0d;
		
		if(ReferenceTable.getGMCProductList().containsKey(rrcDTO.getPolicyDto().getProduct().getKey())){
			insuredSumInsured = calcService.getInsuredSumInsuredForGMC(rrcDTO
					.getPolicyDto().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey(),claimByKey.getIntimation().getPolicy().getSectionCode());
		}else if((ReferenceTable.getGPAProducts().containsKey(rrcDTO.getPolicyDto().getProduct().getKey()))){
			insuredSumInsured = calcService.getGPAInsuredSumInsured(rrcDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId().toString(), rrcDTO.getPolicyDto().getKey());
		}else{
			insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO
							.getPolicyDto().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		}
		
		
		Integer sumInsured = preauthService.getSumInsured(rrcDTO
				.getPolicyDto().getProduct().getKey(),
				(insuredSumInsured == 0) ? (rrcDTO.getPolicyDto()
						.getTotalSumInsured() != null ? rrcDTO.getPolicyDto()
								.getTotalSumInsured() : 0d) : insuredSumInsured);
		
		rrcDTO.setStrUserName(tableDTO.getUsername());
		rrcDTO.setStrPassword(tableDTO.getPassword());
		
		if(null != sumInsured)
			rrcDTO.setSumInsured(Double.valueOf(sumInsured));
		
		
		Long rrcRequestKey = tableDTO.getKey();
	//	rrcDTO.setEmployeeEffortList(getEmployeeDetailsFromRRCDtails(rrcRequestKey));
		QuantumReductionDetailsDTO quantumReductionDetails = getQuantumReductionDetailsDTOFromRRCRequest(rrcRequestKey);
		
		
		if(null != claimByKey)
			rrcDTO.setQuantumReductionListForClaimWiseRRCHistory(getQuantumReductionDetailsDTOListForClaimWiseRRCHistory(claimByKey.getKey()));
		rrcDTO.setQuantumReductionDetailsDTO(quantumReductionDetails);
		rrcDTO.setRrcRequestNo(quantumReductionDetails.getRequestNo());
		rrcDTO.setSignificantClinicalInformationValue(quantumReductionDetails.getSignificantClinicalInformationValue());
		rrcDTO.setDataSourcesMap(getContainerDataSources(newIntimationDto,rrcDTO));
		rrcDTO.setSavedAmount(String.valueOf(quantumReductionDetails.getSavedAmount()));
		loadRRCRequestValuesForProcessing(rrcDTO, insuredSumInsured, SHAConstants.MODIFY_RRC_REQUEST);
		
		view.setModifyRRCRequestWizard(ModifyRRCRequestDataExtractionWizard.class,rrcDTO);
		//preauthDTO.getRrcDTO().setQuantumReductionDetailsDTOList(getQuantumReductionDetailsList(rrcRequestKey));
		/*processRRCRequestDataExtractionPage.initPresenter(SHAConstants.PROCESS_RRC_REQUEST);
		processRRCRequestDataExtractionPage.init(preauthDTO,getContainerDataSources());*/
		
	}
	
	protected void showModifyRRCRequest(
			@Observes @CDIEvent(MenuItemBean.MODIFY_RRC_REQUEST) final ParameterDTO parameters) {

		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodeList();
		BeanItemContainer<SelectValue> selectValueForRRCRequestType = masterService
				.getMasterValueByReference(ReferenceTable.RRC_REQUEST_TYPE);
		BeanItemContainer<SelectValue> selectValueForEligibility = masterService
				.getMasterValueByReference(ReferenceTable.RRC_ELIGIBLITY);
		

		view.setModifyRequestRRCSearch(SearchModifyRRCRequestView.class, true,
				selectValueContainerForCPUCode,selectValueForRRCRequestType,selectValueForEligibility);
	}
	
	protected void showSearchRRCRequest(
			@Observes @CDIEvent(MenuItemBean.SEARCH_RRC_REQUEST) final ParameterDTO parameters) {

		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodeList();
		BeanItemContainer<SelectValue> selectValueForRRCRequestType = masterService
				.getMasterValueByReference(ReferenceTable.RRC_REQUEST_TYPE);
		BeanItemContainer<SelectValue> selectValueForEligibility = masterService
				.getMasterValueByReference(ReferenceTable.RRC_ELIGIBLITY);
		
		view.setRRCRequestSearch(SearchRRCRequestView.class, true,
				selectValueContainerForCPUCode,selectValueForRRCRequestType,selectValueForEligibility);
	}
	
	//Dinesh
	protected void showRRCStatusScreen(
			@Observes @CDIEvent(MenuItemBean.RRC_STATUS_SCREEN) final ParameterDTO parameters) {

		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodeList();
		BeanItemContainer<SelectValue> selectValueForRRCRequestType = masterService
				.getMasterValueByReference(ReferenceTable.RRC_REQUEST_TYPE);
		BeanItemContainer<SelectValue> selectValueForEligibility = masterService
				.getMasterValueByReference(ReferenceTable.RRC_ELIGIBLITY);
		
		view.setRRCStatusScreen(SearchRRCStatusView.class, true,
				selectValueContainerForCPUCode,selectValueForRRCRequestType,selectValueForEligibility);
	}
	
	private Map<String,Object> getContainerDataSources(NewIntimationDto newIntimationDto,RRCDTO rrcDTO)
	{
		Map<String,Object> containerMap = new WeakHashMap<String,Object>();	
		containerMap.put(SHAConstants.RRC_ELIGIBLITY_CONTAINER, masterService
				.getMasterValueByReference(ReferenceTable.RRC_ELIGIBLITY));
		containerMap.put(SHAConstants.RRC_CATEGORY_CONTAINER,  masterService
				.getshortOrderMasterValueByShortNO(ReferenceTable.RRC_CATEGORY));
		containerMap.put(SHAConstants.RRC_CREDIT_TYPE_CONTAINER, masterService
				.getMasterValueByReferenceForRRCEmployeeCredit(ReferenceTable.RRC_CREDIT_TYPE));
		containerMap.put(SHAConstants.SIGNIFICANT_CLINICAL_INFORMATION,
				masterService.getMasterValueByReference(ReferenceTable.SIGNIFICANT_CLINICAL_INFORMATION));
		containerMap.put(SHAConstants.EMPLOYEE_TYPE_OF_CONTRIBUTOR,  masterService
				.getMasterValueByReference(ReferenceTable.RRC_CONTRIBUTOR_TYPE));
		/*containerMap.put(SHAConstants.EMPLOYEE_NAME_LIST,masterService.getEmployeeNameFromMaster());
		containerMap.put(SHAConstants.EMPLOYEE_NAME_ID_MAP , masterService.loadEmployeeNameData());
		containerMap.put(SHAConstants.EMPLOYEE_ID, masterService.getEmployeeLoginNameContainer());*/
		containerMap.put(SHAConstants.EMPLOYEE_NAME_LIST,masterService.getEmployeeNameIncludingInactiveEmployees());
		containerMap.put(SHAConstants.EMPLOYEE_NAME_ID_MAP , masterService.loadEmployeeNameDataIncludingInactiveEmployees());
		/*containerMap.put(SHAConstants.EMPLOYEE_ID, masterService.getEmployeeLoginNameContainerIncludingInactiveEmployees());*/
		containerMap.put(SHAConstants.EMPLOYEE_ID, masterService.getEmployeesContainerIncludingInactiveEmployees(newIntimationDto,rrcDTO));
		//
		
		return containerMap;
	}
	
/*	private List<ExtraEmployeeEffortDTO> getEmployeeDetailsFromRRCDetails(Long rrcRequestKey)
	{
		List<ExtraEmployeeEffortDTO> listExtraEmployeeDTO = processRRCRequestService.getEmployeeDetailsFromRRCDetails(rrcRequestKey);
		//List<ExtraEmployeeEffortDTO> listExtraEmployeeDTO = masterService.getEmployeeDetailsFromRRCDetails(rrcRequestKey);
		return listExtraEmployeeDTO;
	}*/
	
	/*private List<BillReceivedReportTableDTO> getBillReceivedStatus(Long Key)
	{
		List<BillReceivedReportTableDTO> listBillReceivedDTO = billReceivedReportService.getBillReceivedStatus(Key);
		return listBillReceivedDTO;
	}
	*/
	
	
	/**
	 * As of now, only one row can be added in quantum reduction details table. Hence list of dto's
	 * is not required. Hence below method is not used. But in future if requirement changes from
	 * single dto to list, then the below method can be used.
	 * */
	/*private List<QuantumReductionDetailsDTO> getQuantumReductionDetailsList(Long rrcRequestKey)
	{
		List<QuantumReductionDetailsDTO> listExtraEmployeeDTO = processRRCRequestService.getQuantumReductionDataFromRRCRequest(rrcRequestKey);
		return listExtraEmployeeDTO;
	}*/

	private QuantumReductionDetailsDTO getQuantumReductionDetailsDTOFromRRCRequest(Long rrcRequestKey)
	{
		 QuantumReductionDetailsDTO quantumReductionDetailsDTO = processRRCRequestService.getQuantumReductionDetailsDTOFromRRCRequest(rrcRequestKey);
		 SelectValue selectValue = new SelectValue();	
		 if(quantumReductionDetailsDTO.getAnhFlag() !=null ){
			 if(quantumReductionDetailsDTO.getAnhFlag().equals(ReferenceTable.YES_FLAG)){
				 selectValue.setId(ReferenceTable.COMMONMASTER_YES);
				 selectValue.setValue(SHAConstants.YES);
				 quantumReductionDetailsDTO.setAnh(selectValue);
			 }else if(quantumReductionDetailsDTO.getAnhFlag().equals(ReferenceTable.NO_FLAG)){
				 selectValue.setId(ReferenceTable.COMMONMASTER_NO);
				 selectValue.setValue(SHAConstants.No);
				 quantumReductionDetailsDTO.setAnh(selectValue);
			 }	
		 }
		 return quantumReductionDetailsDTO;
	}
	/**
	 * This method is added specifically for claim wise RRC history page.
	 * Hence the view page name is suffixed with method.
	 * */
	
	private List<QuantumReductionDetailsDTO> getQuantumReductionDetailsDTOListForClaimWiseRRCHistory(Long claimKey)
	{
		List<QuantumReductionDetailsDTO> quantumReductionDetailsDTO = processRRCRequestService.getQuantumReductionDetailsList(claimKey);
		 return quantumReductionDetailsDTO;
	}
	

	// Method added for Acknowledge document received menu testing.
	protected void showAcknowledgeDocumentReceivedWizard(
			@Observes @CDIEvent(MenuItemBean.ACKNOWLEDGE_DOCUMENT_RECEIVED) final ParameterDTO parameters) {

		SearchAcknowledgementDocumentReceiverTableDTO tableDTO = (SearchAcknowledgementDocumentReceiverTableDTO) parameters
				.getPrimaryParameter();
		Boolean isValidClaimForAck = true;
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
		Long claimKey = tableDTO.getClaimKey();
		Claim claimByKey = claimService.getClaimByKey(claimKey);	
		if(null != claimByKey){
			if (null != claimByKey
					&& null != claimByKey.getStatus()
					&& null != claimByKey.getStatus().getKey()
					&& claimByKey.getStatus().getKey()
							.equals(ReferenceTable.CLAIM_CLOSED_STATUS)) {
				isValidClaimForAck = false;
				view.showErrorPopUp("Selected claim has been closed.Cannot proceed further.");
			}
			if (null != claimByKey.getStage()
					&& claimByKey.getStage().getKey()
							.equals(ReferenceTable.CLAIM_REJECTION_STAGE)
					&& null != claimByKey.getStatus()
					&& claimByKey.getStatus().getKey()
							.equals(ReferenceTable.PROCESS_REJECTED)) {

				List<Preauth> preauthByClaimKey = preauthService
						.getPreauthByClaimKey(claimKey);

				if (preauthByClaimKey != null && !preauthByClaimKey.isEmpty()) {

					// no action.

				} else {
					isValidClaimForAck = false;
					view.showErrorPopUp("Selected claim has been rejected.Cannot proceed further.");
				}

			}

			if ((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey
					.getLegalFlag())) {
				isValidClaimForAck = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
			if (isValidClaimForAck) {
				if ((ReferenceTable.CASHLESS_CLAIM_TYPE_KEY).equals(claimByKey
						.getClaimType().getKey())) {
					Preauth preauth = preauthService
							.getLatestPreauthByClaimForAck(claimByKey.getKey());
					
					
					
					Preauth latestPreauthByClaimForWithdrawReject = preauthService.getLatestPreauthByClaimForWithdrawReject(claimKey);
					if(latestPreauthByClaimForWithdrawReject != null){
						if(latestPreauthByClaimForWithdrawReject != null && latestPreauthByClaimForWithdrawReject.getOtherBenefitFlag() != null && latestPreauthByClaimForWithdrawReject.getOtherBenefitFlag().equalsIgnoreCase("Y")){
							rodDTO.getDocumentDetails().setIsOtherBenefitApplicableInPreauth(true);
						}
						List<OtherBenefitsTableDto> benefitAmountDetailsByCashlessKey = premedicalService.getBenefitAmountDetailsByCashlessKey(latestPreauthByClaimForWithdrawReject.getKey());
						for (OtherBenefitsTableDto otherBenefitsTableDto : benefitAmountDetailsByCashlessKey) {
							if(otherBenefitsTableDto.getBenefitName() != null && otherBenefitsTableDto.getBenefitName().equalsIgnoreCase(SHAConstants.emergencyDomestic)){
								rodDTO.getDocumentDetails().setIsEmergencyMedicalEvacuation(true);
							}else if(otherBenefitsTableDto.getBenefitName() != null && otherBenefitsTableDto.getBenefitName().equalsIgnoreCase(SHAConstants.repatriationOfMortal)){
								rodDTO.getDocumentDetails().setIsRepatriationOfMortal(true);
							}
						}
					}
					
					String diagnosisForPreauthByKey = "";
					if (preauth != null) {
						diagnosisForPreauthByKey = preauthService
								.getDiagnosisForPreauthByKey(preauth.getKey());

					}
					rodDTO.setDiagnosis(diagnosisForPreauthByKey);
					if (null != preauth) {
						Map<Long, Long> validationMap = ReferenceTable
								.getValidationMapForAck();
						Long key = preauth.getStatus().getKey();
						Long value = validationMap.get(key);

						if (null != value) {
							isValidClaimForAck = false;

							if (ReferenceTable.getWithdrawnKeys().containsKey(
									key)) {
								if (null != preauth.getWithdrawReason()) {
									Long withDrawKey = preauth
											.getWithdrawReason().getKey();
									if (withDrawKey
											.equals(ReferenceTable.PATIENT_NOT_ADMITTED_KEY)) {
										/*
										 * The below if condition is added to
										 * check whether the task is pending for
										 * conversion. If an preauth is
										 * withdrawn with patient not admitted
										 * reason, then that record would be
										 * available in convert claim queue
										 * after creating acknowledgement for
										 * first time for this cashless claim.
										 * Again without converting the claim if
										 * the user tries to create another
										 * acknowledgement, then the below
										 * validation will restrict the user
										 * from acknowledgement creation.
										 */

										if ((ackDocReceivedService
												.getDBTaskForPreauth(
														claimByKey
																.getIntimation(),
														SHAConstants.REIM_CONVERSION_PROCESS_CURRENT_QUEUE))) {
											isValidClaimForAck = false;
											view.showErrorPopUp("Claim is pending for conversion. Please convert claim first before creating acknowledgement.");
										} else {
											// isValidClaimForAck = true;
											// rodDTO.setIsConversionAllowed(true);
											isValidClaimForAck = false;
											view.showErrorPopUp("claim can not proceed further, since withdraw reason is that patient not admitted");
										}
									} else {
										view.showErrorPopUp("Claim is pending for conversion. Please convert claim first before creating acknowledgement.");
									}
								}

							}
							/*
							 * else
							 * if(ackDocReceivedService.getConvertClaimTask(
							 * claimByKey)) { view.showErrorPopUp(
							 * "Claim is pending for conversion. Please convert claim first before creating acknowledgement."
							 * ); }
							 */
							else {
								view.showErrorPopUp("Preauth is pending for action. Please act on preauth before creating acknowledgement.");
							}
						} else if ((ackDocReceivedService
								.getDBTaskForPreauth(
										claimByKey.getIntimation(),
										SHAConstants.FLP_SUGGEST_REJECTION_CURRENT_QUEUE))) {
							isValidClaimForAck = false;
							view.showErrorPopUp("Claim is been rejected and pending for approval. Please approve or reject the claim before creating acknowledgement");
						} else if ((ackDocReceivedService.getDBTaskForPreauth(
								claimByKey.getIntimation(),
								SHAConstants.PP_CURRENT_QUEUE))) {
							isValidClaimForAck = false;
							view.showErrorPopUp("Claim is pending in Preauth Queue. Please process the claim in that Queue");
						} else if ((ackDocReceivedService.getDBTaskForPreauth(
								claimByKey.getIntimation(),
								SHAConstants.PE_CURRENT_QUEUE))) {
							isValidClaimForAck = false;
							view.showErrorPopUp("Claim is pending in Preauth Enhancement Queue . Please process the claim in that Queue");
						} else if ((ackDocReceivedService.getDBTaskForPreauth(
								claimByKey.getIntimation(),
								SHAConstants.FLE_CURRENT_QUEUE))) {
							isValidClaimForAck = false;
							view.showErrorPopUp("Claim is pending in First level enhancement Queue. Please process the claim in that Queue");
						} else if ((ackDocReceivedService.getDBTaskForPreauth(
								claimByKey.getIntimation(),
								SHAConstants.QUERY_REPLY_QUEUE))) {
							isValidClaimForAck = false;
							view.showErrorPopUp("Claim is pending in Query Reply queue. Please process the claim in that Queue");
						}
                      //added twice wrongly
//						else if ((ackDocReceivedService
//								.getDBTaskForPreauth(
//										claimByKey.getIntimation(),
//										SHAConstants.REIM_CONVERSION_PROCESS_CURRENT_QUEUE))) {
//							isValidClaimForAck = false;
//							view.showErrorPopUp("Claim is pending for conversion. Please convert claim first before creating acknowledgement.");
//						}

						else if ((ackDocReceivedService
								.getDBTaskForPreauth(
										claimByKey.getIntimation(),
										SHAConstants.REIM_CONVERSION_PROCESS_CURRENT_QUEUE))) {
							isValidClaimForAck = false;
							view.showErrorPopUp("Claim is pending for conversion. Please convert claim first before creating acknowledgement.");
						} else {
							rodDTO.setIsConversionAllowed(ackDocReceivedService
									.isConversionAllowed(preauth));

						}
					}
					/**
					 * This block will be invoked only for rejected claim. Since
					 * while rejecting a claim, no status updation will happen
					 * on claim table. Hence fetching based on claim status will
					 * not help us out. Hence, to validate suggest rejection
					 * case, directly bpm rejection task list is fetched , based
					 * on which we conclude that task is present in Process
					 * Rejection Queue.
					 * */
					// else if(null != claimByKey && null !=
					// claimByKey.getStatus() && null !=
					// claimByKey.getStatus().getKey() &&
					// claimByKey.getStatus().getKey().equals(ReferenceTable.CLAIM_SUGGEST_REJECTION_STATUS))
					else if ((ackDocReceivedService.getDBTaskForPreauth(
							claimByKey.getIntimation(),
							SHAConstants.FLP_SUGGEST_REJECTION_CURRENT_QUEUE))) {
						isValidClaimForAck = false;
						view.showErrorPopUp("Claim is been rejected and pending for approval. Please approve or reject the claim before creating acknowledgement");
					} else if ((ackDocReceivedService.getDBTaskForPreauth(
							claimByKey.getIntimation(),
							SHAConstants.PP_CURRENT_QUEUE))) {
						isValidClaimForAck = false;
						view.showErrorPopUp("Claim is pending in Preauth Queue. Please process the claim in that Queue");
					} else if ((ackDocReceivedService.getDBTaskForPreauth(
							claimByKey.getIntimation(),
							SHAConstants.PE_CURRENT_QUEUE))) {
						isValidClaimForAck = false;
						view.showErrorPopUp("Claim is pending in Preauth Enhancement Queue . Please process the claim in that Queue");
					} else if ((ackDocReceivedService.getDBTaskForPreauth(
							claimByKey.getIntimation(),
							SHAConstants.FLE_CURRENT_QUEUE))) {
						isValidClaimForAck = false;
						view.showErrorPopUp("Claim is pending in First level enhancement Queue. Please process the claim in that Queue");
					} else if ((ackDocReceivedService.getDBTaskForPreauth(
							claimByKey.getIntimation(),
							SHAConstants.QUERY_REPLY_QUEUE))) {
						isValidClaimForAck = false;
						view.showErrorPopUp("Claim is pending in Query Reply queue. Please process the claim in that Queue");
					}

					else if ((ackDocReceivedService.getDBTaskForPreauth(
							claimByKey.getIntimation(),
							SHAConstants.REIM_CONVERSION_PROCESS_CURRENT_QUEUE))) {
						isValidClaimForAck = false;
						view.showErrorPopUp("Claim is pending for conversion. Please convert claim first before creating acknowledgement.");
					}
					else if ((ackDocReceivedService.getDBTaskForPreauth(
							claimByKey.getIntimation(),
							SHAConstants.FLP_CURRENT_QUEUE))) {
						isValidClaimForAck = false;
						view.showErrorPopUp("Claim is pending in First Level Preauth Queue. Please process the claim in that Queue");
					} 
					
                    //added twice wrongly
//					else if ((ackDocReceivedService.getDBTaskForPreauth(
//							claimByKey.getIntimation(),
//							SHAConstants.REIM_CONVERSION_PROCESS_CURRENT_QUEUE))) {
//						isValidClaimForAck = false;
//						view.showErrorPopUp("Claim is pending for conversion. Please convert claim first before creating acknowledgement.");
//					}
					/*
					 * else if() { isValidClaimForAck = false;
					 * view.showErrorPopUp(
					 * "Claim is pending for conversion. Please convert claim first before creating acknowledgement."
					 * ); }
					 */
					else {
						/**
						 * This block is applicable only if claim is registered
						 * and pre auth is null
						 **/
						/*
						 * Boolean value =
						 * acknowledgementDocumentsReceivedService
						 * .getWaitingForPreauthTask(claimByKey); if(value) {
						 * rodDTO.setIsConversionAllowed(value); }
						 */
						rodDTO.setIsConversionAllowed(ackDocReceivedService
								.getDBTaskForPreauth(
										claimByKey.getIntimation(),
										SHAConstants.WAITING_FOR_PREATH_QUEUE));

						if (rodDTO.getIsConversionAllowed()) {
							isValidClaimForAck = false;
							view.showErrorPopUp("Preauth is pending for Action");
						}
						/*
						 * else { Map<Long,Long> valMap =
						 * ReferenceTable.getConversionStatusMap(); Long val =
						 * valMap.get(claimByKey.getStatus().getKey()); if(null
						 * != val) rodDTO.setIsConversionAllowed(true); }
						 */
					}

				}
			}

			if ((ackDocReceivedService.getDBTaskForPreauth(
					claimByKey.getIntimation(),
					SHAConstants.REIM_CONVERSION_PROCESS_CURRENT_QUEUE))) {
				isValidClaimForAck = false;
				view.showErrorPopUp("Claim is pending for conversion. Please convert claim first before creating acknowledgement.");
			}

			if (isValidClaimForAck) {
				Long count = getAckNoCountByClaimKey(claimKey,
						ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED);
				rodDTO.setAcknowledgementNumber(count);
				rodDTO.setAcknowledgementNumber(count);
				ClaimDto claimDTO = null;
				NewIntimationDto newIntimationDto = new NewIntimationDto();
				if (claimByKey != null) {
					newIntimationDto = intimationService
							.getIntimationDto(claimByKey.getIntimation());
					claimDTO = ClaimMapper.getInstance()
							.getClaimDto(claimByKey);
					if (claimDTO.getClaimType() != null
							&& claimDTO
									.getClaimType()
									.getId()
									.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
						Preauth latestPreauthByClaim = preauthService
								.getLatestPreauthByClaim(claimDTO.getKey());
						if (latestPreauthByClaim != null) {
							claimDTO.setCashlessAppAmt(latestPreauthByClaim
									.getTotalApprovalAmount());
						}
						String diagnosisForPreauthByKey = "";
						if (latestPreauthByClaim != null) {
							diagnosisForPreauthByKey = preauthService
									.getDiagnosisForPreauthByKey(latestPreauthByClaim
											.getKey());

						}
						rodDTO.setDiagnosis(diagnosisForPreauthByKey);
					}
					claimDTO.setNewIntimationDto(newIntimationDto);
					rodDTO.setNewIntimationDTO(newIntimationDto);
					rodDTO.setClaimDTO(claimDTO);
				}
				generateAcknowledgeNo(rodDTO);

				Map<String, Integer> productBenefitMap = calcService
						.getProductBenefitFlag(claimByKey.getKey(), claimByKey
								.getIntimation().getPolicy().getProduct()
								.getKey());
				/**
				 * Earlier , pre and post hospitalization was enabled only based
				 * on product conditions in ack , rod level and bill entry
				 * level. But as per mockup 13.7 , this validation needs to be
				 * removed at ack and rod level and should be available only at
				 * FA level. Hence hardcoding the values of pre and post in map
				 * , by which we always enable pre and post for all products at
				 * ACK and ROD level and bil entry level.
				 * */
				productBenefitMap.put("preHospitalizationFlag", 1);
				productBenefitMap.put("postHospitalizationFlag", 1);
				// productBenefitMap.put("LumpSumFlag",1);

				rodDTO.setProductBenefitMap(productBenefitMap);
				rodDTO.getDocumentDetails().setDocumentCheckList(
						setDocumentCheckListTableValues());

				List<ReconsiderRODRequestTableDTO> reconsiderRODRequest = getReconsiderRODRequest(claimByKey);
				List<ReimbursementRejectionDto> rejectionDetails = new ArrayList<ReimbursementRejectionDto>();

				if (reconsiderRODRequest != null
						&& !reconsiderRODRequest.isEmpty()) {
					Long recosiderRodKey = null;
					for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderRODRequest) {

						ReimbursementRejectionDto reimbursementRejectionDto = reimbursementRejectionService.getReimbursementRejectionByKey(reconsiderRODRequestTableDTO.getRodKey());

						if (null != reimbursementRejectionDto
								&& null != reimbursementRejectionDto.getStatusValue()) {
							if ((ReferenceTable.PROCESS_CLAIM_FINANCIAL_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())
									|| (ReferenceTable.PROCESS_CLAIM_REQUEST_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())
									|| (ReferenceTable.PAYMENT_REJECTED).equals(reimbursementRejectionDto.getStatusKey())
									|| (ReferenceTable.CLAIM_APPROVAL_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())) {
								
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(true);
								rejectionDetails.add(reimbursementRejectionDto);
							
							} else {
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
							}
						}
						else {
							reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
						}
						
						Reimbursement reimbursmentObj = reimbursementService.getReimbursementByKey(reconsiderRODRequestTableDTO.getRodKey());
						recosiderRodKey = reconsiderRODRequestTableDTO.getRodKey();
						Boolean isSettled = reimbursementService.isClaimPaymentAvailable(reimbursmentObj.getRodNumber());
						
						if ((isSettled != null && isSettled) || ( null != reimbursmentObj && null != reimbursmentObj.getFinancialCompletedDate()
								&& reimbursmentObj.getFinancialCompletedDate().after(reimbursmentObj.getModifiedDate()))) {
							
							if((ReferenceTable.PROCESS_CLAIM_REQUEST_APPROVE_REJECT_STATUS).equals(reimbursmentObj.getStatus().getKey()) ||
									(ReferenceTable.PROCESS_CLAIM_FINANCIAL_APPROVE_REJECT_STATUS).equals(reimbursmentObj.getStatus().getKey())) {
								reconsiderRODRequestTableDTO.setIsSettledReconsideration(false);
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(true); 
							}else{
								reconsiderRODRequestTableDTO.setIsSettledReconsideration(true);
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
							}
							
							
						}
						
						if((ReferenceTable.PAYMENT_REJECTED).equals(reimbursmentObj.getStatus().getKey()) ||
								(ReferenceTable.PAYMENT_PROCESS_STAGE.equals(reimbursmentObj.getStage().getKey())&&
										ReferenceTable.PAYMENT_PROCESS_REOPENED.equals(reimbursmentObj.getStatus().getKey()))){
							
							reconsiderRODRequestTableDTO.setIsSettledReconsideration(false);
							reconsiderRODRequestTableDTO.setIsRejectReconsidered(true);
						}
						
						MastersValue patientStatus = reimbursmentObj.getPatientStatus();
						if(patientStatus != null) {
							reconsiderRODRequestTableDTO.setPatientStatus(new SelectValue(patientStatus.getKey(), patientStatus.getValue()));
						}
						
						reconsiderRODRequestTableDTO.setLegalHeirName(reimbursmentObj.getNomineeName());
						reconsiderRODRequestTableDTO.setLegalHeirAddr(reimbursmentObj.getNomineeAddr());
					}
					rodDTO.setReconsiderRodRequestList(reconsiderRODRequest);
					rodDTO.setRejectionDetails(rejectionDetails);
					if(recosiderRodKey != null) {
						rodDTO.getNewIntimationDTO().setNomineeList(intimationService.getNomineeDetailsListByTransactionKey(recosiderRodKey));
					}	
				}

				Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
				rodDTO.getPreauthDTO().setIsPolicyValidate(policyValidation);

				rodDTO.setRodQueryDetailsList(getRODQueryDetailsValues(claimByKey));
				
				if(rodDTO.getRodQueryDetailsList() != null && !rodDTO.getRodQueryDetailsList().isEmpty()) {
					rodDTO.getNewIntimationDTO().setNomineeList(intimationService.getNomineeDetailsListByTransactionKey(rodDTO.getRodQueryDetailsList().get(0).getReimbursementKey()));
					
					List<LegalHeir> legalHeirList = masterService.getlegalHeirListByTransactionKey(rodDTO.getRodQueryDetailsList().get(0).getReimbursementKey());
					if(legalHeirList != null && !legalHeirList.isEmpty()) {
						List<LegalHeirDTO> legalHeirDTOList = new ArrayList<LegalHeirDTO>();
						LegalHeirDTO legalHeirDto;
						for (LegalHeir legalHeir : legalHeirList) {
							 legalHeirDto = new LegalHeirDTO(legalHeir);
							 legalHeirDto.setRelationshipContainer(masterService.getRelationshipContainerValues());
							 legalHeirDTOList.add(legalHeirDto);
						}
						rodDTO.getPreauthDTO().setLegalHeirDTOList(legalHeirDTOList);
					}
				}

				rodDTO.setStrUserName(tableDTO.getUsername());
				rodDTO.setStrPassword(tableDTO.getPassword());

				RRCDTO rrcDTO = new RRCDTO();
				rrcDTO.setClaimDto(claimDTO);
				rrcDTO.setNewIntimationDTO(newIntimationDto);
				rrcDTO.setStrUserName(tableDTO.getUsername());

				Double insuredSumInsured = calcService.getInsuredSumInsured(rrcDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId().toString(),
								rrcDTO.getNewIntimationDTO().getPolicy().getKey(), rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
				loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ACKNOWLEDGE_DOC_RECEIVED);
				rodDTO.setRrcDTO(rrcDTO);
				if (null != rrcDTO.getNewIntimationDTO()
						&& null != rrcDTO.getNewIntimationDTO().getPolicy()) {
					rodDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(rrcDTO.getNewIntimationDTO().getPolicy().getKey()));
					rodDTO.setIsPEDInitiatedbtn(rodDTO.getIsPEDInitiated());
				}

				if (rrcDTO.getNewIntimationDTO() != null
						&& rrcDTO.getNewIntimationDTO().getInsuredPatient() != null
						&& rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null) {
					Long claimCount = preauthService.getClaimCount(rrcDTO.getNewIntimationDTO().getPolicy().getKey());
					if (claimCount != null) {
						rodDTO.setClaimCount(claimCount);
					}
				}
				if (null != newIntimationDto
						&& null != newIntimationDto.getPolicy()) {
//					BeanItemContainer<SelectValue> sectionList = masterService.getSectionList(newIntimationDto.getPolicy().getProduct().getKey());
					BeanItemContainer<SelectValue> sectionList = masterService
							.getSectionList(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getKey(),rodDTO.getClaimDTO().getNewIntimationDto().getPolicy());
							
							if(ReferenceTable.getSuperSurplusKeys().containsKey(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getKey())
									&& ((rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan() == null) || (rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan() != null && rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan().equalsIgnoreCase("S")))){
								List<SelectValue> itemIds = sectionList.getItemIds();
								List<SelectValue> filterItem = new ArrayList<SelectValue>();
								for (SelectValue selectValue : itemIds) {
									if(! selectValue.getCommonValue().equals(ReferenceTable.DELVIERY_AND_NEW_BORN_SECTION_CODE)){
										filterItem.add(selectValue);
									}
								}
								sectionList.removeAllItems();
								sectionList.addAll(filterItem);
							}
							rodDTO.setSectionList(sectionList);
							rodDTO.setShouldDisableSection(reimbursementService.isItHavingAnyROD(claimKey));
				}

				rodDTO.setNewIntimationDTO(newIntimationDto);
				if (claimByKey != null) {

					Long hospital = claimByKey.getIntimation().getHospital();
					Hospitals hospitalById = hospitalService.getHospitalById(hospital);
					if (hospitalById != null
							&& hospitalById.getSuspiciousType() != null) {
						rodDTO.setIsSuspicious(hospitalById.getSuspiciousType());
						if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
							rodDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
						}
					}
				}
				
				newIntimationDto.setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
				//IMSSUPPOR-23596
				rodDTO.setIsAlreadyHospitalizationExist(reimbursementService.isPreviousHospAcknowledgment(claimKey));
				
				LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
				legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
				rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirDTO);
				if(claimByKey != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
				{
					PhysicalDocumentVerification isPhyDocPending = intimationService.getPhysicalVerifcationByClaimKey(claimKey);
				if(isPhyDocPending != null && isPhyDocPending.getStatus() != null && (isPhyDocPending.getStatus().getKey().equals(ReferenceTable.PAYMENT_VERIFICATION_PENDING_STATUS)
						|| isPhyDocPending.getStatus().getKey().equals(ReferenceTable.PAYMENT_MAKER_VERIFIED_STATUS))){
					rodDTO.getPreauthDTO().setIsPhysicalVerificationPending(true);
				}else if(isPhyDocPending != null && isPhyDocPending.getStatus() != null && 
						 isPhyDocPending.getStatus().getKey().equals(ReferenceTable.PAYMENT_CHECKER_VERIFIED_STATUS)){
					rodDTO.getPreauthDTO().setIsPhysicalVerificationcompleted(true);
				}else {
					rodDTO.getPreauthDTO().setIsPhysicalVerificationPending(false);
					rodDTO.getPreauthDTO().setIsPhysicalVerificationcompleted(false);
				}
			}
					view.setAcknowledgeDocReceivedWizardView(
						AcknowledgeDocReceivedWizard.class, rodDTO);
			}
		}
	}
	
	
	protected void showPaymentWizard(
			@Observes @CDIEvent(MenuPresenter.PAYMENT_PROCESS_CPU) final ParameterDTO parameters) {

//		SearchAcknowledgementDocumentReceiverTableDTO tableDTO = (SearchAcknowledgementDocumentReceiverTableDTO) parameters
//				.getPrimaryParameter();

		

		view.setPaymentWizardView(
				PaymentProcessCpuPageView.class, new PaymentProcessCpuPageDTO());
	}
	
	

	
	
	/*protected void showReceivedPhysicalDocWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_PHYSICAL_DOCUMENT) final ParameterDTO parameters) {

		PhysicalDocumentReceivedMakerTableDTO tableDTO = (PhysicalDocumentReceivedMakerTableDTO) parameters
				.getPrimaryParameter();
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
		//SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO = new SelectRODtoAddAdditionalDocumentsDTO();

		Long claimKey = tableDTO.getClaimKey();
		Claim claim = claimService.getClaimByKey(claimKey);

		List<Reimbursement> reimbursementList = reimbursementService
				.getReimbursementByClaimKey(claimKey);
		
		//List<Reimbursement> reimbursementList = new ArrayList<Reimbursement>();
		Map<Long, Long> rejectMap = ReferenceTable.REJECT_ROD_KEYS;
		if(null != reimbursementListObj && !reimbursementListObj.isEmpty())
		{
			for (Reimbursement reimbursement : reimbursementListObj) {
				if(null != rejectMap && !rejectMap.isEmpty() && null == rejectMap.get(reimbursement.getStatus().getKey()))
				{
					reimbursementList.add(reimbursement);
				}
			}
		}
		

		Boolean isValidClaimForAck = true;
		if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.BILLING_CURRENT_QUEUE)))
		{
			isValidClaimForAck = false;
			view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
		}
		if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.FA_CURRENT_QUEUE)))
		{
			isValidClaimForAck = false;
			view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
		}
		
		if (tableDTO.getKey() != null) {
			Reimbursement reimbursement = reimbursementService
					.getReimbursementbyRod(tableDTO.getKey());
			
			Boolean isValidClaimForAck = true;
			if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.BILLING_CURRENT_QUEUE)))
			{
				
				isValidClaimForAck = false;
				view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
			}
			if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.FA_CURRENT_QUEUE)))
			{
				isValidClaimForAck = false;
				view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
			}
		
			if(null != reimbursement)
			{
				rodDTO.getDocumentDetails().setDocAcknowledgementKey(
						reimbursement.getDocAcknowLedgement().getKey());
				rodDTO.getDocumentDetails().setDateOfDischarge(reimbursement.getDateOfDischarge());
				rodDTO.getDocumentDetails().setRodKey(reimbursement.getKey());
			}
			
			
			String diagnosisForPreauthByKey = "";
			if(reimbursement != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
				
			}
			rodDTO.setDiagnosis(diagnosisForPreauthByKey);
			
		}

		DocAcknowledgement docAcknowlegement = acknowledgementDocumentsReceivedService
				.getDocAcknowledgment(rodDTO.getDocumentDetails()
						.getDocAcknowledgementKey());

		rodDTO.getDocumentDetails().setAcknowledgementNumber(
				docAcknowlegement.getAcknowledgeNumber());
		rodDTO.getDocumentDetails().setRodKey(tableDTO.getKey());
		
		if(null != docAcknowlegement.getModeOfReceiptId())
		{
			rodDTO.getDocumentDetails().setModeOfReceiptValue(docAcknowlegement.getModeOfReceiptId().getValue());
		}
		
		rodDTO.getDocumentDetails().setAdditionalRemarks(docAcknowlegement.getAdditionalRemarks());

		rodDTO.getDocumentDetails().setAcknowledgmentContactNumber(docAcknowlegement.getInsuredContactNumber());
		rodDTO.getDocumentDetails().setEmailId(docAcknowlegement.getInsuredEmailId());
		
		rodDTO.getDocumentDetails().setHospitalizationFlag(
				docAcknowlegement.getHospitalisationFlag());
		rodDTO.getDocumentDetails().setPreHospitalizationFlag(
				docAcknowlegement.getPreHospitalisationFlag());
		rodDTO.getDocumentDetails().setPostHospitalizationFlag(
				docAcknowlegement.getPostHospitalisationFlag());
		rodDTO.getDocumentDetails().setPartialHospitalizationFlag(
				docAcknowlegement.getPartialHospitalisationFlag());
		
		if(docAcknowlegement.getHospitalizationRepeatFlag() != null){
			rodDTO.getDocumentDetails().setHospitalizationRepeatFlag(docAcknowlegement.getHospitalizationRepeatFlag());	
		}
		
		rodDTO.getDocumentDetails().setLumpSumAmountFlag(
				docAcknowlegement.getLumpsumAmountFlag());
		if (docAcknowlegement.getHospitalizationClaimedAmount() != null) {
			rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(
					docAcknowlegement.getHospitalizationClaimedAmount()
							.toString());
		}

		SelectRODtoAddAdditionalDocumentsMapper selectRODtoAddAdditionalDocumentsMapper = new SelectRODtoAddAdditionalDocumentsMapper();
		List<SelectRODtoAddAdditionalDocumentsDTO> selectRODtoAddAdditionalDocumentsDTOList = selectRODtoAddAdditionalDocumentsMapper
				.getReimbursementDto(reimbursementList);
		
		for (SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO2 : selectRODtoAddAdditionalDocumentsDTOList) {
			if(selectRODtoAddAdditionalDocumentsDTO2 != null && selectRODtoAddAdditionalDocumentsDTO2.getStatusKey() != null){
			if(selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.ACKNOWLEDGE_STATUS_KEY) || selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY)
			|| selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.BILL_ENTRY_STATUS_KEY)){
				
				selectRODtoAddAdditionalDocumentsDTO2.setApprovedAmt(null);
				
				}
			}
			
		}

		Long count = getAckNoCountByClaimKey(claimKey,
				ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED);
		rodDTO.setAcknowledgementNumber(count);
		ClaimDto claimDTO  = null;
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claim != null) {
			newIntimationDto = intimationService.getIntimationDto(claim
					.getIntimation());
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claim);
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);

		}
		generateAcknowledgeNo(rodDTO);

		
		 * rodDTO.getDocumentDetails().setDocumentCheckList(
		 * getDocumentCheckList(claimByKey));
		 

		rodDTO.setProductBenefitMap(calcService.getProductBenefitFlag(
				claim.getKey(), claim.getIntimation().getPolicy().getProduct()
						.getKey()));
		rodDTO.getDocumentDetails().setDocumentCheckList(
				setDocumentCheckListTableValues());

		rodDTO.setReconsiderRodRequestList(getReconsiderRODRequest(claim));
		rodDTO.setRodQueryDetailsList(getRODQueryDetailsValues(claim));

//		List<Reimbursement> reimbursementByStageId = reimbursementService
//				.getReimbursementByClaimKeyAndStageId(claimKey);
		List<Reimbursement> reimbursementByStageId = reimbursementService
			.getReimbursementByClaimKey(claimKey);
		List<Reimbursement> reimbursementByStageId = new ArrayList<Reimbursement>();
		List<Reimbursement> reimbursementListObj = reimbursementService
		.getReimbursementByClaimKey(claimKey);
		
		if(null != reimbursementListObj && !reimbursementListObj.isEmpty())
		{
			for (Reimbursement reimbursement : reimbursementListObj) {
				if(null != rejectMap && !rejectMap.isEmpty() && null == rejectMap.get(reimbursement.getStatus().getKey()))
				{
					reimbursementByStageId.add(reimbursement);
				}
			}
		}

		selectRODtoAddAdditionalDocumentsDTOList = selectRODtoAddAdditionalDocumentsMapper
				.getReimbursementDto(reimbursementByStageId);

		for (int index = 0; index < selectRODtoAddAdditionalDocumentsDTOList
				.size(); index++) {
			if (reimbursementByStageId.get(index).getStatus().getKey()
					.equals(ReferenceTable.BILLING_SEND_TO_FINANCIAL_APPROVER)) {
				selectRODtoAddAdditionalDocumentsDTOList
						.get(index)
						.setApprovedAmt(
								reimbursementByStageId.get(index)
										.getBillingApprovedAmount() != null ? reimbursementByStageId
										.get(index).getBillingApprovedAmount()
										.toString()
										: "");
			} else if (reimbursementByStageId.get(index).getStatus().getKey()
					.equals(ReferenceTable.FINANCIAL_APPROVE_STATUS)) {
				selectRODtoAddAdditionalDocumentsDTOList
						.get(index)
						.setApprovedAmt(
								reimbursementByStageId.get(index)
										.getFinancialApprovedAmount() != null ? reimbursementByStageId
										.get(index)
										.getFinancialApprovedAmount()
										.toString()
										: "");
			} else {
				selectRODtoAddAdditionalDocumentsDTOList
						.get(index)
						.setApprovedAmt(
								reimbursementByStageId.get(index)
										.getCurrentProvisionAmt() != null ? reimbursementByStageId
										.get(index).getCurrentProvisionAmt()
										.toString()
										: "");
			}
		}

		for (int index = 0; index < reimbursementByStageId.size(); index++) {
			StringBuffer billClassificaiton = new StringBuffer();
			Double claimedAmt = 0d;
			if (reimbursementByStageId.get(index) != null
					&& reimbursementByStageId.get(index)
							.getDocAcknowLedgement() != null) {
				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
						.getHospitalisationFlag() != null) {
					if (reimbursementByStageId.get(index)
							.getDocAcknowLedgement().getHospitalisationFlag()
							.equalsIgnoreCase("y")) {
						billClassificaiton.append("Hospitalisation, ");
					}

				}

				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
						.getPreHospitalisationFlag() != null) {
					if (reimbursementByStageId.get(index)
							.getDocAcknowLedgement()
							.getPreHospitalisationFlag().toString()
							.equalsIgnoreCase("y")) {
						billClassificaiton .append("Pre - Hospitalisation, ");
					}
				}

				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
						.getPostHospitalisationFlag() != null) {
					if (reimbursementByStageId.get(index)
							.getDocAcknowLedgement()
							.getPostHospitalisationFlag().toString()
							.equalsIgnoreCase("y")) {
						billClassificaiton.append("Post - Hospitalisation,  ");
					}

				}

				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
						.getPartialHospitalisationFlag() != null) {
					if (reimbursementByStageId.get(index)
							.getDocAcknowLedgement()
							.getPartialHospitalisationFlag().toString()
							.equalsIgnoreCase("y")) {
						billClassificaiton.append("Partial - Hospitalisation,  ");
					}

				}

				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
						.getLumpsumAmountFlag() != null) {
					if (reimbursementByStageId.get(index)
							.getDocAcknowLedgement().getLumpsumAmountFlag()
							.toString().equalsIgnoreCase("y")) {
						billClassificaiton.append("Lumpsum - Amount,  ");
					}
				}

				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
						.getHospitalCashFlag() != null) {
					if (reimbursementByStageId.get(index)
							.getDocAcknowLedgement().getHospitalCashFlag()
							.toString().equalsIgnoreCase("y")) {
						billClassificaiton.append("Hospital - Cash,  ");
					}
				}

				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
						.getHospitalizationRepeatFlag() != null) {
					if (reimbursementByStageId.get(index)
							.getDocAcknowLedgement().getHospitalizationRepeatFlag()
							.toString().equalsIgnoreCase("y")) {
						billClassificaiton.append("Hospitalisation - Repeat,  ");
					}
				}

				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
						.getPatientCareFlag() != null) {
					if (reimbursementByStageId.get(index)
							.getDocAcknowLedgement()
							.getPatientCareFlag().toString()
							.equalsIgnoreCase("y")) {
						billClassificaiton.append("Patient - Care,  ");
					}
				}
//				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//						.getHospitalizationClaimedAmount() != null) {
//					claimedAmt = claimedAmt
//							+ reimbursementByStageId.get(index)
//									.getDocAcknowLedgement()
//									.getHospitalizationClaimedAmount();
//				}
//
//				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//						.getPreHospitalizationClaimedAmount() != null) {
//					claimedAmt = claimedAmt
//							+ reimbursementByStageId.get(index)
//									.getDocAcknowLedgement()
//									.getPreHospitalizationClaimedAmount();
//				}
//
//				if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//						.getPostHospitalizationClaimedAmount() != null) {
//					claimedAmt = claimedAmt
//							+ reimbursementByStageId.get(index)
//									.getDocAcknowLedgement()
//									.getPostHospitalizationClaimedAmount();
//				}
			}
			if (billClassificaiton.length() > 0) {
				billClassificaiton = billClassificaiton.toString().substring(0,
						billClassificaiton.length() - 2);
				String billClassificationStr = billClassificaiton.toString().substring(0, billClassificaiton.length() - 2);
				selectRODtoAddAdditionalDocumentsDTOList.get(index)
						.setBillClassification(billClassificationStr);

			}
			claimedAmt = createRodService.getClaimedAmount(selectRODtoAddAdditionalDocumentsDTOList.get(index).getKey());
			if(claimedAmt != null){
			selectRODtoAddAdditionalDocumentsDTOList.get(index).setClaimedAmt(
					claimedAmt.toString());
			}
		}

		Integer index = 1;

		for (SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO1 : selectRODtoAddAdditionalDocumentsDTOList) {
			selectRODtoAddAdditionalDocumentsDTO1.setsNo(index.toString());
			index++;
		}
		List<UploadDocumentDTO> rodSummaryDetails = rodService
				.getRODSummaryDetails(tableDTO.getKey());
		
		if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
		{
			List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
		//	List<UploadDocumentDTO> uploadDocsList = rodDTO.getUploadDocsList();
			for (UploadDocumentDTO uploadDocDTO : rodSummaryDetails) {
				//sss
				uploadDocDTO.setIsBillSaved(true);
				List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
				List<RODBillDetails> billEntryDetails = rodService
						.getBillEntryDetails(uploadDocDTO.getDocSummaryKey());
				if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
					for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
						
						 * <<<<<<< HEAD
						 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
						 * uploadDocumentDTO)); =======
						 
						dtoList.add(getBillDetailsDTOForBillEntry(billEntryDetailsDO));
						
						// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
					}
					uploadDocDTO.setBillEntryDetailList(dtoList);
				}
			}
		//	rodDTO.getUploadDocumentsDTO().setBillEntryDetailList(dtoList);
			rodDTO.setUploadDocsList(rodSummaryDetails);
			
		}

		rodDTO.setSelectRODtoAddAdditionalDocumentsDTO(selectRODtoAddAdditionalDocumentsDTOList);

		rodDTO.setStrUserName(tableDTO.getUsername());
		
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(tableDTO.getUsername());

		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ADD_ADDITIONAL_DOCUMENTS);		
		
		rodDTO.setRrcDTO(rrcDTO);	
		
	
        view.setAddAditionalDocumentsWizard(AddAditionalDocumentsView.class,
    				rodDTO);
        
		

	}*/

	private void generateAcknowledgeNo(ReceiptOfDocumentsDTO rodDTO) {
		Long claimKey = rodDTO.getClaimDTO().getKey();
		Long count = ackDocReceivedService.getCountOfAckByClaimKey(claimKey);
		StringBuffer ackNoBuf = new StringBuffer();
		Long lackCount = count + 001;
		ackNoBuf.append("ACK/")
				.append(rodDTO.getClaimDTO().getNewIntimationDto()
						.getIntimationId()).append("/").append(lackCount);
		rodDTO.getDocumentDetails().setAcknowledgementNumber(
				ackNoBuf.toString());
	}

	private void generateRODNumber(ReceiptOfDocumentsDTO rodDTO) {
		Long claimKey = rodDTO.getClaimDTO().getKey();
		/*Long count = createRodService
				.getACknowledgeNumberCountByClaimKey(claimKey);*/
		Long lackCount = 001l;
		 Reimbursement latestReimbursementByRodNumberwise = createRodService
			.getLatestReimbursementByRodNumberwise(claimKey);
		 if(latestReimbursementByRodNumberwise != null){
			 String[] split = latestReimbursementByRodNumberwise.getRodNumber().split("/");
				String defaultNumber = split[split.length - 1];
				Long nextReferenceNo = Long.valueOf(defaultNumber);
				lackCount = nextReferenceNo + 001l;
		 }else{
			 lackCount = 001l;
		 }
		 
		StringBuffer ackNoBuf = new StringBuffer();
		ackNoBuf.append("ROD/")
				.append(rodDTO.getClaimDTO().getNewIntimationDto()
						.getIntimationId()).append("/").append(lackCount);
		rodDTO.getDocumentDetails().setRodNumber(ackNoBuf.toString());
	}

	private List<ReconsiderRODRequestTableDTO> getReconsiderRODRequest(
			Claim claim) {
		List<ReconsiderRODRequestTableDTO> reconsiderRODList = ackDocReceivedService
				.getReconsiderRequestTableValues(claim);
		return reconsiderRODList;
	}
	
	private List<ReconsiderRODRequestTableDTO> getReconsiderRODRequestForBillEntry(
			Long rodKey) {
		List<ReconsiderRODRequestTableDTO> reconsiderRODList = ackDocReceivedService
				.getReconsiderRequestTableValuesForBillEntry(rodKey);
		return reconsiderRODList;
	}

	private List<RODQueryDetailsDTO> getRODQueryDetailsValues(Claim claim) {
		List<RODQueryDetailsDTO> rodQueryDetails = ackDocReceivedService
				.getRODQueryDetails(claim);
		return rodQueryDetails;
	}
	
	private List<RODQueryDetailsDTO> getRODQueryDetailsForCreateRodandBillEntry(Claim claim,Long ackKey) {
		List<RODQueryDetailsDTO> rodQueryDetails = ackDocReceivedService
				.getRODQueryDetailsForCreateRodAndBillEntry(claim, ackKey);
		return rodQueryDetails;
	}


	protected void showCreateRODWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_CREATE_ROD_WIZARD) final ParameterDTO parameters) {
		
		SearchCreateRODTableDTO tableDTO = (SearchCreateRODTableDTO) parameters
				.getPrimaryParameter();
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
		
		
		
		Long docAckKey = tableDTO.getAckNo();
		Long rodKey = null;
		
		rodDTO.getDocumentDetails().setDocAcknowledgementKey(docAckKey);
		
		DocAcknowledgement docAcknowledgment = claimService.getDocAcknowledgment(docAckKey);
		Long docReceivedId = ReferenceTable.RECEIVED_FROM_HOSPITAL;
		if(docAcknowledgment != null){
			docReceivedId = docAcknowledgment.getDocumentReceivedFromId() != null ? docAcknowledgment.getDocumentReceivedFromId().getKey() : ReferenceTable.RECEIVED_FROM_HOSPITAL;
		}

		populateDocumentDetails(rodDTO, docAckKey, ReferenceTable.ROD_CREATION);
		Long claimKey = tableDTO.getClaimkey();
		Claim claimByKey = claimService.getClaimByKey(claimKey);
		Boolean isValidClaimForROD = true;
/*
		if(null != claimByKey)
		{
			rodDTO.setPreviousAccountDetailsList(populatePreviousAccountDetails(claimByKey.getIntimation().getIntimationId(),rodDTO.getDocumentDetails().getDocumentReceivedFromValue()));
		}*/
		if(null != claimByKey)
		{
			rodDTO.setPreviousAccntDetailsList(calcService.getPreviousAccountDetails(claimByKey.getIntimation().getInsured().getInsuredId(),docReceivedId));
		}
		
		if(null != claimByKey)
		{
				if (null != claimByKey
						&& null != claimByKey.getStatus()
						&& null != claimByKey.getStatus().getKey()
						&& claimByKey.getStatus().getKey()
								.equals(ReferenceTable.CLAIM_CLOSED_STATUS)) {
					isValidClaimForROD = false;
					view.showErrorPopUp("Selected claim has been closed.Cannot proceed further.");
				}

			if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
			{
				isValidClaimForROD = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
			
			if(isValidClaimForROD)
			{
				if((ReferenceTable.CASHLESS_CLAIM_TYPE_KEY).equals(claimByKey.getClaimType().getKey()))
				{
					if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.REIM_CONVERSION_PROCESS_CURRENT_QUEUE))
					{
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is pending for conversion. Please convert claim first before creating acknowledgement.");
					}
					else if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.FLP_CURRENT_QUEUE)){
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is Pending in Cashless Level");
					}
					else if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.FLE_CURRENT_QUEUE)){
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is Pending in Cashless Level");
					}
					else if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.PE_CURRENT_QUEUE)){
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is Pending in Cashless Level");
					}
					else if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.PP_CURRENT_QUEUE)){
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is Pending in Cashless Level");
					}
					NegotiationDetails negDtls = preauthService.getNegotiationPending(claimByKey.getKey());
					if(negDtls != null && negDtls.getNegotiationFlag().equals(SHAConstants.YES_FLAG)
							&& docReceivedId.equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is pending for negotiation. Please complete the negotiation before creating ROD");
					}
				}
			}
		}
		
		if(isValidClaimForROD)
		{
		// Long count =
		// getAckNoCountByClaimKey(claimKey,ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED);
			//CR2019169
			/*LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
			legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
			rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirDTO);
		Intimation intimationKey = intimationService.getIntimationByNo(tableDTO.getIntimationNo());
		List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(intimationKey.getKey());
		
		if(displayDto != null && !displayDto.isEmpty()) {
			List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
			LegalHeirDTO legalHeirDTODisplay;
			for (LegalHeir legalHeir : displayDto) {
				legalHeirDTODisplay = new LegalHeirDTO(legalHeir);
				legalHeirDTODisplay.setHeirName(legalHeir.getLegalHeirName());
				SelectValue value = new SelectValue();
				value.setId(legalHeir.getRelationCode());
				value.setValue(legalHeir.getRelationDesc());
				legalHeirDTODisplay.setRelationship(value);
				legalHeirDTODisplay.setSharePercentage(legalHeir.getSharePercentage());
				legalHeirDTODisplay.setAddress(legalHeir.getAddress());
				SelectValue accValue = new SelectValue();
				accValue.setValue(legalHeir.getAccountType());
				legalHeirDTODisplay.setAccountType(accValue);
				legalHeirDTODisplay.setBeneficiaryName(legalHeir.getBeneficiaryName());
				legalHeirDTODisplay.setAccountNo(legalHeir.getAccountNo());
				legalHeirDTODisplay.setIfscCode(legalHeir.getIfscCode());
				SelectValue docValue = new SelectValue();
				docValue.setValue(legalHeir.getAccountType());
				legalHeirDTODisplay.setDocType(accValue);
				list.add(legalHeirDTODisplay);
				
			}		
			
			rodDTO.getPreauthDTO().setLegalHeirDTOList(list);
			}*/

		Long count = getAckNoCountByClaimKey(claimKey,
				ReferenceTable.CREATE_ROD);
		rodDTO.setAcknowledgementNumber(count);
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		ClaimDto claimDTO = null;
		if (claimByKey != null) {
			// setClaimValuesToDTO(preauthDTO, claimByKey);
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
				 claimDTO.setCashlessAppAmt(latestPreauthByClaim != null ? latestPreauthByClaim.getTotalApprovalAmount() : 0d);
				 
					Preauth latestPreauthByClaimForWithdrawReject = preauthService.getLatestPreauthByClaimForWithdrawReject(claimKey);
					if(latestPreauthByClaimForWithdrawReject != null){
						if(latestPreauthByClaimForWithdrawReject != null && latestPreauthByClaimForWithdrawReject.getOtherBenefitFlag() != null && latestPreauthByClaimForWithdrawReject.getOtherBenefitFlag().equalsIgnoreCase("Y")){
							rodDTO.getDocumentDetails().setIsOtherBenefitApplicableInPreauth(true);
						}
						List<OtherBenefitsTableDto> benefitAmountDetailsByCashlessKey = premedicalService.getBenefitAmountDetailsByCashlessKey(latestPreauthByClaimForWithdrawReject.getKey());
						for (OtherBenefitsTableDto otherBenefitsTableDto : benefitAmountDetailsByCashlessKey) {
							if(otherBenefitsTableDto.getBenefitName() != null && otherBenefitsTableDto.getBenefitName().equalsIgnoreCase(SHAConstants.emergencyDomestic)){
								rodDTO.getDocumentDetails().setIsEmergencyMedicalEvacuation(true);
							}else if(otherBenefitsTableDto.getBenefitName() != null && otherBenefitsTableDto.getBenefitName().equalsIgnoreCase(SHAConstants.repatriationOfMortal)){
								rodDTO.getDocumentDetails().setIsRepatriationOfMortal(true);
							}
						}
					}
					
					
					/*for bancs*///IMSSUPPOR-30613
					if(latestPreauthByClaim!=null){
					if(latestPreauthByClaim.getCatastrophicLoss() != null) {
						SelectValue catastropheData = masterService.getCatastropheData(latestPreauthByClaim.getCatastrophicLoss());
						if(catastropheData != null){
							rodDTO.getPreauthDTO().setCatastrophicLoss(new SelectValue(latestPreauthByClaim.getCatastrophicLoss(),catastropheData.getValue()));
						}
					}
					
					if(latestPreauthByClaim.getNatureOfLoss() != null) {
						MastersValue master = masterService.getMaster(latestPreauthByClaim.getNatureOfLoss());
						if(master != null){
							rodDTO.getPreauthDTO().setNatureOfLoss(new SelectValue(latestPreauthByClaim.getNatureOfLoss(),master.getValue()));
						}
					}
					
					if(latestPreauthByClaim.getCauseOfLoss() != null) {
						
						MastersValue causeOfLoss =  masterService.getMaster(latestPreauthByClaim.getCauseOfLoss());
						
						if(causeOfLoss != null){
							
							rodDTO.getPreauthDTO().setCauseOfLoss(new SelectValue(latestPreauthByClaim.getCauseOfLoss(),causeOfLoss.getValue()));
						}
					}
				}
			 }
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setNewIntimationDTO(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
			rodDTO.setNewIntimationDTO(newIntimationDto);
			rodDTO.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
		}
		// Method to populate hospital values from VW_HOSPITALS;
		// if(null != rodDTO.get)
		if(null != claimByKey && null != claimByKey.getClaimType() && null != claimByKey.getClaimType().getKey())
		{
			setClaimValuesToDTO(rodDTO.getPreauthDTO(), claimByKey);
			if((claimByKey.getClaimType().getKey()).equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
			{
				Policy policy = policyService.getPolicyByKey(claimByKey.getIntimation().getPolicy().getKey());
				if(policy.getPaymentParty() != null &&
						rodDTO.getDocumentDetails().getDocumentReceivedFromValue() != null && !rodDTO.getDocumentDetails().getDocumentReceivedFromValue().equalsIgnoreCase(SHAConstants.DOC_RECEIVED_FROM_HOSPITAL)){
					populatePaymentDetailsForGMCPayment(claimByKey,rodDTO,newIntimationDto);
				} else {
						if (null != newIntimationDto.getHospitalDto().getHospitalType()) {
						populatePaymentDetailsForHosp(newIntimationDto.getHospitalDto()
								.getKey(), rodDTO,docAcknowledgment.getDocumentReceivedFromId().getKey());
					}
				}
			}
			else 
			{
				/*rodDTO.getDocumentDetails().setPaymentModeFlag(
						ReferenceTable.PAYMENT_MODE_CHEQUE_DD);*/
//				setClaimValuesToDTO(rodDTO.getPreauthDTO(), claimByKey);
				if(rodDTO.getPreauthDTO().getPolicyDto().getPaymentParty() != null &&
						rodDTO.getDocumentDetails().getDocumentReceivedFromValue() != null && !rodDTO.getDocumentDetails().getDocumentReceivedFromValue().equalsIgnoreCase(SHAConstants.DOC_RECEIVED_FROM_HOSPITAL)){
					populatePaymentDetailsForGMCPayment(claimByKey,rodDTO,newIntimationDto);
				} else {
					populatePaymentDetailsForReimbursementClaim(claimKey, rodDTO);
				}
			}
		}
		Reimbursement previousLatestROD = createRodService
				.getPreviousRODDetails(claimKey);
		if (previousLatestROD != null) {
			// reimbursementKey = previousLatestROD.getKey();
			ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
//			ZonalMedicalReviewMapper.getAllMapValues();
			PreauthDTO reimbursementDTO = mapper
					.getReimbursementDTO(previousLatestROD);
			reimbursementDTO.setIsPostHospitalization(true);
			
			//IMSSUPPOR-27229
			if(reimbursementDTO.getPreauthMedicalDecisionDetails() != null && reimbursementDTO.getPreauthMedicalDecisionDetails().getCorporateBufferUtilizedAmt() != null){
				reimbursementDTO.getPreauthMedicalDecisionDetails().setCorporateBufferUtilizedAmt(null);
			}
			
			setReimbursmentTOPreauthDTO(mapper, claimByKey, previousLatestROD,
					reimbursementDTO, true, SHAConstants.CREATE_ROD);
			Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
					.getIntimation().getHospital());
			ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
					.getPreauthDataExtractionDetails()
					.getUpdateHospitalDetails();
			updateHospitalDetails.setHospitalCity(hospitalById.getCity());
			//updateHospitalDetails.setHospitalCity(hospitalById.getCity());
			updateHospitalDetails.setHospitalState(hospitalById.getState());
			updateHospitalDetails.setHospitalCode(hospitalById
					.getHospitalCode());
			

			LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
			legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
			reimbursementDTO.setLegalHeirDto(legalHeirDTO);
			
			if(previousLatestROD.getDocAcknowLedgement() != null
					&& previousLatestROD.getDocAcknowLedgement().getDocumentReceivedFromId() != null
					&& ReferenceTable.RECEIVED_FROM_INSURED.equals(previousLatestROD.getDocAcknowLedgement().getDocumentReceivedFromId().getKey())
					&& previousLatestROD.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId() != null
					&& ReferenceTable.RELATION_SHIP_SELF_KEY.equals(previousLatestROD.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId().getKey())
					&& previousLatestROD.getPatientStatus() != null 
					&& previousLatestROD.getPatientStatus().getKey() != null 
					&& ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(previousLatestROD.getPatientStatus().getKey())) {
				

				/*if(previousLatestROD.getNomineeName() != null) {
					reimbursementDTO.getNewIntimationDTO().setNomineeName(previousLatestROD.getNomineeName());
				}	
				if(previousLatestROD.getNomineeAddr() != null) {
					reimbursementDTO.getNewIntimationDTO().setNomineeAddr(previousLatestROD.getNomineeAddr());
				}*/
					
					List<NomineeDetailsDto> nomineeDetailsListByTransactionKey = intimationService.getNomineeDetailsListByTransactionKey(previousLatestROD.getKey());
					
					if(nomineeDetailsListByTransactionKey != null && !nomineeDetailsListByTransactionKey.isEmpty()) {
						rodDTO.getNewIntimationDTO().setNomineeList(nomineeDetailsListByTransactionKey);
					}	
					
					else {
							if(rodDTO.getNewIntimationDTO().getNomineeList() == null 
								|| rodDTO.getNewIntimationDTO().getNomineeList().isEmpty()) {
								
								List<LegalHeir> legalHeirList = masterService.getlegalHeirListByTransactionKey(previousLatestROD.getKey());
								if(legalHeirList != null && !legalHeirList.isEmpty()) {
									List<LegalHeirDTO> legalHeirDTOList = new ArrayList<LegalHeirDTO>();
									LegalHeirDTO legalHeirDto;
									for (LegalHeir legalHeir : legalHeirList) {
										 legalHeirDto = new LegalHeirDTO(legalHeir);
										 legalHeirDto.setRelationshipContainer(masterService.getRelationshipContainerValues());
										 legalHeirDTOList.add(legalHeirDto);
									}
									reimbursementDTO.setLegalHeirDTOList(legalHeirDTOList);
								}
							}	
					}
				}
				
			List<ReconsiderRODRequestTableDTO> reconsiderRODRequest = getReconsiderRODRequest(claimByKey);
			List<ReimbursementRejectionDto> rejectionDetails = new ArrayList<ReimbursementRejectionDto>();
			
			if (reconsiderRODRequest != null
					&& !reconsiderRODRequest.isEmpty()) {

				for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderRODRequest) {

					ReimbursementRejectionDto reimbursementRejectionDto = reimbursementRejectionService.getReimbursementRejectionByKey(reconsiderRODRequestTableDTO.getRodKey());

					if (null != reimbursementRejectionDto
							&& null != reimbursementRejectionDto.getStatusValue()) {
						if ((ReferenceTable.PROCESS_CLAIM_FINANCIAL_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())
								|| (ReferenceTable.PROCESS_CLAIM_REQUEST_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())
								|| (ReferenceTable.PAYMENT_REJECTED).equals(reimbursementRejectionDto.getStatusKey())
								|| (ReferenceTable.CLAIM_APPROVAL_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())) {
							
							reconsiderRODRequestTableDTO.setIsRejectReconsidered(true);
							rejectionDetails.add(reimbursementRejectionDto);
						
						} else {
							reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
						}
					}
					else {
						reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
					}
					
					Reimbursement reimbursmentObj = reimbursementService.getReimbursementByKey(reconsiderRODRequestTableDTO.getRodKey());
					
					Boolean isSettled = reimbursementService.isClaimPaymentAvailable(reimbursmentObj.getRodNumber());
					
					if ((isSettled != null && isSettled) || ( null != reimbursmentObj && null != reimbursmentObj.getFinancialCompletedDate()
							&& reimbursmentObj.getFinancialCompletedDate().after(reimbursmentObj.getModifiedDate()))) {
						
						
						if((ReferenceTable.PROCESS_CLAIM_REQUEST_APPROVE_REJECT_STATUS).equals(reimbursmentObj.getStatus().getKey()) ||
								(ReferenceTable.PROCESS_CLAIM_FINANCIAL_APPROVE_REJECT_STATUS).equals(reimbursmentObj.getStatus().getKey())) {
							reconsiderRODRequestTableDTO.setIsSettledReconsideration(false);
							reconsiderRODRequestTableDTO.setIsRejectReconsidered(true); 
						}else{
							reconsiderRODRequestTableDTO.setIsSettledReconsideration(true);
							reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
						}
					}
					//IMSSUPPOR-26556
					if(docAcknowledgment != null){
						if(reconsiderRODRequestTableDTO.getSelect() != null && reconsiderRODRequestTableDTO.getSelect() && reconsiderRODRequestTableDTO.getAcknowledgementNo() != null && 
								!reconsiderRODRequestTableDTO.getAcknowledgementNo().equalsIgnoreCase(docAcknowledgment.getAcknowledgeNumber())){
							reconsiderRODRequestTableDTO.setSelect(false);
						}
					}
					
					if((ReferenceTable.PAYMENT_REJECTED).equals(reimbursmentObj.getStatus().getKey()) ||
							(ReferenceTable.PAYMENT_PROCESS_STAGE.equals(reimbursmentObj.getStage().getKey())&&
									ReferenceTable.PAYMENT_PROCESS_REOPENED.equals(reimbursmentObj.getStatus().getKey()))){
						
						reconsiderRODRequestTableDTO.setIsSettledReconsideration(false);
						reconsiderRODRequestTableDTO.setIsRejectReconsidered(true);
					}
					
					MastersValue patientStatus = reimbursmentObj.getPatientStatus();
					if(patientStatus != null) {
						reconsiderRODRequestTableDTO.setPatientStatus(new SelectValue(patientStatus.getKey(), patientStatus.getValue()));
						rodDTO.getDocumentDetails().setPatientStatus(reconsiderRODRequestTableDTO.getPatientStatus());
						rodDTO.getDocumentDetails().setDeathDate(reimbursmentObj.getDateOfDeath());
						rodDTO.getDocumentDetails().setReasonForDeath(reimbursmentObj.getDeathReason());
					}

					List<LegalHeir> legalHeirList = masterService.getlegalHeirListByTransactionKey(reimbursmentObj.getKey());
					if(legalHeirList != null && !legalHeirList.isEmpty()) {
						List<LegalHeirDTO> legalHeirDTOList = new ArrayList<LegalHeirDTO>();
						LegalHeirDTO legalHeirDto;
						for (LegalHeir legalHeir : legalHeirList) {
							 legalHeirDto = new LegalHeirDTO(legalHeir);
							 legalHeirDto.setRelationshipContainer(masterService.getRelationshipContainerValues());
							 legalHeirDTOList.add(legalHeirDto);
						}
						reconsiderRODRequestTableDTO.setLegalHeirDTOList(legalHeirDTOList);
					}
					
				}
				rodDTO.setReconsiderRodRequestList(reconsiderRODRequest);
				rodDTO.setRejectionDetails(rejectionDetails);
			}
			
			reimbursementDTO.setReconsiderationList(reconsiderRODRequest);
			
			reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
					previousLatestROD.getKey());
			reimbursementDTO.setIsPreviousROD(true);
			rodDTO.getDocumentDetails().setEmailId(reimbursementDTO.getPayeeEmailId());
			rodDTO.getDocumentDetails().setPayableAt(reimbursementDTO.getPayableAt());
			rodDTO.setPreauthDTO(reimbursementDTO);
			rodDTO.getDocumentDetails().setDateOfAdmission(reimbursementDTO.getPreauthDataExtractionDetails().getAdmissionDate());
			rodDTO.getDocumentDetails().setDateOfDischarge(reimbursementDTO.getPreauthDataExtractionDetails().getDischargeDate());
			if(null != previousLatestROD.getDoaChangeReason())
				rodDTO.getDocumentDetails().setReasonForChange(previousLatestROD.getDoaChangeReason());
			
			if(null != previousLatestROD.getPayModeChangeReason())
				rodDTO.getDocumentDetails().setPayModeChangeReason(previousLatestROD.getPayModeChangeReason());
			
			
			/*for bancs*/
			if(previousLatestROD.getCatastrophicLoss() != null) {
				SelectValue catastropheData = masterService.getCatastropheData(previousLatestROD.getCatastrophicLoss());
				if(catastropheData != null){
					rodDTO.getPreauthDTO().setCatastrophicLoss(new SelectValue(previousLatestROD.getCatastrophicLoss(),catastropheData.getValue()));
				}
			}
			
			if(previousLatestROD.getNatureOfLoss() != null) {
				MastersValue master = masterService.getMaster(previousLatestROD.getNatureOfLoss());
				if(master != null){
					rodDTO.getPreauthDTO().setNatureOfLoss(new SelectValue(previousLatestROD.getNatureOfLoss(),master.getValue()));
				}
			}
			
			if(previousLatestROD.getCauseOfLoss() != null) {
				
				MastersValue causeOfLoss =  masterService.getMaster(previousLatestROD.getCauseOfLoss());
				
				if(causeOfLoss != null){
					
					rodDTO.getPreauthDTO().setCauseOfLoss(new SelectValue(previousLatestROD.getCauseOfLoss(),causeOfLoss.getValue()));
				}
			}
			
			// reimbursementDTO.setPreviousROD(previousLatestROD);
			
		}
			

		/*
		 * if(null != rodDTO.getClaimDTO() &&
		 * (ReferenceTable.CLAIM_TYPE_CASHLESS
		 * ).equalsIgnoreCase(rodDTO.getClaimDTO().getClaimTypeValue())) {
		 * populatePaymentDetailsForCashLessClaim
		 * (newIntimationDto.getHospitalDto().getKey(),rodDTO); } else {
		 * populatePaymentDetailsForReimbursementClaim
		 * (rodDTO.getClaimDTO().getKey
		 * (),rodDTO,newIntimationDto.getHospitalDto().getKey());
		 * 
		 * }
		 */
		
		/*if(tableDTO.getHumanTaskListDTO() == null || tableDTO.getHumanTaskListDTO().getPayload() == null || tableDTO.getHumanTaskListDTO().getPayload().getRod() == null || tableDTO.getHumanTaskListDTO().getPayload().getRod().getKey() == null) {
			generateRODNumber(rodDTO);
			getPreviousRODNumber(rodDTO)
		} else {
			Reimbursement reimbursementByKey = reimbursementService.getReimbursementByKey(tableDTO.getHumanTaskListDTO().getPayload().getRod().getKey());
			rodDTO.getDocumentDetails().setRodNumber(reimbursementByKey.getRodNumber());
			String diagnosisForPreauthByKey = "";
			if(reimbursementByKey != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursementByKey.getKey());
				
			}
			rodDTO.setDiagnosis(diagnosisForPreauthByKey);
		}*/
		
		Map<String, Object> outPutArray = (Map<String, Object>) tableDTO.getDbOutArray();
		Long payloadRodKey = (Long) outPutArray.get(SHAConstants.PAYLOAD_ROD_KEY);
		if(null == payloadRodKey || payloadRodKey.equals(0l))
		{
			generateRODNumber(rodDTO);
			getPreviousRODNumber(rodDTO);
		}
		else
		{
			Reimbursement reimbursementByKey = reimbursementService.getReimbursementByKey(payloadRodKey);
			rodDTO.getDocumentDetails().setRodNumber(reimbursementByKey.getRodNumber());
			String diagnosisForPreauthByKey = "";
			if(reimbursementByKey != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursementByKey.getKey());
				
			}
			rodDTO.setDiagnosis(diagnosisForPreauthByKey);
			rodDTO.setRodKeyFromPayload(payloadRodKey);
			rodDTO.getNewIntimationDTO().setNomineeList(intimationService.getNomineeDetailsListByTransactionKey(payloadRodKey));
		}		
		
		
		
		if ((ReferenceTable.CLAIM_TYPE_CASHLESS).equalsIgnoreCase(rodDTO
				.getClaimDTO().getClaimTypeValue()) && null == rodDTO.getDocumentDetails().getDateOfAdmission() && null == rodDTO.getDocumentDetails().getDateOfDischarge())
		{
			Preauth preauth = createRodService
					.getLatestPreauthForClaim(claimKey);
			
			if (null != preauth) {
				rodDTO.getDocumentDetails().setDateOfAdmission(
						preauth.getDataOfAdmission());
				rodDTO.getDocumentDetails().setDateOfDischarge(preauth.getDateOfDischarge());
			} else {
				rodDTO.getDocumentDetails().setDateOfAdmission(
						rodDTO.getClaimDTO().getNewIntimationDto()
								.getAdmissionDate());
				
				//rodDTO.getDocumentDetails().setDateOfDischarge(rodDTO.getClaimDTO().getNewIntimationDto().get);
			}
			
			String diagnosisForPreauthByKey = "";
			if(preauth != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
				
			}
			rodDTO.setDiagnosis(diagnosisForPreauthByKey);

		} else {
			if(null == previousLatestROD)
			{
			rodDTO.getDocumentDetails().setDateOfAdmission(
					rodDTO.getClaimDTO().getNewIntimationDto()
							.getAdmissionDate());
			}
		}
		Map<String, Integer> productBenefitMap = calcService.getProductBenefitFlag(
				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
				.getProduct().getKey());
		/**
		 * Earlier , pre and post hospitalization was enabled only based on
		 * product conditions in ack , rod level and bill entry level.  But as per mockup 13.7 , this
		 * validation needs to be removed at ack and rod level and should be available only
		 * at FA level. Hence hardcoding the values of pre and post in map , by which we always
		 * enable pre and post for all products at ACK and ROD level and bil entry level.
		 * */
		productBenefitMap.put("preHospitalizationFlag", 1);
		productBenefitMap.put("postHospitalizationFlag", 1);
	//	productBenefitMap.put("LumpSumFlag", 1);
		rodDTO.setProductBenefitMap(productBenefitMap);

/*		rodDTO.setProductBenefitMap(dbCalculationService.getProductBenefitFlag(
				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
						.getProduct().getKey()));*/

		rodDTO.getPreauthDTO().setStrUserName(tableDTO.getUsername());
		rodDTO.getPreauthDTO().setStrPassword(tableDTO.getPassword());
		rodDTO.setStrUserName(tableDTO.getUsername());
		// rodDTO.setStrUserName("weblogic");
		rodDTO.setStrPassword(tableDTO.getPassword());
		//rodDTO.setHumanTask(tableDTO.getHumanTaskListDTO());
		//Added for document details page enhancement.
		rodDTO.setCheckListTableContainerForROD(masterService.getDocumentCheckListValuesContainer(SHAConstants.MASTER_TYPE_REIMBURSEMENT));

		createRodService.getBillClassificationFlagDetails(rodDTO.getClaimDTO()
				.getKey(), rodDTO);
		/*rodDTO.setProductBenefitMap(dbCalculationService.getProductBenefitFlag(
				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
						.getProduct().getKey()));*/
//		rodDTO.setReconsiderRodRequestList(getReconsiderRODRequest(claimByKey));
		
//		rodDTO.setUploadDocsList(getUploadedDocumentTableDataForBillEntry(key));
		
		List<RODQueryDetailsDTO> rodQueryDetailsList = getRODQueryDetailsForCreateRodandBillEntry(claimByKey,docAckKey); 
		rodDTO.setRodQueryDetailsList(rodQueryDetailsList);
		if(null != rodQueryDetailsList && !rodQueryDetailsList.isEmpty())
		{   
			Map<String , Long> reconsiderationMap = null;
			for (RODQueryDetailsDTO rodQueryDetailsDTO : rodQueryDetailsList) {
				if(null != rodQueryDetailsDTO.getReplyStatus() && ("Y").equalsIgnoreCase(rodQueryDetailsDTO.getReplyStatus()))
				{
					rodDTO.setIsQueryReplyReceived(true);
					reconsiderationMap = new HashMap<String,Long>();
					reconsiderationMap.put("ackKey",rodQueryDetailsDTO.getAcknowledgementKey());
					reconsiderationMap.put("rodKey", rodQueryDetailsDTO.getReimbursementKey());
					rodDTO.setReconsiderationMap(reconsiderationMap);
					rodKey = rodQueryDetailsDTO.getReimbursementKey();
					Reimbursement reimbursement = createRodService.getReimbursementObjectByKey(rodQueryDetailsDTO.getReimbursementKey());
					rodDTO.getDocumentDetails().setPaymentModeFlag(reimbursement.getPaymentModeId());
					rodDTO.getDocumentDetails().setEmailId(reimbursement.getPayeeEmailId());
					rodDTO.getDocumentDetails().setPanNo(reimbursement.getPanNumber());
					rodDTO.getDocumentDetails().setPayableAt(reimbursement.getPayableAt());
					//SelectValue selValue = new SelectValue();
					//selValue.setValue(reimbursement.getPayeeName());
					rodDTO.getDocumentDetails().setReasonForChange(reimbursement.getReasonForChange());
					rodDTO.getDocumentDetails().setLegalFirstName(reimbursement.getLegalHeirFirstName());
					if(reimbursement.getAccountNumber() != null){
						rodDTO.getDocumentDetails().setAccountNo(reimbursement.getAccountNumber());
					}
					rodDTO.getDocumentDetails().setAccountPreference(reimbursement.getAccountPreference());
					rodDTO.getDocumentDetails().setAccountType(reimbursement.getAccountType());
					if(reimbursement.getPatientStatus() != null){
						rodDTO.getDocumentDetails().setPatientStatus(new SelectValue(reimbursement.getPatientStatus().getKey(), reimbursement.getPatientStatus().getValue()));
					}
					rodDTO.getDocumentDetails().setDeathDate(reimbursement.getDateOfDeath());
					rodDTO.getDocumentDetails().setReasonForDeath(reimbursement.getDeathReason());
					if(null != reimbursement.getPaymentModeId() && reimbursement.getPaymentModeId().equals(ReferenceTable.PAYMENT_MODE_BANK_TRANSFER))
					{
						if(null != reimbursement.getBankId())
						{
							BankMaster masBank = masterService.getBankDetailsByKey(reimbursement.getBankId());
							rodDTO.getDocumentDetails().setBankId(masBank.getKey());
							rodDTO.getDocumentDetails().setBankName(masBank.getBankName());
							rodDTO.getDocumentDetails().setIfscCode(masBank.getIfscCode());
							rodDTO.getDocumentDetails().setBranch(masBank.getBranchName());
							rodDTO.getDocumentDetails().setCity(masBank.getCity());

							/*newIntimationDto.setNomineeName(reimbursement.getNomineeName());
							newIntimationDto.setNomineeAddr(reimbursement.getNomineeAddr());
							rodDTO.getNewIntimationDTO().setNomineeName(reimbursement.getNomineeName());
							rodDTO.getNewIntimationDTO().setNomineeAddr(reimbursement.getNomineeAddr());*/

						}
					}
					
					Long reimbursementKey = rodQueryDetailsDTO.getReimbursementKey();
					if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getHospitalizationFlag()))
					{
						if(null == rodDTO.getDocumentDetails().getHospitalizationClaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getHospitalizationClaimedAmount()))
						{
							Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.HOSPITALIZATION);
							if(null != totalClaimedAmt)
								rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(String.valueOf(totalClaimedAmt));
						}
					}
					
					if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getPreHospitalizationFlag()))
					{
						if(null == rodDTO.getDocumentDetails().getPreHospitalizationClaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getPreHospitalizationClaimedAmount()))
						{
							Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.PRE_HOSPITALIZATION);
							if(null != totalClaimedAmt)
								rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(String.valueOf(totalClaimedAmt));
						}
					}
					if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getPostHospitalizationFlag()))
					{
						if(null == rodDTO.getDocumentDetails().getPostHospitalizationClaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getPostHospitalizationClaimedAmount()))
						{
							Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.POST_HOSPITALIZATION);
							if(null != totalClaimedAmt)
								rodDTO.getDocumentDetails().setPostHospitalizationClaimedAmount(String.valueOf(totalClaimedAmt));
						}
					}
					
					if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getOtherBenefitsFlag()))
					{
						if(null == rodDTO.getDocumentDetails().getOtherBenefitclaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getOtherBenefitclaimedAmount()))
						{
							Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.OTHER_BENEFIT);
							if(null != totalClaimedAmt)
								rodDTO.getDocumentDetails().setOtherBenefitclaimedAmount(String.valueOf(totalClaimedAmt));
						}
					}
					
					List<LegalHeir> legalHeirList = masterService.getlegalHeirListByTransactionKey(reimbursement.getKey());
					if(legalHeirList != null && !legalHeirList.isEmpty()) {
						List<LegalHeirDTO> legalHeirDTOList = new ArrayList<LegalHeirDTO>();
						LegalHeirDTO legalHeirDto;
						for (LegalHeir legalHeir : legalHeirList) {
							 legalHeirDto = new LegalHeirDTO(legalHeir);
							 legalHeirDto.setRelationshipContainer(masterService.getRelationshipContainerValues());
							 legalHeirDTOList.add(legalHeirDto);
						}
						rodDTO.getPreauthDTO().setLegalHeirDTOList(legalHeirDTOList);
					}
					Boolean grievanceRepresentation = reimbursement.getGrievanceRepresentation() !=null && reimbursement.getGrievanceRepresentation().equals("Y") ? true : false;
					rodDTO.getDocumentDetails().setGrievanceRepresentation(grievanceRepresentation);
					
					//To populate bank details.
					/*rodDTO.get
					rodDTO.getDocumentDetails().setIfscCode(reimbursement.getB);*/
				}
			}
		}
		
		if(rodDTO.getClaimDTO().getClaimType() != null
				&& rodDTO.getClaimDTO().getClaimType().getId()
				.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
			String[] rodSplit = rodDTO.getDocumentDetails().getRodNumber().split("/");
			String string = rodSplit[rodSplit.length - 1];
			if(SHAUtils.getIntegerFromString(string) == 1 || previousLatestROD == null) {
				PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//				PreMedicalMapper.getAllMapValues();
				List<Preauth> preauthByClaimKey = preauthService
						.getPreauthByClaimKey(claimByKey.getKey());
				Preauth previousPreauth = null;
				if (!preauthByClaimKey.isEmpty()) {
					previousPreauth = preauthByClaimKey.get(0);
					String[] split = previousPreauth.getPreauthId().split("/");
					String defaultNumber = split[split.length - 1];
					//Integer nextReferenceNo = Integer.valueOf(defaultNumber);
					for (Preauth preauth : preauthByClaimKey) {
						if (preauth.getPreauthId() != null) {
							String[] splitNumber = preauth.getPreauthId()
									.split("/");
							String number = splitNumber[splitNumber.length - 1];
							if (Integer.valueOf(number) > Integer
									.valueOf(defaultNumber)) {
								previousPreauth = preauth;
								//nextReferenceNo = Integer.valueOf(number);
							}
						}
					}
				}

				if (previousPreauth != null) {
					PreauthDTO reimbursementDTO = premedicalMapper
							.getPreauthDTO(previousPreauth);
					
					reimbursementDTO.getPreauthDataExtractionDetails().setVentilatorSupportFlag(previousPreauth.getVentilatorSupport());

					setpreauthTOPreauthDTO(premedicalMapper, claimByKey,
							previousPreauth, reimbursementDTO, true);
					reimbursementDTO.setIsCashlessType(true);
					reimbursementDTO.getPreauthDataExtractionDetails()
							.setDischargeDate(previousPreauth.getDateOfDischarge());
					if(ReferenceTable.getFHORevisedKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
							|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
								(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
									&& (((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
											SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
											|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
											|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
									&& ("G").equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan())))
							|| (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
									&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
											SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())))){
						List<OtherBenefitsTableDto> otherBenefitsClaimedAmount = reimbursementService.getOtherBenefitsClaimedAmount(previousPreauth.getKey());
						for (OtherBenefitsTableDto otherBenefitsTableDto : otherBenefitsClaimedAmount) {
							otherBenefitsTableDto.setAmtAlreadyPaidToHospital(otherBenefitsTableDto.getApprovedAmt());
							otherBenefitsTableDto.setKey(null);
						}
						reimbursementDTO.getPreauthDataExtractionDetails().setOtherBenefitsList(otherBenefitsClaimedAmount);
					}
					
					rodDTO.setPreauthDTO(reimbursementDTO);
					
					rodDTO.getClaimDTO().setLatestPreauthKey(previousPreauth.getKey());     

				}
			}
			Preauth preauth =preauthService.getLatestPreauthByClaim(claimByKey.getKey());
			String diagnosisForPreauthByKey = "";
			if(preauth != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
				
			}
			rodDTO.setDiagnosis(diagnosisForPreauthByKey);

		
		}
		
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(tableDTO.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.CREATE_ROD);
		
		//loadRRCRequestValuesForProcessing(rrcDTO,insuredSumInsured,SHAConstants.ACKNOWLEDGE_DOC_RECEIVED);
		
		rodDTO.setRrcDTO(rrcDTO);
		
		String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
		if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
			String get64vbStatus = PremiaService.getInstance().get64VBStatus(claimByKey.getIntimation().getPolicy().getPolicyNumber(), claimByKey.getIntimation().getIntimationId());
			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
				rodDTO.setIsDishonoured(true);
			} 
		}
		
		
//		Preauth latestPreauthByClaim = createRodService.getLatestPreauthByClaim(5014232l);
//		List<ClaimAmountDetails> claimAmountDetailsByPreauth = createRodService.getClaimAmountDetailsByPreauth(5022781l);
//		

//		Reimbursement reimbursementObjectByKey = createRodService.getReimbursementObjectByKey(5040982l);
//		Claim claimByClaimKey = claimService.getClaimByClaimKey(5020558l);	
//		
//		createRodService.submitTaskToBPM(rodDTO, reimbursementObjectByKey, false, sendToWhere, false, claimByClaimKey);
		
		
		if(null != rrcDTO.getNewIntimationDTO() && null != rrcDTO.getNewIntimationDTO().getPolicy()) {
		rodDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(rrcDTO.getNewIntimationDTO().getPolicy().getKey()));
		rodDTO.setIsPEDInitiatedbtn(rodDTO.getIsPEDInitiated());
		}
		
		/**
		 * Added for loading already uploaded docs table values.
		 * 
		 * */
		
		if(null != tableDTO.getIsDocumentUploaded() && (SHAConstants.YES).equalsIgnoreCase(tableDTO.getIsDocumentUploaded()) && null != tableDTO.getAckDocKey()  && null != tableDTO.getDocAcknowledgementKey())
		{
			rodDTO.setAlreadyUploadDocsList(createRodService.getUploadDocumentForAcknowledgementDocKey(tableDTO.getDocAcknowledgementKey()));
		}
		
//		if(rrcDTO.getNewIntimationDTO() != null && rrcDTO.getNewIntimationDTO().getInsuredPatient() != null &&
//				rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
//			Long claimCount = preauthService.getClaimCount(rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey());
//			if(claimCount != null){
//				rodDTO.setClaimCount(claimCount);
//			}
//		}
		
		if(null != newIntimationDto && null != newIntimationDto.getPolicy()) {
//			BeanItemContainer<SelectValue> sectionList = masterService.getSectionList(newIntimationDto.getPolicy().getProduct().getKey());
			BeanItemContainer<SelectValue> sectionList = masterService
					.getSectionList(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getKey(),rodDTO.getClaimDTO().getNewIntimationDto().getPolicy());
					
					if(ReferenceTable.getSuperSurplusKeys().containsKey(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getKey())
							&& ((rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan() == null) || (rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan() != null && rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan().equalsIgnoreCase("S")))){
						List<SelectValue> itemIds = sectionList.getItemIds();
						List<SelectValue> filterItem = new ArrayList<SelectValue>();
						for (SelectValue selectValue : itemIds) {
							if(! selectValue.getCommonValue().equals(ReferenceTable.DELVIERY_AND_NEW_BORN_SECTION_CODE)){
								filterItem.add(selectValue);
							}
						}
						sectionList.removeAllItems();
						sectionList.addAll(filterItem);
					}
					rodDTO.setSectionList(sectionList);
			if(rodKey != null) {
				rodDTO.setShouldDisableSection(reimbursementService.isItHavingAnyROD(claimKey, rodKey));
			} else {
				rodDTO.setShouldDisableSection(reimbursementService.isItHavingAnyROD(claimKey));
			}
			
		}
		if(claimByKey!=null){
			
			Long hospital = claimByKey.getIntimation().getHospital();
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				rodDTO.setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
					rodDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}
		}
		
		rodDTO.setDbOutArray(tableDTO.getDbOutArray());
		
		Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
		rodDTO.getPreauthDTO().setIsPolicyValidate(policyValidation);
		
		// R1045
		rodDTO.getPreauthDTO().setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		rodDTO.getPreauthDTO().setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		rodDTO.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
		
		rodDTO.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
		rodDTO.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		Product product = rodDTO.getClaimDTO().getNewIntimationDto().getPolicy()
				.getProduct();
		if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())){
		
		if (! (ReferenceTable.CLAIM_TYPE_CASHLESS).equalsIgnoreCase(rodDTO
				.getClaimDTO().getClaimTypeValue())){
				if(null == previousLatestROD){
					List<UpdateOtherClaimDetailDTO> updateOtherClaimDetails = preauthService.getUpdateOtherClaimDetails(newIntimationDto.getPolicy().getKey(),rodDTO.getPreauthDTO());
					for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetails) {
						updateOtherClaimDetailDTO.setKey(null);
					}
					rodDTO.getPreauthDTO().setUpdateOtherClaimDetailDTO(updateOtherClaimDetails);
				}else{
					List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsForExisting = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(previousLatestROD.getKey());
					for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsForExisting) {
						updateOtherClaimDetailDTO.setKey(null);
					}
					rodDTO.getPreauthDTO().setUpdateOtherClaimDetailDTO(updateOtherClaimDetailsForExisting);
				}
			}else{
				if(null != previousLatestROD){
					List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsForExisting = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(previousLatestROD.getKey());
					for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsForExisting) {
						updateOtherClaimDetailDTO.setKey(null);
					}
					rodDTO.getPreauthDTO().setUpdateOtherClaimDetailDTO(updateOtherClaimDetailsForExisting);
				}
			}
		}
		
		if(previousLatestROD == null){
			setClaimValuesToDTO(rodDTO.getPreauthDTO(),claimByKey);
		}
		rodDTO.getPreauthDTO().getNewIntimationDTO().setGmcMainMemberId(rodDTO.getNewIntimationDTO().getGmcMainMemberId());
		rodDTO.getPreauthDTO().getNewIntimationDTO().setGmcMainMemberName(rodDTO.getNewIntimationDTO().getGmcMainMemberName());
		if(rodDTO.getPreauthDTO().getPolicyDto().getLinkPolicyNumber() != null){
			Insured insuredDetails = insuredService.getInsuredByInsuredKey(rodDTO.getNewIntimationDTO().getInsuredKey());
			Map<String, String> getLinkedPolicyDtls = calcService.getLinkedPolicyDetails(rodDTO.getPreauthDTO().getPolicyDto().getPolicyNumber(), insuredDetails.getLinkEmpNumber());
			rodDTO.getClaimDTO().getNewIntimationDto().setGmcMainMemberName(getLinkedPolicyDtls.get("INSURED_NAME"));
			if(rodDTO.getPreauthDTO().getPolicyDto().getPaymentParty() != null && rodDTO.getPreauthDTO().getPolicyDto().getPaymentParty().equalsIgnoreCase(SHAConstants.GMC_PAYMENT_PARTY_EMPLOYEE)) {
				rodDTO.getDocumentDetails().setEmailId(getLinkedPolicyDtls.get("INSURED_EMAIL_ID"));
			}
		}
		
		//IMSSUPPOR-23596
		rodDTO.setIsAlreadyHospitalizationExist(reimbursementService.isPreviousHospAcknowledgment(claimKey, docAckKey));
		
		String topAlertFlag = claimService.getTopUpPolicyDetails(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyNumber(),rodDTO.getPreauthDTO());
		rodDTO.getPreauthDTO().setTopUpPolicyAlertFlag(topAlertFlag);
		/*//CR2019169
				LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
				legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
				rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirDTO);*/
		LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
		legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
		rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirDTO);
		newIntimationDto.setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
		
		//CR2019217
		 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(rodDTO.getPreauthDTO().getNewIntimationDTO().getIntimationId()); 
		 if(icrAgent != null && !icrAgent.isEmpty()) {
				String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
				rodDTO.getPreauthDTO().setIcrAgentValue(agentScorePoint);
				//added for SM Points suggested by Sathish Sir added by Noufel
				String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
				rodDTO.getPreauthDTO().setSmAgentValue(smScorepoint);
			 
		 }
		 //IMSSUPPOR-33388
		 if(rodDTO.getNewIntimationDTO().getPolicy().getProduct().getCode() != null && 
				 (rodDTO.getNewIntimationDTO().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_076)
							|| rodDTO.getNewIntimationDTO().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.GROUP_HOSPITAL_CASH_POLICY))) {
			 rodDTO.getDocumentDetails().setHospitalizationFlag(null);
			 rodDTO.getDocumentDetails().setHospitalization(false);
				rodDTO.getDocumentDetails().setPreHospitalizationFlag(null);
				rodDTO.getDocumentDetails().setPreHospitalization(false);
				rodDTO.getDocumentDetails().setPostHospitalizationFlag(null);
				rodDTO.getDocumentDetails().setPostHospitalization(false);
				rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(null);
				rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(null);
				rodDTO.getDocumentDetails().setPostHospitalizationClaimedAmount(null);
		 }
		 
		 if(ReferenceTable.RECEIVED_FROM_INSURED.equals(docAcknowledgment.getDocumentReceivedFromId().getKey())){
			 
			 System.out.println("Intimation NUMBER****************"+rodDTO.getPreauthDTO().getNewIntimationDTO().getIntimationId());
				List<DocumentDetails> documentDetails = createRodService.getDocumentDetailsByIntimationNumber(rodDTO.getPreauthDTO().getNewIntimationDTO().getIntimationId(),SHAConstants.NEFT_DETAILS);
				if(documentDetails !=null){
					System.out.println("NEFT Details Available in DMS");
					rodDTO.setIsNEFTDetailsAvailableinDMS(true);
				}
				else{
					System.out.println("NEFT Details not Available in DMS");
					
					String neftDetailsAvailableFlag = calcService.getNEFTDetailsAvailableFlag(rodDTO.getNewIntimationDTO().getIntimationId());
					//String neftDetailsAvailableFlag = "N";
					if(neftDetailsAvailableFlag !=null && neftDetailsAvailableFlag.equalsIgnoreCase(SHAConstants.N_FLAG)){
						System.out.println("To save Details");
						rodDTO.setIsNEFTDetailsAvailable(true);
					
						
					}
				}
		
		 }
			
		view.setCreateRODWizardView(CreateRODWizardView.class, rodDTO);
		
		}
	}
	
	protected void showCancelAcknowledgementWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_CANCEL_ACKNOWLEDGEMENT_WIZARD) final ParameterDTO parameters) {
		
		SearchCreateRODTableDTO tableDTO = (SearchCreateRODTableDTO) parameters
				.getPrimaryParameter();
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
		Long docAckKey = tableDTO.getAckKey();
		rodDTO.getDocumentDetails().setDocAcknowledgementKey(docAckKey);
		
		rodDTO.setStrUserName(tableDTO.getUsername());
		
		DocAcknowledgement docAcknowledgement = acknowledgementDocumentsReceivedService.getDocAcknowledgementBasedOnKey(docAckKey);
		rodDTO.getDocumentDetails().setAcknowledgementNumber(docAcknowledgement.getAcknowledgeNumber());
		
		if(docAcknowledgement.getPreHospitalizationClaimedAmount() != null){
		rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(docAcknowledgement.getPreHospitalizationClaimedAmount().toString());
		}
		if(docAcknowledgement.getPostHospitalizationClaimedAmount() != null){
			rodDTO.getDocumentDetails().setPostHospitalizationClaimedAmount(docAcknowledgement.getPostHospitalizationClaimedAmount().toString());
		}
		
		if(docAcknowledgement.getHospitalizationClaimedAmount() != null){
			rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(docAcknowledgement.getHospitalizationClaimedAmount().toString());
		}
		
		//Added for PA
		if(docAcknowledgement.getClaim() != null && docAcknowledgement.getClaim().getLobId() != null && docAcknowledgement.getClaim().getLobId().equals(ReferenceTable.PA_LOB_KEY)){
			Double paClaimedAmt = acknowledgementDocumentsReceivedService.getClaimedAmountValueForView(docAcknowledgement);
			rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(paClaimedAmt.toString());
		}
		
		if(docAcknowledgement.getDocumentReceivedFromId() != null){
			SelectValue select = new SelectValue();
			select.setId(docAcknowledgement.getDocumentReceivedFromId().getKey());
			select.setValue(docAcknowledgement.getDocumentReceivedFromId().getValue());
			rodDTO.getDocumentDetails().setDocumentsReceivedFrom(select);
		}
		
		//rodDTO.setHumanTask(tableDTO.getHumanTaskListDTO());

//		populateDocumentDetails(rodDTO, docAckKey, ReferenceTable.ROD_CREATION);
		Long claimKey = tableDTO.getClaimkey();
		Claim claimByKey = claimService.getClaimByKey(claimKey);
		if(claimByKey != null && claimByKey.getClaimType().getValue().equalsIgnoreCase("Cashless") && claimByKey.getKey() != null){
			Preauth preauth= preauthService.getLatestPreauthByClaim(claimByKey.getKey());
			
			String diagnosisForPreauthByKey = "";
			if(preauth != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
				
			}
			rodDTO.setDiagnosis(diagnosisForPreauthByKey);
		}
		// Long count =
		// getAckNoCountByClaimKey(claimKey,ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED);
		Long count = getAckNoCountByClaimKey(claimKey,
				ReferenceTable.CREATE_ROD);
		rodDTO.setAcknowledgementNumber(count);
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		ClaimDto claimDTO = null;
		if (claimByKey != null) {
			// setClaimValuesToDTO(preauthDTO, claimByKey);
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
		}
		
		rodDTO.setDbOutArray(tableDTO.getDbOutArray());
		
		//BeanItemContainer<SelectValue> masterValueByReference = masterService.getMasterValueByReference(ReferenceTable.REASON_FOR_CANCEL_ACKNOWLEDGEMENT);
		
		view.setCancelAcknowledgementView(CancelAcknowledgementWizardView.class, rodDTO);
	}

	private void getPreviousRODNumber(ReceiptOfDocumentsDTO rodDTO) {
		Reimbursement reimbursement = ackDocReceivedService
				.getLatestReimbursementDetails(rodDTO.getClaimDTO().getKey());
		if (null != reimbursement) {
			rodDTO.setRodNumberForUploadTbl(reimbursement.getRodNumber());
		}
	}

	protected void showBillEntryWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_BILL_ENTRY_WIZARD) final ParameterDTO parameters) {

		SearchEnterBillDetailTableDTO tableDTO = (SearchEnterBillDetailTableDTO) parameters
				.getPrimaryParameter();
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
		
		Boolean isValidClaimForBillEntry = true;
		// Hard code key value will be later changed. This is for testing
		// purpose

		Long rodKey = tableDTO.getRodKey();// = 7006l;
		Long ackKey = tableDTO.getAckKey();
		Long claimKey = tableDTO.getClaimkey();
	//	rodDTO.setHumanTask(tableDTO.getHumanTaskListDTO());
		// Long rodKey = 5047l;//= 7006l;
		populateDocumentDetails(rodDTO, rodKey, ReferenceTable.BILL_ENTRY);
		
		
		Claim claimByKey = claimService.getClaimByKey(claimKey);
		
		if(null != claimByKey)
		{
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
			{
				isValidClaimForBillEntry = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
		}
		
		if(isValidClaimForBillEntry)
		{
			// Long count =
			// getAckNoCountByClaimKey(claimKey,ReferenceTable.CREATE_ROD);
			Long count = getAckNoCountByClaimKey(claimKey,
					ReferenceTable.CREATE_ROD);
			// based on ack no, fetch the data from document acknowledge table. Ack
			// no will as a part of primary parameter.
			rodDTO.setAcknowledgementNumber(count);
			ClaimDto claimDTO = null;
			// rodDTO.getDocumentDetails().setPaymentModeFlag(ReferenceTable.PAYMENT_MODE_CHEQUE_DD);
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			if (claimByKey != null) {
				// setClaimValuesToDTO(preauthDTO, claimByKey);
				newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
					 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
					 //IMSSUPPOR-30427
					 if(latestPreauthByClaim != null){
						 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
					 }
					 
						Preauth latestPreauthByClaimForWithdrawReject = preauthService.getLatestPreauthByClaimForWithdrawReject(claimKey);
						if(latestPreauthByClaimForWithdrawReject != null){
							if(latestPreauthByClaimForWithdrawReject != null && latestPreauthByClaimForWithdrawReject.getOtherBenefitFlag() != null && latestPreauthByClaimForWithdrawReject.getOtherBenefitFlag().equalsIgnoreCase("Y")){
								rodDTO.getDocumentDetails().setIsOtherBenefitApplicableInPreauth(true);
							}
							List<OtherBenefitsTableDto> benefitAmountDetailsByCashlessKey = premedicalService.getBenefitAmountDetailsByCashlessKey(latestPreauthByClaimForWithdrawReject.getKey());
							for (OtherBenefitsTableDto otherBenefitsTableDto : benefitAmountDetailsByCashlessKey) {
								if(otherBenefitsTableDto.getBenefitName() != null && otherBenefitsTableDto.getBenefitName().equalsIgnoreCase(SHAConstants.emergencyDomestic)){
									rodDTO.getDocumentDetails().setIsEmergencyMedicalEvacuation(true);
								}else if(otherBenefitsTableDto.getBenefitName() != null && otherBenefitsTableDto.getBenefitName().equalsIgnoreCase(SHAConstants.repatriationOfMortal)){
									rodDTO.getDocumentDetails().setIsRepatriationOfMortal(true);
								}
							}
						}
					 
				 }
				
				claimDTO.setNewIntimationDto(newIntimationDto);
				rodDTO.setNewIntimationDTO(newIntimationDto);
				rodDTO.setClaimDTO(claimDTO);
			}
			
			
			// Method to populate hospital values from VW_HOSPITALS;
			/*
			 * if(null != rodDTO.getClaimDTO() &&
			 * (ReferenceTable.CLAIM_TYPE_CASHLESS
			 * ).equalsIgnoreCase(rodDTO.getClaimDTO().getClaimTypeValue())) {
			 * populatePaymentDetailsForCashLessClaim
			 * (newIntimationDto.getHospitalDto().getKey(),rodDTO); } else {
			 * populatePaymentDetailsForReimbursementClaim
			 * (rodDTO.getClaimDTO().getKey
			 * (),rodDTO,newIntimationDto.getHospitalDto().getKey()); }
			 */
	
			getPreviousRODNumber(rodDTO);
	
			
			Map<String, Integer> productBenefitMap = calcService.getProductBenefitFlag(
					claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
					.getProduct().getKey());
			/**
			 * Earlier , pre and post hospitalization was enabled only based on
			 * product conditions in ack , rod level and bill entry level.  But as per mockup 13.7 , this
			 * validation needs to be removed at ack and rod level and should be available only
			 * at FA level. Hence hardcoding the values of pre and post in map , by which we always
			 * enable pre and post for all products at ACK and ROD level and bil entry level.
			 * */
			productBenefitMap.put("preHospitalizationFlag", 1);
			productBenefitMap.put("postHospitalizationFlag", 1);
			//productBenefitMap.put("LumpSumFlag", 1);
			rodDTO.setProductBenefitMap(productBenefitMap);
			
			createRodService.getBillClassificationFlagDetails(rodDTO.getClaimDTO()
					.getKey(), rodDTO);
			
			/*rodDTO.setProductBenefitMap(dbCalculationService.getProductBenefitFlag(
					claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
							.getProduct().getKey()));*/
	
			rodDTO.setStrUserName(tableDTO.getUsername());
			rodDTO.setStrPassword(tableDTO.getPassword());
	        
			Boolean isQuery = false;
			if(("Yes").equalsIgnoreCase(rodDTO.getDocumentDetails().getReconsiderationRequestValue()))
					{
						List<ReconsiderRODRequestTableDTO> reconsiderList = getReconsiderRODRequestForBillEntry(rodKey);
						if(null != reconsiderList && !reconsiderList.isEmpty())
						{
							rodDTO.setReconsiderRodRequestList(reconsiderList);
						}
						
					}
			rodDTO.setRodQueryDetailsList(getRODQueryDetailsForCreateRodandBillEntry(claimByKey, ackKey));
			List<RODQueryDetailsDTO> rodQueryDetailsList = rodDTO.getRodQueryDetailsList();
			if(rodDTO.getRodQueryDetailsList() != null){
				for (RODQueryDetailsDTO rodQuery : rodQueryDetailsList) {
					if(rodQuery.getReplyStatus() != null && ("Y").equalsIgnoreCase(rodQuery.getReplyStatus())){
						rodDTO.setIsQueryReplyReceived(true);
						isQuery = true;
					}
				}
			}
			
			List<UploadDocumentDTO> rodSummaryDetails = rodService
					.getRODSummaryDetails(rodKey);
			/**
			 * Fix for implemeting claims dms in bill entry screen.. -- starts
			 * **/
/*			if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
			{
				List<DMSDocumentDetailsDTO> claimDMSList = getClaimsDMSList(claimByKey.getIntimation().getIntimationId());
				for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
					if(null != claimByKey)
					{
						uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
						uploadDocumentDTO.setDmsDocumentDTOList(claimDMSList);
					}
				}
			}
*/			/**
			 * Fix for implemeting claims dms in bill entry screen.. -- ends
			 * **/
			Reimbursement objReimbursement = createRodService.getReimbursementObjectByKey(rodKey);
			if(null != objReimbursement)
			{
				if(/*rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode() != null && 
						rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_076) ||*/
						rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode() != null && 
						rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.GROUP_HOSPITAL_CASH_POLICY)){
					if(objReimbursement.getProdDiagnosisID() != null){	
					DiagnosisHospitalDetails diagnosisValue =createRodService.getDiagnosisByID(objReimbursement.getProdDiagnosisID()) ;
					SelectValue selectValue = new SelectValue();
					selectValue.setId(diagnosisValue.getDiagnosisHospitalKey());
					selectValue.setValue(diagnosisValue.getDiagnosisName());
					rodDTO.getDocumentDetails().setDiagnosisHospitalCash(selectValue);
					}
		
				}
				//MED-PRD-076
				rodDTO.getDocumentDetails().setDateOfDischarge(objReimbursement.getDateOfDischarge());
				rodDTO.getDocumentDetails().setDateOfAdmission(objReimbursement.getDateOfAdmission());
				
				if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
				{
					//if(null != objReimbursement)
					//{
						rodDTO.setIntimationNo(objReimbursement.getClaim().getIntimation().getIntimationId());
						rodDTO.setDateOfAdmission(SHAUtils.formatDate(objReimbursement.getDateOfAdmission()));
						rodDTO.setDateOfDischarge(SHAUtils.formatDate(objReimbursement.getDateOfDischarge()));
						rodDTO.setInsuredPatientName(objReimbursement.getClaim().getIntimation().getInsuredPatientName());
					//}
		/*			for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
						
						if(null != objReimbursement)
						{
							uploadDocumentDTO.setIntimationNo(objReimbursement.getClaim().getIntimation().getIntimationId());
							uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(objReimbursement.getDateOfAdmission()));
							uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(objReimbursement.getDateOfDischarge()));
							uploadDocumentDTO.setInsuredPatientName(objReimbursement.getClaim().getIntimation().getInsuredPatientName());
							
							
						}
		
					}*/
				}
			}
			
			String diagnosisForPreauthByKey = "";
			if(objReimbursement != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(objReimbursement.getKey());
				
			}
			rodDTO.setDiagnosis(diagnosisForPreauthByKey);

			List<DMSDocumentDetailsDTO> claimDMSList = getClaimsDMSList(claimByKey.getIntimation().getIntimationId());
			if(isQuery){
				// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
				List<Long> documentSummaryKeys = new ArrayList<Long>();
				List<BillEntryDetailsDTO> dtoList = null;
				for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {

					//Fix for implementing claims dms in bill entry screen.. -- starts
					uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
					uploadDocumentDTO.setDmsDocumentDTOList(claimDMSList);
					//Fix for implementing claims dms in bill entry screen.. -- ends

					documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
					uploadDocumentDTO.setStatus(true);
					List<RODBillDetails> billEntryDetails = rodService
							.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
					dtoList = new ArrayList<BillEntryDetailsDTO>();
					if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
						for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
							/*
							 * <<<<<<< HEAD
							 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
							 * uploadDocumentDTO)); =======
							 */
							
							dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
									uploadDocumentDTO));
							// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
						}
					}
				
					uploadDocumentDTO.setStatus(false);
					uploadDocumentDTO.setBillEntryDetailList(dtoList);
					
		
					if (uploadDocumentDTO != null) {
						if ((ReferenceTable.BENEFITS_PATIENT_CARE)
								.equalsIgnoreCase(uploadDocumentDTO
										.getPatientCareBenefitFlag())) {
							List<PatientCareDTO> patientCareList = claimRequestBenefitsService
									.getPatientCareDetails(uploadDocumentDTO
											.getPatientBenefitKey());
							if (null != patientCareList && !patientCareList.isEmpty()) {
								uploadDocumentDTO.setPatientCareDTO(patientCareList);
							}
							// rodDTO.getAddOnBenefitsDTO().setAdmittedNoOfDays(uploadDocumentDTO.getPatientCareNoofDays());
						}
					}
				}
				
				rodDTO.setUploadDocsList(rodSummaryDetails);
				
			}
			else{
	
				//if(null != rodDTO.getUploadDocsList() && !rodDTO.getUploadDocsList().isEmpty())
				if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
				{
					/*List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();*/
				//	List<UploadDocumentDTO> uploadDocsList = rodDTO.getUploadDocsList();
					List<BillEntryDetailsDTO> dtoList = null;
					for (UploadDocumentDTO uploadDocDTO : rodSummaryDetails) {
						//sss
						
						//Fix for implementing claims dms in bill entry screen.. -- starts
						uploadDocDTO.setClaimNo(claimByKey.getClaimId());
						uploadDocDTO.setDmsDocumentDTOList(claimDMSList);
						//Fix for implementing claims dms in bill entry screen.. -- ends

						uploadDocDTO.setIsBillSaved(true);
						dtoList = new ArrayList<BillEntryDetailsDTO>();
						List<RODBillDetails> billEntryDetails = rodService
								.getBillEntryDetails(uploadDocDTO.getDocSummaryKey());
						if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
							for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
								/*
								 * <<<<<<< HEAD
								 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
								 * uploadDocumentDTO)); =======
								 */
								dtoList.add(getBillDetailsDTOForBillEntry(billEntryDetailsDO));
								
								// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
							}
							uploadDocDTO.setBillEntryDetailList(dtoList);
						}
					}
				//	rodDTO.getUploadDocumentsDTO().setBillEntryDetailList(dtoList);
					rodDTO.setUploadDocsList(rodSummaryDetails);
					
				}
			}
			
			
			rodDTO.setCheckListTableContainerForROD(masterService.getDocumentCheckListValuesContainer(SHAConstants.MASTER_TYPE_REIMBURSEMENT));
			
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDTO.getUsername());
	
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.BILL_ENTRY);
			
			//loadRRCRequestValuesForProcessing(rrcDTO,insuredSumInsured,SHAConstants.ACKNOWLEDGE_DOC_RECEIVED);
			
			rodDTO.setRrcDTO(rrcDTO);
			
			rodDTO.getUploadDocumentsDTO().setClaimType(rodDTO.getClaimDTO().getClaimType());
			if(null != rrcDTO.getNewIntimationDTO() && null != rrcDTO.getNewIntimationDTO().getPolicy()) {
			rodDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(rrcDTO.getNewIntimationDTO().getPolicy().getKey()));
			rodDTO.setIsPEDInitiatedbtn(rodDTO.getIsPEDInitiated());
			}
			UploadDocumentDTO uploadDocDTO = new UploadDocumentDTO();
			uploadDocDTO.setUsername(tableDTO.getUsername());
			

			DocAcknowledgement previousAcknowledgmentDetails = reimbursementService.getPreviousAcknowledgmentDetails(claimKey);
			if(previousAcknowledgmentDetails != null){
				rodDTO.setIsAlreadyHospitalizationExist(true);
			}
			
//			if(rrcDTO.getNewIntimationDTO() != null && rrcDTO.getNewIntimationDTO().getInsuredPatient() != null &&
//					rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
//				Long claimCount = preauthService.getClaimCount(rrcDTO.getNewIntimationDTO().getPolicy().getKey());
//				if(claimCount != null){
//					rodDTO.setClaimCount(claimCount);
//				}
//			}
			if(null != newIntimationDto && null != newIntimationDto.getPolicy()) {
//				BeanItemContainer<SelectValue> sectionList = masterService.getSectionList(newIntimationDto.getPolicy().getProduct().getKey());
				BeanItemContainer<SelectValue> sectionList = masterService
						.getSectionList(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getKey(),rodDTO.getClaimDTO().getNewIntimationDto().getPolicy());
						
						if(ReferenceTable.getSuperSurplusKeys().containsKey(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getKey())
								&& ((rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan() == null) || (rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan() != null && rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan().equalsIgnoreCase("S")))){
							List<SelectValue> itemIds = sectionList.getItemIds();
							List<SelectValue> filterItem = new ArrayList<SelectValue>();
							for (SelectValue selectValue : itemIds) {
								if(! selectValue.getCommonValue().equals(ReferenceTable.DELVIERY_AND_NEW_BORN_SECTION_CODE)){
									filterItem.add(selectValue);
								}
							}
							sectionList.removeAllItems();
							sectionList.addAll(filterItem);
							
						}
						rodDTO.setSectionList(sectionList);
						rodDTO.setShouldDisableSection(reimbursementService.isItHavingAnyROD(claimKey, rodKey));
			}
			
			if(claimByKey!=null){
				
				Long hospital = claimByKey.getIntimation().getHospital();
				Hospitals hospitalById = hospitalService.getHospitalById(hospital);
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					rodDTO.setIsSuspicious(hospitalById.getSuspiciousType());
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
						rodDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
					}
				}
			}
			

			rodDTO.setPreauthDTO(new PreauthDTO());
			rodDTO.setDbOutArray(tableDTO.getDbOutArray());
			Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
			rodDTO.getPreauthDTO().setIsPolicyValidate(policyValidation);
			
			/*List<UpdateOtherClaimDetailDTO> updateOtherClaimDetails = preauthService.getUpdateOtherClaimDetails(newIntimationDto.getPolicy().getKey());
			rodDTO.getPreauthDTO().setUpdateOtherClaimDetailDTO(updateOtherClaimDetails);*/
			
			// R1045
			rodDTO.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
			rodDTO.getPreauthDTO().setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			rodDTO.getPreauthDTO().setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			rodDTO.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
			
			rodDTO.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
			rodDTO.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
			
			String topAlertFlag = claimService.getTopUpPolicyDetails(newIntimationDto.getPolicy().getPolicyNumber(),rodDTO.getPreauthDTO());
			rodDTO.getPreauthDTO().setTopUpPolicyAlertFlag(topAlertFlag);
			//CR2019217
			 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(rodDTO.getPreauthDTO().getNewIntimationDTO().getIntimationId()); 
			 if(icrAgent != null && !icrAgent.isEmpty()) {
					String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
					rodDTO.getPreauthDTO().setIcrAgentValue(agentScorePoint);
					//added for SM Points suggested by Sathish Sir added by Noufel
					String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
					rodDTO.getPreauthDTO().setSmAgentValue(smScorepoint);
				 
			 }
			 
			
			if(isValidClaimForBillEntry){
				view.setBillEntryWizard(BillEntryWizardView.class, rodDTO);
			}
			
		}
	}

	
	
	/*
	 * protected void showProcessClaimRequestBenefitsWizard(
	 * 
	 * @Observes @CDIEvent(MenuPresenter.SHOW_PROCESS_CLAIM_REQUEST_BENEFITS)
	 * final ParameterDTO parameters) {
	 * 
	 * SearchProcessClaimBillingTableDTO tableDTO =
	 * (SearchProcessClaimBillingTableDTO)parameters.getPrimaryParameter();
	 * ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
	 * 
	 * //Long rodKey = tableDTO.getRodKey();//= 7006l; Long rodKey = 5155l;
	 * //Long claimKey = tableDTO.getClaimkey(); Long claimKey = 4042l;
	 * //rodDTO.setHumanTask(tableDTO.getHumanTaskListDTO());
	 * 
	 * populateDocumentDetails(rodDTO,rodKey,ReferenceTable.CLAIM_BILLING_BENEFITS
	 * );
	 * 
	 * 
	 * 
	 * Claim claimByKey = claimService.getClaimByKey(claimKey);
	 * 
	 * NewIntimationDto newIntimationDto = new NewIntimationDto(); if
	 * (claimByKey != null) { newIntimationDto =
	 * intimationService.getIntimationDto(claimByKey .getIntimation()); ClaimDto
	 * claimDTO = new ClaimMapper().getClaimDto(claimByKey);
	 * claimDTO.setNewIntimationDto(newIntimationDto);
	 * rodDTO.setClaimDTO(claimDTO); }
	 * 
	 * 
	 * List<Double> copayValue = dbCalculationService.getProductCoPay(
	 * rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
	 * .getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
	 * .getInsuredPatient().getKey()); rodDTO.setProductCoPay(copayValue);
	 * 
	 * List<AddOnBenefitsDTO> addOnBenefitsDTO =
	 * claimRequestBenefitsService.populateAddOnBenefitsTableValues
	 * (rodDTO.getClaimDTO().getNewIntimationDto(), rodKey,copayValue); if(null
	 * != addOnBenefitsDTO && !addOnBenefitsDTO.isEmpty()) {
	 * rodDTO.setAddOnBenefitsDTO(addOnBenefitsDTO); }
	 * 
	 * rodDTO.setProductBenefitMap
	 * (dbCalculationService.getProductBenefitFlag(claimByKey.getKey(),
	 * claimByKey.getIntimation().getPolicy().getProduct().getKey()));
	 * rodDTO.setStrUserName(tableDTO.getUsername());
	 * rodDTO.setStrPassword(tableDTO.getPassword());
	 * 
	 * 
	 * 
	 * view.setProcessClaimRequestBenefitsWizard(ProcessClaimRequestBenefitsWizard
	 * .class, rodDTO); }
	 */

	protected void showProcessClaimRequestBenefitsWizard(
			SearchProcessClaimBillingTableDTO tableDTO) {

		// SearchProcessClaimBillingTableDTO tableDTO =
		// (SearchProcessClaimBillingTableDTO)parameters.getPrimaryParameter();
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();

		Long rodKey = tableDTO.getRodKey();// = 7006l;
		// Long rodKey = 5155l;
		Long claimKey = tableDTO.getClaimKey();
		populateDocumentDetails(rodDTO, rodKey,
				ReferenceTable.CLAIM_BILLING_BENEFITS);
		Claim claimByKey = claimService.getClaimByKey(claimKey);

		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
				 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
			 }
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
			rodDTO.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
		}
		
		rodDTO.getUploadDocumentsDTO().setAdmissionDate(rodDTO.getClaimDTO().getNewIntimationDto().getAdmissionDate());
		Reimbursement objReimbursement = createRodService.getReimbursementObjectByKey(rodKey);
		if(null != objReimbursement)
		{
			rodDTO.getUploadDocumentsDTO().setDischargeDate(objReimbursement.getDateOfDischarge());
			//MED-PRD-076
			rodDTO.getDocumentDetails().setDateOfAdmission(objReimbursement.getDateOfAdmission());
			rodDTO.getDocumentDetails().setDateOfDischarge(objReimbursement.getDateOfDischarge());
		}
		

		List<Double> copayValue = calcService.getProductCoPay(rodDTO
				.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
				.getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
				.getInsuredPatient().getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
				.getInsuredPatient().getInsuredId(),rodDTO.getClaimDTO().getNewIntimationDto());
		rodDTO.setProductCoPay(copayValue);

		/*List<AddOnBenefitsDTO> addOnBenefitsDTO = claimRequestBenefitsService
				.populateAddOnBenefitsTableValues(rodDTO.getClaimDTO()
						.getNewIntimationDto(), claimKey, rodKey, copayValue);
		if (null != addOnBenefitsDTO && !addOnBenefitsDTO.isEmpty()) {
			rodDTO.setAddOnBenefitsDTO(addOnBenefitsDTO);
		}*/

		rodDTO.setProductBenefitMap(calcService.getProductBenefitFlag(
				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
						.getProduct().getKey()));
		rodDTO.setStrUserName(tableDTO.getUsername());
		rodDTO.setStrPassword(tableDTO.getPassword());
	//	rodDTO.setHumanTask(tableDTO.getHumanTaskDTO());
		
		rodDTO.setIsBillingScreen(true);
		rodDTO.setIsMedicalScreen(false);
		
		String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
		if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
			String get64vbStatus = PremiaService.getInstance().get64VBStatus(claimByKey.getIntimation().getPolicy().getPolicyNumber(), claimByKey.getIntimation().getIntimationId());
			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
				rodDTO.setIsDishonoured(true);
			} 
		}
		Long policyKey = rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getKey();
		
		Long insuredKey = rodDTO.getClaimDTO().getNewIntimationDto().getInsuredKey();
			
		String policyInsuredAgeingFlag = dBCalculationService.getPolicyInsuredAgeingFlag(policyKey,insuredKey);
			
		rodDTO.getPreauthDTO().setPolicyInsuredAgeingFlag(policyInsuredAgeingFlag);
		
		if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
		{
		Intimation intimation = intimationService
				.getIntimationByKey(claimByKey.getIntimation().getKey());
		rodDTO.getPreauthDTO().setDocRecievedDate(intimation.getAdmissionDate());
		
		}
		else if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
		Date docRecievedDate = dBCalculationService.getDocRecievedDate(claimByKey.getKey());
		rodDTO.getPreauthDTO().setDocRecievedDate(docRecievedDate);
		}

		rodDTO.setDbOutArray(tableDTO.getDbOutArray());
		view.setProcessClaimRequestBenefitsWizard(
				ProcessClaimRequestBenefitsWizard.class, rodDTO);
	}

	protected void showProcessFinancialClaimRequestBenefitsWizard(
			SearchProcessClaimFinancialsTableDTO tableDTO) {

		// SearchProcessClaimBillingTableDTO tableDTO =
		// (SearchProcessClaimBillingTableDTO)parameters.getPrimaryParameter();
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();

		Long rodKey = tableDTO.getRodKey();// = 7006l;
		// Long rodKey = 5155l;
		Long claimKey = tableDTO.getClaimKey();
		// Long claimKey = 4042l;
		// rodDTO.setHumanTask(tableDTO.getHumanTaskListDTO());
		
		//CR2019169
		LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
		legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
		rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirDTO);
		
		List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(tableDTO.getRodKey());	
		if(displayDto != null && !displayDto.isEmpty()) {
		List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
		LegalHeirDTO legalHeirDTODisplay;
		for (LegalHeir legalHeir : displayDto) {
			legalHeirDTODisplay = new LegalHeirDTO(legalHeir);
			
			/*legalHeirDTODisplay.setHeirName(legalHeir.getLegalHeirName());
			SelectValue value = new SelectValue();
			value.setId(legalHeir.getRelationCode());
			value.setValue(legalHeir.getRelationDesc());
			legalHeirDTODisplay.setRelationship(value);
			legalHeirDTODisplay.setSharePercentage(legalHeir.getSharePercentage());
			legalHeirDTODisplay.setAddress(legalHeir.getAddress());
			SelectValue accValue = new SelectValue();
			accValue.setValue(legalHeir.getAccountType());
			legalHeirDTODisplay.setAccountType(accValue);
			legalHeirDTODisplay.setBeneficiaryName(legalHeir.getBeneficiaryName());
			legalHeirDTODisplay.setAccountNo(legalHeir.getAccountNo());
			legalHeirDTODisplay.setIfscCode(legalHeir.getIfscCode());
			SelectValue docValue = new SelectValue();
			docValue.setValue(legalHeir.getAccountType());
			legalHeirDTODisplay.setDocType(accValue);*/
			legalHeirDTODisplay.setRelationshipContainer(masterService.getRelationshipContainerValues());
			
			list.add(legalHeirDTODisplay);
			
		}		
		rodDTO.getPreauthDTO().setLegalHeirDTOList(list);	
		}
		populateDocumentDetails(rodDTO, rodKey,
				ReferenceTable.CLAIM_BILLING_BENEFITS);

		Claim claimByKey = claimService.getClaimByKey(claimKey);
		

		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());

			ClaimDto claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKey);
			
			if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
				 if(latestPreauthByClaim != null){
					 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
				 }
			 }
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
			rodDTO.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
		}
		//added for new product
		Insured insured = policyService.findByClsInsuredKey(newIntimationDto.getInsuredKey());
		if(insured != null){
			newIntimationDto.setInsuredPatient(insured);
		}
		rodDTO.getUploadDocumentsDTO().setAdmissionDate(rodDTO.getClaimDTO().getNewIntimationDto().getAdmissionDate());
		Reimbursement objReimbursement = createRodService.getReimbursementObjectByKey(rodKey);
		if(null != objReimbursement)
		{
			rodDTO.getUploadDocumentsDTO().setDischargeDate(objReimbursement.getDateOfDischarge());
			//MED-PRD-076
			rodDTO.getDocumentDetails().setDateOfAdmission(objReimbursement.getDateOfAdmission());
			rodDTO.getDocumentDetails().setDateOfDischarge(objReimbursement.getDateOfDischarge());
		}

		List<Double> copayValue = calcService.getProductCoPay(rodDTO
				.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
				.getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
				.getInsuredPatient().getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
				.getInsuredPatient().getInsuredId(),rodDTO.getClaimDTO().getNewIntimationDto());
		rodDTO.setProductCoPay(copayValue);

		List<AddOnBenefitsDTO> addOnBenefitsDTO = claimRequestBenefitsService
				.populateAddOnBenefitsTableValues(rodDTO.getClaimDTO()
						.getNewIntimationDto(), claimKey, rodKey, copayValue,null);
		if (null != addOnBenefitsDTO && !addOnBenefitsDTO.isEmpty()) {
			rodDTO.setAddOnBenefitsDTO(addOnBenefitsDTO);
		}

		rodDTO.setProductBenefitMap(calcService.getProductBenefitFlag(
				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
						.getProduct().getKey()));
		rodDTO.setStrUserName(tableDTO.getUsername());
		rodDTO.setStrPassword(tableDTO.getPassword());
	//	rodDTO.setHumanTask(tableDTO.getHumanTaskDTO());
		rodDTO.getDocumentDetails().setRodKey(rodKey);
		
		Reimbursement reimbursement = createRodService.getReimbursementObjectByKey(rodKey);
		if(null != reimbursement)
		{
			if(ReferenceTable.PAYMENT_MODE_CHEQUE_DD.equals(reimbursement.getPaymentModeId()))
			{
				rodDTO.getDocumentDetails().setPaymentMode(true);
				
			}
			else if(ReferenceTable.PAYMENT_MODE_BANK_TRANSFER.equals(reimbursement.getPaymentModeId()))
			{
				rodDTO.getDocumentDetails().setPaymentMode(false);
				rodDTO.getDocumentDetails().setAccountNo(reimbursement.getAccountNumber());
				rodDTO.getDocumentDetails().setAccountPreference(reimbursement.getAccountPreference());
				rodDTO.getDocumentDetails().setAccountType(reimbursement.getAccountType());
				BankMaster bankDetails = masterService.getBankDetailsByKey(reimbursement.getBankId());
				if(null != bankDetails)
				{
					rodDTO.getDocumentDetails().setIfscCode(bankDetails.getIfscCode());
					rodDTO.getDocumentDetails().setBankName(bankDetails.getBankName());
					rodDTO.getDocumentDetails().setCity(bankDetails.getCity());
					rodDTO.getDocumentDetails().setBranch(bankDetails.getBranchName());	
				}				
			}
			rodDTO.getDocumentDetails().setEmailId(reimbursement.getPayeeEmailId());
			rodDTO.getDocumentDetails().setPanNo(reimbursement.getPanNumber());
			rodDTO.getDocumentDetails().setPayableAt(reimbursement.getPayableAt());
			rodDTO.getDocumentDetails().setReasonForChange(reimbursement.getReasonForChange());
			rodDTO.getDocumentDetails().setLegalFirstName(reimbursement.getLegalHeirFirstName());
			rodDTO.getDocumentDetails().setPayModeChangeReason(reimbursement.getPayModeChangeReason());
		}
		
		String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
		if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
			String get64vbStatus = PremiaService.getInstance().get64VBStatus(claimByKey.getIntimation().getPolicy().getPolicyNumber(), claimByKey.getIntimation().getIntimationId());
			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
				rodDTO.setIsDishonoured(true);
			} 
		}
		Reimbursement hospROD = reimbursementService.getHospitalizationROD(reimbursement.getClaim().getKey());
		
		if(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode() != null && 
				! rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_076) &&
				rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode() != null && 
				! rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.GROUP_HOSPITAL_CASH_POLICY)){
		if(null != reimbursement && null != reimbursement.getClaim() && null != reimbursement.getClaim().getClaimType()  && reimbursement.getClaim().getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)) {
			if(hospROD == null) {
//				reimbursementDTO.setIsDishonoured(true);
				rodDTO.setIsHospitalizationRejected(true);
			}
		}
		}
		
		Reimbursement hospitalizationOrPartialROD = reimbursementService.getHospitalizationOrPartialROD(reimbursement.getClaim().getKey());
		
		if(null != reimbursement && null != reimbursement.getClaim() && null != reimbursement.getClaim().getClaimType()  && reimbursement.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
		//if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
			
			Integer seqNumber = 0;
			
			if(reimbursement.getRodNumber() != null){
				String[] split = reimbursement.getRodNumber().split("/");
				seqNumber = Integer.valueOf(split[split.length - 1]);
			}
			
			if(hospitalizationOrPartialROD == null && ! seqNumber.equals(1)) {
				rodDTO.setIsDishonoured(true);
				rodDTO.setIsHospitalizationRejected(true);
			}
		}

		//Added for GLX2020127
    	Long policyKey = claimByKey.getIntimation().getPolicy().getKey();
		Long insuredKey = claimByKey.getIntimation().getInsured().getKey();
		String policyInsuredAgeingFlag = dBCalculationService.getPolicyInsuredAgeingFlag(policyKey,insuredKey);
		rodDTO.getPreauthDTO().setPolicyInsuredAgeingFlag(policyInsuredAgeingFlag);
		
		if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
		{
		Intimation intimation = intimationService
				.getIntimationByKey(claimByKey.getIntimation().getKey());
		rodDTO.getPreauthDTO().setDocRecievedDate(intimation.getAdmissionDate());
		
		}
		else if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
		Date docRecievedDate = dBCalculationService.getDocRecievedDate(claimByKey.getKey());
		rodDTO.getPreauthDTO().setDocRecievedDate(docRecievedDate);
		}
		
		rodDTO.setIsBillingScreen(false);
		rodDTO.setIsMedicalScreen(false);
		rodDTO.setDbOutArray(tableDTO.getDbOutArray());
		view.setProcessClaimRequestBenefitsWizard(
				ProcessClaimRequestBenefitsWizard.class, rodDTO);
	}

	protected void showClaimBillingWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_MEDICAL_APPROVAL_CLAIM_BILLING_SCREEN) final ParameterDTO parameters) {

		SearchProcessClaimBillingTableDTO tableDTO = (SearchProcessClaimBillingTableDTO) parameters
				.getPrimaryParameter();
		// Long rodKey = tableDTO.getRodKey();

		Long ackDocKey = createRodService
				.getLatestDocAcknowledgementKey(tableDTO.getRodKey());
		DocAcknowledgement docAcknowledgment = createRodService
				.getDocAcknowledgementBasedOnKey(ackDocKey);
		Boolean isValidClaimForBilling = true;
		
		if(null != docAcknowledgment)
		{
			Claim objClaim = docAcknowledgment.getClaim();
			if(null != objClaim)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(objClaim.getLegalFlag()))
				{
					isValidClaimForBilling = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
		}
		if(isValidClaimForBilling)
		{
			if (((("Y").equalsIgnoreCase(docAcknowledgment.getHospitalCashFlag())) || (("Y")
					.equalsIgnoreCase(docAcknowledgment.getPatientCareFlag())) || 
					(tableDTO.getProductKey() != null && tableDTO.getProductKey().equals(ReferenceTable.GROUP_HOSPITAL_CASH_PRODUCT_KEY) &&
							("Y").equalsIgnoreCase(docAcknowledgment.getProdHospBenefitFlag()))) /*|| (("Y")
							.equalsIgnoreCase(docAcknowledgment.getProdHospBenefitFlag())))*/
					&& ("N").equalsIgnoreCase(docAcknowledgment
							.getHospitalisationFlag())
	
					&& ("N").equalsIgnoreCase(docAcknowledgment
							.getPartialHospitalisationFlag())
					&& ("N").equalsIgnoreCase(docAcknowledgment
							.getPreHospitalisationFlag())
					&& ("N").equalsIgnoreCase(docAcknowledgment
							.getPostHospitalisationFlag())
					&& ("N").equalsIgnoreCase(docAcknowledgment
							.getLumpsumAmountFlag())) {
				showProcessClaimRequestBenefitsWizard(tableDTO);
			} else {
				showProcessClaimBillingWizard(tableDTO);
			}
		}

	}

	protected void showFinancialClaimBillingWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_FINANCIAL_APPROVAL_CLAIM_BILLING_SCREEN) final ParameterDTO parameters) {

		SearchProcessClaimFinancialsTableDTO tableDTO = (SearchProcessClaimFinancialsTableDTO) parameters
				.getPrimaryParameter();
		// Long rodKey = tableDTO.getRodKey();
		//Long rodKey = 5155l;

		Long ackDocKey = createRodService
				.getLatestDocAcknowledgementKey(tableDTO.getRodKey());
		DocAcknowledgement docAcknowledgment = createRodService
				.getDocAcknowledgementBasedOnKey(ackDocKey);
		
		Boolean isValidClaimForFA = true;
		if(null != docAcknowledgment)
		{
			Claim objClaim = docAcknowledgment.getClaim();
			if(null != objClaim)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(objClaim.getLegalFlag()))
				{
					isValidClaimForFA = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
		}
		if(isValidClaimForFA)
		{
				if (((("Y").equalsIgnoreCase(docAcknowledgment.getHospitalCashFlag())) ||  (("Y")
						.equalsIgnoreCase(docAcknowledgment.getPatientCareFlag())) || (tableDTO != null && tableDTO.getProductKey() != null && tableDTO.getProductKey().equals(ReferenceTable.GROUP_HOSPITAL_CASH_PRODUCT_KEY) &&
								("Y").equalsIgnoreCase(docAcknowledgment.getProdHospBenefitFlag())))
						&& ("N").equalsIgnoreCase(docAcknowledgment
								.getHospitalisationFlag())
						&& ("N").equalsIgnoreCase(docAcknowledgment
								.getPartialHospitalisationFlag())
						&& ("N").equalsIgnoreCase(docAcknowledgment
								.getPreHospitalisationFlag())
						&& ("N").equalsIgnoreCase(docAcknowledgment
								.getPostHospitalisationFlag())
						&& ("N").equalsIgnoreCase(docAcknowledgment
								.getLumpsumAmountFlag())) {
					showProcessFinancialClaimRequestBenefitsWizard(tableDTO);
				} else {
					showFinancialProcessClaimBillingWizard(tableDTO);
				}
		}
	}

	// SHOW_FINANCIAL_APPROVAL_CLAIM_BILLING_SCREEN

	private List<UploadDocumentDTO> getUploadedDocumentTableDataForBillEntry(
			Long reimbursementKey) {
		List<UploadDocumentDTO> uploadDocsList = createRodService
				.getRODSummaryDetails(reimbursementKey);
		return uploadDocsList;
	}

	private void populatePaymentDetailsForReimbursementClaim(Long claimKey,
			ReceiptOfDocumentsDTO rodDTO/*, Long HospitalKey*/) {
		DocumentDetailsDTO docDetailsDTO = createRodService
				.getPreviousRODDetailsForClaim(claimKey,rodDTO.getDocumentDetails());
		if (null != docDetailsDTO) {
			
			
			rodDTO.getDocumentDetails().setPayableAt(
					docDetailsDTO.getPayableAt());
			rodDTO.getDocumentDetails().setEmailId(docDetailsDTO.getEmailId());
			rodDTO.getDocumentDetails().setPanNo(docDetailsDTO.getPanNo());
			rodDTO.getDocumentDetails().setPayeeName(
					docDetailsDTO.getPayeeName());
			rodDTO.getDocumentDetails().setReasonForChange(
					docDetailsDTO.getReasonForChange());
			rodDTO.getDocumentDetails().setLegalFirstName(
					docDetailsDTO.getLegalFirstName());			
			rodDTO.getDocumentDetails().setPayModeChangeReason(docDetailsDTO.getPayModeChangeReason());
			
			if(null != docDetailsDTO.getPaymentModeFlag() && docDetailsDTO.getPaymentModeFlag().equals(ReferenceTable.PAYMENT_MODE_BANK_TRANSFER))
			{
			
				rodDTO.getDocumentDetails().setAccountNo(
						docDetailsDTO.getAccountNo());
				rodDTO.getDocumentDetails().setAccountPreference(docDetailsDTO.getAccountPreference());
				rodDTO.getDocumentDetails().setAccountType(docDetailsDTO.getAccountType());
				rodDTO.getDocumentDetails()
						.setBankName(docDetailsDTO.getBankName());
				rodDTO.getDocumentDetails().setBankId(docDetailsDTO.getBankId());
				rodDTO.getDocumentDetails().setCity(docDetailsDTO.getCity());
				rodDTO.getDocumentDetails()
						.setIfscCode(docDetailsDTO.getIfscCode());
				rodDTO.getDocumentDetails().setPaymentMode(false);
			}
			else
			{
				rodDTO.getDocumentDetails().setPaymentMode(true);
			}

		} else {
			rodDTO.getDocumentDetails().setPaymentModeFlag(
					ReferenceTable.PAYMENT_MODE_CHEQUE_DD);
			//populatePaymentDetailsForCashLessClaim(HospitalKey, rodDTO);
		}

	}

	/*private void populatePaymentDetailsForHosp(Long key,
			ReceiptOfDocumentsDTO rodDTO) {
		Hospitals hospitals = createRodService.getHospitalsDetails(key,
				masterService);
		if (null != hospitals) {

			String strHospitalPaymentType = hospitals.getPaymentType();
			String strIFscCode = hospitals.getIfscCode();
			String strAccntNo = hospitals.getAccountNo();
			if(
					(null != strIFscCode && !("").equals(strIFscCode) && null != strAccntNo && !("").equalsIgnoreCase(strAccntNo) ) 
					)
			{
				rodDTO.getDocumentDetails().setAccountNo(hospitals.getAccountNo());
				rodDTO.getDocumentDetails().setIfscCode(hospitals.getIfscCode());
				BankMaster masBank = masterService.getBankDetails(hospitals.getIfscCode());
				if(null != masBank)
				{
					rodDTO.getDocumentDetails().setBankName(masBank.getBankName());
					rodDTO.getDocumentDetails().setCity(masBank.getCity());
					rodDTO.getDocumentDetails().setBranch(masBank.getBranchName());
				}
				rodDTO.getDocumentDetails().setPanNo(hospitals.getPanNumber());
				rodDTO.getDocumentDetails().setPaymentModeFlag(
						ReferenceTable.PAYMENT_MODE_BANK_TRANSFER);
			}
			else 
			{
				rodDTO.getDocumentDetails().setPaymentModeFlag(
						ReferenceTable.PAYMENT_MODE_CHEQUE_DD);
			}
				
			/*if (null != strHospitalPaymentType
					&& !("").equalsIgnoreCase(strHospitalPaymentType)) */
			/*{
				if ((ReferenceTable.CHEQUE_DD)
						.equalsIgnoreCase(strHospitalPaymentType)) {
					// In details page , if its true, the cheque/DD will be
					// selected. Else bank transfer will selected.
					// rodDTO.getDocumentDetails().setPaymentMode(true);
					rodDTO.getDocumentDetails().setPaymentModeFlag(
							ReferenceTable.PAYMENT_MODE_CHEQUE_DD);
				} else if ((ReferenceTable.BANK_TRANSFER)
						.equalsIgnoreCase(strHospitalPaymentType)) {
					// rodDTO.getDocumentDetails().setPaymentMode(false);
					rodDTO.getDocumentDetails().setAccountNo(hospitals.getAccountNo());
					rodDTO.getDocumentDetails().setIfscCode(hospitals.getIfscCode());
					BankMaster masBank = masterService.getBankDetails(hospitals.getIfscCode());
					if(null != masBank)
					{
						rodDTO.getDocumentDetails().setBankName(masBank.getBankName());
						rodDTO.getDocumentDetails().setCity(masBank.getCity());
						rodDTO.getDocumentDetails().setBranch(masBank.getBranchName());
					}
					rodDTO.getDocumentDetails().setPanNo(hospitals.getPanNumber());
					rodDTO.getDocumentDetails().setPaymentModeFlag(
							ReferenceTable.PAYMENT_MODE_BANK_TRANSFER);
				}
			}
		}
	}*/
	
	private void populatePaymentDetailsForHosp(Long key,
			ReceiptOfDocumentsDTO rodDTO,Long receivedFromId) {
		
		if(receivedFromId.
				equals(ReferenceTable.RECEIVED_FROM_HOSPITAL))
				{
				Hospitals hospitals = createRodService.getHospitalsDetails(key,
						masterService);
				if (null != hospitals) {
		
					//String strHospitalPaymentType = hospitals.getPaymentType();
					String strIFscCode = hospitals.getIfscCode();
					String strAccntNo = hospitals.getAccountNo();
					if(
							(null != strIFscCode && !("").equals(strIFscCode) && null != strAccntNo && !("").equalsIgnoreCase(strAccntNo) ) 
							)
					{
						rodDTO.getDocumentDetails().setAccountNo(hospitals.getAccountNo());
						rodDTO.getDocumentDetails().setIfscCode(hospitals.getIfscCode());
						BankMaster masBank = masterService.getBankDetails(hospitals.getIfscCode());
						if(null != masBank)
						{
							rodDTO.getDocumentDetails().setBankName(masBank.getBankName());
							rodDTO.getDocumentDetails().setCity(masBank.getCity());
							rodDTO.getDocumentDetails().setBranch(masBank.getBranchName());
							rodDTO.getDocumentDetails().setBankId(masBank.getKey());
						}
						rodDTO.getDocumentDetails().setPanNo(hospitals.getPanNumber());
						rodDTO.getDocumentDetails().setPaymentModeFlag(
								ReferenceTable.PAYMENT_MODE_BANK_TRANSFER);
					}
					else 
					{
						rodDTO.getDocumentDetails().setPaymentModeFlag(
								ReferenceTable.PAYMENT_MODE_CHEQUE_DD);
						/**
						 * As per satish sir, the below code is commented.
						 */
						//rodDTO.getDocumentDetails().setPayableAt(hospitals.getPayableAt());
					}
		        }
				
			/*if (null != strHospitalPaymentType
					&& !("").equalsIgnoreCase(strHospitalPaymentType)) */
			/*{
				if ((ReferenceTable.CHEQUE_DD)
						.equalsIgnoreCase(strHospitalPaymentType)) {
					// In details page , if its true, the cheque/DD will be
					// selected. Else bank transfer will selected.
					// rodDTO.getDocumentDetails().setPaymentMode(true);
					rodDTO.getDocumentDetails().setPaymentModeFlag(
							ReferenceTable.PAYMENT_MODE_CHEQUE_DD);
				} else if ((ReferenceTable.BANK_TRANSFER)
						.equalsIgnoreCase(strHospitalPaymentType)) {
					// rodDTO.getDocumentDetails().setPaymentMode(false);
					rodDTO.getDocumentDetails().setAccountNo(hospitals.getAccountNo());
					rodDTO.getDocumentDetails().setIfscCode(hospitals.getIfscCode());
					BankMaster masBank = masterService.getBankDetails(hospitals.getIfscCode());
					if(null != masBank)
					{
						rodDTO.getDocumentDetails().setBankName(masBank.getBankName());
						rodDTO.getDocumentDetails().setCity(masBank.getCity());
						rodDTO.getDocumentDetails().setBranch(masBank.getBranchName());
					}
					rodDTO.getDocumentDetails().setPanNo(hospitals.getPanNumber());
					rodDTO.getDocumentDetails().setPaymentModeFlag(
							ReferenceTable.PAYMENT_MODE_BANK_TRANSFER);
				}
			}*/
		}else{
       	 List<Reimbursement> previousRODByClaimKey = createRodService.getPreviousRODByClaimKey(rodDTO.getClaimDTO().getKey());
				if (previousRODByClaimKey != null && !previousRODByClaimKey.isEmpty()) {
					for (Reimbursement reimbursement : previousRODByClaimKey) {
						if(reimbursement.getStatus() != null && !ReferenceTable.CANCEL_ROD_KEYS.containsKey(reimbursement.getStatus().getKey())
								&& !ReferenceTable.CLOSE_CLAIM_STATUS_KEYS.containsKey(reimbursement.getStatus().getKey())) { 
							if(receivedFromId.
							equals(reimbursement.getDocAcknowLedgement().getDocumentReceivedFromId().getKey()))
						{
								rodDTO.getDocumentDetails().setAccountNo(reimbursement.getAccountNumber());
								rodDTO.getDocumentDetails().setAccountType(reimbursement.getAccountType());
								rodDTO.getDocumentDetails().setAccountPreference(reimbursement.getAccountPreference());
								if (null != reimbursement.getBankId()) {
									BankMaster masBank = createRodService.getBankDetails(reimbursement
											.getBankId());
									rodDTO.getDocumentDetails().setBankId(masBank.getKey());
									rodDTO.getDocumentDetails().setBankName(masBank.getBankName());
									rodDTO.getDocumentDetails().setCity(masBank.getCity());
									rodDTO.getDocumentDetails().setIfscCode(masBank.getIfscCode());
									rodDTO.getDocumentDetails().setCity(masBank.getCity());
									rodDTO.getDocumentDetails().setPayableAt(reimbursement.getPayableAt());
									rodDTO.getDocumentDetails().setPanNo(reimbursement.getPanNumber());
								}
						}
							
					}
				}
			}else{
				rodDTO.getDocumentDetails().setPaymentModeFlag(
						ReferenceTable.PAYMENT_MODE_CHEQUE_DD);
				
			}
       }
	}

/*	private void populatePaymentDetailsForCashLessClaim(Long key,
			ReceiptOfDocumentsDTO rodDTO) {
		// HardCoding key for testing reason. This needs to be removed later.
		// key = 15l;
		Hospitals hospitals = createRodService.getHospitalsDetails(key,
				masterService);
		if (null != hospitals) {
			rodDTO.getDocumentDetails().setEmailId(hospitals.getEmailId());
			rodDTO.getDocumentDetails().setPanNo(hospitals.getPanNumber());
			rodDTO.getDocumentDetails().setHospitalName(hospitals.getName());
			rodDTO.getDocumentDetails().setHospitalPayableAt(hospitals.getPayableAt());
			String strHospitalPaymentType = hospitals.getPaymentType();

			if (null != strHospitalPaymentType
					&& !("").equalsIgnoreCase(strHospitalPaymentType)) {
				if ((ReferenceTable.PAYMENT_TYPE_CHEQUE)
						.equalsIgnoreCase(strHospitalPaymentType)) {
					// In details page , if its true, the cheque/DD will be
					// selected. Else bank transfer will selected.
					// rodDTO.getDocumentDetails().setPaymentMode(true);
					rodDTO.getDocumentDetails().setPaymentModeFlag(
							ReferenceTable.PAYMENT_MODE_CHEQUE_DD);
					rodDTO.getDocumentDetails().setPayableAt(
							hospitals.getPayableAt());
				} else if ((ReferenceTable.BANK_TRANSFER)
						.equalsIgnoreCase(strHospitalPaymentType)) {
					// rodDTO.getDocumentDetails().setPaymentMode(false);
					rodDTO.getDocumentDetails().setPaymentModeFlag(
							ReferenceTable.PAYMENT_MODE_BANK_TRANSFER);
					rodDTO.getDocumentDetails().setAccountNo(
							hospitals.getAccountNo());
					rodDTO.getDocumentDetails().setIfscCode(
							hospitals.getIfscCode());
					if (null != rodDTO.getDocumentDetails().getIfscCode()) {
						BankMaster masBank = createRodService.getBankMaster(
								rodDTO.getDocumentDetails().getIfscCode(),
								masterService);
						rodDTO.getDocumentDetails().setBankId(masBank.getKey());
						rodDTO.getDocumentDetails().setBankName(
								masBank.getBankName());
						rodDTO.getDocumentDetails().setBranch(
								masBank.getBranchName());
						rodDTO.getDocumentDetails().setCity(masBank.getCity());
						
					}
				}
			}
		}
	}*/

	// protected void showProcessDraftQueryWizard(
	// @Observes @CDIEvent(MenuItemBean.PROCESS_DRAFT_QUERY_LETTER_WIZARD) final
	// ParameterDTO parameters) {
	//
	// ClaimQueryDto claimQueryDto = new ClaimQueryDto();
	//
	// DraftedQuerySearchTableDto draftedQueryDto = new
	// DraftedQuerySearchTableDto();
	//
	// ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
	//
	// Claim claimByKey = claimService.getClaimByKey(840l);
	//
	// NewIntimationDto newIntimationDto = new NewIntimationDto();
	// if (claimByKey != null) {
	// // setClaimValuesToDTO(preauthDTO, claimByKey);
	// newIntimationDto = intimationService.getIntimationDto(claimByKey
	// .getIntimation());
	// // newIntimationDto.getPolicy().getProduct().getAutoRestoration()
	// ClaimDto claimDTO = new ClaimMapper().getClaimDto(claimByKey);
	// rodDTO.setNewIntimationDTO(newIntimationDto);
	// rodDTO.setClaimDTO(claimDTO);
	// }
	// draftedQueryDto.setRodDto(rodDTO);
	// claimQueryDto.setDraftedQueryDto(draftedQueryDto);
	// view.setDecideOnQueryWizardView(
	// DecideOnQueryWizard.class, claimQueryDto);
	// }

	/**
	 * The below method will populate the document details screen values which
	 * are entered during acknowledge document received screen. These values
	 * will be populated in document details page of Create ROD screen.
	 * */

	private Preauth getPreviousPreauth(Long claimKey) {
		List<Preauth> preauthByClaimKey = preauthService
				.getPreauthByClaimKey(claimKey);
		Preauth previousPreauth = null;
		if (!preauthByClaimKey.isEmpty()) {
			previousPreauth = preauthByClaimKey.get(0);
			String[] split = previousPreauth.getPreauthId().split("/");
			String defaultNumber = split[split.length - 1];
			//Integer nextReferenceNo = Integer.valueOf(defaultNumber);
			for (Preauth preauth : preauthByClaimKey) {
				if (preauth.getPreauthId() != null) {
					String[] splitNumber = preauth.getPreauthId()
							.split("/");
					String number = splitNumber[splitNumber.length - 1];
					if (Integer.valueOf(number) > Integer
							.valueOf(defaultNumber)) {
						previousPreauth = preauth;
						//nextReferenceNo = Integer.valueOf(number);
					}
				}
			}
		}
		return previousPreauth;
	}
	
	private void populateDocumentDetails(ReceiptOfDocumentsDTO rodDTO,
			Long key, String strPresenterString) {
		DocAcknowledgement docAcknowledgment = null;
		
		if ((ReferenceTable.ROD_CREATION).equalsIgnoreCase(strPresenterString)) {
			docAcknowledgment = createRodService
					.getDocAcknowledgementBasedOnKey(key);
			if (null != docAcknowledgment)
			{
				rodDTO.getDocumentDetails().setDocumentCheckList(
						getCheckListValidationTableValues(key,
								docAcknowledgment));
				rodDTO.setUploadDocsList(getUploadedDocumentTableDataForBillEntry(docAcknowledgment.getRodKey()));

			}
			
		}
		// Bill entry in place of key , rod key will be passed.
		else if ((ReferenceTable.BILL_ENTRY)
				.equalsIgnoreCase(strPresenterString)) {
			Long ackDocKey = createRodService
					.getLatestDocAcknowledgementKey(key);
			docAcknowledgment = createRodService
					.getDocAcknowledgementBasedOnKey(ackDocKey);
			rodDTO.getDocumentDetails().setDocAcknowledgementKey(ackDocKey);
			rodDTO.getDocumentDetails().setRodKey(key);
			if (null != docAcknowledgment)
				rodDTO.getDocumentDetails().setDocumentCheckList(
						getCheckListValidationTableValues(ackDocKey,
								docAcknowledgment));
			rodDTO.setUploadDocsList(getUploadedDocumentTableDataForBillEntry(key));
			Reimbursement reimb = createRodService.getReimbursementByRODKey(key);
			if(null != reimb)
				rodDTO.setStatusKey(reimb.getStatus().getKey());
				rodDTO.getDocumentDetails().setReferToBillEntryBillingRemarks(reimb.getBillEntryRemarks());
				
				UploadDocumentDTO uploadDocumentDTO = null;
				//MED-PRD-076
				if(docAcknowledgment.getProdHospBenefitFlag() != null && docAcknowledgment.getProdHospBenefitFlag().equalsIgnoreCase(SHAConstants.YES_FLAG)){
					if(reimb.getClaim().getIntimation().getPolicy().getProduct().getCode() != null && 
							reimb.getClaim().getIntimation().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.GROUP_HOSPITAL_CASH_POLICY)){
					if (reimb.getProdDiagnosisID() != null) {
						DiagnosisHospitalDetails diagnosisValue = createRodService
								.getDiagnosisByID(reimb.getProdDiagnosisID());
						SelectValue selectValue = new SelectValue();
						selectValue.setId(diagnosisValue.getDiagnosisHospitalKey());
						selectValue.setValue(diagnosisValue.getDiagnosisName());
						rodDTO.getDocumentDetails().setDiagnosisHospitalCash(
								selectValue);
					}
					
					if (reimb.getProdBenefitDueToID() != null) {
						MastersValue benefitValue = masterService
								.getMaster(reimb.getProdBenefitDueToID());
						SelectValue selectValue = new SelectValue();
						selectValue.setId(benefitValue.getKey());
						selectValue.setValue(benefitValue.getValue());
						rodDTO.getDocumentDetails().setHospitalCashDueTo(
								selectValue);
						
					}
					}
					
					if(reimb.getPhcDayCareFlag() != null && reimb.getPhcDayCareFlag().equals(SHAConstants.YES_FLAG)) {
						rodDTO.getDocumentDetails().setPatientDayCare(true);
					}
					
					if (reimb.getPhcDayCareID() != null) {
						MastersValue benefitValue = masterService
								.getMaster(reimb.getPhcDayCareID());
						SelectValue selectValue = new SelectValue();
						selectValue.setId(benefitValue.getKey());
						selectValue.setValue(benefitValue.getValue());
						rodDTO.getDocumentDetails().setPatientDayCareDueTo(
								selectValue);
					}
					
					uploadDocumentDTO = new UploadDocumentDTO();
					List<HopsitalCashBenefitDTO> medicalDTO = new ArrayList<HopsitalCashBenefitDTO>();
					Insured insuredtem1 = reimb.getClaim().getIntimation().getInsured();
					String insuredPlan1 = insuredtem1.getPolicyPlan();
					List<MasHospitalCashBenefit> hospitalCashBenefitDetails = null;
					if(reimb.getClaim().getIntimation().getPolicy().getProduct() != null 
							&& SHAConstants.PRODUCT_CODE_076.equalsIgnoreCase(reimb.getClaim().getIntimation().getPolicy().getProduct().getCode())){
						hospitalCashBenefitDetails = reimbursementService
								//.getHospitalBenefitsonProductKey(reimb.getClaim().getIntimation().getPolicy().getProduct().getKey());
								.getHospitalBenefitsonProductTypeKey(reimb.getClaim().getIntimation().getPolicy().getProductType().getKey() , insuredPlan1);
					}else{
						hospitalCashBenefitDetails = reimbursementService
								.getHospitalBenefitsonProductKey(reimb.getClaim().getIntimation().getPolicy().getProduct().getKey());
					}
					
					if (hospitalCashBenefitDetails != null) {
						for (MasHospitalCashBenefit hospitalCashBenefit : hospitalCashBenefitDetails) {
							SelectValue selectvalue = new SelectValue();
							selectvalue.setId(hospitalCashBenefit.getKey());
							selectvalue.setValue(hospitalCashBenefit.getBenefitName());
							HopsitalCashBenefitDTO hospitalBenefitDTO = new HopsitalCashBenefitDTO();
							
							ReimbursementBenefits reimBenefit = reimbursementService.getReimBenefitsByRODPHCKey(key, hospitalCashBenefit.getKey());
							
							hospitalBenefitDTO.setParticulars(selectvalue);
							hospitalBenefitDTO.setParticularsValue(hospitalCashBenefit.getBenefitName());
							if(reimBenefit != null){
								if(reimBenefit.getTotalNoOfDays() != null) {
								hospitalBenefitDTO.setHospitalCashDays(String.valueOf(Math.round(reimBenefit.getTotalNoOfDays())));
								}
								hospitalBenefitDTO.setHospitalCashPerDayAmt(String.valueOf(Math.round(reimBenefit.getPerDayAmountBills())));
								hospitalBenefitDTO.setHospitalCashTotalClaimedAmt(String.valueOf(Math.round(reimBenefit.getTotalClaimAmountBills())));
								if(reimBenefit.getNumberOfDaysBills() != null){
								hospitalBenefitDTO.setNoOfDaysAllowed(String.valueOf(Math.round(reimBenefit.getNumberOfDaysBills())));
								}
								if(reimBenefit.getDisallowanceRemarks() != null) {
								hospitalBenefitDTO.setDisallowanceRemarks(reimBenefit.getDisallowanceRemarks());
								}
							}
							
							hospitalBenefitDTO.setParticulars(selectvalue);
							hospitalBenefitDTO.setParticularsValue(hospitalCashBenefit.getBenefitName());
							medicalDTO.add(hospitalBenefitDTO);
						}
					}
					uploadDocumentDTO.setHopsitalCashBenefitDTO(medicalDTO);
					
				}
				else{
			   uploadDocumentDTO = claimRequestBenefitsService
					.getReimbursementBenefitsValue(key);
				}
			/*
			 * if((ReferenceTable.BENEFITS_HOSPITAL_CASH).equalsIgnoreCase(
			 * uploadDocumentDTO.getHospitalBenefitFlag())) {
			 * rodDTO.getAddOnBenefitsDTO
			 * ().setAdmittedNoOfDays(uploadDocumentDTO
			 * .getHospitalCashNoofDays()) }
			 */
			if (uploadDocumentDTO != null) {
				if ((ReferenceTable.BENEFITS_PATIENT_CARE)
						.equalsIgnoreCase(uploadDocumentDTO
								.getPatientCareBenefitFlag())) {
					List<PatientCareDTO> patientCareList = claimRequestBenefitsService
							.getPatientCareDetails(uploadDocumentDTO
									.getPatientBenefitKey());
					if (null != patientCareList && !patientCareList.isEmpty()) {
						uploadDocumentDTO.setPatientCareDTO(patientCareList);
					}
					// rodDTO.getAddOnBenefitsDTO().setAdmittedNoOfDays(uploadDocumentDTO.getPatientCareNoofDays());
				}
				rodDTO.setUploadDocumentsDTO(uploadDocumentDTO);
			}
			
		} else if ((ReferenceTable.CLAIM_BILLING_BENEFITS)
				.equalsIgnoreCase(strPresenterString)) {
			Reimbursement reimb = createRodService
					.getReimbursementObjectByKey(key);
			rodDTO.setStatusKey(reimb.getStatus().getKey());
			Long ackDocKey = createRodService
					.getLatestDocAcknowledgementKey(key);
			docAcknowledgment = createRodService
					.getDocAcknowledgementBasedOnKey(ackDocKey);
			rodDTO.getDocumentDetails().setDocAcknowledgementKey(ackDocKey);
			rodDTO.getDocumentDetails().setRodKey(key);
			UploadDocumentDTO uploadDocumentDTO = null;
			//MED-PRD-076
			if(docAcknowledgment.getProdHospBenefitFlag() != null && docAcknowledgment.getProdHospBenefitFlag().equalsIgnoreCase(SHAConstants.YES_FLAG)){
				if (reimb.getProdDiagnosisID() != null) {
					DiagnosisHospitalDetails diagnosisValue = createRodService
							.getDiagnosisByID(reimb.getProdDiagnosisID());
					SelectValue selectValue = new SelectValue();
					selectValue.setId(diagnosisValue.getDiagnosisHospitalKey());
					selectValue.setValue(diagnosisValue.getDiagnosisName());
					rodDTO.getDocumentDetails().setDiagnosisHospitalCash(
							selectValue);
				}
				//MED-PRD-076
				if(docAcknowledgment.getProdHospBenefitFlag() != null && docAcknowledgment.getProdHospBenefitFlag().equalsIgnoreCase(SHAConstants.YES_FLAG)){
					if (reimb.getProdDiagnosisID() != null) {
						DiagnosisHospitalDetails diagnosisValue = createRodService
								.getDiagnosisByID(reimb.getProdDiagnosisID());
						SelectValue selectValue = new SelectValue();
						selectValue.setId(diagnosisValue.getDiagnosisHospitalKey());
						selectValue.setValue(diagnosisValue.getDiagnosisName());
						rodDTO.getDocumentDetails().setDiagnosisHospitalCash(selectValue);
						rodDTO.getPreauthDTO().getPreauthDataExtractionDetails().setDiagnosis(diagnosisValue.getDiagnosisName());
						rodDTO.setDiagnosis(diagnosisValue.getDiagnosisName());
						rodDTO.getNewIntimationDTO().setDiagnosis(diagnosisValue.getDiagnosisName());
						rodDTO.getClaimDTO().getNewIntimationDto().setDiagnosis(diagnosisValue.getDiagnosisName());
						rodDTO.getClaimDTO().setDiagnosis(diagnosisValue.getDiagnosisName());
					}
				}
				
				if (reimb.getProdBenefitDueToID() != null) {
					MastersValue benefitValue = masterService
							.getMaster(reimb.getProdBenefitDueToID());
					SelectValue selectValue = new SelectValue();
					selectValue.setId(benefitValue.getKey());
					selectValue.setValue(benefitValue.getValue());
					rodDTO.getDocumentDetails().setHospitalCashDueTo(
							selectValue);
				}
				
				if(reimb.getDateOfDischarge() != null && reimb.getDateOfAdmission() != null) {
				rodDTO.setDateOfAdmission(SHAUtils.formatDate(reimb.getDateOfAdmission()));
				rodDTO.setDateOfDischarge(SHAUtils.formatDate(reimb.getDateOfDischarge()));
				}
				
				if(reimb.getPhcDayCareFlag() != null && reimb.getPhcDayCareFlag().equals(SHAConstants.YES_FLAG)) {
					rodDTO.getDocumentDetails().setPatientDayCare(true);
				}else{
					rodDTO.getDocumentDetails().setPatientDayCare(false);
				}
				
				if (reimb.getPhcDayCareID() != null) {
					MastersValue benefitValue = masterService
							.getMaster(reimb.getPhcDayCareID());
					SelectValue selectValue = new SelectValue();
					selectValue.setId(benefitValue.getKey());
					selectValue.setValue(benefitValue.getValue());
					rodDTO.getDocumentDetails().setPatientDayCareDueTo(
							selectValue);
				}
				
				uploadDocumentDTO = new UploadDocumentDTO();
				List<HopsitalCashBenefitDTO> medicalDTO = new ArrayList<HopsitalCashBenefitDTO>();
				Insured insuredtem2 = reimb.getClaim().getIntimation().getInsured();
				String insuredPlan2 = insuredtem2.getPolicyPlan();
				if(reimb.getClaim().getIntimation().getPolicy().getProduct() != null 
						&& SHAConstants.PRODUCT_CODE_076.equalsIgnoreCase(reimb.getClaim().getIntimation().getPolicy().getProduct().getCode())){
				List<MasHospitalCashBenefit> hospitalCashBenefitDetails = reimbursementService
						//.getHospitalBenefitsonProductKey(reimb.getClaim().getIntimation().getPolicy().getProduct().getKey());
						.getHospitalBenefitsonProductTypeKey(reimb.getClaim().getIntimation().getPolicy().getProductType().getKey() , insuredPlan2);
				if (hospitalCashBenefitDetails != null) {
					for (MasHospitalCashBenefit hospitalCashBenefit : hospitalCashBenefitDetails) {
						SelectValue selectvalue = new SelectValue();
						selectvalue.setId(hospitalCashBenefit.getKey());
						selectvalue.setValue(hospitalCashBenefit.getBenefitName());
						HopsitalCashBenefitDTO hospitalBenefitDTO = new HopsitalCashBenefitDTO();
						
						ReimbursementBenefits reimBenefit = reimbursementService.getReimBenefitsByRODPHCKey(key, hospitalCashBenefit.getKey());
						
						hospitalBenefitDTO.setParticulars(selectvalue);
						hospitalBenefitDTO.setParticularsValue(hospitalCashBenefit.getBenefitName());
						if(reimBenefit != null){
							if(reimBenefit.getTotalNoOfDays() != null) {
								hospitalBenefitDTO.setHospitalCashDays(String.valueOf(Math.round(reimBenefit.getTotalNoOfDays())));
								}
								hospitalBenefitDTO.setHospitalCashPerDayAmt(String.valueOf(Math.round(reimBenefit.getPerDayAmountBills())));
								hospitalBenefitDTO.setHospitalCashTotalClaimedAmt(String.valueOf(Math.round(reimBenefit.getTotalClaimAmountBills())));
								if(reimBenefit.getNumberOfDaysBills() != null){
								hospitalBenefitDTO.setNoOfDaysAllowed(String.valueOf(Math.round(reimBenefit.getNumberOfDaysBills())));
								}
								if(reimBenefit.getDisallowanceRemarks() != null) {
								hospitalBenefitDTO.setDisallowanceRemarks(reimBenefit.getDisallowanceRemarks());
								}
						}
						
						hospitalBenefitDTO.setParticulars(selectvalue);
						hospitalBenefitDTO.setParticularsValue(hospitalCashBenefit.getBenefitName());
						medicalDTO.add(hospitalBenefitDTO);
					}
				}
			}
				
				if(reimb.getClaim().getIntimation().getPolicy().getProduct() != null 
						&& SHAConstants.GROUP_HOSPITAL_CASH_POLICY.equalsIgnoreCase(reimb.getClaim().getIntimation().getPolicy().getProduct().getCode())){
				List<PolicyRiskCover> hospitalCashBenefitForGHC = policyService
						.getRiskCoverByPolicy(reimb.getClaim().getIntimation().getPolicy().getKey());
				List<String> listOFCovers= new ArrayList();
				for (PolicyRiskCover policyRiskCover : hospitalCashBenefitForGHC) {
					if(policyRiskCover != null ){
						listOFCovers.add(policyRiskCover.getCoverCode());
					}
				}
				Insured insuredtem3 = reimb.getClaim().getIntimation().getInsured();
				String insuredPlan3 = insuredtem3.getPolicyPlan();
//				List<MasHospitalCashBenefit>  = reimbursementService
//						//.getHospitalBenefitsonProductKey(reimb.getClaim().getIntimation().getPolicy().getProduct().getKey());
//						.getHospitalBenefitsonProductTypeKey(reimb.getClaim().getIntimation().getPolicy().getProductType().getKey() , insuredPlan3);
				List<MasHospitalCashBenefit> hospitalCashBenefitDetails2  = null;
				if(reimb.getClaim().getIntimation().getPolicy().getProduct() != null 
						&& SHAConstants.PRODUCT_CODE_076.equalsIgnoreCase(reimb.getClaim().getIntimation().getPolicy().getProduct().getCode())){
					hospitalCashBenefitDetails2 = reimbursementService
							//.getHospitalBenefitsonProductKey(reimb.getClaim().getIntimation().getPolicy().getProduct().getKey());
							.getHospitalBenefitsonProductTypeKey(reimb.getClaim().getIntimation().getPolicy().getProductType().getKey() , insuredPlan3);
				}else{
					hospitalCashBenefitDetails2 = reimbursementService
							.getHospitalBenefitsonProductKey(reimb.getClaim().getIntimation().getPolicy().getProduct().getKey());
				}
				if (hospitalCashBenefitForGHC != null) {
					for (MasHospitalCashBenefit hospitalCashBenefit : hospitalCashBenefitDetails2) {
						
						if(listOFCovers.contains(hospitalCashBenefit.getCoverCode())){
						SelectValue selectvalue = new SelectValue();
						selectvalue.setId(hospitalCashBenefit.getKey());
						selectvalue.setValue(hospitalCashBenefit.getBenefitName());
						HopsitalCashBenefitDTO hospitalBenefitDTO = new HopsitalCashBenefitDTO();
						
						ReimbursementBenefits reimBenefit = reimbursementService.getReimBenefitsByRODPHCKey(key, hospitalCashBenefit.getKey());
						
						hospitalBenefitDTO.setParticulars(selectvalue);
						hospitalBenefitDTO.setParticularsValue(hospitalCashBenefit.getBenefitName());
						if(reimBenefit != null){
							if(reimBenefit.getTotalNoOfDays() != null) {
								hospitalBenefitDTO.setHospitalCashDays(String.valueOf(Math.round(reimBenefit.getTotalNoOfDays())));
								}
								hospitalBenefitDTO.setHospitalCashPerDayAmt(String.valueOf(Math.round(reimBenefit.getPerDayAmountBills())));
								hospitalBenefitDTO.setHospitalCashTotalClaimedAmt(String.valueOf(Math.round(reimBenefit.getTotalClaimAmountBills())));
								if(reimBenefit.getNumberOfDaysBills() != null){
								hospitalBenefitDTO.setNoOfDaysAllowed(String.valueOf(Math.round(reimBenefit.getNumberOfDaysBills())));
								}
								if(reimBenefit.getDisallowanceRemarks() != null) {
								hospitalBenefitDTO.setDisallowanceRemarks(reimBenefit.getDisallowanceRemarks());
								}
						}
						
						hospitalBenefitDTO.setParticulars(selectvalue);
						hospitalBenefitDTO.setParticularsValue(hospitalCashBenefit.getBenefitName());
						medicalDTO.add(hospitalBenefitDTO);
					}
				}
			}
		}
				uploadDocumentDTO.setHopsitalCashBenefitDTO(medicalDTO);
				
	 }
			else{
			
			// List<UploadDocumentDTO> uploadDocumentDTOList =
			// claimRequestBenefitsService.getReimbursementBenefitsValue(key);
		 uploadDocumentDTO = claimRequestBenefitsService
					.getReimbursementBenefitsValue(key);
			}
			/*
			 * if((ReferenceTable.BENEFITS_HOSPITAL_CASH).equalsIgnoreCase(
			 * uploadDocumentDTO.getHospitalBenefitFlag())) {
			 * rodDTO.getAddOnBenefitsDTO
			 * ().setAdmittedNoOfDays(uploadDocumentDTO
			 * .getHospitalCashNoofDays()) }
			 */
			if (uploadDocumentDTO != null) {
				if ((ReferenceTable.BENEFITS_PATIENT_CARE)
						.equalsIgnoreCase(uploadDocumentDTO
								.getPatientCareBenefitFlag())) {
					List<PatientCareDTO> patientCareList = claimRequestBenefitsService
							.getPatientCareDetails(uploadDocumentDTO
									.getPatientBenefitKey());
					if (null != patientCareList && !patientCareList.isEmpty()) {
						uploadDocumentDTO.setPatientCareDTO(patientCareList);
					}
					// rodDTO.getAddOnBenefitsDTO().setAdmittedNoOfDays(uploadDocumentDTO.getPatientCareNoofDays());
				}
				
				
				rodDTO.setUploadDocumentsDTO(uploadDocumentDTO);
			} else {
				Notification
						.show("Before processing the claim benefits , please first make sure you had entered the benefits details at bill entry level...");
			}
			
		}
		if (null != docAcknowledgment) {
			rodDTO.getDocumentDetails().setAdditionalRemarks(
					docAcknowledgment.getAdditionalRemarks());
			rodDTO.getDocumentDetails().setDocumentsReceivedDate(
					docAcknowledgment.getDocumentReceivedDate());
			rodDTO.getDocumentDetails().setDocumentReceivedFromValue(
					docAcknowledgment.getDocumentReceivedFromId().getValue());
			rodDTO.getDocumentDetails().setModeOfReceiptValue(
					docAcknowledgment.getModeOfReceiptId().getValue());
			
			if(null != docAcknowledgment.getReconsiderationReasonId())
			{
				rodDTO.getDocumentDetails().setReasonForReconsiderationRequestValue(docAcknowledgment.getReconsiderationReasonId().getValue());
			}
			
			/***
			 * Fix for ticket 4287 --- starts 
			 */
			rodDTO.getDocumentDetails().setEmailId(docAcknowledgment.getInsuredEmailId());
			rodDTO.setEmailIdForPaymentMode(docAcknowledgment.getInsuredEmailId());
			/***
			 * Fix for ticket 4287 --- ends 
			 */
			
			if(null != docAcknowledgment.getReconsiderationReasonId())
			{
				rodDTO.getDocumentDetails().setReasonForReconsiderationRequestValue(docAcknowledgment.getReconsiderationReasonId().getValue());
			}
			if(null != docAcknowledgment.getPaymentCancellationFlag())
			{
				if(("Y").equalsIgnoreCase(docAcknowledgment.getPaymentCancellationFlag()))
				{
					rodDTO.getDocumentDetails().setPaymentCancellationNeeded(true);
					rodDTO.getDocumentDetails().setPaymentCancellationNeededFlag("Y");
				}
				else
				{
					rodDTO.getDocumentDetails().setPaymentCancellationNeeded(false);
					rodDTO.getDocumentDetails().setPaymentCancellationNeededFlag("N");
				}
			}
			
			if (("Y").equals(docAcknowledgment.getReconsiderationRequest()))
			{
				rodDTO.getDocumentDetails().setReconsiderationRequestValue(
						"Yes");
				Map<String , Long> reconsiderationMap = new HashMap<String,Long>();
				reconsiderationMap.put("ackKey",docAcknowledgment.getKey());
				reconsiderationMap.put("rodKey", docAcknowledgment.getRodKey());
				rodDTO.setReconsiderationMap(reconsiderationMap);
			}
			else if (("N")
					.equals(docAcknowledgment.getReconsiderationRequest()))
				rodDTO.getDocumentDetails()
						.setReconsiderationRequestValue("No");
			
			 if (!(ReferenceTable.BILL_ENTRY)
					.equalsIgnoreCase(strPresenterString)) {
				
			if (null != docAcknowledgment.getHospitalizationClaimedAmount()) {
				/*rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(
						String.valueOf(docAcknowledgment
								.getHospitalizationClaimedAmount().intValue()));*/
			} else {
				rodDTO.getDocumentDetails().setHospitalizationClaimedAmount("");
			}
			if (null != docAcknowledgment.getPreHospitalizationClaimedAmount()) {
				/*rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(
						String.valueOf(docAcknowledgment
								.getPreHospitalizationClaimedAmount().intValue()));*/
			} else {
				rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(
						"");
			}
			if (null != docAcknowledgment.getPostHospitalizationClaimedAmount()) {
				/*rodDTO.getDocumentDetails()
						.setPostHospitalizationClaimedAmount(
								String.valueOf(docAcknowledgment
										.getPostHospitalizationClaimedAmount().intValue()));*/
			} else {
				rodDTO.getDocumentDetails()
						.setPostHospitalizationClaimedAmount("");
			}
			}
			else
			{

				
				if (null != docAcknowledgment.getHospitalizationClaimedAmount()) {
					rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(
							String.valueOf(docAcknowledgment
									.getHospitalizationClaimedAmount().intValue()));
				} else {
					rodDTO.getDocumentDetails().setHospitalizationClaimedAmount("");
				}
				if (null != docAcknowledgment.getPreHospitalizationClaimedAmount()) {
					rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(
							String.valueOf(docAcknowledgment
									.getPreHospitalizationClaimedAmount().intValue()));
				} else {
					rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(
							"");
				}
				if (null != docAcknowledgment.getPostHospitalizationClaimedAmount()) {
					rodDTO.getDocumentDetails()
							.setPostHospitalizationClaimedAmount(
									String.valueOf(docAcknowledgment
											.getPostHospitalizationClaimedAmount().intValue()));
				} else {
					rodDTO.getDocumentDetails()
							.setPostHospitalizationClaimedAmount("");
				}
				if (null != docAcknowledgment.getOtherBenefitsClaimedAmount()) {
					rodDTO.getDocumentDetails()
							.setOtherBenefitclaimedAmount(
									String.valueOf(docAcknowledgment
											.getOtherBenefitsClaimedAmount().intValue()));
				} else {
					rodDTO.getDocumentDetails()
							.setOtherBenefitclaimedAmount("");
				}
				//added for new product076
				if (null != docAcknowledgment.getProdHospBenefitClaimedAmount()) {
					rodDTO.getDocumentDetails()
							.setHospitalCashClaimedAmnt(
									String.valueOf(docAcknowledgment
											.getProdHospBenefitClaimedAmount().intValue()));
				} else {
					rodDTO.getDocumentDetails()
							.setHospitalCashClaimedAmnt("");
				}
				
				
				
			}
			
			if(docAcknowledgment.getHospClaimedAmountDocRec() != null){
				rodDTO.getDocumentDetails().setHospClaimedAmountDocRec(docAcknowledgment.getHospClaimedAmountDocRec());
			}
			if(docAcknowledgment.getPreHospClaimedAmountDocRec() != null){
				rodDTO.getDocumentDetails().setPreHospClaimedAmountDocRec(docAcknowledgment.getPreHospitalizationClaimedAmount());	
			}
			if(docAcknowledgment.getPostHospClaimedAmountDocRec() != null){
				rodDTO.getDocumentDetails().setPostHospClaimedAmountDocRec(docAcknowledgment.getPostHospitalizationClaimedAmount());	
			}
			if(null != docAcknowledgment.getOtherBenefitsAmountDocRec()){
				rodDTO.getDocumentDetails().setOtherBenefitsAmountDocRec(docAcknowledgment.getOtherBenefitsClaimedAmount());
			}
//			if(null != docAcknowledgment.getProdHospBenefitClaimedAmount()){
//				rodDTO.getDocumentDetails().setOtherBenefitsAmountDocRec(docAcknowledgment.getOtherBenefitsClaimedAmount());
//			}
			
			rodDTO.getDocumentDetails().setHospitalizationFlag(
					docAcknowledgment.getHospitalisationFlag());
			rodDTO.getDocumentDetails().setPreHospitalizationFlag(
					docAcknowledgment.getPreHospitalisationFlag());
			rodDTO.getDocumentDetails().setPostHospitalizationFlag(
					docAcknowledgment.getPostHospitalisationFlag());
			rodDTO.getDocumentDetails().setPartialHospitalizationFlag(
					docAcknowledgment.getPartialHospitalisationFlag());
			rodDTO.getDocumentDetails().setLumpSumAmountFlag(
					docAcknowledgment.getLumpsumAmountFlag());
			rodDTO.getDocumentDetails().setAddOnBenefitsHospitalCashFlag(
					docAcknowledgment.getHospitalCashFlag());
			rodDTO.getDocumentDetails().setAddOnBenefitsPatientCareFlag(
					docAcknowledgment.getPatientCareFlag());
			rodDTO.getDocumentDetails().setHospitalizationRepeatFlag(
					docAcknowledgment.getHospitalizationRepeatFlag());
			rodDTO.getDocumentDetails().setOtherBenefitsFlag(docAcknowledgment.getOtherBenefitsFlag());
			rodDTO.getDocumentDetails().setEmergencyMedicalEvaluationFlag(docAcknowledgment.getEmergencyMedicalEvaluation());
			rodDTO.getDocumentDetails().setRepatriationOfMortalRemainsFlag(docAcknowledgment.getRepatriationOfMortalRemain());
			rodDTO.getDocumentDetails().setPreferredNetworkHospitalFlag(docAcknowledgment.getPreferredNetworkHospita());
			rodDTO.getDocumentDetails().setCompassionateTravelFlag(docAcknowledgment.getCompassionateTravel());
			rodDTO.getDocumentDetails().setSharedAccomodationFlag(docAcknowledgment.getSharedAccomodation());
			
			rodDTO.setCreatedBy(docAcknowledgment.getCreatedBy());
			rodDTO.setModifiedBy(docAcknowledgment.getModifiedBy());
			
			//added for new product
			rodDTO.getDocumentDetails().setHospitalCashFlag(docAcknowledgment.getProdHospBenefitFlag());
			rodDTO.setKey(key);

		}
	}
	

	/*private List<DocumentCheckListDTO> getDocumentCheckList(Claim claim) {
		// Fetch values from MAS_DOCUMENT_TYPE table.
		List<DocumentCheckListDTO> masterCheckListValues = setDocumentCheckListTableValues();

		// Fetch values from IMS_CLS_ROD_DOCUMENT_LIST table for given document
		// acknowledge object.
		List<List<DocumentCheckListDTO>> rodCheckListValues = ackDocReceivedService
				.getDocumentListForClaim(masterService, claim);

		// Final list to combine MAS_DOCUMENT_TYPE and IMS_CLS_ROD_DOCUMENT_LIST
		// table values.
		List<DocumentCheckListDTO> finalCheckListValues = null;

		*//**
		 * Null check is performed only for ROD checklist table. This is because
		 * mastercheckList values will not be null as it is a master data.
		 * *//*
		if (null != rodCheckListValues && !rodCheckListValues.isEmpty()) {
			for (List<DocumentCheckListDTO> list : rodCheckListValues) {
				finalCheckListValues = new ArrayList<DocumentCheckListDTO>();
				for (DocumentCheckListDTO documentCheckListDTO : masterCheckListValues) {

					Long key = documentCheckListDTO.getKey();
					for (DocumentCheckListDTO documentCheckListDTO2 : list) {
						if (key.equals(documentCheckListDTO2.getDocTypeId())) {
							documentCheckListDTO
									.setAckReceivedStatus(documentCheckListDTO2
											.getAckReceivedStatus());
							documentCheckListDTO
									.setNoOfDocuments(documentCheckListDTO2
											.getNoOfDocuments());
							documentCheckListDTO
									.setRemarks(documentCheckListDTO2
											.getRemarks());
							documentCheckListDTO
									.setReceivedStatus(documentCheckListDTO2
											.getReceivedStatus());
							// documentCheckListDTO.setKey(documentCheckListDTO2.getDocChkLstKey());
							documentCheckListDTO
									.setDocChkLstKey(documentCheckListDTO2
											.getDocChkLstKey());
							break;
						}
					}
					documentCheckListDTO.setDocTypeId(key);
					finalCheckListValues.add(documentCheckListDTO);
				}
			}
			// deferencing the values since this list is no more required. These
			// unused list will be immediately collected by garbage collector
			// and memory will be free.
			
			 * masterCheckListValues = null; rodCheckListValues = null;
			 
			return finalCheckListValues;
		} else {
			return masterCheckListValues;
		}

	}*/

	/**
	 * Method to populate the CheckList Validation Table values. This table is a
	 * combination of values in IMS_CLS_ROD_DOCUMENT_LIST and MAS_DOCUMENT_TYPE
	 * table.
	 * */

	private List<DocumentCheckListDTO> getCheckListValidationTableValues(
			Long docAckKey, DocAcknowledgement docAcknowledgement) {
		// Fetch values from MAS_DOCUMENT_TYPE table.
		List<DocumentCheckListDTO> masterCheckListValues = setDocumentCheckListTableValues();

		// Fetch values from IMS_CLS_ROD_DOCUMENT_LIST table for given document
		// acknowledge object.
		List<DocumentCheckListDTO> rodCheckListValues = createRodService
				.getRODDocumentList(masterService, docAcknowledgement);

		// Final list to combine MAS_DOCUMENT_TYPE and IMS_CLS_ROD_DOCUMENT_LIST
		// table values.
		//List<DocumentCheckListDTO> finalCheckListValues = null;

		/**
		 * Null check is performed only for ROD checklist table. This is because
		 * mastercheckList values will not be null as it is a master data.
		 * */
		if (null != rodCheckListValues && !rodCheckListValues.isEmpty()) {
			//finalCheckListValues = new ArrayList<DocumentCheckListDTO>();
			
		

				
				for (DocumentCheckListDTO documentCheckListDTO2 : rodCheckListValues) {
					//if (key.equals(documentCheckListDTO2.getDocTypeId())) {
						if (null != documentCheckListDTO2
								.getRodReceivedStatusFlag()) {
							if (("Y").equalsIgnoreCase(documentCheckListDTO2
									.getRodReceivedStatusFlag())) {
								documentCheckListDTO2.setRodReceivedStatus(true);
							} else {
								documentCheckListDTO2
										.setRodReceivedStatus(false);
							}
							if (null != documentCheckListDTO2.getRodRemarks()) {
								documentCheckListDTO2
										.setRodRemarks(documentCheckListDTO2
												.getRodRemarks());
							}
							// documentCheckListDTO.setRodReceivedStatusFlag(documentCheckListDTO2.getRodReceivedStatusFlag());
						}
						//break;
					//}
				}
			//	finalCheckListValues.add(documentCheckListDTO2);
			
			
			
			
			
			/*for (DocumentCheckListDTO documentCheckListDTO : masterCheckListValues) {

				Long key = documentCheckListDTO.getKey();
				for (DocumentCheckListDTO documentCheckListDTO2 : rodCheckListValues) {
					if (key.equals(documentCheckListDTO2.getDocTypeId())) {
						documentCheckListDTO
								.setAckReceivedStatus(documentCheckListDTO2
										.getAckReceivedStatus());
						documentCheckListDTO
								.setNoOfDocuments(documentCheckListDTO2
										.getNoOfDocuments());
						documentCheckListDTO.setRemarks(documentCheckListDTO2
								.getRemarks());
						documentCheckListDTO
								.setReceivedStatus(documentCheckListDTO2
										.getReceivedStatus());
						documentCheckListDTO.setKey(documentCheckListDTO2
								.getKey());
						documentCheckListDTO.setDocTypeId(documentCheckListDTO2
								.getDocTypeId());
						if (null != documentCheckListDTO2
								.getRodReceivedStatusFlag()) {
							if (("Y").equalsIgnoreCase(documentCheckListDTO2
									.getRodReceivedStatusFlag())) {
								documentCheckListDTO.setRodReceivedStatus(true);
							} else {
								documentCheckListDTO
										.setRodReceivedStatus(false);
							}
							if (null != documentCheckListDTO2.getRodRemarks()) {
								documentCheckListDTO
										.setRodRemarks(documentCheckListDTO2
												.getRodRemarks());
							}
							// documentCheckListDTO.setRodReceivedStatusFlag(documentCheckListDTO2.getRodReceivedStatusFlag());
						}
						break;
					}
				}
				finalCheckListValues.add(documentCheckListDTO);
			}*/
			// deferencing the values since this list is no more required. These
			// unused list will be immediately collected by garbage collector
			// and memory will be free.
			/*
			 * masterCheckListValues = null; rodCheckListValues = null;
			 */
			//return finalCheckListValues;
				return rodCheckListValues;
		} else {
			return masterCheckListValues;
		}
	}

	private Long getAckNoCountByClaimKey(Long claimKey, String presenterString) {
		Long count = 0l;
		if ((presenterString)
				.equalsIgnoreCase(ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED)) {
			count = ackDocReceivedService.getCountOfAckByClaimKey(claimKey);
		} else if ((presenterString)
				.equalsIgnoreCase(ReferenceTable.CREATE_ROD)) {
			count = createRodService
					.getACknowledgeNumberCountByClaimKey(claimKey);
		}

		return count;
	}

	private List<DocumentCheckListDTO> setDocumentCheckListTableValues() {

		return ackDocReceivedService.getDocumentCheckListValues(masterService);
	}

	protected void showPreMedicalWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_PREMEDICAL_WIZARD) final ParameterDTO parameters) {

		ProcessPreMedicalTableDTO tableDTO = (ProcessPreMedicalTableDTO) parameters
				.getPrimaryParameter();
		
		Date startDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR DB FETCHING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+startDate);
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		PreauthDTO preauthDTO = new PreauthDTO();
		//preauthDTO.setRodHumanTask(tableDTO.getHumanTask());
		preauthDTO.setTaskNumber(tableDTO.getTaskNumber());	
		
		preauthDTO.setStrUserName(tableDTO.getUsername());
		preauthDTO.setStrPassword(tableDTO.getPassword());
		if(null != tableDTO.getDocReceivedTimeForMatchDate())
			preauthDTO.setSfxMatchedQDate(tableDTO.getDocReceivedTimeForMatchDate());
		/*if(null !=tableDTO.getDocReceivedTimeForReg())
			preauthDTO.setSfxRegisteredQDate(SHAUtils.formatDateForStarfax(tableDTO.getDocReceivedTimeForReg()));*/
		if(null != tableDTO.getDocReceivedTimeForRegDate())
			preauthDTO.setSfxRegisteredQDate(tableDTO.getDocReceivedTimeForRegDate());
		/*if(null != tableDTO.getDocReceivedTimeForMatch() )
		preauthDTO.setSfxMatchedQDate(SHAUtils.formatDateForStarfax(tableDTO.getDocReceivedTimeForMatch()));*/

		Claim claimByKey = claimService.getClaimByKey(tableDTO.getKey());
		Boolean isValidClaim = true;
		if(null != claimByKey)
		{
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
			{
				isValidClaim = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
		}
		
		
		if(isValidClaim)
		{
		
			List<Preauth> preauthByClaimKey = preauthService
					.getPreauthByClaimKey(claimByKey.getKey());
			Boolean isQueryOrTranslate = false;
			if (!preauthByClaimKey.isEmpty()) {
				for (Preauth preauth : preauthByClaimKey) {
	
					//String[] split = preauth.getPreauthId().split("/");
					//Integer seqNumber = Integer.valueOf(split[split.length - 1]);
						if (preauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_COORDINATOR_REPLY_RECEIVED_STATUS) ||
								preauth.getStatus().getKey().equals(ReferenceTable.PREMEDICAL_PREAUTH_COORDINATOR_REPLY) ||
								preauth.getStatus().getKey().equals(ReferenceTable.PREMEDICAL_ENHANCEMENT_COORDINATOR_REPLY) ||
								preauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_COORDINATOR_REPLY_RECEIVED_STATUS) ||
								preauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_REFER_TO_FLP_STATUS) ||
								preauth.getStatus().getKey().equals(ReferenceTable.TOPUP_FLP_STATUS)||
								 preauth
										.getStatus()
										.getKey()
										.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_QUERY_RECEIVED_STATUS) || preauth
										.getStatus()
										.getKey()
										.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS) || preauth
										.getStatus()
										.getKey()
										.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_QUERY_STATUS) || preauth
										.getStatus()
										.getKey()
										.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SUGGEST_REJECTION_STATUS)) {
							Date mapperStartDate = new Date();
							log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR PREMEDICAL MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
							
							PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//							PreMedicalMapper.getAllMapValues();
							preauthDTO = premedicalMapper.getPreauthDTO(preauth);
							
							Date mapperEndDate = new Date();
							log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR PREMEDICAL MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
							
							log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR PREMEDICAL MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));

							
							//preauthDTO.setRodHumanTask(tableDTO.getHumanTask());
							setpreauthTOPreauthDTO(premedicalMapper, claimByKey,
									preauth, preauthDTO, true);
							CoordinatorDTO coordinatorDTO = new CoordinatorDTO();
							coordinatorDTO.setRefertoCoordinator(false);
							preauthDTO.setCoordinatorDetails(coordinatorDTO);
							preauthDTO.getPreauthDataExtractionDetails().setCorporateBufferFlag(preauthDTO.getClaimDTO().getIsgmcCorpBuffer() != null ? preauthDTO.getClaimDTO().getIsgmcCorpBuffer() : 0L);
							isQueryOrTranslate = true;
							//added for doc received date null in REFER to FLP
							if(null != preauth.getSfxMatchedQDate())
								preauthDTO.setSfxMatchedQDate(preauth.getSfxMatchedQDate());
							/*if(null !=tableDTO.getDocReceivedTimeForReg())
								preauthDTO.setSfxRegisteredQDate(SHAUtils.formatDateForStarfax(tableDTO.getDocReceivedTimeForReg()));*/
							if(null != preauth.getSfxRegisteredQDate())
								preauthDTO.setSfxRegisteredQDate(preauth.getSfxRegisteredQDate());
							
							//added for get next auto allocation issue for query reply with final bill case by noufel
							if(preauth.getStatus().getKey().equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_QUERY_RECEIVED_STATUS)){
								if(null != tableDTO.getDocReceivedTimeForMatchDate())
									preauthDTO.setSfxMatchedQDate(tableDTO.getDocReceivedTimeForMatchDate());
								/*if(null !=tableDTO.getDocReceivedTimeForReg())
									preauthDTO.setSfxRegisteredQDate(SHAUtils.formatDateForStarfax(tableDTO.getDocReceivedTimeForReg()));*/
								if(null != tableDTO.getDocReceivedTimeForRegDate())
									preauthDTO.setSfxRegisteredQDate(tableDTO.getDocReceivedTimeForRegDate());
							}
							
							break;
						}
						
					
				}
			}
	
			if (!isQueryOrTranslate) {
				List<Preauth> preauthByClaimKeyWithClearCashless = preauthService
						.getPreauthByClaimKeyWithClearCashless(claimByKey.getKey());
				String referenceNo = claimByKey.getClaimId() + "/001";
				if(!preauthByClaimKeyWithClearCashless.isEmpty()) {
					referenceNo = claimByKey.getClaimId() + "/00" + String.valueOf(preauthByClaimKeyWithClearCashless.size() + 1);
				}
				
				preauthDTO.getPreauthDataExtractionDetails().setReferenceNo(
						referenceNo);
				if (claimByKey != null) {
					
					newIntimationDto = intimationService
							.getIntimationDto(claimByKey.getIntimation());
										
					setClaimValuesToDTO(preauthDTO, claimByKey);
					// newIntimationDto.getPolicy().getProduct().getAutoRestoration()
					
					Date mapperStartDate = new Date();
					log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
					
					ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
					preauthDTO.setNewIntimationDTO(newIntimationDto);
					preauthDTO.setClaimDTO(claimDTO);
					
					Date mapperEndDate = new Date();
					log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
					
					log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));

				}
//				String policyNumber = preauthDTO.getPolicyDto().getPolicyNumber();
//				List<ViewTmpClaim> previousclaimsList = new ArrayList<ViewTmpClaim>();
				
//				Date mapperStartDate = new Date();
//				log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR GETTING PREVIOUS CLAIMS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
				
//				List<ViewTmpClaim> claimsByPolicyNumber = claimService
//						.getViewTmpClaimsByPolicyNumber(policyNumber);
//				Policy byPolicyNumber = policyService.getByPolicyNumber(policyNumber);
//				List<ViewTmpIntimation> intimationKeys = intimationService.getIntimationByPolicyKey(byPolicyNumber.getKey());
//				List<ViewTmpClaim> claimsByPolicyNumber = claimService
//									.getViewTmpClaimsByIntimationKeys(intimationKeys);
//				previousclaimsList.addAll(claimsByPolicyNumber);
//				
//				previousclaimsList = getPreviousClaimForPreviousPolicy(byPolicyNumber.getRenewalPolicyNumber(), previousclaimsList);
	
//				Date mapperEndDate = new Date();
//				log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR GETTING PREVIOUS CLAIMS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
//				
//				log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR GETTING PREVIOUS CLAIMS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));
//				
				
				
	//			List<PreviousClaimsTableDTO> previousClaimDTOList = SHAUtils
	//					.getPreviousClaims(claimsByPolicyNumber,
	//							claimByKey.getClaimId(), pedValidationService,
	//							masterService);
				
//				List<PreviousClaimsTableDTO> previousClaimDTOList = preauthService
//						.getPreviousClaims(previousclaimsList,
//								claimByKey.getClaimId());
				
				
				// List<PreviousClaimsTableDTO> previousClaimDTOList = new
				// PreviousClaimMapper().getPreviousClaimDTOList(claimsByPolicyNumber);
	
				// List<PreviousClaimsTableDTO> previousClaimDTOList = new
				// PreviousClaimMapper().getPreviousClaimDTOList(claimsByPolicyNumber);
	
//				preauthDTO.setPreviousClaimsList(previousClaimDTOList);
				DBCalculationService dbCalculationService= new DBCalculationService();
				Double insuredSumInsured = dbCalculationService
						.getInsuredSumInsured(preauthDTO.getNewIntimationDTO()
								.getInsuredPatient().getInsuredId().toString(),
								preauthDTO.getPolicyDto().getKey(),preauthDTO.getNewIntimationDTO()
								.getInsuredPatient().getLopFlag());
				/*Integer sumInsured = preauthService.getSumInsured(preauthDTO
						.getPolicyDto().getProduct().getKey(),
						(insuredSumInsured == 0) ? preauthDTO.getPolicyDto()
								.getTotalSumInsured() : insuredSumInsured);*/
				preauthDTO.getPolicyDto().setInsuredSumInsured(insuredSumInsured);
				Map<String, Object> autoRestroation = dbCalculationService.getAutoRestroation(preauthDTO.getNewIntimationDTO().getIntimationId());
				if(autoRestroation.containsKey(SHAConstants.AUTO_RESTORATION_CHK) && autoRestroation.get(SHAConstants.AUTO_RESTORATION_CHK) != null){
					preauthDTO.getPreauthDataExtractionDetails().setAutoRestoration(String.valueOf(autoRestroation.get(SHAConstants.AUTO_RESTORATION_CHK)));
					if(preauthDTO.getPreauthDataExtractionDetails().getAutoRestoration().equalsIgnoreCase(SHAConstants.AUTO_RESTORATION_DONE)) {
						preauthDTO.setIsAutoRestorationDone(true);
					}
				}
				if(autoRestroation.containsKey(SHAConstants.AUTO_RESTORATION_COUNT) && autoRestroation.get(SHAConstants.AUTO_RESTORATION_COUNT) != null){
					preauthDTO.getPreauthDataExtractionDetails().setRestorationCount((Integer.valueOf(autoRestroation.get(SHAConstants.AUTO_RESTORATION_COUNT).toString())));
				}
				
			}
	
			preauthDTO.setIsRepremedical(isQueryOrTranslate);
			
			Double insuredSumInsured = calcService
					.getInsuredSumInsured(preauthDTO.getNewIntimationDTO()
							.getInsuredPatient().getInsuredId().toString(),
							preauthDTO.getPolicyDto().getKey(),preauthDTO.getNewIntimationDTO()
							.getInsuredPatient().getLopFlag());
			
			preauthDTO.setStrUserName(tableDTO.getUsername());
			preauthDTO.setStrPassword(tableDTO.getPassword());
			
		//	loadRRCRequestValues(preauthDTO,insuredSumInsured,SHAConstants.PROCESS_PRE_MEDICAL);
			
		Date premiaStartDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR 64VB PREMIA CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+premiaStartDate);
			
			String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
			if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
				String get64vbStatus = PremiaService.getInstance().get64VBStatus(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), preauthDTO.getNewIntimationDTO().getIntimationId());
				if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
					preauthDTO.setIsDishonoured(true);
				} else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
					preauthDTO.setIsPending(true);
				}
				if(get64vbStatus != null) {
					preauthDTO.setVbCheckStatusFlag(get64vbStatus);
				}
			}
			
			Date premiaEndDate = new Date();
			log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR 64VB PREMIA CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+premiaEndDate);
			
			log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR 64VB PREMIA CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(premiaStartDate, premiaEndDate));
			
			
		  Date	dbCalStartDate = new Date();
			log.info("%%%%%%%%%%%%%%%%%%%%%%STARTING TIME FOR  DB CALCULATION SERVICE  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+dbCalStartDate);
			
			preauthDTO.setSittingsAmount(calcService.getDialysisAmount(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
//			preauthDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(preauthDTO.getNewIntimationDTO().getAdmissionDate(), preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
			
			String policyYear = preauthDTO.getNewIntimationDTO().getPolicyYear();
		    if(policyYear != null){
		    	String intValue = policyYear.replaceAll("[^0-9]", "");
		    	Integer policyAgeing = SHAUtils.getIntegerFromStringWithComma(intValue);
		    	preauthDTO.setAdmissionDatePopup(policyAgeing != null ? policyAgeing.equals(0) ? true : false :false);
		    }
			
			preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
						
			//CR  R1086
			if(preauthDTO.getIsPEDInitiated()){
				boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				preauthDTO.setInsuredDeleted(isInsuredDeleted);
				
				//CR R1156
				boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				preauthDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);
			}
			
			preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
			
			Map<String, String> popupMessages = calcService.getPOPUPMessages(preauthDTO.getPolicyKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
			preauthDTO.setPopupMap(popupMessages);
			
			List<String> popupSIRestrication = calcService.getSIRestrication(preauthDTO.getNewIntimationDTO().getIntimationId(),preauthDTO.getNewIntimationDTO().getKey(), preauthDTO.getPolicyKey());
			preauthDTO.setPopupSIRestrication(popupSIRestrication);
			
			if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
					&& preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
				//if(preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
					Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
					preauthDTO.setSuspiciousPopupMap(suspiciousMap);
				//}
			}

			
			if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
					&& preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
				//if(preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
					Map<String, String> nonPreferredMap = SHAUtils.getNonPreferredMap(preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
					preauthDTO.setNonPreferredPopupMap(nonPreferredMap);
				//}
			}
			
//			 if(preauthDTO.getNewIntimationDTO() != null && preauthDTO.getNewIntimationDTO().getInsuredPatient() != null &&
//					 preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
//					Long claimCount = preauthService.getClaimCount(preauthDTO.getNewIntimationDTO().getPolicy().getKey());
//					if(claimCount != null){
//						preauthDTO.setClaimCount(claimCount);
//					}
//				}
			
			
			  Date	dbCalEndate = new Date();
				log.info("%%%%%%%%%%%%%%%%%%%%%%STARTING TIME FOR  DB CALCULATION SERVICE  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+dbCalEndate);
				
				log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR 64VB PREMIA CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(dbCalStartDate, dbCalEndate));
				
			//SHAUtils.setDefaultCopayValue(preauthDTO);
			
			Date policyFromDate = preauthDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
			
			Date admissionDate = preauthDTO.getNewIntimationDTO().getAdmissionDate();
			
		
//			bean.getPolicyDto().getPolicyType();
			Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
			if(diffDays != null && diffDays<90){
				preauthDTO.setIs64VBChequeStatusAlert(true);
			}
			
			preauthDTO.setDbOutArray(tableDTO.getDbOutArray());
			
			if(claimByKey.getIntimation().getUnNamedKey() != null){
				preauthDTO.setUnNamedKey(claimByKey.getIntimation().getUnNamedKey());
			}
			//gmc
			Intimation intimation = claimByKey.getIntimation();
			Long mainNo = 0L;
			if(intimation.getInsured().getDependentRiskId() !=null){
				mainNo = intimation.getInsured().getDependentRiskId();
			}else{
				mainNo = intimation.getInsured().getInsuredId();
			}
			Map<String, Double> values = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_CB,intimation.getPolicy().getPolicyNumber(),intimation.getInsured().getKey(),mainNo,claimByKey.getKey());
			
			if(values != null && !values.isEmpty()){
				if(values.get(SHAConstants.LN_POLICY_BUFFER_SI) != null){
					preauthDTO.getPreauthDataExtractionDetails().setCorpBufferSI(values.get(SHAConstants.LN_POLICY_BUFFER_SI));	
				}
				if(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT) != null){
					preauthDTO.getPreauthDataExtractionDetails().setCorpBufferUtilisedAmt(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT));	
				}
				if(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) != null){
					preauthDTO.getPreauthDataExtractionDetails().setCorpBufferLimit(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT));	
				}
				if(values.get(SHAConstants.LN_INSURED_UTIL_AMT) != null &&
						values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) !=null){
					Double avlbBalance = values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) - values.get(SHAConstants.LN_INSURED_UTIL_AMT);
					preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAvalBal(avlbBalance);
				}		
			}
				
			Map<String, Integer> productBenefitMap = calcService.getProductBenefitFlag(
					claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
					.getProduct().getKey());
			
			if(productBenefitMap != null && productBenefitMap.containsKey(SHAConstants.OTHER_BENEFITS_FLAG) && productBenefitMap.get(SHAConstants.OTHER_BENEFITS_FLAG) != null){
				
				int benefitFlag = (int)productBenefitMap.get(SHAConstants.OTHER_BENEFITS_FLAG);
				
				preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(benefitFlag);
			}
			else{
				preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(0);
			}
			
			if(ReferenceTable.JET_PRIVILEGE_PRODUCT.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(0);
			}
			
			if(claimByKey!=null){
				
				Long hospital = claimByKey.getIntimation().getHospital();
				Hospitals hospitalById = hospitalService.getHospitalById(hospital);
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					preauthDTO.setIsSuspicious(hospitalById.getSuspiciousType());
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
						preauthDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
					}
				}
			}
			
			Boolean policyValidation = policyService.getPolicyValidationObject(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			preauthDTO.setIsPolicyValidate(policyValidation);			
			
			Product product = preauthDTO.getNewIntimationDTO().getPolicy()
					.getProduct();
			if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())){
				List<UpdateOtherClaimDetailDTO> updateOtherClaimDetails = preauthService.getUpdateOtherClaimDetails(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO);
				preauthDTO.setUpdateOtherClaimDetailDTO(updateOtherClaimDetails);
			}
			
			
			Boolean popupMessagesForProduct = calcService.getPOPUPMessagesForProduct(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), claimByKey.getIntimation().getInsured().getKey(), claimByKey.getIntimation().getPolicy().getProduct().getKey());
			preauthDTO.setIsChangeInsumInsuredAlert(popupMessagesForProduct);
			List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
			List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			
			preauthDTO.setInsuredPedDetails(pedByInsured);
			preauthDTO.setApprovedPedDetails(approvedPedByInsured);
			
			preauthDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			preauthDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			preauthDTO.setCrmFlagged(claimByKey.getCrcFlag());
			
			preauthDTO.setVipCustomer(claimByKey.getIsVipCustomer());
			preauthDTO.setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
			
			Policy policy = preauthDTO.getNewIntimationDTO().getPolicy();
			
			if(ReferenceTable.getGMCProductList().containsKey(policy.getProduct().getKey())){
				List<SelectValue> duplicateInsuredDetails =calcService.getDuplicateInsuredDetails(policy.getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				preauthDTO.setDuplicateInsuredList(duplicateInsuredDetails);
			}
			String topAlertFlag = claimService.getTopUpPolicyDetails(policy.getPolicyNumber(),preauthDTO);
			preauthDTO.setTopUpPolicyAlertFlag(topAlertFlag);
			
			//CR2019217
				 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(preauthDTO.getNewIntimationDTO().getIntimationId()); 
				 if(icrAgent != null && !icrAgent.isEmpty()) {
						String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
						preauthDTO.setIcrAgentValue(agentScorePoint);
						//added for SM Points suggested by Sathish Sir added by Noufel
						String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
						preauthDTO.setSmAgentValue(smScorepoint);
					 
				 }
			//added for PCC remarks CR
			PccRemarks  escalateRemarks = preauthService.getEscalateRemarks(preauthDTO.getNewIntimationDTO().getKey());
			if(escalateRemarks != null){
			preauthDTO.getPreauthDataExtractionDetails().setEscalatePccRemarksvalue(escalateRemarks.getPccRemarks());
			}
			
			//added auto allocation 
			preauthDTO.setIsPreauthAutoAllocationQ(tableDTO.isAutoAllocation());
			
//			Portal Flag updated in cashless table
			if(tableDTO.getNhpUpdDocumentKey() != null){
				preauthDTO.setNhpUpdKey(tableDTO.getNhpUpdDocumentKey());
			}
			
			view.setPreMedicalWizardView(PreMedicalPreauthWizard.class, preauthDTO,
					(Boolean) parameters.getSecondaryParameter(0, Boolean.class));
			
			 Date endDate = new Date();
			 log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR DB FETCHING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+endDate);
			 
			 log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR DB FETCHING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(startDate, endDate));
			
		}
	}

	/**
	 * Method for withdraw pre auth details page. Need to implement below code
	 * once when with draw pre auth screen is developed---Vijay
	 * */

	protected void showWithDrawPreauthWizardView(
			@Observes @CDIEvent(MenuItemBean.WITHDRAW_PREAUTH_WIZARD) final ParameterDTO parameters) {

		// SearchWithdrawCashLessProcessTableDTO tableDTO =
		// (SearchWithdrawCashLessProcessTableDTO)
		// parameters.getPrimaryParameter();
		// WithdrawPreauthDTO withDrawPreAuthDTO = new WithdrawPreauthDTO();
		// withDrawPreAuthDTO.setHumanTask(tableDTO.getHumanTask());
		// //Table DTO will provide claim key
		// Preauth preauthByClaimKey =
		// preauthService.getPreauthListByClaimNo(tableDTO.getKey());
		// withDrawPreAuthDTO.setPreAuthKey(preauthByClaimKey.getKey());
		// Claim claimByKey = claimService.getClaimByKey(tableDTO.getKey());
		//
		// if(claimByKey != null) {
		//
		// NewIntimationDto newIntimationDto =
		// intimationService.getIntimationDto(claimByKey.getIntimation());
		// ClaimDto claimDTO = new ClaimMapper().getClaimDto(claimByKey);
		// withDrawPreAuthDTO.setNewIntimationDTO(newIntimationDto);
		// withDrawPreAuthDTO.setClaimDTO(claimDTO);
		// }
		//
		// view.setView(WithdrawPreauthDetailsWizardView.class, true);
	}

	private void setClaimValuesToDTO(PreauthDTO preauthDTO, Claim claimByKey) {
		PolicyDto policyDto = new PolicyMapper().getPolicyDto(claimByKey
				.getIntimation().getPolicy());
		preauthDTO.setHospitalKey(claimByKey.getIntimation().getHospital());
		Long hospital = claimByKey.getIntimation().getHospital();
		Hospitals hospitalById = hospitalService.getHospitalByKey(hospital);
		preauthDTO.setHospitalCode(hospitalById.getHospitalCode());
		preauthDTO.setClaimNumber(claimByKey.getClaimId());
		preauthDTO.setPolicyDto(policyDto);
		preauthDTO.setDateOfAdmission(claimByKey.getIntimation()
				.getAdmissionDate());
		preauthDTO.setReasonForAdmission(claimByKey.getIntimation()
				.getAdmissionReason());
		preauthDTO.setIntimationKey(claimByKey.getIntimation().getKey());
		preauthDTO
				.setPolicyKey(claimByKey.getIntimation().getPolicy().getKey());
		preauthDTO.setClaimKey(claimByKey.getKey());
		preauthDTO.setClaimDTO(ClaimMapper.getInstance().getClaimDto(claimByKey));
	}
	
	private void setClaimValuesToRRCDTO(RRCDTO preauthDTO, Claim claimByKey) {
		PolicyDto policyDto =new PolicyMapper().getPolicyDto(claimByKey
				.getIntimation().getPolicy());
		preauthDTO.setHospitalKey(claimByKey.getIntimation().getHospital());
		preauthDTO.setClaimNumber(claimByKey.getClaimId());
		preauthDTO.setPolicyDto(policyDto);
		preauthDTO.setDateOfAdmission(claimByKey.getIntimation()
				.getAdmissionDate());
		preauthDTO.setReasonForAdmission(claimByKey.getIntimation()
				.getAdmissionReason());
		preauthDTO.setIntimationKey(claimByKey.getIntimation().getKey());
		preauthDTO
				.setPolicyKey(claimByKey.getIntimation().getPolicy().getKey());
		preauthDTO.setClaimKey(claimByKey.getKey());
	}


	@Override
	public void viewEntered() {
		// ImsUser imsUser = (ImsUser)
		// UI.getCurrent().getSession().getAttribute("imsUser");
		// MenuItem rootMenu = menuItems.getMenusBasedOnUserLogin(imsUser);
		// view.setupMenu(rootMenu);
	}

	// @SuppressWarnings("unchecked")
	// protected void showCreateIntimation(
	// @Observes @CDIEvent(MenuItemBean.NEW_INTIMATION) final ParameterDTO
	// parameters) {
	// TmpPolicy tmpPolicy = (TmpPolicy) parameters.getPrimaryParameter();
	//
	// IntimationDTO intimationsDTO = new IntimationDTO();
	// TmpPolicy policy = policyService.findTmppolicyById(tmpPolicy
	// .getPolSysId());
	// TmpInsured insured = policyService.findByInsuredKey(intimationsDTO
	// .getIntimationDetails().getInsuredPatientId().getKey());
	//
	// intimationsDTO.getIntimationDetails().setInsuredPatientId(insured);
	// intimationsDTO.setTmpPolicy(policy);
	// // view.setIntimationWizardView(IntimationWizard.class, intimationsDTO);
	// }

	// @SuppressWarnings("unchecked")
	// protected void showCreateIntimation(@Observes
	// @CDIEvent(MenuItemBean.NEW_INTIMATION) final ParameterDTO parameters) {
	// TmpPolicy tmpPolicy = (TmpPolicy) parameters.getPrimaryParameter();
	//
	// IntimationDTO intimationsDTO = new IntimationDTO();
	// TmpPolicy policy =
	// policyService.findTmppolicyById(tmpPolicy.getPolSysId());
	// TmpInsured insured =
	// policyService.findByInsuredKey(intimationsDTO.getIntimationDetails().getInsuredPatientId().getKey());
	//
	// intimationsDTO.getIntimationDetails().setInsuredPatientId(insured);
	// intimationsDTO.setTmpPolicy(policy);
	// view.setIntimationWizardView(IntimationWizard.class, intimationsDTO);
	// }

	@SuppressWarnings("unchecked")
	protected void showCreatePreauth(
			@Observes @CDIEvent(MenuItemBean.NEW_PREAUTH) final ParameterDTO parameters) {
		view.setPreauthWizardView(PreauthWizard.class, new PreauthDTO(),
				(Boolean) parameters.getSecondaryParameter(0, Boolean.class));
	}

	// protected void showEditIntimation(
	// @Observes @CDIEvent(MenuItemBean.EDIT_INTIMATION) final ParameterDTO
	// parameters) {
	// IntimationDTO intimationsDTO = (IntimationDTO) parameters
	// .getPrimaryParameter();
	// Long intimationId = intimationsDTO.getKey();
	// Long polsysId = intimationsDTO.getTmpPolicy().getPolSysId();
	// TmpPolicy policy = policyService.findTmppolicyById(polsysId);
	// TmpInsured insured = policyService.findByInsuredKey(intimationsDTO
	// .getIntimationDetails().getInsuredPatientId().getKey());
	// intimationsDTO.getIntimationDetails().setInsuredPatientId(insured);
	// IntimationDTO intimationDTO = intimationService.read(intimationId);
	// intimationDTO.setTmpPolicy(policy);
	// if (intimationDTO.getHospitalDetails().getHospital() != null) {
	// HospitalDto hospitalDto = hospitalService.read(intimationDTO
	// .getHospitalDetails().getHospital().getKey(), intimationDTO
	// .getHospitalDetails().getHospitalType());
	// intimationDTO.getHospitalDetails().setHospital(hospitalDto);
	// if (hospitalDto.getRegistedHospitals() != null
	// && intimationDTO.getHospitalDetails().getHospitalType()
	// .getValue().toLowerCase().contains("network")) {
	// CityTownVillage cityByKey = masterService
	// .getCityByKey(hospitalDto.getRegistedHospitals()
	// .getCityId());
	// hospitalDto.setCpuId(hospitalDto.getRegistedHospitals()
	// .getCpuId());
	// State stateByKey = masterService.getStateByKey(hospitalDto
	// .getRegistedHospitals().getStateId());
	// intimationDTO.getHospitalDetails().setCity(cityByKey);
	// intimationDTO.getHospitalDetails().setState(stateByKey);
	// } else {
	// CityTownVillage cityByKey = masterService
	// .getCityByKey(hospitalDto.getNotRegisteredHospitals()
	// .getCityId());
	// State stateByKey = masterService.getStateByKey(hospitalDto
	// .getNotRegisteredHospitals().getStateId());
	// hospitalDto.setCpuId(hospitalDto.getNotRegisteredHospitals()
	// .getCpuId());
	// intimationDTO.getHospitalDetails().setCity(cityByKey);
	// intimationDTO.getHospitalDetails().setState(stateByKey);
	// }
	// }
	// if (intimationDTO.getIntimationDetails() != null
	// && intimationDTO.getIntimationDetails().getNewBornFlag() != null
	// && intimationDTO.getIntimationDetails().getNewBornFlag()) {
	// List<NewBabyIntimation> listOfNewBabyByIntimation = intimationService
	// .getListOfNewBabyByIntimation(intimationDTO.getKey());
	// intimationDTO.setNewBornBabyIntimation(listOfNewBabyByIntimation);
	// }
	// intimationDTO.getIntimationDetails().setInsuredPatientId(insured);
	// // view.setIntimationWizardView(IntimationWizard.class, intimationDTO);
	// }

	protected void showPEDRequestProcessPage(
			@Observes @CDIEvent(MenuPresenter.PED_REQUEST_PAGE_PROCESS) final ParameterDTO parameters) {

		SearchPEDRequestProcessTableDTO searchDTO = (SearchPEDRequestProcessTableDTO) parameters
				.getPrimaryParameter();
		
		OldPedEndorsementDTO resultDto=pedQueryService.getPedDetailsByKey(searchDTO.getKey());
		OldInitiatePedEndorsement initiate=pedQueryService.getOldInitiatePedEndorsementDetails(resultDto.getKey());
		String diagnosisForPreauthByKey = "";
		if(initiate.getTransactionFlag() != null && initiate.getTransactionKey() != null) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(initiate.getTransactionKey());
			
		}
		searchDTO.setDiagnosis(diagnosisForPreauthByKey);
		Claim claimByKey = initiate.getClaim();
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			
			claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKey);

			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(searchDTO.getUsername());

		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PED_REQUEST_PROCESS);

		searchDTO.setRrcDTO(rrcDTO);
		try{
		Policy policyByPolicyNumber = policyService.getPolicyByPolicyNubember(searchDTO.getPolicyNo());
		if (policyByPolicyNumber != null){
			Long diffDays = SHAUtils.getDiffDaysWithNegative(new Timestamp(System.currentTimeMillis()), policyByPolicyNumber.getPolicyToDate());
//			if (diffDays < 0){
//				diffDays= 0l;
//			}
			searchDTO.setRenewalDue(diffDays);
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		
		view.setPEDRequestProcess(PEDRequestDetailsProcessView.class, searchDTO);
	}
	
	
	
	protected void showconvertclaimcashlesView(
			@Observes @CDIEvent(MenuPresenter.SHOW_CONVERT_CLAIM_CASHLESS) final ParameterDTO parameters) {
		SearchConverClaimCashlessTableDTO searchFormDto = (SearchConverClaimCashlessTableDTO) parameters
				.getPrimaryParameter();
		ConvertClaimDTO convertClaimDto = new ConvertClaimDTO();
		Claim claimDetails = claimService.getClaimByKey(searchFormDto.getKey());
		
//		HumanTask humanTask = searchFormDto.getHumanTask();
//		if(humanTask.getPayload() != null && humanTask.getPayload().getDocReceiptACK() != null){
//			Long acknowledgementKey = humanTask.getPayload().getDocReceiptACK().getKey();
//			 docAcknowledgementBasedOnKey = createRodService.getDocAcknowledgementBasedOnKey(acknowledgementKey);
//		}
		
		NewIntimationDto intimationDto = intimationService
				.getIntimationDto(claimDetails.getIntimation());

		ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimDetails);
		claimDTO.setNewIntimationDto(intimationDto);
		

		if (claimDetails != null) {
			convertClaimDto = convertClaimMapper.getClaimDTO(claimDetails);
		}
		if (null != claimDetails.getStatus()) {
			convertClaimDto.setClaimStatus(claimDetails.getStatus()
					.getProcessValue());

			if (claimDetails.getStatus().getKey().equals(ReferenceTable.CLAIM_REGISTERED_STATUS)) {
				convertClaimDto.setDenialRemarks(claimDetails
						.getRegistrationRemarks());

			} else if (claimDetails.getStatus().getKey() == 19l
					|| claimDetails.getStatus().getKey() == 24l) {
				Preauth preauthDetails = preauthService
						.getPreauthClaimKey(claimDetails.getKey());
				if(preauthDetails != null){
					PreauthQuery preauthQuery = preauthService
							.getPreauthQueryList(preauthDetails.getKey());

					convertClaimDto
					.setDenialRemarks(preauthQuery.getQueryRemarks());
				}
			} else if(claimDetails.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS) || claimDetails.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS)){
				
				Preauth preauthDetails = preauthService
						.getLatestPreauthDetails(claimDetails.getKey());
				if(preauthDetails != null){
				if(preauthDetails.getMedicalRemarks() != null){
					convertClaimDto.setDenialRemarks(preauthDetails.getMedicalRemarks());
				}else{
					convertClaimDto.setDenialRemarks(preauthDetails.getRemarks());
				}
				
				}
			}
		}
		convertClaimDto.setClaimDTO(claimDTO);
		
		List<Long> keysList = new ArrayList<Long>();

		if (claimDetails != null) {
			List<Preauth> preauthList = preauthService
					.getPreauthByClaimKey(claimDetails.getKey());
			for (Preauth preauth : preauthList) {
				keysList.add(preauth.getKey());
			}

		}
		if (!keysList.isEmpty()) {
			Long preauthKey = Collections.max(keysList);
			Preauth preauth = preauthService.getPreauthById(preauthKey);
			if (null != preauth) {
				if (null != preauth.getStatus()) {
					if (preauth.getStatus().getKey().equals(26l) ) {
						convertClaimDto.setClaimStatus(preauth.getStatus()
								.getProcessValue());
						convertClaimDto.setDenialRemarks(preauth.getRemarks());
					}
				}
			}
		}
		
		DocUploadToPremia premiaData = processPremedicalService.getUploadedDataDocument(claimDetails.getIntimation().getIntimationId());
		
		if(premiaData != null && premiaData.getPfdUpFFAXAmt() != null){
			convertClaimDto.setClaimedAmount(Double.valueOf(premiaData.getPfdUpFFAXAmt()));
			convertClaimDto.setProvisionAmount(Double.valueOf("0"));
		}
		
		if(claimDetails.getStatus().getKey().equals(ReferenceTable.CLAIM_CLOSED_STATUS)){
			convertClaimDto.setProvisionAmount(claimDetails.getCurrentProvisionAmount());
		}
		BeanItemContainer<SelectValue> selectValueContainer = masterService
				.getConversionReasonByValue(ReferenceTable.CASHLESS_REASON_FOR_CONVERSION);
		
		view.setConvertClaimCashlessView(ConvertClaimCashlessPageView.class, convertClaimDto,
				selectValueContainer, intimationDto, searchFormDto);
	}
	protected void showInititatePedProcess(
			@Observes @CDIEvent(MenuPresenter.PED_INITIATE_OUTSIDE_PROCESS) final ParameterDTO parameters) {

		SearchPEDInitiateTableDTO searchDTO = (SearchPEDInitiateTableDTO) parameters
				.getPrimaryParameter();
		
		PEDQueryDTO pedQueryDto = new PEDQueryDTO();
		
		Claim claimByKey = claimService.getClaimByClaimKey(searchDTO.getKey());
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if ((claimByKey != null 
				&& claimByKey.getIntimation().getPolicy().getProductType().getKey() != null 
				&& 2904 != claimByKey.getIntimation().getPolicy().getProductType().getKey().intValue())
				|| claimByKey.getIntimation().getPolicy().getProduct().getCode().equalsIgnoreCase(ReferenceTable.STAR_CRITICARE_OTHER_BANKS)) {  // Not Applicable For Group and GHI Policies CR R1212
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
	
			claimDTO.setNewIntimationDto(newIntimationDto);
				
			pedQueryDto.setClaimDto(claimDTO);
			
			Long policyKey = claimDTO.getNewIntimationDto().getPolicy().getKey();
			
			Long insuredKey = claimDTO.getNewIntimationDto().getInsuredKey();
			
			String policyInsuredAgeingFlag = dBCalculationService.getPolicyInsuredAgeingFlag(policyKey,insuredKey);
			
			pedQueryDto.setPolicyInsuredAgeingFlag(policyInsuredAgeingFlag);
			
			if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
			{
			Intimation intimation = intimationService
					.getIntimationByKey(claimDTO.getIntimationKey());
			pedQueryDto.setDocRecievedDate(intimation.getAdmissionDate());
			
			}
			else if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
			Date docRecievedDate = dBCalculationService.getDocRecievedDate(claimByKey.getKey());
			pedQueryDto.setDocRecievedDate(docRecievedDate);
			}
			
			
			BeanItemContainer<SelectValue> selectValuesForICDChapter = masterService.getSelectValuesForICDChapter();
			
			BeanItemContainer<SelectValue> selectPedCodeContainer=masterService.getPedDescription();
			
			BeanItemContainer<SelectValue> selectSourceContainer=masterService.getSelectValueContainer(ReferenceTable.PED_SOURCE);
			
			BeanItemContainer<SelectValue> selectValueContainer = masterService.getSelectValueContainer(ReferenceTable.PED_SUGGESTION);
			
			BeanItemContainer<SelectValue> pedTlValueContainer = masterService.getSelectValueContainer(ReferenceTable.PED_TL);
			
			pedQueryDto.setSelectIcdChapterContainer(selectValuesForICDChapter);
			pedQueryDto.setSelectPedCodeContainer(selectPedCodeContainer);
			pedQueryDto.setSelectSourceContainer(selectSourceContainer);
			pedQueryDto.setPedSuggestionContainer(selectValueContainer);
			pedQueryDto.setPedTlContainer(pedTlValueContainer);
			
			PreauthDTO preauthDto = new PreauthDTO();
			
			pedQueryDto.setPreauthDTO(preauthDto);
			if(claimDTO.getNewIntimationDto()!=null){
				pedQueryDto.getPreauthDTO().setNewIntimationDTO(claimDTO.getNewIntimationDto());
			}
			BeanItemContainer<SelectValue> insuredContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
			
			List<Insured> insuredList = searchDTO.getInsuredList();
			SelectValue select = null;
			for (Insured insured : insuredList) {
				if(insured.getInsuredName() != null){
					select = new SelectValue();
					select.setId(insured.getKey());
					select.setValue(insured.getInsuredName());	
					insuredContainer.addBean(select);
				}
	
			}
			
			Long hospital = claimByKey.getIntimation().getHospital();
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				pedQueryDto.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					pedQueryDto.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}
			
			pedQueryDto.setInsuredDetailsContainer(insuredContainer);
			PolicyDto policyDTO = null;
			policyDTO = new PolicyMapper().getPolicyDto(claimByKey.getIntimation().getPolicy());
			
			pedQueryDto.setPolicyDto(policyDTO);
			
			Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
			pedQueryDto.setIsPolicyValidate(policyValidation);
			
			pedQueryDto.setUsername(searchDTO.getUsername());
	
			view.setPedInitiateOutSideView(InitiatePedView.class, pedQueryDto);
		}
		else if(claimByKey != null && claimByKey.getIntimation().getPolicy().getProductType().getKey() != null 
				&& claimByKey.getIntimation().getPolicy().getProductType().getKey() == 2904
				){
			view.showErrorPopUp("PED Work Flow Not Applicable for Group and GHI Policies.");
		}
	}
	
	protected void showPEDRequestTLApprovedPage(
			@Observes @CDIEvent(MenuPresenter.PED_REQUEST_PAGE_TL_APPROVED) final ParameterDTO parameters)
	{		
		SearchPEDRequestApproveTableDTO searchDTO = (SearchPEDRequestApproveTableDTO) parameters
				.getPrimaryParameter();
		
		OldPedEndorsementDTO resultDto=pedQueryService.getPedDetailsByKey(searchDTO.getKey());
		OldInitiatePedEndorsement initiate=pedQueryService.getOldInitiatePedEndorsementDetails(resultDto.getKey());
		String diagnosisForPreauthByKey = "";
		if(initiate.getTransactionFlag() != null && initiate.getTransactionKey() != null) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(initiate.getTransactionKey());
			
		}
		searchDTO.setDiagnosis(diagnosisForPreauthByKey);
		Claim claimByKey = initiate.getClaim();
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(searchDTO.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PED_REQUEST_APPROVER);
		
		searchDTO.setRrcDTO(rrcDTO);
		
		try{
			
		Policy policyByPolicyNumber = policyService.getPolicyByPolicyNubember(searchDTO.getPolicyNo());
		if (policyByPolicyNumber != null){
			Long diffDays = SHAUtils.getDiffDaysWithNegative(new Timestamp(System.currentTimeMillis()), policyByPolicyNumber.getPolicyToDate());
			searchDTO.setRenewalDue(diffDays);
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
		searchDTO.setIsPolicyValidate(policyValidation);
		
		view.setPEDRequestTeamLeadView(PEDRequestDetailsTeamLeadView.class,
				searchDTO);
	
	}

	protected void showPEDRequestApprovedPage(
			@Observes @CDIEvent(MenuPresenter.PED_REQUEST_PAGE_APPROVED) final ParameterDTO parameters) {
		
		
		SearchPEDRequestApproveTableDTO searchDTO = (SearchPEDRequestApproveTableDTO) parameters
				.getPrimaryParameter();
		
		OldPedEndorsementDTO resultDto=pedQueryService.getPedDetailsByKey(searchDTO.getKey());
		OldInitiatePedEndorsement initiate=pedQueryService.getOldInitiatePedEndorsementDetails(resultDto.getKey());
		String diagnosisForPreauthByKey = "";
		if(initiate.getTransactionFlag() != null && initiate.getTransactionKey() != null) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(initiate.getTransactionKey());
			
		}
		searchDTO.setDiagnosis(diagnosisForPreauthByKey);
		Claim claimByKey = initiate.getClaim();
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());

			
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(searchDTO.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PED_REQUEST_APPROVER);
		
		searchDTO.setRrcDTO(rrcDTO);
		
		try{
			
		Policy policyByPolicyNumber = policyService.getPolicyByPolicyNubember(searchDTO.getPolicyNo());
		if (policyByPolicyNumber != null){
			Long diffDays = SHAUtils.getDiffDaysWithNegative(new Timestamp(System.currentTimeMillis()), policyByPolicyNumber.getPolicyToDate());
//			if (diffDays < 0){
//				diffDays= 0l;
//			}
			searchDTO.setRenewalDue(diffDays);
		}
		}catch(Exception e){
			e.printStackTrace();
		}

		Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
		searchDTO.setIsPolicyValidate(policyValidation);
		
		newIntimationDto = intimationService.getIntimationDto(claimByKey
				.getIntimation());
		Hospitals hospitalDto = hospitalService.getHospitalById(claimByKey.getIntimation().getHospital());
		searchDTO.getPreAuthDto().setNewIntimationDTO(newIntimationDto);
		//searchDTO.getPreAuthDto().getNewIntimationDTO().getHospitalDto().setIsPreferredHospital(hospitalDto.getIsPreferredFlag());
		// R1045
		
		searchDTO.getPreAuthDto().getNewIntimationDTO().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
		
		searchDTO.getPreAuthDto().setCrmFlagged(claimByKey.getCrcFlag());
		searchDTO.getPreAuthDto().setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		searchDTO.getPreAuthDto().setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		
		searchDTO.getPreAuthDto().setVipCustomer(claimByKey.getIsVipCustomer());
		searchDTO.getPreAuthDto().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		if(hospitalDto!=null && hospitalDto.getSuspiciousType()!=null){
			searchDTO.getPreAuthDto().setIsSuspicious(hospitalDto.getSuspiciousType());
		}
		if(hospitalDto!=null && hospitalDto.getClmPrcsInstruction()!=null){
				searchDTO.getPreAuthDto().setClmPrcsInstruction(hospitalDto.getClmPrcsInstruction());
		}
		
		view.setPEDRequestApproved(PEDRequestDetailsApproveView.class,
				searchDTO);
	}
	
	
	protected void showPEDQueryequestPage(
			@Observes @CDIEvent(MenuPresenter.PED_QUERY_REQUEST_PAGE) final ParameterDTO parameters) {
		
		
		BancsSearchPEDRequestApproveTableDTO searchDTO = (BancsSearchPEDRequestApproveTableDTO) parameters
				.getPrimaryParameter();
		
		OldPedEndorsementDTO resultDto=pedQueryService.getPedDetailsByKey(searchDTO.getKey());
		OldInitiatePedEndorsement initiate=pedQueryService.getOldInitiatePedEndorsementDetails(resultDto.getKey());
		String diagnosisForPreauthByKey = "";
		if(initiate.getTransactionFlag() != null && initiate.getTransactionKey() != null) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(initiate.getTransactionKey());
			
		}
		searchDTO.setDiagnosis(diagnosisForPreauthByKey);
		Claim claimByKey = initiate.getClaim();
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());

			
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(searchDTO.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PED_REQUEST_APPROVER);
		
		searchDTO.setRrcDTO(rrcDTO);
		
		try{
			
		Policy policyByPolicyNumber = policyService.getPolicyByPolicyNubember(searchDTO.getPolicyNo());
		if (policyByPolicyNumber != null){
			Long diffDays = SHAUtils.getDiffDaysWithNegative(new Timestamp(System.currentTimeMillis()), policyByPolicyNumber.getPolicyToDate());
//			if (diffDays < 0){
//				diffDays= 0l;
//			}
			searchDTO.setRenewalDue(diffDays);
		}
		}catch(Exception e){
			e.printStackTrace();
		}

		Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
		searchDTO.setIsPolicyValidate(policyValidation);
		
		newIntimationDto = intimationService.getIntimationDto(claimByKey
				.getIntimation());
		Hospitals hospitalDto = hospitalService.getHospitalById(claimByKey.getIntimation().getHospital());
		searchDTO.getPreAuthDto().setNewIntimationDTO(newIntimationDto);
		//searchDTO.getPreAuthDto().getNewIntimationDTO().getHospitalDto().setIsPreferredHospital(hospitalDto.getIsPreferredFlag());
		// R1045
		
		searchDTO.getPreAuthDto().getNewIntimationDTO().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
		
		searchDTO.getPreAuthDto().setCrmFlagged(claimByKey.getCrcFlag());
		searchDTO.getPreAuthDto().setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		searchDTO.getPreAuthDto().setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		
		searchDTO.getPreAuthDto().setVipCustomer(claimByKey.getIsVipCustomer());
		searchDTO.getPreAuthDto().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		if(hospitalDto!=null && hospitalDto.getSuspiciousType()!=null){
			searchDTO.getPreAuthDto().setIsSuspicious(hospitalDto.getSuspiciousType());
		}
		if(hospitalDto!=null && hospitalDto.getClmPrcsInstruction()!=null){
				searchDTO.getPreAuthDto().setClmPrcsInstruction(hospitalDto.getClmPrcsInstruction());
		}
		
		view.setPEDQueryRequestApproved(BancsPEDRequestDetailsApproveView.class,
				searchDTO);
	}

	protected void showAdviceOnPEDPage(
			@Observes @CDIEvent(MenuPresenter.ADVISE_ON_PED_PAGE) final ParameterDTO parameters) {
		
		
		SearchAdviseOnPEDTableDTO searchDTO = (SearchAdviseOnPEDTableDTO) parameters.getPrimaryParameter();
		
		OldPedEndorsementDTO resultDto=pedQueryService.getPedDetailsByKey(searchDTO.getKey());
		OldInitiatePedEndorsement initiate=pedQueryService.getOldInitiatePedEndorsementDetails(resultDto.getKey());
		String diagnosisForPreauthByKey = "";
		if(initiate.getTransactionFlag() != null && initiate.getTransactionKey() != null) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(initiate.getTransactionKey());
			
		}
		searchDTO.setDiagnosis(diagnosisForPreauthByKey);
		Claim claimByKey = initiate.getClaim();
		ClaimDto claimDTO = null;
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());

			claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(searchDTO.getUsername());

		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ADVISE_ON_PED);
		
		searchDTO.setRrcDTO(rrcDTO);
		
		searchDTO.getRrcDTO().getNewIntimationDTO().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
		
		view.setAdviceOnPEDPage(AdviseOnPEDView.class,
				searchDTO,
				null);
	}

	protected void SubmitSpecialistAdvise(
			@Observes @CDIEvent(MenuPresenter.SUBMIT_SPECIALIST_ADVISE_PAGE) final ParameterDTO parameters) {
		view.setSubmitSpecialist(SpecialistViewImpl.class);
	}

	protected void showPEDQueryPage(

			@Observes @CDIEvent(MenuPresenter.PED_QUERY_PAGE) final ParameterDTO parameters) {

		SearchPEDQueryTableDTO searchFormDTO = (SearchPEDQueryTableDTO) parameters
				.getPrimaryParameter();
		
		OldPedEndorsementDTO resultDto=pedQueryService.getPedDetailsByKey(searchFormDTO.getKey());
		 OldInitiatePedEndorsement initiate=pedQueryService.getOldInitiatePedEndorsementDetails(resultDto.getKey());
		 String diagnosisForPreauthByKey = "";
			if(initiate.getTransactionFlag() != null && initiate.getTransactionKey() != null) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(initiate.getTransactionKey());
				
			}
			searchFormDTO.setDiagnosis(diagnosisForPreauthByKey);
		Claim claimByKey = initiate.getClaim();
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(searchFormDTO.getUsername());

		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_PED_QUERY);
		
		searchFormDTO.setRrcDTO(rrcDTO);

		// view.setPEDQueryPage(PEDQueryView.class,(SearchTableDTO)parameters.getPrimaryParameter());
		view.setPEDQueryPage(PEDQueryView.class, searchFormDTO, null); // for
																		// testing
		// purpose by
		// yosuva
	}

	protected void showPEDQueryEditPage(
			@Observes @CDIEvent(MenuPresenter.PED_QUERY_EDIT_PAGE) final ParameterDTO parameters) {
		OldPedEndorsementDTO editDTO = (OldPedEndorsementDTO) parameters
				.getPrimaryParameter();
		view.setPEDQueryPage(PEDQueryView.class, null, editDTO);

	}

	protected void showAdviseOnPedPage(
			@Observes @CDIEvent(MenuPresenter.ADVISE_ON_PED_EDIT_PAGE) final ParameterDTO parameters) {
		OldPedEndorsementDTO editDTO = (OldPedEndorsementDTO) parameters
				.getPrimaryParameter();
		view.setAdviceOnPEDPage(AdviseOnPEDView.class, null, editDTO);
	}

	protected void showCreateRegistration(
			@Observes @CDIEvent(SearchClaimRegistrationPresenter.CREATE_CLAIM_REGISTRATION) final ParameterDTO parameters) {
		SearchClaimRegistrationTableDto searchClaimRegistrationTableDto = (SearchClaimRegistrationTableDto) parameters
				.getPrimaryParameter();
		NewIntimationDto newIntimationDto = searchClaimRegistrationTableDto.getNewIntimationDto();
		RRCDTO rrcDTO = new RRCDTO();
		//rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(searchClaimRegistrationTableDto.getUsername());
		//rrcDTO.setHumanTask(searchClaimRegistrationTableDto.getHumanTask());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_CLAIM_REGISTRATION);
		searchClaimRegistrationTableDto.setRrcDTO(rrcDTO);
		Double balanceSI = 0d;

		if(ReferenceTable.getGMCProductList().containsKey(newIntimationDto.getPolicy().getProduct().getKey()) ||
				ReferenceTable.STAR_GOLD_GROUP_FOR_BANK_CUSTOMERS_KEY.equals(newIntimationDto.getPolicy().getProduct().getKey())){
			balanceSI = calcService.getBalanceSIForGMC(
					newIntimationDto.getPolicy().getKey(),newIntimationDto.getInsuredPatient().getKey(), 0l);
		}else{
			balanceSI = calcService.getBalanceSI(
					newIntimationDto.getPolicy().getKey(),newIntimationDto.getInsuredPatient().getKey(), 0l, newIntimationDto.getInsuredPatient().getInsuredSumInsured(),newIntimationDto.getKey()).get(SHAConstants.TOTAL_BALANCE_SI);
		}
		
		Map<String, String> popupMessages = new HashMap<String, String>();
		if(balanceSI != null && !(balanceSI > 0)){
		     popupMessages.put(SHAConstants.BALANCE_SI, "<b style = 'black'>Balance SI is Zero </b>");
		}
		if(newIntimationDto.getAdmissionType() != null && newIntimationDto.getAdmissionType().getId().equals(ReferenceTable.LATE_INTIMATION_KEY)){
			 popupMessages.put(SHAConstants.LATE_INTIMATION, "<b style = 'black'>Late intimation </b>");
		}
		Map<String, String> suspiciousPopupMessage = new HashMap<String, String>();
		if(newIntimationDto.getHospitalDto().getSuspiciousFlag() != null && newIntimationDto.getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
		     //if(newIntimationDto.getHospitalDto().getSuspiciousRemarks() != null){
		    	 suspiciousPopupMessage = SHAUtils.getSuspiciousMap(newIntimationDto.getHospitalDto().getSuspiciousRemarks() != null ? newIntimationDto.getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
		     //}
		}
		searchClaimRegistrationTableDto.setSuspiciousPopUp(suspiciousPopupMessage);
		
		if(newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getPolicyStatus() != null) {
			if(newIntimationDto.getPolicy().getPolicyStatus().equalsIgnoreCase(SHAConstants.ENDORESED_POLICY)) {
				searchClaimRegistrationTableDto.setIsProceedFurther(PremiaService.getInstance().getEndorsedPolicyStatus(newIntimationDto.getPolicy().getPolicyNumber()));
			} else if(newIntimationDto.getPolicy().getPolicyStatus().equalsIgnoreCase(SHAConstants.CANCELLED_POLICY)) {
				searchClaimRegistrationTableDto.setIsProceedFurther(false);
				searchClaimRegistrationTableDto.setIsCancelledPolicy(true);
			}
		}
		Intimation intimationDtls = intimationService.getIntimationByNo(searchClaimRegistrationTableDto.getIntimationNumber());
		if(intimationDtls != null && intimationDtls.getAllowApprovalFlag() != null && intimationDtls.getAllowApprovalFlag().equalsIgnoreCase("Y")){
			searchClaimRegistrationTableDto.setIsProceedFurther(true);
		}
		
		Policy policyByKey = policyService.getPolicyByKey(newIntimationDto.getPolicy().getKey());
		
		MASClaimAdvancedProvision claimAdvProvision = policyService.getClaimAdvProvision(Long.valueOf(policyByKey.getHomeOfficeCode()));
		if(claimAdvProvision != null && claimAdvProvision.getAvgAmt() != null){
			searchClaimRegistrationTableDto.setClaimedAmount(claimAdvProvision.getAvgAmt());	
		}
		
		popupMessages.putAll(calcService.getPOPUPMessages(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey(),newIntimationDto.getPolicy().getProduct().getKey()));
		searchClaimRegistrationTableDto.setPopupMap(popupMessages);
		
		view.setClaimRegistrationForm(ClaimRegistrationView.class,
				searchClaimRegistrationTableDto);
	}
	
	 protected void showGhiAllowCreateRegistration(
				@Observes @CDIEvent(MenuPresenter.CREATE_GHI_ALLOW_CLAIM_REGISTRATION) final ParameterDTO parameters) {
			SearchClaimRegistrationTableDto searchClaimRegistrationTableDto = (SearchClaimRegistrationTableDto) parameters
					.getPrimaryParameter();
			NewIntimationDto newIntimationDto = searchClaimRegistrationTableDto.getNewIntimationDto();
			RRCDTO rrcDTO = new RRCDTO();
			//rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(searchClaimRegistrationTableDto.getUsername());
			//rrcDTO.setHumanTask(searchClaimRegistrationTableDto.getHumanTask());
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_CLAIM_REGISTRATION);
			searchClaimRegistrationTableDto.setRrcDTO(rrcDTO);
			Double balanceSI = 0d;

			if(ReferenceTable.getGMCProductList().containsKey(newIntimationDto.getPolicy().getProduct().getKey())){
				balanceSI = calcService.getBalanceSIForGMC(
						newIntimationDto.getPolicy().getKey(),newIntimationDto.getInsuredPatient().getKey(), 0l);
			}else{
				balanceSI = calcService.getBalanceSI(
						newIntimationDto.getPolicy().getKey(),newIntimationDto.getInsuredPatient().getKey(), 0l, newIntimationDto.getInsuredPatient().getInsuredSumInsured(),newIntimationDto.getKey()).get(SHAConstants.TOTAL_BALANCE_SI);
			}
			
			Map<String, String> popupMessages = new HashMap<String, String>();
			if(balanceSI != null && !(balanceSI > 0)){
			     popupMessages.put(SHAConstants.BALANCE_SI, "<b style = 'black'>Balance SI is Zero </b>");
			}
			if(newIntimationDto.getAdmissionType() != null && newIntimationDto.getAdmissionType().getId().equals(ReferenceTable.LATE_INTIMATION_KEY)){
				 popupMessages.put(SHAConstants.LATE_INTIMATION, "<b style = 'black'>Late intimation </b>");
			}
			Map<String, String> suspiciousPopupMessage = new HashMap<String, String>();
			if(newIntimationDto.getHospitalDto().getSuspiciousFlag() != null && newIntimationDto.getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
			     //if(newIntimationDto.getHospitalDto().getSuspiciousRemarks() != null){
			    	 suspiciousPopupMessage = SHAUtils.getSuspiciousMap(newIntimationDto.getHospitalDto().getSuspiciousRemarks() != null ? newIntimationDto.getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
			     //}
			}
			searchClaimRegistrationTableDto.setSuspiciousPopUp(suspiciousPopupMessage);
			
			if(newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getPolicyStatus() != null) {
				if(newIntimationDto.getPolicy().getPolicyStatus().equalsIgnoreCase(SHAConstants.CANCELLED_POLICY)) {
					searchClaimRegistrationTableDto.setIsProceedFurther(false);
					searchClaimRegistrationTableDto.setIsCancelledPolicy(true);
				}
			}
			Intimation intimationDtls = intimationService.getIntimationByNo(searchClaimRegistrationTableDto.getIntimationNumber());
			if(intimationDtls != null && intimationDtls.getAllowApprovalFlag() != null && intimationDtls.getAllowApprovalFlag().equalsIgnoreCase("Y")){
				searchClaimRegistrationTableDto.setIsProceedFurther(true);
			}
			Policy policyByKey = policyService.getPolicyByKey(newIntimationDto.getPolicy().getKey());
			
			MASClaimAdvancedProvision claimAdvProvision = policyService.getClaimAdvProvision(Long.valueOf(policyByKey.getHomeOfficeCode()));
			if(claimAdvProvision != null && claimAdvProvision.getAvgAmt() != null){
				searchClaimRegistrationTableDto.setClaimedAmount(claimAdvProvision.getAvgAmt());	
			}
			
			popupMessages.putAll(calcService.getPOPUPMessages(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey(),newIntimationDto.getPolicy().getProduct().getKey()));
			searchClaimRegistrationTableDto.setPopupMap(popupMessages);
			
			view.setGhiAllowClaimRegistrationForm(GhiAllowClaimRegistrationView.class,
					searchClaimRegistrationTableDto);
		}

	protected void showProcessInvestigationInitiated(
			@Observes @CDIEvent(MenuPresenter.PROCESS_INVESTIGATION_INITIATED) final ParameterDTO parameters) {
		
		SearchProcessInvestigationInitiatedTableDTO investigationDTO = (SearchProcessInvestigationInitiatedTableDTO) parameters
				.getPrimaryParameter();
		
		Long investigationKey = (Long) investigationDTO.getKey();
		
		
		
		if(investigationKey != null && investigationKey.intValue() != 0){
		Investigation investigation = investigationService
				.getByInvestigationKey(investigationKey);
		
		List<SelectValue> invAllocatonToList = new ArrayList<SelectValue>();
		BeanItemContainer<SelectValue> invContainer = masterService.getMasterValueByReference(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
		invAllocatonToList = invContainer.getItemIds();
		investigationDTO.setInvAllocationToList(invAllocatonToList);
		investigationDTO.setRequestedBy(investigation.getCreatedBy());
		
		/*//Reason for Initiate Inv
		SelectValue selectValueforInInv = new SelectValue();
		selectValueforInInv.setId(investigation.getReasonForInitiatingInv().getKey());
		selectValueforInInv.setValue(investigation.getReasonForInitiatingInv().getValue());
		investigationDTO.setReasonForIniInvestValue(investigation.getReasonForInitiatingInv().getValue());
		BeanItemContainer<SelectValue> reasonforIniInvContainer = masterService.getSelectValueContainer(ReferenceTable.REASON_FOR_INITIATE_INVESTIGATION);
		List<SelectValue> reasonforIniInvList = reasonforIniInvContainer.getItemIds();
		
		
		investigationDTO.setReasonForInitiatingInvestSelectValueList(allocationContainer.getItemIds());
		investigationDTO.setReasonForInitiatingInvestSelectValue(selectValueforInInv);
		investigationDTO.setReasonForIniInvestId(investigation.getReasonForInitiatingInv().getKey());
		investigationDTO.setReasonForInitiatingInvestIdList(reasonforIniInvList);*/
		
		if(investigation.getCreatedBy() != null){
			TmpEmployee employeeName = masterService.getEmployeeName(investigation.getCreatedBy().toLowerCase());
			if(employeeName != null){
				investigationDTO.setRequestedBy(investigation.getCreatedBy() +"-"+ employeeName.getEmpFirstName());
			}
		}
		
		Claim claimByKey = investigation.getClaim();
		Boolean isValidClaimForMA = true;
		if(null != investigation)
		{
			//Claim claimByKey = (investigation.getClaim());
			if(null != claimByKey)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
				{
					isValidClaimForMA = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
		}
		if(isValidClaimForMA)
		{
		
		Preauth preauth =preauthService.getLatestPreauthByClaim(claimByKey.getKey());
		
		String diagnosisForPreauthByKey = "";
		if(preauth != null ) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
			
		}
		investigationDTO.setDiagnosis(diagnosisForPreauthByKey);
		
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
		}
		
		if(claimByKey != null && claimByKey.getClaimType().getKey()!=null){
			investigationDTO.setClaimTypeId(claimByKey.getClaimType().getKey());
		}
				
				
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(investigationDTO.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_INVESTIGATION_INTIATED);
		
		
		
		investigationDTO.setRrcDTO(rrcDTO);
		
		// R1045
		investigationDTO.setPreauthDTO(new PreauthDTO());
		investigationDTO.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
		investigationDTO.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
		investigationDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		investigationDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		
		investigationDTO.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());

		investigationDTO.getPreauthDTO().getNewIntimationDTO().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
		
		Long hospital = claimByKey.getIntimation().getHospital();
		Hospitals hospitalById = hospitalService.getHospitalById(hospital);
		
		if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
			investigationDTO.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
				investigationDTO.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
			}
		}
		
		investigationDTO.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
		investigationDTO.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		//R1152
    	if(newIntimationDto.getHospitalDto() != null && newIntimationDto.getHospitalDto().getCpuId() != null && newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getHomeOfficeCode() != null){
			TmpCPUCode cpu = rodService.getCpuDetails(newIntimationDto.getHospitalDto().getCpuId());
			OrganaizationUnit branch = rodService.getBranchCode(newIntimationDto.getPolicy().getHomeOfficeCode());
			if(cpu != null && branch != null && branch.getCpuCode() != null){
				if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
					investigationDTO.setIsGeoSame(Boolean.FALSE);
				}
			}
		}
		
		
		}
		if(investigationDTO.getPreauthDTO().getNewIntimationDTO() != null && investigationDTO.getPreauthDTO().getNewIntimationDTO().getInsuredPatient() != null &&
				investigationDTO.getPreauthDTO().getNewIntimationDTO().getInsuredPatient().getKey() != null){
				Long claimCount = preauthService.getClaimCount(investigationDTO.getPreauthDTO().getNewIntimationDTO().getPolicy().getKey());
				if(claimCount != null){
					investigationDTO.setClaimCount(claimCount);
				}
			}
		
		investigationDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(investigationDTO.getPreauthDTO().getNewIntimationDTO().getPolicy().getKey()));
		
		if(investigationDTO.getPreauthDTO().getNewIntimationDTO().getHospitalDto() != null && investigationDTO.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
				&& investigationDTO.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
			//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
				Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(investigationDTO.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? investigationDTO.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks(): SHAConstants.SUSPICIOUS_HOSP);
				investigationDTO.setSuspiciousPopupMap(suspiciousMap);
			//}
		}
		
		
		if(investigationDTO.getPreauthDTO().getNewIntimationDTO().getHospitalDto() != null && investigationDTO.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
							&& investigationDTO.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
						//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
							Map<String, String> nonPreferredsMap = SHAUtils.getNonPreferredMap(investigationDTO.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? investigationDTO.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
							investigationDTO.setNonPreferredPopupMap(nonPreferredsMap);
						//}
					}
		
		Date policyFromDate = investigationDTO.getPreauthDTO().getNewIntimationDTO().getPolicy().getPolicyFromDate();
		
		Date admissionDate = investigationDTO.getPreauthDTO().getNewIntimationDTO().getAdmissionDate();
		
	
//		bean.getPolicyDto().getPolicyType();
		Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
		if(diffDays != null && diffDays<90){
			investigationDTO.setIs64VBChequeStatusAlert(true);
		}
		
		
		}
		Date date28 = new Date();
		Map<String, String> popupMessages = calcService.getPOPUPMessages(investigationDTO.getPreauthDTO().getNewIntimationDTO().getPolicy().getKey(),investigationDTO.getPreauthDTO().getNewIntimationDTO().getInsuredPatient().getKey(),investigationDTO.getPreauthDTO().getNewIntimationDTO().getPolicy().getProduct().getKey());
		log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY POPUP MESSAGE PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));
		investigationDTO.setPopupMap(popupMessages);
		
		//CR2019217
		 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(investigationDTO.getPreauthDTO().getNewIntimationDTO().getIntimationId()); 
		 if(icrAgent != null && !icrAgent.isEmpty()) {
				String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
				investigationDTO.getPreauthDTO().setIcrAgentValue(agentScorePoint);
				//added for SM Points suggested by Sathish Sir added by Noufel
				String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
				investigationDTO.getPreauthDTO().setSmAgentValue(smScorepoint);
			 
		 }
		
		view.setInvestigationInitiate(ProcessInvestigationInitiatedView.class,
				true, investigationDTO);
		
	}
	protected void showReAssignInvestigationWizard(@Observes @CDIEvent(MenuPresenter.RE_ASSIGN_INVESTIGATION) final ParameterDTO parameters) {
		 AssignInvestigatorDto assignInvestigatorDto = new AssignInvestigatorDto();
		 AssignInvestigatorDto prevAssignedDto = new AssignInvestigatorDto();
		List<Investigation> investigationList = null;
		SearchAssignInvestigationTableDTO tableDto = (SearchAssignInvestigationTableDTO) parameters
				.getPrimaryParameter();
		Long investigationKey = tableDto.getInvestigationKey();
		
		Investigation investigationobj = investigationService
				.getByInvestigationKey(investigationKey);
		Long assignedKey = tableDto.getInvestigationAssignedKey();
		
		AssignedInvestigatiorDetails assignObj = investigationService.getAssignedInvestigByKey(assignedKey);

		Boolean isValidClaimForMA = true;
		if(null != investigationobj)
		{
			Claim claimByKey = (investigationobj.getClaim());
			if(null != claimByKey)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
				{
					isValidClaimForMA = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
		}
		if(isValidClaimForMA)
		{
		
		if(assignObj != null){		
			assignInvestigatorDto.setKey(assignObj.getKey());
			assignInvestigatorDto.setInvestigatorCode(assignObj.getInvestigatorCode());
			assignInvestigatorDto.setInvestigatorName(assignObj.getInvestigatorName());
			prevAssignedDto.setKey(assignObj.getKey());
			prevAssignedDto.setInvestigatorCode(assignObj.getInvestigatorCode());
			prevAssignedDto.setInvestigatorName(assignObj.getInvestigatorName());
			prevAssignedDto.setAllocationToSelectValue(assignObj.getAllocationTo() != null ? new SelectValue(assignObj.getAllocationTo().getKey(),assignObj.getAllocationTo().getValue()) : null);
			prevAssignedDto.setCitySelectValue(assignObj.getCity() != null ?new SelectValue(assignObj.getCity().getKey(), assignObj.getCity().getValue()) : null);
			prevAssignedDto.setStateSelectValue(assignObj.getState() != null ? new SelectValue(assignObj.getState().getKey(),assignObj.getState().getValue()) : null);
		
			
			if(assignObj.getInvestigatorCode() != null && (assignObj.getInvestigatorCode().contains("INV"))){
				TmpInvestigation invMaster = investigationService.getTmpInvestigationByInvestigatorCode(assignObj.getInvestigatorCode());
				if(invMaster != null){
					assignInvestigatorDto.setInvestigatorMobileNo(invMaster.getMobileNumber() != null ? String.valueOf(invMaster.getMobileNumber()) : "");
					assignInvestigatorDto.setInvestigatorTelNo(invMaster.getPhoneNumber() != null ? String.valueOf(invMaster.getPhoneNumber()):"");
					prevAssignedDto.setInvestigatorNameListSelectValue(new SelectValue(invMaster.getKey(),invMaster.getInvestigatorName()));
					prevAssignedDto.setInvestigatorMobileNo(invMaster.getMobileNumber() != null ? String.valueOf(invMaster.getMobileNumber()) : "");
					prevAssignedDto.setInvestigatorTelNo(invMaster.getPhoneNumber() != null ? String.valueOf(invMaster.getPhoneNumber()):"");
					if(assignObj.getZoneCode()!= null){
						/*Long cpuCode = Long.valueOf(assignObj.getZoneCode());
						TmpCPUCode masCpuCode = rodService.getMasCpuCode(cpuCode);
						if(masCpuCode!=null){
						prevAssignedDto.setZoneName(masCpuCode.getDescription());
						prevAssignedDto.setZoneSelectValue(new SelectValue(cpuCode,masCpuCode.getDescription()));
						}
						MasInvZone masInvZone = masterService.getMasInvZone(cpuCode);
						if(masInvZone !=null){
						prevAssignedDto.setZoneName(masInvZone.getZoneName());
						prevAssignedDto.setZoneSelectValue(new SelectValue(masInvZone.getKey(),masInvZone.getZoneName()));
						}*/

						if(StringUtils.isNumeric(assignObj.getZoneCode())){
							Long cpuCode = Long.valueOf(assignObj.getZoneCode());
							TmpCPUCode masCpuCode = rodService.getMasCpuCode(cpuCode);
							if(masCpuCode!=null){
							prevAssignedDto.setZoneName(masCpuCode.getDescription());
							prevAssignedDto.setZoneSelectValue(new SelectValue(cpuCode,masCpuCode.getDescription()));
							}else {
								MasInvZone masInvZone = masterService.getMasInvZoneKey(assignObj.getZoneCode());
								if(masInvZone !=null){
								prevAssignedDto.setZoneName(masInvZone.getZoneName());
								prevAssignedDto.setZoneSelectValue(new SelectValue(masInvZone.getKey(),masInvZone.getZoneName()));
								}
							}

						} else {
							MasInvZone masInvZone = masterService.getMasInvZoneName(assignObj.getZoneCode());
							if(masInvZone !=null){
							prevAssignedDto.setZoneName(masInvZone.getZoneName());
							prevAssignedDto.setZoneSelectValue(new SelectValue(masInvZone.getKey(),masInvZone.getZoneName()));
							}
						}

					}
				}
			} else {
				if(assignObj.getZoneCode() != null){
					Long privateInvKey = Long.valueOf(assignObj.getInvestigatorCode());
					MasPrivateInvestigator privateInvestigation = investigationService.getPrivateInvestigatorByKey(privateInvKey);
					prevAssignedDto.setInvestigatorNameListSelectValue(new SelectValue(privateInvestigation.getPrivateInvestigationKey(),privateInvestigation.getInvestigatorName()));
					prevAssignedDto.setInvestigatorTelNo(privateInvestigation != null && privateInvestigation.getMobileNumberTwo() != null && privateInvestigation.getMobileNumberTwo().intValue() != 0 ? String.valueOf(privateInvestigation.getMobileNumberTwo()): "");
					prevAssignedDto.setInvestigatorMobileNo(privateInvestigation != null && privateInvestigation.getMobileNumberOne() != null && privateInvestigation.getMobileNumberOne().intValue() != 0 ? String.valueOf(privateInvestigation.getMobileNumberOne()) : "");
//					prevAssignedDto.setZoneName(privateInvestigation != null && privateInvestigation.getZoneName() != null ? privateInvestigation.getZoneName() : "");
					prevAssignedDto.setCoordinatorName(privateInvestigation != null && privateInvestigation.getCordinatorName() != null ? privateInvestigation.getCordinatorName() : "");
					//prevAssignedDto.setZoneSelectValue(new SelectValue(privateInvestigation.getZoneCode(),privateInvestigation.getZoneName()));
					prevAssignedDto.setCoordinatorSelectValue(new SelectValue(0l, privateInvestigation.getCordinatorName()));
					if(assignObj.getZoneCode()!= null){
						/*Long cpuCode = Long.valueOf(assignObj.getZoneCode());
						TmpCPUCode masCpuCode = rodService.getMasCpuCode(cpuCode);
						if(masCpuCode!=null){
						prevAssignedDto.setZoneName(masCpuCode.getDescription());
						prevAssignedDto.setZoneSelectValue(new SelectValue(cpuCode,masCpuCode.getDescription()));
						}
						MasInvZone masInvZone = masterService.getMasInvZone(cpuCode);
						if(masInvZone !=null){
						prevAssignedDto.setZoneName(masInvZone.getZoneName());
						prevAssignedDto.setZoneSelectValue(new SelectValue(masInvZone.getKey(),masInvZone.getZoneName()));
						}*/

						if(StringUtils.isNumeric(assignObj.getZoneCode())){
							Long cpuCode = Long.valueOf(assignObj.getZoneCode());
							TmpCPUCode masCpuCode = rodService.getMasCpuCode(cpuCode);
							if(masCpuCode!=null){
							prevAssignedDto.setZoneName(masCpuCode.getDescription());
							prevAssignedDto.setZoneSelectValue(new SelectValue(cpuCode,masCpuCode.getDescription()));
							}else {
								MasInvZone masInvZone = masterService.getMasInvZoneKey(assignObj.getZoneCode());
								if(masInvZone !=null){
								prevAssignedDto.setZoneName(masInvZone.getZoneName());
								prevAssignedDto.setZoneSelectValue(new SelectValue(masInvZone.getKey(),masInvZone.getZoneName()));
								}
							}

						} else {
							MasInvZone masInvZone = masterService.getMasInvZoneName(assignObj.getZoneCode());
							if(masInvZone !=null){
							prevAssignedDto.setZoneName(masInvZone.getZoneName());
							prevAssignedDto.setZoneSelectValue(new SelectValue(masInvZone.getKey(),masInvZone.getZoneName()));
							}
						}

					}
				}
			}
		}	
		
		String diagnosisForPreauthByKey = "";
		if(null != investigationobj && investigationobj.getTransactionFlag() != null && investigationobj.getTransactionKey() != null) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(investigationobj.getTransactionKey());
			
		}
		assignInvestigatorDto.setDiagnosisName(diagnosisForPreauthByKey);
		if(null != investigationobj)
		{
			assignInvestigatorDto.setClaimBackgroundDetails(investigationobj.getClaimBackgroundDetails());
			assignInvestigatorDto.setFactsOfCase(investigationobj.getFactsOfCase());
		}
		
		Claim claimByKey = investigationobj.getClaim();
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			assignInvestigatorDto.setClaimDto(claimDTO);
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(tableDto.getUsername());
		
		// R1045
		assignInvestigatorDto.setPreauthDTO(new PreauthDTO());
		assignInvestigatorDto.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
		assignInvestigatorDto.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
		assignInvestigatorDto.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		assignInvestigatorDto.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		
		assignInvestigatorDto.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		Long hospital = claimByKey.getIntimation().getHospital();
		Hospitals hospitalById = hospitalService.getHospitalById(hospital);
		
		if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
			assignInvestigatorDto.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				assignInvestigatorDto.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
			}
		}
		
		assignInvestigatorDto.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
		assignInvestigatorDto.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
					
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ASSIGN_INVESTIGATION_INTIATED);
		
		tableDto.setRrcDTO(rrcDTO);
		
		// investigationKey = 108l;
		List<SelectValue> stateContainer = new ArrayList<SelectValue>();
		BeanItemContainer<SelectValue> allocationToContainer = new BeanItemContainer<SelectValue>(
				SelectValue.class);

		List<State> stateList = masterService.getStateList();
		if (!stateList.isEmpty()) {
			SelectValue stateSelectValue = null;
			for (State state : stateList) {
				stateSelectValue = new SelectValue();
				stateSelectValue.setId(state.getKey());
				stateSelectValue.setValue(state.getValue());
				stateContainer.add(stateSelectValue);
			}
		}

		allocationToContainer = masterService
				.getSelectValueContainer(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
		List<SelectValue> allocationToList = allocationToContainer.getItemIds();
		List<TmpInvestigation> investigatorList = masterService
				.getInvestigation().getItemIds();

		Investigation investigation = investigationService
				.getByInvestigationKey(investigationKey);
		if (investigation != null) {
			investigationList = investigationService
					.getByInvestigation(investigation.getIntimation().getKey());
		}
		if (investigation != null) {
		//	ClaimDto claimDto = claimService.claimToClaimDTO(investigation
		//			.getClaim());
			
			insuredSumInsured = calcService.getInsuredSumInsured(String.valueOf(claimDTO.getNewIntimationDto().getInsuredPatient().getInsuredId()), claimDTO.getNewIntimationDto().getPolicy().getKey(),claimDTO.getNewIntimationDto().getInsuredPatient().getLopFlag());	
			claimDTO.getNewIntimationDto().getInsuredPatient().setInsuredSumInsured(insuredSumInsured);
			
			List<Reimbursement> reimbObjList = reimbursementService.getReimbursementByClaimKey(claimByKey.getKey());
			if(reimbObjList != null && !reimbObjList.isEmpty()){
				Reimbursement reimbObj = reimbObjList.get(0);
				Double claimedAmt = 0d;
				claimedAmt += reimbObj.getDocAcknowLedgement().getPreHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getPreHospitalizationClaimedAmount() :0d;
				claimedAmt += reimbObj.getDocAcknowLedgement().getHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getHospitalizationClaimedAmount() : 0d;
				claimedAmt += reimbObj.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d;
				claimDTO.setClaimedAmount(claimedAmt);
			}	
			
			Long rodKey = tableDto.getRodKey();
			if(rodKey != null){
				Reimbursement reimbursment = reimbursementService.getReimbursementByKey(rodKey);
				if(null != reimbursment)
				{
					assignInvestigatorDto.setDischargeDate(reimbursment.getDateOfDischarge());
					List<PedValidation> search = diagnosisService.search(rodKey);
					String diagnosis = masterService.getDiagnosis(search);
					assignInvestigatorDto.setDiagnosisName(diagnosis);
				}
			}
			assignInvestigatorDto.setDbOutArray(tableDto.getDbOutArray());
			assignInvestigatorDto.setUserName(tableDto.getUsername());
			assignInvestigatorDto.setPassWord(tableDto.getPassword());
			assignInvestigatorDto.setClaimDto(claimDTO);
			assignInvestigatorDto.setRodKey(tableDto.getRodKey());
			SelectValue allocationTo = new SelectValue();
			allocationTo.setId(investigation.getAllocationTo().getKey());
			allocationTo.setValue(investigation.getAllocationTo().getValue());
			assignInvestigatorDto.setAllocationToValue(investigation
					.getAllocationTo().getValue());
			BeanItemContainer<SelectValue> allocationContainer = masterService
			.getSelectValueContainer(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
			
			//Reason for Initiate Inv
			SelectValue selectValueforInInv = new SelectValue();
			if(investigation.getReasonForInitiatingInv()!=null){
				selectValueforInInv.setId(investigation.getReasonForInitiatingInv().getKey());
				selectValueforInInv.setValue(investigation.getReasonForInitiatingInv().getValue());
				assignInvestigatorDto.setReasonForIniInvestValue(investigation.getReasonForInitiatingInv().getValue());
				assignInvestigatorDto.setReasonForInitiatingInvestSelectValue(selectValueforInInv);
				assignInvestigatorDto.setReasonForIniInvestId(investigation.getReasonForInitiatingInv().getKey());
			}
			
			BeanItemContainer<SelectValue> reasonforIniInvContainer = masterService.getSelectValueContainer(ReferenceTable.REASON_FOR_INITIATE_INVESTIGATION);
			List<SelectValue> reasonforIniInvList = reasonforIniInvContainer.getItemIds();
			
			
			assignInvestigatorDto.setReasonForInitiatingInvestSelectValueList(reasonforIniInvContainer.getItemIds());
			assignInvestigatorDto.setReasonForInitiatingInvestIdList(reasonforIniInvList);
			
			
			BeanItemContainer<SelectValue> representativeName = investigationService.getRepresentativeListWithoutFilter();
			
			List<MasPrivateInvestigator> privateInvestigatorsList = masterService
					.getPrivateInvestigatorsList().getItemIds();
			
			List<SelectValue> zoneContainer = new ArrayList<SelectValue>();
			zoneContainer = masterService.getPrivateInvestigatorsZones();
			
//			asdfasdf
			assignInvestigatorDto.setAllocationToSelectValueList(allocationContainer.getItemIds());
			assignInvestigatorDto.setAllocationToSelectValue(allocationTo);
			assignInvestigatorDto.setAllocationToValueForState(investigation
					.getAllocationTo().getValue());
			assignInvestigatorDto.setAllocationToId(investigation
					.getAllocationTo().getKey());
			assignInvestigatorDto.setInvestiationApprovedRemarks(investigation
					.getRemarks());
			assignInvestigatorDto.setReasonForRefering(investigation
					.getReasonForReferring());
			assignInvestigatorDto.setTriggerPointsForFocus(investigation
					.getTriggerPoints());
			assignInvestigatorDto.setRequestingRole(investigation
					.getCreatedBy());
			assignInvestigatorDto.setRequestroIdOrName(investigation
					.getCreatedBy());
			if(investigation.getCreatedBy() != null){
				TmpEmployee employeeName = masterService.getEmployeeName(investigation.getCreatedBy().toLowerCase());
				if(employeeName != null){
				assignInvestigatorDto.setRequestroIdOrName(investigation.getCreatedBy() +"-"+ employeeName.getEmpFirstName());
				}
			}
			
			//TODO  Assign Multiple Investigation
			assignInvestigatorDto.setStateList(stateContainer);
//			assignInvestigatorDto.setInvestigatorNameContainer(representativeName);
			assignInvestigatorDto.setInvestigatorNameContainerList(representativeName.getItemIds());
			
			assignInvestigatorDto.setAllocationToIdList(allocationToList);
			assignInvestigatorDto.setInvestigatorNameList(investigatorList);
			prevAssignedDto.setPrivateInvestigatorsList(privateInvestigatorsList);
			prevAssignedDto.setZonalList(zoneContainer);
			prevAssignedDto.setStateList(stateContainer);
			prevAssignedDto.setAllocationToIdList(allocationToList);
			prevAssignedDto.setInvestigatorNameList(investigatorList);
			
			if (investigationList != null) {
				assignInvestigatorDto.setInvestigationNo(String
						.valueOf(investigationList.size()));
			} else {
				
			}
			String investigationRole = null;
//			if (tableDto.getInvestigationRole() != null) {
//				if (tableDto.getInvestigationRole().equalsIgnoreCase(
//						SHAConstants.RMA6)) {
//					investigationRole = SHAConstants.RMA6;
//				} else if (tableDto.getInvestigationRole().equalsIgnoreCase(
//						SHAConstants.RMA5)) {
//					investigationRole = SHAConstants.RMA5;
//				} else if (tableDto.getInvestigationRole().equalsIgnoreCase(
//						SHAConstants.RMA4)) {
//					investigationRole = SHAConstants.RMA4;
//				}
//				else if (tableDto.getInvestigationRole().equalsIgnoreCase(
//						SHAConstants.RMA3)) {
//					investigationRole = SHAConstants.RMA3;
//				}
//				else if (tableDto.getInvestigationRole().equalsIgnoreCase(
//						SHAConstants.RMA2)) {
//					investigationRole = SHAConstants.RMA2;
//				}
//				else if (tableDto.getInvestigationRole().equalsIgnoreCase(
//						SHAConstants.RMA1)) {
//					investigationRole = SHAConstants.RMA1;
//				}else {
//					investigationRole = "RMA6";
//				}
//			}
//			assignInvestigatorDto.setRequestingRole(investigationRole);
//			assignInvestigatorDto.setRequestroIdOrName(tableDto.getUsername());
			List<AssignInvestigatorDto> prevAssignedList = new ArrayList<AssignInvestigatorDto>();
			prevAssignedDto.setReassignAllowed(true);
			prevAssignedList.add(prevAssignedDto);
			assignInvestigatorDto.setMultipleInvestigatorList(prevAssignedList);
			assignInvestigatorDto.setTaskNumber(tableDto.getTaskNumber());
			assignInvestigatorDto.setRrcDTO(rrcDTO);
			List<DraftTriggerPointsToFocusDetailsTableDto> investigationDetailsBasedOnInvestigationKey = investigationService.getInvestigationDetailsBasedOnInvestigationKey(investigationKey);
			assignInvestigatorDto.setInvestigatorTriggerPointsList(investigationDetailsBasedOnInvestigationKey);
			assignInvestigatorDto.setDateOfInvestigation(investigation.getCreatedDate());
			
			if(assignInvestigatorDto.getClaimDto().getNewIntimationDto() != null && assignInvestigatorDto.getClaimDto().getNewIntimationDto().getInsuredPatient() != null &&
					assignInvestigatorDto.getClaimDto().getNewIntimationDto().getInsuredPatient().getKey() != null){
					Long claimCount = preauthService.getClaimCount(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getKey());
					if(claimCount != null){
						assignInvestigatorDto.setClaimCount(claimCount);
					}
				}
			
			assignInvestigatorDto.setIsPEDInitiated(pedQueryService.isPEDInitiated(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getKey()));
			
			if(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto() != null && assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousFlag() != null
					&& assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
				//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
					Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousRemarks() != null ? assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousRemarks(): SHAConstants.SUSPICIOUS_HOSP);
					assignInvestigatorDto.setSuspiciousPopupMap(suspiciousMap);
				//}
			}
			
			if(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto() != null && assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredFlag() != null
								&& assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
							//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
								Map<String, String> nonPreferredsMap = SHAUtils.getNonPreferredMap(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredRemarks() != null ? assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
								assignInvestigatorDto.setNonPreferredPopupMap(nonPreferredsMap);
							//}
						}
			
			Date policyFromDate = assignInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getPolicyFromDate();
			
			Date admissionDate = assignInvestigatorDto.getClaimDto().getNewIntimationDto().getAdmissionDate();
			
		
//			bean.getPolicyDto().getPolicyType();
			Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
			if(diffDays != null && diffDays<90){
				assignInvestigatorDto.setIs64VBChequeStatusAlert(true);
			}
			
			Date date28 = new Date();
			Map<String, String> popupMessages = calcService.getPOPUPMessages(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getKey(), assignInvestigatorDto.getClaimDto().getNewIntimationDto().getInsuredPatient().getKey(),assignInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getProduct().getKey());
						log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY POPUP MESSAGE PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));
						assignInvestigatorDto.setPopupMap(popupMessages);
			//R1152
	    	if(newIntimationDto.getHospitalDto() != null && newIntimationDto.getHospitalDto().getCpuId() != null && newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getHomeOfficeCode() != null){
				TmpCPUCode cpu = rodService.getCpuDetails(newIntimationDto.getHospitalDto().getCpuId());
				OrganaizationUnit branch = rodService.getBranchCode(newIntimationDto.getPolicy().getHomeOfficeCode());
				if(cpu != null && branch != null && branch.getCpuCode() != null){
					if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
						assignInvestigatorDto.setIsGeoSame(Boolean.FALSE);
					}
				}
			}
			
	    	newIntimationDto.setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
			
			view.setReAssignInvestigation(ReAssignInvestigationWizard.class, true,
					assignInvestigatorDto);
		}
	}
	}
	
	
	protected void showInvestigationMasterWizard(
			@Observes @CDIEvent(MenuPresenter.INVESTIGATION_MASTER) final ParameterDTO parameters) {
		InvestigationMasterDTO investigationMasterDTO = new InvestigationMasterDTO();
		List<Investigation> investigationList = null;
		List<MasPrivateInvestigator> privateInvestigatorsList =null;
		InvestigationMasterTableDTO tableDTO = (InvestigationMasterTableDTO) parameters.getPrimaryParameter();
		String invType = tableDTO.getInvestigatorType();
		Long investigationKey = tableDTO.getKey();
		String investigatorCode = tableDTO.getInvestigatorId();
		String investigatorName = tableDTO.getInvestigatorName();
		
		if(tableDTO.getInvestigatorId() !=null){
			
		//TmpInvestigation tmpInv= investigationService.getTmpInvestigationByInvestigatorCode(investigatorCode);
		if(investigatorCode != null && (investigatorCode.contains("INV"))){
			TmpInvestigation invMaster = investigationService.getTmpInvestigationByInvestigatorCodeWithoutStatus(investigatorCode);
			if(invMaster != null){
				investigationMasterDTO.setKey(investigationKey);
				investigationMasterDTO.setInvestigatorCode(invMaster.getInvestigatorCode());
				if(invMaster.getInvestigatorName()!=null){
				investigationMasterDTO.setInvestigatorName(invMaster.getInvestigatorName());
				}
				investigationMasterDTO.setMobileNumber(invMaster.getMobileNumber() != null ? String.valueOf(invMaster.getMobileNumber()) : null);
				investigationMasterDTO.setAdditionalMobileNumber(invMaster.getAdditionalMobileNumber() != null ? String.valueOf(invMaster.getMobileNumber()) : null);
				investigationMasterDTO.setPhoneNumber(invMaster.getPhoneNumber() != null ? String.valueOf(invMaster.getPhoneNumber()):null);
				if(invMaster.getAllocationTo() != null){
					MastersValue masterValue = invMaster.getAllocationTo();
					if(masterValue != null && masterValue.getKey() != null){
						SelectValue selectValue = new SelectValue();
						selectValue.setId(masterValue.getKey());
						selectValue.setValue(masterValue.getValue());
						investigationMasterDTO.setInvestigatorTypeSelectValue(selectValue);
					}
				}
				if(invMaster.getActiveStatus()!=null && invMaster.getActiveStatus()==1){
					investigationMasterDTO.setStatus(Boolean.TRUE);
				}else if(invMaster.getActiveStatus()!=null && invMaster.getActiveStatus()==0){
					investigationMasterDTO.setStatus(Boolean.FALSE);
				}else{
				investigationMasterDTO.setStatus(Boolean.FALSE);
				}
				
				investigationMasterDTO.setCity(invMaster.getCityTownVillage() != null ?new SelectValue(invMaster.getCityTownVillage().getKey(), invMaster.getCityTownVillage().getValue()) : null);
				investigationMasterDTO.setState(invMaster.getState() != null ? new SelectValue(invMaster.getState().getKey(),invMaster.getState().getValue()) : null);
				
				if(invMaster.getGender()!=null){
					String genderMaster = invMaster.getGender();
					SelectValue gender=new SelectValue();
					//gender.setId(investigationKey);
					if(genderMaster.equalsIgnoreCase("M")){
						gender.setId(ReferenceTable.MALE_GENDER);
						gender.setValue("Male");
					}
					if(genderMaster.equalsIgnoreCase("F")){
						gender.setId(ReferenceTable.FEMALE_GENDER);
						gender.setValue("Female");
					}
					investigationMasterDTO.setGender(gender);

				}
				
				investigationMasterDTO.setBranchCode(invMaster.getBranchCode() != null ? invMaster.getBranchCode():null);
				investigationMasterDTO.setStarEmployeeID(invMaster.getStarEmployeeID()!=null ? invMaster.getStarEmployeeID() : null);
				investigationMasterDTO.setEmailID(invMaster.getEmailID()!=null ?invMaster.getEmailID() : null);
				investigationMasterDTO.setAllocationCount(invMaster.getMaxCount());
				
			}
		} else {
				Long privateInvKey = Long.valueOf(investigatorCode);
				MasPrivateInvestigator privateInvestigation = investigationService.getPrivateInvestigatorByKey(privateInvKey);
				investigationMasterDTO.setPrivateInvestigatorKey(investigationKey);
				investigationMasterDTO.setInvestigatorName(privateInvestigation.getInvestigatorName());
						SelectValue selectValue = new SelectValue();
						selectValue.setId(1123L);
						selectValue.setValue("Private");
						investigationMasterDTO.setInvestigatorTypeSelectValue(selectValue);
				investigationMasterDTO.setMobileNumber(privateInvestigation.getMobileNumberOne() != null ? String.valueOf(privateInvestigation.getMobileNumberOne()) : null);
				investigationMasterDTO.setAdditionalMobileNumber(privateInvestigation.getMobileNumberTwo() != null ? String.valueOf(privateInvestigation.getMobileNumberTwo()) : null);
				investigationMasterDTO.setPhoneNumber(privateInvestigation.getPhoneNumber() != null ? String.valueOf(privateInvestigation.getPhoneNumber()):null);
				investigationMasterDTO.setCoordinatorCode(privateInvestigation.getCoridnatorCode()!=null ? privateInvestigation.getCoridnatorCode() : null);
				investigationMasterDTO.setCoordinatorName(privateInvestigation.getCordinatorName() !=null ? privateInvestigation.getCordinatorName() : null);
				investigationMasterDTO.setConsultancyName(privateInvestigation.getConsultancy() !=null ?privateInvestigation.getConsultancy() : null);
				investigationMasterDTO.setContactPerson(privateInvestigation.getContactPerson()!=null ? privateInvestigation.getContactPerson() : null);
				//investigationMasterDTO.setInvestigationZoneName();
				investigationMasterDTO.setToEmailID(privateInvestigation.getToEmailId()!=null ? privateInvestigation.getToEmailId() : null);
				investigationMasterDTO.setCcEmailID(privateInvestigation.getCcEmailId() !=null ? privateInvestigation.getCcEmailId() : null);
				if(privateInvestigation.getZoneName() != null){
						MasInvZone masInvZone = masterService.getMasInvZoneName(privateInvestigation.getZoneName());
						SelectValue zoneValue = new SelectValue();
						zoneValue.setId(masInvZone.getKey());
						zoneValue.setValue(masInvZone.getZoneName());
						investigationMasterDTO.setInvestigationZoneName(zoneValue);
				}
				if(privateInvestigation.getActiveStatus()!=null && privateInvestigation.getActiveStatus().equalsIgnoreCase("Y")){
					investigationMasterDTO.setStatus(Boolean.TRUE);
				}else if(privateInvestigation.getActiveStatus()!=null && privateInvestigation.getActiveStatus().equalsIgnoreCase("N")){
					investigationMasterDTO.setStatus(Boolean.FALSE);
				}else{
				investigationMasterDTO.setStatus(Boolean.FALSE);
				}
				if(privateInvestigation.getGender()!=null){
					String genderMaster = privateInvestigation.getGender();
					SelectValue gender=new SelectValue();
					if(genderMaster.equalsIgnoreCase("M")){
						gender.setId(ReferenceTable.MALE_GENDER);
						gender.setValue("Male");
					}
					if(genderMaster.equalsIgnoreCase("F")){
						gender.setId(ReferenceTable.FEMALE_GENDER);
						gender.setValue("Female");
					}
					investigationMasterDTO.setGender(gender);

				}
		}
	
		
		List<SelectValue> stateContainer = new ArrayList<SelectValue>();
		List<State> stateList = masterService.getStateList();
		if (!stateList.isEmpty()) {
			SelectValue stateSelectValue = null;
			for (State state : stateList) {
				stateSelectValue = new SelectValue();
				stateSelectValue.setId(state.getKey());
				stateSelectValue.setValue(state.getValue());
				stateContainer.add(stateSelectValue);
			}
		}
		investigationMasterDTO.setStateList(stateContainer);
		
		BeanItemContainer<SelectValue> invetsigatorTypeContainer = new BeanItemContainer<SelectValue>(
				SelectValue.class);
	
		invetsigatorTypeContainer = masterService.getSelectValueContainer(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
		List<SelectValue> investigationTypeSelectValueList = invetsigatorTypeContainer.getItemIds();
		investigationMasterDTO.setInvetigatorTypeSelectIdList(investigationTypeSelectValueList);
		
		BeanItemContainer<SelectValue> genderContainer = new BeanItemContainer<SelectValue>(
				SelectValue.class);
	
		genderContainer = masterService.getSelectValueContainer(ReferenceTable.GENDER);
		List<SelectValue> genderList = genderContainer.getItemIds();
		investigationMasterDTO.setGenderList(genderList);
		
		
		}else{
			System.out.println("*************Create Investigation Master*******");
		}
		view.setInvestigationMasterWizard(InvestigationMasterWizardView.class, true,
				investigationMasterDTO);
		//}
}
	
	protected void showAssignInvestigationWizard(
			@Observes @CDIEvent(MenuPresenter.ASSIGN_INVESTIGATION) final ParameterDTO parameters) {
		 AssignInvestigatorDto assignInvestigatorDto = new AssignInvestigatorDto();
		List<Investigation> investigationList = null;
		SearchAssignInvestigationTableDTO tableDto = (SearchAssignInvestigationTableDTO) parameters
				.getPrimaryParameter();
		Long investigationKey = tableDto.getInvestigationKey();
		
		Investigation investigationobj = investigationService
				.getByInvestigationKey(investigationKey);
		
		Boolean isValidClaimForMA = true;
		if(null != investigationobj)
		{
			Claim claimByKey = (investigationobj.getClaim());
			if(null != claimByKey)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
				{
					isValidClaimForMA = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
		}
		if(isValidClaimForMA)
		{
		
		String diagnosisForPreauthByKey = "";
		if(null != investigationobj && investigationobj.getTransactionFlag() != null && investigationobj.getTransactionKey() != null) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(investigationobj.getTransactionKey());
			
		}
		assignInvestigatorDto.setDiagnosisName(diagnosisForPreauthByKey);
		if(null != investigationobj)
		{
			assignInvestigatorDto.setClaimBackgroundDetails(investigationobj.getClaimBackgroundDetails());
			assignInvestigatorDto.setFactsOfCase(investigationobj.getFactsOfCase());
		}
		
		Claim claimByKey = investigationobj.getClaim();
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			assignInvestigatorDto.setClaimDto(claimDTO);
		
		}
		
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(tableDto.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ASSIGN_INVESTIGATION_INTIATED);
		
		tableDto.setRrcDTO(rrcDTO);
		
		// investigationKey = 108l;
		List<SelectValue> stateContainer = new ArrayList<SelectValue>();
		BeanItemContainer<SelectValue> allocationToContainer = new BeanItemContainer<SelectValue>(
				SelectValue.class);

		List<State> stateList = masterService.getStateList();
		if (!stateList.isEmpty()) {
			SelectValue stateSelectValue = null;
			for (State state : stateList) {
				stateSelectValue = new SelectValue();
				stateSelectValue.setId(state.getKey());
				stateSelectValue.setValue(state.getValue());
				stateContainer.add(stateSelectValue);
			}
		}
		
		List<SelectValue> zoneContainer = new ArrayList<SelectValue>();
		zoneContainer = masterService.getPrivateInvestigatorsZones();

		allocationToContainer = masterService
				.getSelectValueContainer(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
		List<SelectValue> allocationToList = allocationToContainer.getItemIds();
		List<TmpInvestigation> investigatorList = masterService
				.getInvestigation().getItemIds();
		
		List<MasPrivateInvestigator> privateInvestigatorsList = masterService
				.getPrivateInvestigatorsList().getItemIds();

		Investigation investigation = investigationService
				.getByInvestigationKey(investigationKey);
		if (investigation != null) {
			investigationList = investigationService
					.getByInvestigation(investigation.getIntimation().getKey());
		}
		if (investigation != null) {
		//	ClaimDto claimDto = claimService.claimToClaimDTO(investigation
		//			.getClaim());
			
			insuredSumInsured = calcService.getInsuredSumInsured(String.valueOf(claimDTO.getNewIntimationDto().getInsuredPatient().getInsuredId()), claimDTO.getNewIntimationDto().getPolicy().getKey(),claimDTO.getNewIntimationDto().getInsuredPatient().getLopFlag());	
			claimDTO.getNewIntimationDto().getInsuredPatient().setInsuredSumInsured(insuredSumInsured);
			
			List<Reimbursement> reimbObjList = reimbursementService.getReimbursementByClaimKey(claimByKey.getKey());
			if(reimbObjList != null && !reimbObjList.isEmpty()){
				Reimbursement reimbObj = reimbObjList.get(0);
				Double claimedAmt = 0d;
				claimedAmt += reimbObj.getDocAcknowLedgement().getPreHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getPreHospitalizationClaimedAmount() :0d;
				claimedAmt += reimbObj.getDocAcknowLedgement().getHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getHospitalizationClaimedAmount() : 0d;
				claimedAmt += reimbObj.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d;
				claimDTO.setClaimedAmount(claimedAmt);
			}	
			
			Long rodKey = tableDto.getRodKey();
			if(rodKey != null){
				Reimbursement reimbursment = reimbursementService.getReimbursementByKey(rodKey);
				if(null != reimbursment)
				{
					assignInvestigatorDto.setDischargeDate(reimbursment.getDateOfDischarge());
					List<PedValidation> search = diagnosisService.search(rodKey);
					String diagnosis = masterService.getDiagnosis(search);
					assignInvestigatorDto.setDiagnosisName(diagnosis);
				}
			}
			assignInvestigatorDto.setDbOutArray(tableDto.getDbOutArray());
			assignInvestigatorDto.setUserName(tableDto.getUsername());
			assignInvestigatorDto.setPassWord(tableDto.getPassword());
			//assignInvestigatorDto.setHumanTask(tableDto.getHumanTaskDTO());
			assignInvestigatorDto.setKey(investigation.getKey());
			assignInvestigatorDto.setIsCashless(tableDto.getIsCashlessTask());
			assignInvestigatorDto.setClaimDto(claimDTO);
			assignInvestigatorDto.setRodKey(tableDto.getRodKey());
			SelectValue allocationTo = new SelectValue();
			allocationTo.setId(investigation.getAllocationTo().getKey());
			allocationTo.setValue(investigation.getAllocationTo().getValue());
			assignInvestigatorDto.setAllocationToValue(investigation
					.getAllocationTo().getValue());
			BeanItemContainer<SelectValue> allocationContainer = masterService
			.getSelectValueContainer(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
			
			
			//Reason for Initiate Inv
			SelectValue selectValueforInInv = new SelectValue();
			if(investigation.getReasonForInitiatingInv() !=null){
				selectValueforInInv.setId(investigation.getReasonForInitiatingInv().getKey());
				selectValueforInInv.setValue(investigation.getReasonForInitiatingInv().getValue());
				assignInvestigatorDto.setReasonForIniInvestValue(investigation.getReasonForInitiatingInv().getValue());
				assignInvestigatorDto.setReasonForInitiatingInvestSelectValue(selectValueforInInv);
				assignInvestigatorDto.setReasonForIniInvestId(investigation.getReasonForInitiatingInv().getKey());
			}
			
			BeanItemContainer<SelectValue> reasonforIniInvContainer = masterService.getSelectValueContainer(ReferenceTable.REASON_FOR_INITIATE_INVESTIGATION);
			List<SelectValue> reasonforIniInvList = reasonforIniInvContainer.getItemIds();
			
			assignInvestigatorDto.setReasonForInitiatingInvestSelectValueList(reasonforIniInvContainer.getItemIds());
			assignInvestigatorDto.setReasonForInitiatingInvestIdList(reasonforIniInvList);
			
			
			BeanItemContainer<SelectValue> representativeName = investigationService.getRepresentativeListWithoutFilter();
//			asdfasdf
			assignInvestigatorDto.setAllocationToSelectValueList(allocationContainer.getItemIds());
			assignInvestigatorDto.setAllocationToSelectValue(allocationTo);
			assignInvestigatorDto.setAllocationToValueForState(investigation
					.getAllocationTo().getValue());
			assignInvestigatorDto.setAllocationToId(investigation
					.getAllocationTo().getKey());
			assignInvestigatorDto.setInvestiationApprovedRemarks(investigation
					.getRemarks());
			assignInvestigatorDto.setReasonForRefering(investigation
					.getReasonForReferring());
			assignInvestigatorDto.setTriggerPointsForFocus(investigation
					.getTriggerPoints());
			assignInvestigatorDto.setRequestingRole(investigation
					.getCreatedBy());
			assignInvestigatorDto.setRequestroIdOrName(investigation
					.getCreatedBy());
			if(investigation.getCreatedBy() != null){
				TmpEmployee employeeName = masterService.getEmployeeName(investigation.getCreatedBy().toLowerCase());
				if(employeeName != null){
				assignInvestigatorDto.setRequestroIdOrName(investigation.getCreatedBy() +"-"+ employeeName.getEmpFirstName());
				}
			}
			
			//TODO  Assign Multiple Investigation
			assignInvestigatorDto.setStateList(stateContainer);
			//assignInvestigatorDto.setInvestigatorNameContainer(representativeName);
			assignInvestigatorDto.setInvestigatorNameContainerList(representativeName.getItemIds());
			assignInvestigatorDto.setAllocationToIdList(allocationToList);
			assignInvestigatorDto.setInvestigatorNameList(investigatorList);
			assignInvestigatorDto.setPrivateInvestigatorsList(privateInvestigatorsList);
			assignInvestigatorDto.setZonalList(zoneContainer);
			if (investigationList != null) {
				assignInvestigatorDto.setInvestigationNo(String
						.valueOf(investigationList.size()));
			} else {
				assignInvestigatorDto.setInvestigationNo("0");
			}
			String investigationRole = "";
			if (tableDto.getInvestigationRole() != null) {
				if (tableDto.getInvestigationRole().equalsIgnoreCase(
						SHAConstants.RMA6)) {
					investigationRole = SHAConstants.RMA6;
				} else if (tableDto.getInvestigationRole().equalsIgnoreCase(
						SHAConstants.RMA5)) {
					investigationRole = SHAConstants.RMA5;
				} else if (tableDto.getInvestigationRole().equalsIgnoreCase(
						SHAConstants.RMA4)) {
					investigationRole = SHAConstants.RMA4;
				}
				else if (tableDto.getInvestigationRole().equalsIgnoreCase(
						SHAConstants.RMA3)) {
					investigationRole = SHAConstants.RMA3;
				}
				else if (tableDto.getInvestigationRole().equalsIgnoreCase(
						SHAConstants.RMA2)) {
					investigationRole = SHAConstants.RMA2;
				}
				else if (tableDto.getInvestigationRole().equalsIgnoreCase(
						SHAConstants.RMA1)) {
					investigationRole = SHAConstants.RMA1;
				}else {
					investigationRole = "RMA6";
				}
			}
			assignInvestigatorDto.setRequestingRole(investigationRole);
//			assignInvestigatorDto.setRequestroIdOrName(tableDto.getUsername());
			assignInvestigatorDto.setTaskNumber(tableDto.getTaskNumber());
			assignInvestigatorDto.setRrcDTO(rrcDTO);
			List<DraftTriggerPointsToFocusDetailsTableDto> investigationDetailsBasedOnInvestigationKey = investigationService.getInvestigationDetailsBasedOnInvestigationKey(investigationKey);
			assignInvestigatorDto.setInvestigatorTriggerPointsList(investigationDetailsBasedOnInvestigationKey);
			assignInvestigatorDto.setDateOfInvestigation(investigation.getCreatedDate());
			
			//R1045
			assignInvestigatorDto.setPreauthDTO(new PreauthDTO());
			assignInvestigatorDto.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
			assignInvestigatorDto.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
			assignInvestigatorDto.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			assignInvestigatorDto.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			
			assignInvestigatorDto.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
			
			Long hospital = claimByKey.getIntimation().getHospital();
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				assignInvestigatorDto.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					assignInvestigatorDto.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}
			
			assignInvestigatorDto.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
			assignInvestigatorDto.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
			
			if(assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO() != null && assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getInsuredPatient() != null &&
					assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getInsuredPatient().getKey() != null){
					Long claimCount = preauthService.getClaimCount(assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getPolicy().getKey());
					if(claimCount != null){
						assignInvestigatorDto.setClaimCount(claimCount);
					}
				}
			
			assignInvestigatorDto.setIsPEDInitiated(pedQueryService.isPEDInitiated(assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getPolicy().getKey()));
			
			if(assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getHospitalDto() != null && assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
					&& assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
				//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
					Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks(): SHAConstants.SUSPICIOUS_HOSP);
					assignInvestigatorDto.setSuspiciousPopupMap(suspiciousMap);
				//}
			}
			
			if(assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getHospitalDto() != null && assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
								&& assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
							//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
								Map<String, String> nonPreferredsMap = SHAUtils.getNonPreferredMap(assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
								assignInvestigatorDto.setNonPreferredPopupMap(nonPreferredsMap);
							//}
						}
			
			Date policyFromDate = assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getPolicy().getPolicyFromDate();
			
			Date admissionDate = assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getAdmissionDate();
			
		
//			bean.getPolicyDto().getPolicyType();
			Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
			if(diffDays != null && diffDays<90){
				assignInvestigatorDto.setIs64VBChequeStatusAlert(true);
			}
			
			Date date28 = new Date();
			Map<String, String> popupMessages = calcService.getPOPUPMessages(assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getPolicy().getKey(), assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getInsuredPatient().getKey(),assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getPolicy().getProduct().getKey());
						log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY POPUP MESSAGE PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));
						assignInvestigatorDto.setPopupMap(popupMessages);
			
			//R1152
	    	if(newIntimationDto.getHospitalDto() != null && newIntimationDto.getHospitalDto().getCpuId() != null && newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getHomeOfficeCode() != null){
				TmpCPUCode cpu = rodService.getCpuDetails(newIntimationDto.getHospitalDto().getCpuId());
				OrganaizationUnit branch = rodService.getBranchCode(newIntimationDto.getPolicy().getHomeOfficeCode());
				if(cpu != null && branch != null && branch.getCpuCode() != null){
					if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
						assignInvestigatorDto.setIsGeoSame(Boolean.FALSE);
					}
				}
			}
			//CR2019058 setting date fields in assignINvestigation dto
	    	if(investigationobj != null) {
	    		assignInvestigatorDto.setInitiatedDate(investigationobj.getInitiatedDate());
	    		assignInvestigatorDto.setReqDraftedDate(investigationobj.getReqDraftedDate());
	    		assignInvestigatorDto.setApprovedDate(investigationobj.getApprovedDate());
	    	}
	    	newIntimationDto.setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
	    	
	    	//CR2019217
			 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(assignInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getIntimationId()); 
			 if(icrAgent != null && !icrAgent.isEmpty()) {
					String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
					assignInvestigatorDto.getPreauthDTO().setIcrAgentValue(agentScorePoint);
					//added for SM Points suggested by Sathish Sir added by Noufel
					String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
					assignInvestigatorDto.getPreauthDTO().setSmAgentValue(smScorepoint);
			 }
			view.setAssignInvestigation(AssignInvestigationWizard.class, true,
					assignInvestigatorDto);
		}
	}
}

	protected void showAcknowledgementInvestigationCompleted(
			@Observes @CDIEvent(MenuPresenter.ACKNOWLEGE_INVESTIGATION_COMPLETED) final ParameterDTO parameters) {
		SearchAckInvestigationCompletedTableDTO investigationDTO = (SearchAckInvestigationCompletedTableDTO) parameters
				.getPrimaryParameter();
		
		Long investigationKey = investigationDTO.getInvestigationKey();
		
		Investigation investigationobj = investigationService
				.getByInvestigationKey(investigationKey);
		
		Claim claimByKey = investigationobj.getClaim();
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		
		
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(investigationDTO.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ACKNOWLEDGE_INVESTIGATION);
		
		investigationDTO.setRrcDTO(rrcDTO);
		
		
		
		view.setAcknowledgeInvestigationCompleted(
				AcknowledgeInvestigationCompletedView.class, true,
				investigationDTO);
	}

	private void setHospitalDetailsToDTO(Hospitals hospital, PreauthDTO dto) {
		if (hospital != null) {
			ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = dto
					.getPreauthDataExtractionDetails()
					.getUpdateHospitalDetails();
			updateHospitalDetails.setHospitalCity(hospital.getCity());
			updateHospitalDetails.setHospitalCityId(hospital.getCityId());
			updateHospitalDetails.setHospitalState(hospital.getState());
			updateHospitalDetails.setHospitalStateId(hospital.getStateId());
			updateHospitalDetails.setHospitalAddress1(hospital.getAddress());
			updateHospitalDetails.setHospitalName(hospital.getName());
			updateHospitalDetails.setHospitalCode(hospital.getHospitalCode());
			updateHospitalDetails.setPanNumber(hospital.getPanNumber());
			updateHospitalDetails.setHospitalTypeId(hospital.getHospitalType()
					.getKey());
			updateHospitalDetails.setHospitalPhoneNo(hospital.getPhoneNumber());
			updateHospitalDetails.setHopitalRegNumber(hospital.getRegistrationNumber());
			updateHospitalDetails.setHospitalPincode(hospital.getPincode());
			updateHospitalDetails.setHospitalId(hospital.getKey());
			updateHospitalDetails.setOtFacilityFlag(hospital
					.getOtFacilityFlag());
			updateHospitalDetails.setIcuFacilityFlag(hospital
					.getIcuFacilityFlag());
			updateHospitalDetails
					.setInpatientBeds(hospital.getInpatientBeds() != null ? hospital
							.getInpatientBeds().toString() : "");
		}
	}

	protected Reimbursement getPreviousLatestROD(Long claimKey,
			Long currentReimbursementKey) {
		Reimbursement previousROD = null;
		List<Reimbursement> previousRODByClaimKey = reimbursementService
				.getPreviousRODByClaimKey(claimKey);
		if (previousRODByClaimKey != null && !previousRODByClaimKey.isEmpty()) {
			for (Reimbursement reimbursement : previousRODByClaimKey) {
				if(!reimbursement.getKey().equals(currentReimbursementKey)) {
					previousROD = reimbursement;
					break;
				}
					
			}
		}

		return previousROD;
	}
	
	protected Reimbursement getFilteredPreviousLatestROD(Long claimKey,
			Long currentReimbursementKey) {
		Reimbursement previousROD = null;
		List<Reimbursement> previousRODByClaimKey = reimbursementService
				.getPreviousRODByClaimKey(claimKey);
		if (previousRODByClaimKey != null && !previousRODByClaimKey.isEmpty()) {
			for (Reimbursement reimbursement : previousRODByClaimKey) {
				if(reimbursement.getStatus() != null && !ReferenceTable.CANCEL_ROD_KEYS.containsKey(reimbursement.getStatus().getKey()) && !ReferenceTable.CLOSE_CLAIM_STATUS_KEYS.containsKey(reimbursement.getStatus().getKey()) && reimbursement.getDocAcknowLedgement().getHospitalisationFlag() != null && !ReferenceTable.REJECT_ROD_KEYS.containsKey(reimbursement.getStatus().getKey())) {
					if(!reimbursement.getKey().equals(currentReimbursementKey) && (reimbursement.getDocAcknowLedgement().getHospitalisationFlag().equalsIgnoreCase("y") || reimbursement.getDocAcknowLedgement().getPartialHospitalisationFlag().equalsIgnoreCase("y") || reimbursement.getDocAcknowLedgement().getHospitalizationRepeatFlag().equalsIgnoreCase("y"))) {
						previousROD = reimbursement;
						break;
					}
					
				}
			}
		}

		return previousROD;
	}

	protected List<Reimbursement> getHospitalizationROD(Long claimKey,
			Reimbursement currentReimbursement) {
		List<Reimbursement> previousROD = new ArrayList<Reimbursement>();
		//Integer previousNumber = 1;
		List<Reimbursement> previousRODByClaimKey = reimbursementService
				.getPreviousRODByClaimKey(claimKey);
		if (previousRODByClaimKey != null && !previousRODByClaimKey.isEmpty()
				&& previousRODByClaimKey.size() > 1) {
			for (Reimbursement reimbursement : previousRODByClaimKey) {
				//String[] eachSplit = reimbursement.getRodNumber().split("/");
				//String eachSplitNo = eachSplit[eachSplit.length - 1];
				//Integer eachRODNo = Integer.valueOf(eachSplitNo);
				if(reimbursement.getDocAcknowLedgement().getHospitalisationFlag() != null && reimbursement.getDocAcknowLedgement().getHospitalisationFlag().toLowerCase().equalsIgnoreCase("y")
						&& ! ReferenceTable.getCancelRODKeys().containsKey(reimbursement.getStatus().getKey())) {
					previousROD.add(reimbursement);
				}
			}
		}

		return previousROD;
	}
	
	protected Reimbursement getPartialHospitalizationROD(Long claimKey,
			Reimbursement currentReimbursement) {
		Reimbursement previousROD = null;
		//Integer previousNumber = 1;
		List<Reimbursement> previousRODByClaimKey = reimbursementService
				.getPreviousRODByClaimKey(claimKey);
		if (previousRODByClaimKey != null && !previousRODByClaimKey.isEmpty()
				&& previousRODByClaimKey.size() > 1) {
			for (Reimbursement reimbursement : previousRODByClaimKey) {
				//String[] eachSplit = reimbursement.getRodNumber().split("/");
				//String eachSplitNo = eachSplit[eachSplit.length - 1];
				//Integer eachRODNo = Integer.valueOf(eachSplitNo);
				if(reimbursement.getDocAcknowLedgement().getPartialHospitalisationFlag() != null && reimbursement.getDocAcknowLedgement().getPartialHospitalisationFlag().toLowerCase().equalsIgnoreCase("y")
						&& ! ReferenceTable.getCancelRODKeys().containsKey(reimbursement.getStatus().getKey())) {
					previousROD = reimbursement;
					break;
				}
			}
		}

		return previousROD;
	}
	
	protected Reimbursement getPartialHospitalizationRODWithSettled(Long claimKey) {
		Reimbursement previousROD = null;
		List<Reimbursement> previousRODByClaimKey = reimbursementService
				.getPreviousRODByClaimKey(claimKey);
		if (previousRODByClaimKey != null && !previousRODByClaimKey.isEmpty()
				&& previousRODByClaimKey.size() > 1) {
			for (Reimbursement reimbursement : previousRODByClaimKey) {
				if(reimbursement.getDocAcknowLedgement().getPartialHospitalisationFlag() != null && reimbursement.getDocAcknowLedgement().getPartialHospitalisationFlag().toLowerCase().equalsIgnoreCase("y") && ReferenceTable.getFinancialApprovalStatus().containsKey(reimbursement.getStatus().getKey()) ) {
					previousROD = reimbursement;
					break;
				}
			}
		}

		return previousROD;
	}
	
	protected Reimbursement getHospitalizationRODWithSettled(Long claimKey) {
		Reimbursement previousROD = null;
		List<Reimbursement> previousRODByClaimKey = reimbursementService
				.getPreviousRODByClaimKey(claimKey);
		if (previousRODByClaimKey != null && !previousRODByClaimKey.isEmpty()
				&& previousRODByClaimKey.size() > 1) {
			for (Reimbursement reimbursement : previousRODByClaimKey) {
				if(reimbursement.getDocAcknowLedgement().getHospitalisationFlag() != null && reimbursement.getDocAcknowLedgement().getHospitalisationFlag().toLowerCase().equalsIgnoreCase("y") && ReferenceTable.getFinancialApprovalStatus().containsKey(reimbursement.getStatus().getKey()) ) {
					previousROD = reimbursement;
					break;
					//IMSSUPPOR-28867
				}else if(reimbursement.getDocAcknowLedgement().getHospitalisationFlag() != null && reimbursement.getDocAcknowLedgement().getHospitalisationFlag().toLowerCase().equalsIgnoreCase("y") && reimbursementService.isSettledPaymentAvailableByRodKey(reimbursement.getKey())){
					previousROD = reimbursement;
					break;
				}
			}
		}

		return previousROD;
	}

	protected PreauthDTO setReimburseToReimburseDTO(
			ZonalMedicalReviewMapper mapper, PreauthDTO reimbursementDTO,
			Reimbursement previousROD) {
		//CR R201801323
		reimbursementDTO.getNewIntimationDTO().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey()));

		return reimbursementDTO;
	}
	
	/**
	 * Method to populate the bill details for bill entry screen.
	 * This is applicable in case of reconsideration request and
	 * query reply received case.
	 * */
	private BillEntryDetailsDTO getBillDetailsDTOForBillEntry(RODBillDetails billDetails) {
		// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
		BillEntryDetailsDTO dto = new BillEntryDetailsDTO();
		
		dto.setItemName(billDetails.getItemName());
		dto.setKey(billDetails.getKey());
		SelectValue classificationValue = new SelectValue();
		classificationValue.setId(billDetails.getBillClassification().getKey());
		classificationValue.setValue(billDetails.getBillClassification()
				.getValue());
		dto.setClassification(classificationValue);
		dto.setItemNo(billDetails.getItemNumber());
		/*dto.setNoOfDays(billDetails.getNoOfDaysBills() != null ? billDetails
				.getNoOfDaysBills().doubleValue() : 0d);*/
		dto.setNoOfDays(billDetails.getNoOfDaysBills() != null ? billDetails
				.getNoOfDaysBills().doubleValue() : null);
		dto.setPerDayAmt(billDetails.getPerDayAmountBills());
		dto.setBillValue(billDetails.getClaimedAmountBills());
		dto.setItemValue(billDetails.getClaimedAmountBills());
		SelectValue billCategoryvalue = new SelectValue();
		if((billDetails.getBillCategory() != null && billDetails.getBillCategory().getKey() != null && billDetails.getBillCategory().getKey().equals(46l)) && (billDetails.getBillClassification() != null && billDetails.getBillClassification().getKey() != null && billDetails.getBillClassification().getKey().equals(ReferenceTable.HOSPITALIZATION)) && (billDetails.getRodDocumentSummaryKey() != null && 
				billDetails.getRodDocumentSummaryKey().getReimbursement() != null && billDetails.getRodDocumentSummaryKey().getReimbursement().getClaim() != null	&& (billDetails.getRodDocumentSummaryKey().getReimbursement().getClaim().getIntimation().getPolicy().getProduct().getKey().equals(ReferenceTable.STAR_GMC_PRODUCT_KEY)
						|| billDetails.getRodDocumentSummaryKey().getReimbursement().getClaim().getIntimation().getPolicy().getProduct().getKey().equals(ReferenceTable.STAR_GMC_NBFC_PRODUCT_KEY)))){

			billCategoryvalue.setId(ReferenceTable.OTHERS_WITH_PRORORTIONATE_DEDUCTION);
			billCategoryvalue.setValue("Others with Proportionate Deduction");
		}
		else if(billDetails.getBillCategory() != null)
		{
			billCategoryvalue.setId(billDetails.getBillCategory().getKey());
			billCategoryvalue.setValue(billDetails.getBillCategory().getValue());
		}
		dto.setCategory(billCategoryvalue);
		dto.setDocumentSummaryKey(billDetails.getRodDocumentSummaryKey().getKey());
		//dto.setKey(billDetails.getKey());
		
		Reimbursement objReimbursement = billDetails.getRodDocumentSummaryKey().getReimbursement();
		if(null != objReimbursement)
		{
			dto.setIntimationNo(objReimbursement.getClaim().getIntimation().getIntimationId());
			dto.setDateOfAdmission(SHAUtils.formatDate(objReimbursement.getDateOfAdmission()));
			dto.setDateOfDischarge(SHAUtils.formatDate(objReimbursement.getDateOfDischarge()));
			dto.setInsuredPatientName(objReimbursement.getClaim().getIntimation().getInsuredPatientName());
		}
		
		return dto;
	}

	/*
	 * <<<<<<< HEAD
	 * 
	 * private BillEntryDetailsDTO getBillDetailsDTO(RODBillDetails billDetails,
	 * UploadDocumentDTO uploadDocumentDTO) { =======
	 */

	private BillEntryDetailsDTO getBillDetailsDTOForBilling(RODBillDetails billDetails,
			UploadDocumentDTO uploadDocumentDTO){/*, Map<Integer, Object> detailsMap) {*/
		// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
		BillEntryDetailsDTO dto = new BillEntryDetailsDTO();
		
		if( null != billDetails.getRodDocumentSummaryKey()){
			if (billDetails.getRodDocumentSummaryKey().getKey() != null) {
				
				dto.setDocumentSummaryKey(billDetails.getRodDocumentSummaryKey().getKey());
			}
		}
			
		
		dto.setItemName(billDetails.getItemName());
		dto.setKey(billDetails.getKey());
		SelectValue classificationValue = new SelectValue();
		if(billDetails.getBillClassification()!=null && billDetails.getBillClassification().getKey()!=null){
			classificationValue.setId(billDetails.getBillClassification().getKey());
			classificationValue.setValue(billDetails.getBillClassification()
					.getValue());
			dto.setClassification(classificationValue);
		}
		dto.setItemNo(billDetails.getItemNumber());
		if(billDetails.getItemNumber() != null){
			dto.setBillNo(billDetails.getItemNumber().toString());
		}
		dto.setZonalRemarks(uploadDocumentDTO.getZonalRemarks());
		dto.setCorporateRemarks(uploadDocumentDTO.getCorporateRemarks());
		dto.setBillingRemarks(uploadDocumentDTO.getBillingRemarks());
		/*dto.setNoOfDays(billDetails.getNoOfDaysBills() != null ? billDetails
				.getNoOfDaysBills().doubleValue() : 0d);*/
		dto.setNoOfDays(billDetails.getNoOfDaysBills() != null ? billDetails
				.getNoOfDaysBills().doubleValue() : null);
		dto.setPerDayAmt(billDetails.getPerDayAmountBills());
		dto.setBillValue(billDetails.getClaimedAmountBills());
		dto.setItemValue(billDetails.getClaimedAmountBills());
		SelectValue billCategoryvalue = new SelectValue();
		if((billDetails.getBillCategory() != null && billDetails.getBillCategory().getKey() != null && billDetails.getBillCategory().getKey().equals(46l)) && (billDetails.getBillClassification() != null && billDetails.getBillClassification().getKey() != null && billDetails.getBillClassification().getKey().equals(ReferenceTable.HOSPITALIZATION)) && (billDetails.getRodDocumentSummaryKey() != null && 
				billDetails.getRodDocumentSummaryKey().getReimbursement() != null &&( billDetails.getRodDocumentSummaryKey().getReimbursement().getClaim() != null	&& billDetails.getRodDocumentSummaryKey().getReimbursement().getClaim().getIntimation().getPolicy().getProduct().getKey().equals(ReferenceTable.STAR_GMC_PRODUCT_KEY)
				|| billDetails.getRodDocumentSummaryKey().getReimbursement().getClaim().getIntimation().getPolicy().getProduct().getKey().equals(ReferenceTable.STAR_GMC_NBFC_PRODUCT_KEY)))){
		
			billCategoryvalue.setId(ReferenceTable.OTHERS_WITH_PRORORTIONATE_DEDUCTION);
			billCategoryvalue.setValue("Others with Proportionate Deduction");
		}
		else if(billDetails.getBillCategory() != null)
		{
		billCategoryvalue.setId(billDetails.getBillCategory().getKey());
		billCategoryvalue.setValue(billDetails.getBillCategory().getValue());
		}
		dto.setCategory(billCategoryvalue);
		

		/*
		 * Below values are added as a part of amount claimed table enhancement
		 */
		dto.setNoOfDaysAllowed(billDetails.getNoOfDaysPolicy());
		dto.setPerDayAmtProductBased(billDetails.getPerDayAmountPolicy());
		dto.setAmountAllowableAmount(billDetails.getTotalAmount());
		dto.setNonPayableProductBased(billDetails.getNonPayableAmountProduct());
		dto.setNonPayable(billDetails.getNonPayableAmount());
		
		if(null != billCategoryvalue && null != billCategoryvalue.getValue() && (("Deductibles").equalsIgnoreCase(billCategoryvalue.getValue().trim()) || ("Deductibles(80%)").equalsIgnoreCase(billCategoryvalue.getValue().trim())))
		{
			if(null != billDetails.getClaimedAmountBills())
			{
				dto.setReasonableDeduction(billDetails.getClaimedAmountBills());
			}
			else
			{
				dto.setReasonableDeduction(billDetails.getDeductibleAmount());
			}
		}
		else
		{
			dto.setReasonableDeduction(billDetails.getDeductibleAmount());
		}
		dto.setTotalDisallowances(billDetails.getPayableAmount());
		dto.setNetPayableAmount(billDetails.getNetAmount());
		dto.setDeductibleOrNonPayableReason(billDetails.getNonPayableReason());
		dto.setMedicalRemarks(billDetails.getMedicalRemarks());
		dto.setKey(billDetails.getKey());
		
		//dto.setKey(billDetails.getKey());
		
		
		/*uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(objReimbursement.getDateOfDischarge()));
		uploadDocumentDTO.setInsuredPatientName(objReimbursement.getClaim().getIntimation().getInsuredPatientName());*/
		/*Reimbursement objReimbursement = billDetails.getRodDocumentSummaryKey().getReimbursement();
		if(null != objReimbursement)
		{
			dto.setIntimationNo(objReimbursement.getClaim().getIntimation().getIntimationId());
			dto.setDateOfAdmission(SHAUtils.formatDate(objReimbursement.getDateOfAdmission()));
			dto.setDateOfDischarge(SHAUtils.formatDate(objReimbursement.getDateOfDischarge()));
			dto.setInsuredPatientName(objReimbursement.getClaim().getIntimation().getInsuredPatientName());
		}*/

		if (billDetails != null && billDetails.getIrdaLevel1Id() != null) {
			SelectValue irdaLevel1ValueByKey = masterService
					.getIRDALevel1ValueByKey(billDetails.getIrdaLevel1Id());
			dto.setIrdaLevel1(irdaLevel1ValueByKey);
		}
		if (billDetails != null && billDetails.getIrdaLevel2Id() != null) {
			SelectValue irdaLevel2ValueByKey = masterService
					.getIRDALevel2ValueByKey(billDetails.getIrdaLevel2Id());
			dto.setIrdaLevel2(irdaLevel2ValueByKey);
		}
		if (billDetails != null && billDetails.getIrdaLevel3Id() != null) {
			SelectValue irdaLevel3ValueByKey = masterService
					.getIRDALevel3ValueByKey(billDetails.getIrdaLevel3Id());
			dto.setIrdaLevel3(irdaLevel3ValueByKey);
		}

		// dto.setProductBasedRoomRent((Double)detailsMap.get(8));

		// IRDA level is not yet implemented. Once done, will do the necessary
		// changes below.
		/*
		 * SelectValue irdaLevelValue = new SelectValue(); if(null !=
		 * billDetails.getIrdaLevel1Id()) {
		 * irdaLevelValue.setId(billDetails.getIrdaLevel1Id()); }
		 */

		return dto;
	}

	protected void showZonalMediciaApprovalReviewlWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_MEDICAL_APPROVAL_ZONAL_REVIEW) final ParameterDTO parameters) {


		SearchProcessClaimRequestZonalTableDTO tableDTO = (SearchProcessClaimRequestZonalTableDTO) parameters
				.getPrimaryParameter();
		Map<String, Object> wrkFlowMap = (Map<String, Object>) tableDTO.getDbOutArray();
		Boolean isValidClaimForZonal = true;
		
		Map<String, Object> outPutArray = (Map<String, Object>) tableDTO.getDbOutArray();
		String reminderLetterFlag = (String) outPutArray.get(SHAConstants.PAYLOAD_REMINDER_LATTER_FLAG);
		


		Reimbursement reimbursementObjectByKey = rodService
				.getReimbursementObjectByKey(tableDTO.getRodKey());
		Claim claimByKey = reimbursementObjectByKey.getClaim();
		
		if(null != claimByKey)
		{
			if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
			{
				isValidClaimForZonal = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}
		}
		
		
		if(isValidClaimForZonal)
		{
	//		Reimbursement reimbursementObjectByKey = rodService
	//				.getReimbursementObjectByKey(6153l);
	
		ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
//		ZonalMedicalReviewMapper.getAllMapValues();
	
			PreauthDTO reimbursementDTO = mapper
					.getReimbursementDTO(reimbursementObjectByKey);

			if(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag() != null && ("Y").equalsIgnoreCase(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag()))
			{
				List<ReconsiderRODRequestTableDTO> reconsiderDTOList = getReconsiderRODRequestForBillEntry(tableDTO.getRodKey());
				if(null != reconsiderDTOList && !reconsiderDTOList.isEmpty())
				{
					reimbursementDTO.setReconsiderRodRequestList(reconsiderDTOList);
					for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderDTOList) {
						if(null != reconsiderRODRequestTableDTO.getIsRejectReconsidered() && reconsiderRODRequestTableDTO.getIsRejectReconsidered())
						{
							reimbursementDTO.setIsRejectReconsidered(true);
						}
						else
						{
							reimbursementDTO.setIsRejectReconsidered(false);
						}
					}
				}
			}
						
			if(claimByKey!=null){
				
				Long hospital = claimByKey.getIntimation().getHospital();
				Hospitals hospitalById = hospitalService.getHospitalById(hospital);
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					reimbursementDTO.setIsSuspicious(hospitalById.getSuspiciousType());
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
						reimbursementDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
					}
				}
			}
	
			Reimbursement previousLatestROD = getPreviousLatestROD(
					claimByKey.getKey(), reimbursementObjectByKey.getKey());
			
			
		   Boolean queryReceivedStatusRod = reimbursementQuerySerice.isQueryReceivedStatusRod(reimbursementObjectByKey.getKey());
		   
		  // HumanTask humanTask = tableDTO.getHumanTaskListDTO();
		   Boolean isReferBillEntry = false;
		 //  if(null != humanTask)
/*		   {
		   //if(humanTask.getPayload() != null && humanTask.getPayload().getClaimRequest() != null && null != humanTask.getPayload().getClaimRequest().getResult() && (SHAConstants.BILL_ENTRY_OUTCOME).equalsIgnoreCase(humanTask.getPayload().getClaimRequest().getResult())){
<<<<<<< HEAD
			   if(null != wrkFlowMap && null != wrkFlowMap.get(SHAConstants.OUTCOME)  && ((SHAConstants.OUTCOME_BILLING_REFER_TO_BILL_ENTRY).equalsIgnoreCase((String)wrkFlowMap.get(SHAConstants.OUTCOME)) || (SHAConstants.OUTCOME_FA_REFER_TO_BILL_ENTRY_STATUS).equalsIgnoreCase((String)wrkFlowMap.get(SHAConstants.OUTCOME))
=======
			   if(null != wrkFlowMap && null != wrkFlowMap.get(SHAConstants.OUTCOME)  && ((SHAConstants.OUTCOME_BILLING_REFER_TO_BILL_ENTRY).equalsIgnoreCase((String)wrkFlowMap.get(SHAConstants.OUTCOME)) 
					   ||(SHAConstants.OUTCOME_ZMR_REFER_TO_BILLENTRY).equalsIgnoreCase((String)wrkFlowMap.get(SHAConstants.OUTCOME))
					   ||(SHAConstants.OUTCOME_CLAIM_REQUEST_REFER_TO_BILLENTRY).equalsIgnoreCase((String)wrkFlowMap.get(SHAConstants.OUTCOME))
					   || (SHAConstants.OUTCOME_FA_REFER_TO_BILL_ENTRY_STATUS).equalsIgnoreCase((String)wrkFlowMap.get(SHAConstants.OUTCOME))
>>>>>>> 9e618713dbe865973592a0d265acd42f02736d24
					   ||(SHAConstants.OUTCOME_UPLOAD_BACK_TO_ZMR).equals((String)wrkFlowMap.get(SHAConstants.OUTCOME))
					   || (SHAConstants.OUTCOME_DISAPPROVE_ZMR_INVESTIGATION).equals((String)wrkFlowMap.get(SHAConstants.OUTCOME))
					   || (SHAConstants.OUTCOME_FOR_FVR_REPLY_ZONAL).equals((String)wrkFlowMap.get(SHAConstants.OUTCOME)))
					   || (SHAConstants.OUTCOME_FVR_SKIP_ZMR).equals((String)wrkFlowMap.get(SHAConstants.OUTCOME))){
			   isReferBillEntry = true;
<<<<<<< HEAD
		      }
		   }  
=======
		   }
		   }*/  
		   
		   if(null != reminderLetterFlag && reminderLetterFlag.equalsIgnoreCase(SHAConstants.YES_FLAG))
		   {
			   isReferBillEntry = true;  
		   }
		   
		   if(queryReceivedStatusRod ){
			   
			   previousLatestROD = reimbursementObjectByKey;
			   
			   reimbursementDTO = mapper
						.getReimbursementDTO(previousLatestROD);
			   reimbursementDTO.setIsQueryReceived(true);
			   
		   }else if(isReferBillEntry){
			   previousLatestROD = reimbursementObjectByKey;
			   
			   reimbursementDTO = mapper
						.getReimbursementDTO(previousLatestROD);
		   }
			else if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.ZONAL_REVIEW_COORDINATOR_REPLY_STATUS) || (reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest() != null && reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest().equalsIgnoreCase("y"))){
 
	          previousLatestROD = reimbursementObjectByKey;
			   
			   reimbursementDTO = mapper
						.getReimbursementDTO(previousLatestROD);
	//		   reimbursementDTO.setIsQueryReceived(true);
		   }
	
			
			NewIntimationDto newIntimationDto = new NewIntimationDto();
	
			if (claimByKey != null) {
				setClaimValuesToDTO(reimbursementDTO, claimByKey);
				newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());
				// newIntimationDto.getPolicy().getProduct().getAutoRestoration()
				
				ClaimDto claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKey);
				if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
					 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
					 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
				 }
				reimbursementDTO.setNewIntimationDTO(newIntimationDto);
				reimbursementDTO.setClaimDTO(claimDTO);
			}
			
			
			/*String policyNumber = reimbursementDTO.getPolicyDto().getPolicyNumber();
			Policy byPolicyNumber = policyService.getByPolicyNumber(policyNumber);
			List<ViewTmpIntimation> intimationKeys = intimationService.getIntimationByPolicyKey(byPolicyNumber.getKey());
			
			List<ViewTmpClaim> previousclaimsList = new ArrayList<ViewTmpClaim>();
//			List<ViewTmpClaim> claimsByPolicyNumber = claimService
//					.getViewTmpClaimsByPolicyNumber(policyNumber);
			List<ViewTmpClaim> claimsByPolicyNumber = claimService
					.getViewTmpClaimsByIntimationKeys(intimationKeys);
			previousclaimsList.addAll(claimsByPolicyNumber);
			
			previousclaimsList = getPreviousClaimForPreviousPolicy(byPolicyNumber.getRenewalPolicyNumber(), previousclaimsList);*/
	//		List<PreviousClaimsTableDTO> previousClaimDTOList = SHAUtils
	//				.getPreviousClaims(claimsByPolicyNumber,
	//						claimByKey.getClaimId(), pedValidationService,
	//						masterService);
			
			DBCalculationService dbCalculationService = new DBCalculationService();
			
			Boolean isJioPolicy = Boolean.FALSE;
			if(claimByKey != null && claimByKey.getIntimation() != null && claimByKey.getIntimation().getPolicyNumber() != null){
				
				isJioPolicy = intimationService.getJioPolicyDetails(claimByKey.getIntimation().getPolicyNumber());
			}
			
			if(!isJioPolicy  && !(claimByKey != null && claimByKey.getIntimation() != null && claimByKey.getIntimation().getPolicy() != null && claimByKey.getIntimation().getPolicy().getProduct() != null && ReferenceTable.getGMCProductList().containsKey(claimByKey.getIntimation().getPolicy().getProduct().getKey()))){
				
				List<PreviousClaimsTableDTO> previousClaimDTOList = dbCalculationService.getPreviousClaims(claimByKey.getKey(), claimByKey.getIntimation().getPolicy().getKey(), 
						claimByKey.getIntimation().getInsured().getKey(), SHAConstants.POLICY_WISE_SEARCH_TYPE);
				
				reimbursementDTO.setPreviousClaimsList(previousClaimDTOList);
			}
			/*List<PreviousClaimsTableDTO> previousClaimDTOList = preauthService
					.getPreviousClaims(previousclaimsList,
							claimByKey.getClaimId());*/
			
			// List<PreviousClaimsTableDTO> previousClaimDTOList = new
			// PreviousClaimMapper().getPreviousClaimDTOList(claimsByPolicyNumber);
	
			// List<PreviousClaimsTableDTO> previousClaimDTOList = new
			// PreviousClaimMapper().getPreviousClaimDTOList(claimsByPolicyNumber);
	
			
			
			reimbursementDTO = getProrataFlagFromProduct(reimbursementDTO);
	
			//DBCalculationService dbCalculationService = new DBCalculationService();
			
			Map<String, Object> autoRestroation = dbCalculationService.getAutoRestroation(reimbursementDTO.getNewIntimationDTO().getIntimationId());
			reimbursementDTO.getPreauthDataExtractionDetails().setAutoRestoration(String.valueOf(autoRestroation.get(SHAConstants.AUTO_RESTORATION_CHK)));
			reimbursementDTO.getPreauthDataExtractionDetails().setRestorationCount(Integer.parseInt(autoRestroation.get(SHAConstants.AUTO_RESTORATION_COUNT).toString()));
			if(reimbursementDTO.getPreauthDataExtractionDetails().getAutoRestoration().equalsIgnoreCase(SHAConstants.AUTO_RESTORATION_DONE)) {
				reimbursementDTO.setIsAutoRestorationDone(true);
			}
			Double insuredSumInsured = dbCalculationService.getInsuredSumInsured(
					reimbursementDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), reimbursementDTO
							.getPolicyDto().getKey(),reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			reimbursementDTO.getPolicyDto().setInsuredSumInsured(insuredSumInsured);
	//		Integer sumInsured = preauthService.getSumInsured(reimbursementDTO
	//				.getPolicyDto().getProduct().getKey(),
	//				(insuredSumInsured == 0) ? reimbursementDTO.getPolicyDto()
	//						.getTotalSumInsured() : insuredSumInsured);
	//		reimbursementDTO.getPolicyDto().setInsuredSumInsured(insuredSumInsured);
	//		String strAutoRestorationFlg = newIntimationDto.getPolicy()
	//				.getProduct().getAutoRestorationFlag();
	//		if (("Y").equalsIgnoreCase(strAutoRestorationFlg)) {
	//			if (sumInsured != null && sumInsured.intValue() > 0) {
	//				reimbursementDTO.getPreauthDataExtractionDetails()
	//						.setAutoRestoration(
	//								SHAConstants.AUTO_RESTORATION_NOTDONE);
	//			} else if (null != sumInsured && 0 == sumInsured.intValue()) {
	//				reimbursementDTO.getPreauthDataExtractionDetails()
	//						.setAutoRestoration(SHAConstants.AUTO_RESTORATION_DONE);
	//			}
	//		} else {
	//			reimbursementDTO.getPreauthDataExtractionDetails()
	//					.setAutoRestoration(
	//							SHAConstants.AUTO_RESTORATION_NOTAPPLICABLE);
	//		}
			/*
			 * <<<<<<< HEAD
			 * 
			 * if (previousLatestROD != null) { setReimbursmentTOPreauthDTO(mapper,
			 * claimByKey, reimbursementObjectByKey, reimbursementDTO, true);
			 * Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
			 * .getIntimation().getHospital()); ZonalReviewUpdateHospitalDetailsDTO
			 * updateHospitalDetails = reimbursementDTO
			 * .getPreauthDataExtractionDetails() .getUpdateHospitalDetails();
			 * updateHospitalDetails.setHospitalCity(hospitalById.getCity());
			 * updateHospitalDetails.setHospitalCity(hospitalById.getCity());
			 * updateHospitalDetails.setHospitalState(hospitalById.getState());
			 * updateHospitalDetails.setHospitalCode(hospitalById
			 * .getHospitalCode());
			 * 
			 * reimbursementDTO
			 * .setReconsiderationList(getReconsiderRODRequest(claimByKey)); } else
			 * if (claimByKey.getClaimType() != null &&
			 * claimByKey.getClaimType().getKey()
			 * .equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) { =======
			 */
			// R1045
			reimbursementDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			reimbursementDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			reimbursementDTO.setCrmFlagged(claimByKey.getCrcFlag());
			
			reimbursementDTO.setVipCustomer(claimByKey.getIsVipCustomer());
			reimbursementDTO.setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
			
			
			if (previousLatestROD != null) {
				setReimbursmentTOPreauthDTO(mapper, claimByKey,
						reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.ZONAL_REVIEW);
				Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
						.getIntimation().getHospital());
				ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
						.getPreauthDataExtractionDetails()
						.getUpdateHospitalDetails();
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalState(hospitalById.getState());
				updateHospitalDetails.setHospitalCode(hospitalById
						.getHospitalCode());
				reimbursementDTO
						.setReconsiderationList(getReconsiderRODRequest(claimByKey));
				setHospitalDetailsToDTO(hospitalById, reimbursementDTO);
			} else if (claimByKey.getClaimType() != null
					&& claimByKey.getClaimType().getKey()
							.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
	
	//			PreMedicalMapper premedicalMapper = new PreMedicalMapper();
				reimbursementDTO.setIsCashlessType(true);
				Preauth previousPreauth = preauthService.getLatestPreauthByClaim(claimByKey.getKey());
				
				if(previousPreauth != null) {
					reimbursementDTO.setPreauthKey(previousPreauth.getKey());
					if(previousPreauth.getStatus() != null && claimByKey.getStatus() != null) {
						if(previousPreauth.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS) || previousPreauth.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS) || claimByKey.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS) ||  claimByKey.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS)) {
							reimbursementDTO.setIsWithDrawn(true);
						}
					}
				}
	
				setReimbursmentTOPreauthDTO(mapper, claimByKey,
						reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.ZONAL_REVIEW);
				Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
						.getIntimation().getHospital());
				ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
						.getPreauthDataExtractionDetails()
						.getUpdateHospitalDetails();
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalState(hospitalById.getState());
				updateHospitalDetails.setHospitalCode(hospitalById
						.getHospitalCode());
				
				reimbursementDTO
						.setReconsiderationList(getReconsiderRODRequest(claimByKey));
				reimbursementDTO
				.setTreatmentRemarksList(getTreatmentRemarksHistory(claimByKey.getKey()));
				setHospitalDetailsToDTO(hospitalById, reimbursementDTO);
	
			} else {
				Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
						.getIntimation().getHospital());
				setHospitalDetailsToDTO(hospitalById, reimbursementDTO);
			}
	
			//DocAcknowledgement docAcknowLedgement = reimbursementObjectByKey
			//		.getDocAcknowLedgement();
			List<UploadDocumentDTO> rodSummaryDetails = rodService
					.getRODSummaryDetails(reimbursementObjectByKey.getKey());
			
			List<DMSDocumentDetailsDTO> dmsDocDetailList = getClaimsDMSList(claimByKey.getIntimation().getIntimationId());
			
			/**
			 * Fix for implemeting claims dms in bill entry screen.. -- starts
			 * **/
			/*if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
			{
				for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
					if(null != claimByKey)
					{
						uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
						uploadDocumentDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
					}
				}
			}*/
			
			/**
			 * Added for enabling view documents in preauth screen while raising query -- fix starts.
			 * */
			if(null != claimByKey)
			{
				//reimbursementDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
				reimbursementDTO.setDmsDocumentDTOList(dmsDocDetailList);
				
			}
			/**
			 * Added for enabling view documents in preauth screen while raising query -- fix ends
			 * */
	
			List<Long> documentSummaryKeys = new ArrayList<Long>();
			
//			if(null != reimbursementDTO && null != reimbursementDTO.getNewIntimationDTO() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto() 
//					&& null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType()
//					&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType().getKey().equals(ReferenceTable.NON_NETWORK_HOSPITAL_TYPE_ID))
//			{
//				String cityClass = createRodService.getHospitalCityClass(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
//				reimbursementDTO.getNewIntimationDTO().getHospitalDto()
//				.getRegistedHospitals().setCityClass(cityClass);
//				
//			}
			
			Map<Integer, Object> detailsMap = new HashMap<Integer, Object>();
	
			if(reimbursementObjectByKey.getSectionCategory() != null){
				
				if(ReferenceTable.getGMCProductList().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
					insuredSumInsured = dbCalculationService.getInsuredSumInsuredForGMC(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(),
							reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getSectionCode());
					detailsMap = dbCalculationService
							.getHospitalizationDetailsForGMC(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
				}else{
					detailsMap = dbCalculationService
							.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
				}
				
				
			}else{
				
				Long sectionCategory = 0l;
				if(reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.STAR_CARDIAC_CARE_POLICY) || reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.DIABETES_INDIVIDUAL_POLICY) || reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.DIABETES_FLOATER_POLICY))
				{
					sectionCategory = 1l;
				}
				
				if(ReferenceTable.getGMCProductList().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
					insuredSumInsured = dbCalculationService.getInsuredSumInsuredForGMC(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(),
							reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getSectionCode());
					detailsMap = dbCalculationService
							.getHospitalizationDetailsForGMC(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,"0");
				}else{
					
					String policyPlan = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null ? reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() : "0";
					
					/*if(ReferenceTable.MEDI_CLASSIC_BASIC_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) || ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {*/
					if(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
							&& (((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
									|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
									|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
							|| ((SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
								&& reimbursementDTO.getNewIntimationDTO().getPolicy().getProductType().getKey().equals(ReferenceTable.INDIVIDUAL_POLICY)))) {
						policyPlan = reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() != null ? reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() : "0";
					}
					
					detailsMap = dbCalculationService
							.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,policyPlan);
				}
				
				
			}
			
			if (reimbursementDTO.getNewIntimationDTO() != null) {
				Product product = reimbursementDTO.getNewIntimationDTO().getPolicy()
						.getProduct();
				if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())) {
					// BalanceSumInsuredDTO claimsOutstandingAmt =
					// dbCalculationService.getClaimsOutstandingAmt(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
					// preauthDTO.getNewIntimationDTO().getIntimationId(),
					// insuredSumInsured);
					reimbursementDTO.setSettledAmount(0d);
					reimbursementDTO
							.setDeductibleAmount((reimbursementDTO.getNewIntimationDTO()
									.getInsuredPatient() != null && reimbursementDTO
									.getNewIntimationDTO().getInsuredPatient()
									.getDeductibleAmount() != null) ? reimbursementDTO
									.getNewIntimationDTO().getInsuredPatient()
									.getDeductibleAmount() : 0d);
				}
			}
			
			Double productBasedAmbulanceAmt = getProductBasedAmbulanceAmt(tableDTO.getRodKey());

			for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
				
				/*if(null != reimbursementObjectByKey)
				{
					uploadDocumentDTO.setIntimationNo(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId());
					uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfAdmission()));
					uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfDischarge()));
					uploadDocumentDTO.setInsuredPatientName(reimbursementObjectByKey.getClaim().getIntimation().getInsuredPatientName());
				}*/
				
				/**
				 * Fix for implemeting claims dms in bill entry screen.. -- starts
				 * **/
				if(null != claimByKey)
				{
					uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
					uploadDocumentDTO.setDmsDocumentDTOList(dmsDocDetailList);
				}
				
				documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
				uploadDocumentDTO.setStatus(true);
				List<RODBillDetails> billEntryDetails = rodService
						.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
				List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
				if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
					for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
						/*
						 * <<<<<<< HEAD
						 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
						 * uploadDocumentDTO)); =======
						 */
						dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
								uploadDocumentDTO));
						// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
						
						
					}
				}
				uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
						.get(8));
				uploadDocumentDTO
						.setProductBasedICURent((Double) detailsMap.get(9));
				Product product = reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct();
				if(product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey()) && 
						reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
					uploadDocumentDTO
					.setProductBasedRoomRent(0d);
					uploadDocumentDTO
								.setProductBasedICURent(0d);
				}
				
				/*uploadDocumentDTO.setProductBasedAmbulanceAmt((Double) detailsMap
						.get(15))*/
//				uploadDocumentDTO.setProductBasedAmbulanceAmt(getProductBasedAmbulanceAmt(tableDTO.getRodKey()));
				uploadDocumentDTO.setProductBasedAmbulanceAmt(productBasedAmbulanceAmt);
				uploadDocumentDTO.setStatus(false);
				uploadDocumentDTO.setBillEntryDetailList(dtoList);
				uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
				uploadDocumentDTO.setRodKey(reimbursementObjectByKey.getKey());

				uploadDocumentDTO.setStrUserName(tableDTO.getUsername());
			}
			Double totalBilledAmount = reimbursementService
					.getTotalBilledAmount(documentSummaryKeys);
			reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
			reimbursementDTO.setKey(reimbursementObjectByKey.getKey());
			reimbursementDTO.setAmountConsidered(totalBilledAmount != null ? String
					.valueOf(totalBilledAmount.intValue()) : "0");
			reimbursementDTO
					.setInitialAmountConsidered(totalBilledAmount != null ? String
							.valueOf(totalBilledAmount.intValue()) : "0");
	
			//reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskListDTO());
			// reimbursementDTO.setRodHumanTask(tableDTO.ge);
	
			reimbursementDTO.setStrUserName(tableDTO.getUsername());
			reimbursementDTO.setStrPassword(tableDTO.getPassword());
			reimbursementDTO.setTaskNumber(tableDTO.getTaskNumber());
	
			reimbursementDTO.setRodNumber(reimbursementObjectByKey.getRodNumber());
			reimbursementDTO.getPreauthDataExtractionDetails()
					.setReasonForAdmission(
							claimByKey.getIntimation().getAdmissionReason());
	
			setCategoryFlag(reimbursementObjectByKey, reimbursementDTO);
			
			if (!reimbursementDTO.getHospitalizaionFlag()) {
				reimbursementDTO = setHospitalizationAmount(reimbursementDTO);
			}
	
			reimbursementDTO = setPreAndPostHopitalizationAmount(reimbursementDTO);
			loadRRCRequestValues(reimbursementDTO,insuredSumInsured,SHAConstants.ZONAL_REVIEW);
			
			String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
			if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
				String get64vbStatus = PremiaService.getInstance().get64VBStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), reimbursementDTO.getNewIntimationDTO().getIntimationId());
				if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
					reimbursementDTO.setIsDishonoured(true);
				}  else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
					reimbursementDTO.setIsPending(true);
				}
			}
			reimbursementDTO.setSittingsAmount(dbCalculationService.getDialysisAmount(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
		
			reimbursementDTO.setIsReverseAllocation(false);
//			reimbursementDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(reimbursementDTO.getNewIntimationDTO().getAdmissionDate(), reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
			
			String policyYear = reimbursementDTO.getNewIntimationDTO().getPolicyYear();
		    if(policyYear != null){
		    	String intValue = policyYear.replaceAll("[^0-9]", "");
		    	Integer policyAgeing = SHAUtils.getIntegerFromStringWithComma(intValue);
		    	reimbursementDTO.setAdmissionDatePopup(policyAgeing != null ? policyAgeing.equals(0) ? true : false :false);
		    }
			
			reimbursementDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey()));
			reimbursementDTO.setIsPEDInitiatedForBtn(reimbursementDTO.getIsPEDInitiated());
			
			//CR  R1086
			if(reimbursementDTO.getIsPEDInitiated()){
				boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				reimbursementDTO.setInsuredDeleted(isInsuredDeleted);
				
				//CR R1156
				boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				reimbursementDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);
			}
			
			if(reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest() != null && reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest().equalsIgnoreCase("Y")) {
				reimbursementDTO.setIsReconsiderationRequest(true);
			}
			List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
			List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			
			reimbursementDTO.setInsuredPedDetails(pedByInsured);
			reimbursementDTO.setApprovedPedDetails(approvedPedByInsured);
			
//			reimbursementService.setBPMOutcome(reimbursementDTO, true, "APPROVE", reimbursementObjectByKey);
			//SHAUtils.setDefaultCopayValue(reimbursementDTO);
			
			 if(reimbursementObjectByKey != null && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag().equalsIgnoreCase("Y")) {
				 reimbursementDTO.setRodTotalClaimedAmount(reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d);
			 }
			 
			 Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
						.getIntimation().getHospital());
				ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
						.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
				if(hospitalById != null){
					
					updateHospitalDetails.setHospitalCity(hospitalById.getCity());
					updateHospitalDetails.setHospitalCity(hospitalById.getCity());
					updateHospitalDetails.setHospitalState(hospitalById.getState());
					updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
					updateHospitalDetails.setPanNumber(hospitalById.getPanNumber());
					updateHospitalDetails.setHospitalTypeId(hospitalById.getHospitalType().getKey());
					//updateHospitalDetails.setInpatientBeds(hospitalById.getInpatientBeds() != null ? String.valueOf(hospitalById.getInpatientBeds()) : "0");
					updateHospitalDetails.setHospitalName(hospitalById.getName());
					updateHospitalDetails.setHospitalPhoneNo(hospitalById.getPhoneNumber());
					updateHospitalDetails.setHopitalRegNumber(hospitalById.getRegistrationNumber());
					updateHospitalDetails.setHospitalPincode(hospitalById.getPincode());
					updateHospitalDetails.setOtFacilityFlag(hospitalById.getOtFacilityFlag());
					updateHospitalDetails.setIcuFacilityFlag(hospitalById.getIcuFacilityFlag());
					updateHospitalDetails.setHospitalAddress1(hospitalById.getAddress());
		
				}
			 
			 if(reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)
					 && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
					 && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
			 
					 if(hospitalById != null){
							Boolean hospitalDiscount = SHAUtils.isHospitalDiscount(hospitalById);
							reimbursementDTO.setIsHospitalDiscountApplicable(hospitalDiscount);
					 }
			 }
			 
			 if(reimbursementDTO.getNewIntimationDTO() != null && reimbursementDTO.getNewIntimationDTO().getInsuredPatient() != null &&
					 reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
					Long claimCount = preauthService.getClaimCount(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
					if(claimCount != null){
						reimbursementDTO.setClaimCount(claimCount);
					}
				}
			 
			 Date date28 = new Date();
			 Map<String, String> popupMessages = dbCalculationService.getPOPUPMessages(reimbursementDTO.getPolicyKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
			 log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY POPUP MESSAGE PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));
				
			 reimbursementDTO.setPopupMap(popupMessages);
			 
			 if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
						&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
					//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
						Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
						reimbursementDTO.setSuspiciousPopupMap(suspiciousMap);
					//}
				}
				if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
						&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
					//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
						Map<String, String> nonPreferredsMap = SHAUtils.getNonPreferredMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
						reimbursementDTO.setNonPreferredPopupMap(nonPreferredsMap);
					//}
				}
				
				Date policyFromDate = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
				
				Date admissionDate = reimbursementDTO.getNewIntimationDTO().getAdmissionDate();
				
				Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
				if(diffDays != null && diffDays<90){
					reimbursementDTO.setIs64VBChequeStatusAlert(true);
				}
				
				reimbursementDTO.setDbOutArray(tableDTO.getDbOutArray());
			 
				//gmc
				Intimation intimation = claimByKey.getIntimation();
				Long mainNo = 0L;
				if(intimation.getInsured().getDependentRiskId() !=null){
					mainNo = intimation.getInsured().getDependentRiskId();
				}else{
					mainNo = intimation.getInsured().getInsuredId();
				}
				CoorporateBuffer buffer = masterService.getBufferbyinsuerdNo(intimation.getInsured().getInsuredId());
				Map<String, Double> values = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_CB,intimation.getPolicy().getPolicyNumber(),intimation.getInsured().getKey(),mainNo,claimByKey.getKey());
				
				if(values != null && !values.isEmpty()){
					if(values.get(SHAConstants.LN_POLICY_BUFFER_SI) != null){
						reimbursementDTO.getPreauthDataExtractionDetails().setCorpBufferSI(values.get(SHAConstants.LN_POLICY_BUFFER_SI));	
					}
					if(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT) != null){
						reimbursementDTO.getPreauthDataExtractionDetails().setCorpBufferUtilisedAmt(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT));	
					}
					if(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) != null){
						reimbursementDTO.getPreauthDataExtractionDetails().setCorpBufferLimit(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT));	
					}
					if(values.get(SHAConstants.LN_INSURED_UTIL_AMT) != null &&
							values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) !=null){
						Double avlbBalance = values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) - values.get(SHAConstants.LN_INSURED_UTIL_AMT);
						reimbursementDTO.getPreauthDataExtractionDetails().setCorpBufferAvalBal(avlbBalance);
					}		
				}
				if(buffer !=null && buffer.getAllocatedAmount() !=null){
					reimbursementDTO.getPreauthDataExtractionDetails().setCorpBufferAllocatedClaim(buffer.getAllocatedAmount().intValue());
					reimbursementDTO.getPreauthDataExtractionDetails().setBufferType(buffer.getBufferType());
				}

				Boolean isZUAQueryAvailable = masterService.getZUAQueryDetails(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());		
				if(null != isZUAQueryAvailable){
					
					reimbursementDTO.setIsZUAQueryAvailable(isZUAQueryAvailable);
				}

				Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
				reimbursementDTO.setIsPolicyValidate(policyValidation);
				
				Product product = reimbursementDTO.getNewIntimationDTO().getPolicy()
						.getProduct();
				if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())
						 && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
					List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsDTOForReimbursement = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(reimbursementObjectByKey.getKey());
					
					if(updateOtherClaimDetailsDTOForReimbursement != null){
						
						Integer admissionAmt = 0;
						
						for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsDTOForReimbursement) {
							if(updateOtherClaimDetailDTO.getAdmissibleAmount() != null){
								admissionAmt += updateOtherClaimDetailDTO.getAdmissibleAmount().intValue();
							}
						}
						
						reimbursementDTO.setOtherInsurerAdmissibleAmt(admissionAmt);
						
					}
				}
				
				FieldVisitRequest fvrObj = preauthService.getPendingFVRByClaimKey(reimbursementDTO.getClaimKey());
				if(fvrObj != null && fvrObj.getFvrId() != null && !fvrObj.getFvrId().isEmpty()){
					String fvrPendingReason = starFaxFVRRevisedService.getFvrRequestPendingReason(fvrObj.getFvrId());
					reimbursementDTO.setFVRPendingRsn("FVR kept pending due to "+ fvrPendingReason);					
				}	
				
				reimbursementDTO.getPreauthMedicalDecisionDetails().setIsFvrIntiated(preauthService.getFVRStatusIdByClaimKey(reimbursementDTO.getClaimKey()));
				
				Boolean popupMessagesForProduct = dbCalculationService.getPOPUPMessagesForProduct(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(), claimByKey.getIntimation().getInsured().getKey(), claimByKey.getIntimation().getPolicy().getProduct().getKey());
				reimbursementDTO.setIsChangeInsumInsuredAlert(popupMessagesForProduct);

				 Boolean isFvrOrInvsInitiated = reimbursementService.isFvrOrInvesInitiated(reimbursementDTO);
				 if(isFvrOrInvsInitiated){
					 reimbursementDTO.getPreauthDataExtractionDetails().setIsFvrOrInvsInitiated(Boolean.TRUE);
				 }				 	
				 /** R1139 **/ 		
				 
				 Investigation investigation = investigationService.getInvestigationByTransactionKey(reimbursementDTO.getKey());
					if(investigation != null){
					
						List<AssignedInvestigatiorDetails> assignInvsList = reimbursementService.getInvestigationCountAlert(investigation.getKey());
						 
					if (assignInvsList != null && !assignInvsList.isEmpty()) {
						
						reimbursementDTO.getPreauthDataExtractionDetails().setIsMultipleInvsAssigned(Boolean.TRUE);						
						int invsReplyCount = 0;
						int invesCompletedOrCancelCount = 0;
						Integer investigatorsCount = assignInvsList.size();
						reimbursementDTO.getPreauthDataExtractionDetails().setInvestigatorsCount(investigatorsCount);
						
						for (AssignedInvestigatiorDetails assignedInvestigatiorDetails : assignInvsList) {
							if(null != assignedInvestigatiorDetails.getStatus() && 
									ReferenceTable.UPLOAD_INVESIGATION_COMPLETED.equals(assignedInvestigatiorDetails.getStatus().getKey())){
								invsReplyCount++;
							}
							if(null != assignedInvestigatiorDetails.getStatus() && 
									(ReferenceTable.UPLOAD_INVESIGATION_COMPLETED.equals(assignedInvestigatiorDetails.getStatus().getKey())||
									 ReferenceTable.PARALLEL_INVES_CANCELLED.equals(assignedInvestigatiorDetails.getStatus().getKey()))||
									 ReferenceTable.INVESTIGATION_GRADING.equals(assignedInvestigatiorDetails.getStatus().getKey())){
								invesCompletedOrCancelCount++;
							}
						}
						if(investigatorsCount == invesCompletedOrCancelCount){
							reimbursementDTO.getPreauthDataExtractionDetails().setIsMultipleInvsAssigned(Boolean.FALSE);		
						}
						reimbursementDTO.getPreauthDataExtractionDetails().setInvsReplyReceivedCount(invsReplyCount);
					}
				 }
				 /*if(null != reimbursementDTO.getClaimDTO().getClaimType() && 
						 reimbursementDTO.getClaimDTO().getClaimType().getValue().equalsIgnoreCase(SHAConstants.CASHLESS_CLAIM_TYPE)){
					Boolean investigationAvailable = investigationService.getInvestigationPendingForClaim(reimbursementDTO.getClaimKey(),SHAConstants.TRANSACTION_FLAG_CASHLESS,reimbursementDTO);
					if(investigationAvailable){
						reimbursementDTO.getPreauthDataExtractionDetails().setIsFvrOrInvsInitiated(Boolean.TRUE);
					}
				 }		*/		 
				 reimbursementDTO.getPreauthMedicalDecisionDetails().setIsInvsInitiated(preauthService.isInvsInitiated(reimbursementDTO.getClaimDTO().getKey()));
				 reimbursementDTO.getPreauthMedicalDecisionDetails().setIsFvrReplyReceived(preauthService.isFVRReplyReceived(reimbursementDTO.getClaimKey()));
				 
					ViewFVRDTO additionalTrgptsDto = null;
			    	List<ViewFVRDTO> additionalTrgptsList = new ArrayList<ViewFVRDTO>();
			    	ViewFVRDTO trgptsDto = null;
			    	List<ViewFVRDTO> trgptsList = new ArrayList<ViewFVRDTO>();
			    	
			    	FieldVisitRequest fieldVisitRequest = viewFVRService.getFVRByClaimKey(reimbursementDTO.getClaimDTO().getKey());	
			    	
			    	
			    	
			    	//R1152
			    	
					if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getCpuId() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode() != null){
						TmpCPUCode cpu = rodService.getCpuDetails(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getCpuId());
						
						OrganaizationUnit branch = rodService.getBranchCode(reimbursementDTO.getNewIntimationDTO().getPolicy().getHomeOfficeCode());
						
						
						if(cpu != null && branch != null && branch.getCpuCode() != null){
							if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
								reimbursementDTO.setIsGeoSame(Boolean.FALSE);
							}
						}
					}
					
			    	
			    	if(fieldVisitRequest != null){
			    		
			    		List<FvrTriggerPoint> triggerPointsList= reimbursementService.getFVRTriggerPoints(fieldVisitRequest.getKey());
			    		for (FvrTriggerPoint fvrTriggerPoint : triggerPointsList) {
			    			additionalTrgptsDto = new ViewFVRDTO();
			    			additionalTrgptsDto.setRemarks(fvrTriggerPoint.getRemarks());
			    			additionalTrgptsDto.setKey(fvrTriggerPoint.getKey());
			    			additionalTrgptsDto.setCreatedDate(fvrTriggerPoint.getCreatedDate());
			    			additionalTrgptsDto.setCreatedBy(fvrTriggerPoint.getCreatedBy());
			    			additionalTrgptsDto.setTriggerPointsAlreadyExist(Boolean.TRUE);
			    			additionalTrgptsList.add(additionalTrgptsDto);
			    		}
			    	}
			    	
			    	if(null != additionalTrgptsList && !additionalTrgptsList.isEmpty()){
			    		reimbursementDTO.getPreauthMedicalDecisionDetails().setFvrAdditionalTriggerPtsList(additionalTrgptsList);
			    		trgptsList.addAll(additionalTrgptsList);
			    		reimbursementDTO.getPreauthMedicalDecisionDetails().setFvrTriggerPtsList(trgptsList);
			    	}
			    	else
			    	{
			    		for(int i = 1; i<=5;i++){
			        		trgptsDto = new ViewFVRDTO();
			        		trgptsDto.setRemarks("");
			        		trgptsList.add(trgptsDto);
			        	}
			    		reimbursementDTO.getPreauthMedicalDecisionDetails().setFvrTriggerPtsList(trgptsList);
			    	}
			    	
			    Policy policy = reimbursementDTO.getNewIntimationDTO().getPolicy();
					
				if(ReferenceTable.getGMCProductList().containsKey(policy.getProduct().getKey())){
					List<SelectValue> duplicateInsuredDetails = dbCalculationService.getDuplicateInsuredDetails(policy.getKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
					reimbursementDTO.setDuplicateInsuredList(duplicateInsuredDetails);
				}
				String topAlertFlag = claimService.getTopUpPolicyDetails(reimbursementDTO.getPolicyDto().getPolicyNumber(),reimbursementDTO);
		    	reimbursementDTO.setTopUpPolicyAlertFlag(topAlertFlag);
		    	
		    	List<String> popupSIRestrication = calcService.getSIRestrication(reimbursementDTO.getNewIntimationDTO().getIntimationId(),reimbursementDTO.getNewIntimationDTO().getKey(), reimbursementDTO.getPolicyKey());
		    	reimbursementDTO.setPopupSIRestrication(popupSIRestrication);
		    	//CR2019071
		    	List<String> popupPrevClmInvest = calcService.getPreviousClaimInvestigatedAlert(reimbursementDTO.getPolicyKey(),reimbursementDTO.getNewIntimationDTO().getKey() );
		    	reimbursementDTO.setPopupPrevClmInvst(popupPrevClmInvest);
		    	
		    	//CR2019217
				 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(reimbursementDTO.getNewIntimationDTO().getIntimationId()); 
				 if(icrAgent != null && !icrAgent.isEmpty()) {
						String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
						reimbursementDTO.setIcrAgentValue(agentScorePoint);
						//added for SM Points suggested by Sathish Sir added by Noufel
						String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
						reimbursementDTO.setSmAgentValue(smScorepoint);
				 }
				 

			 //CR2019234
				if(reimbursementDTO != null && reimbursementDTO.getNewIntimationDTO().getIntimatedBy() != null && 
						reimbursementDTO.getNewIntimationDTO().getIntimatedBy().getId() != null && 
								reimbursementDTO.getNewIntimationDTO().getIntimatedBy().getId().toString().equalsIgnoreCase(SHAConstants.AGENT_CODE) 
						|| reimbursementDTO.getNewIntimationDTO().getIntimatedBy().getId().toString().equalsIgnoreCase(SHAConstants.SALES_MANAGER_CODE)){
					view.showInfoPopUp("This claim has been intimated by" + reimbursementDTO.getNewIntimationDTO().getIntimatedBy().getValue());
				}
				
				 
			 if(isValidClaimForZonal){
				 view.setMedicalApprovalZonalReview(
							MedicalApprovalZonalReviewWizard.class, reimbursementDTO,
							(Boolean) parameters.getSecondaryParameter(0, Boolean.class));
			 }
			 
			 
			
			
		}
	}
	
	
	private Double getProductBasedAmbulanceAmt(Long rodKey)
	{
		Double ambAmt = calcService.getProductBasedAmbulanceAmt(rodKey);
		return ambAmt;
	}
	
	/*private PreauthDTO getProrataFlagFromProduct(PreauthDTO preauthDTO)
	{
		Product product = masterService.getProrataForProduct(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
		if(null != product)
		{
			preauthDTO.setProrataDeductionFlag(null != product.getProrataFlag() ? product.getProrataFlag() : "N");
			*//**
			 * product based variable is added to enable or disable the component in page level.
			 * This would be static. -- starts
			 * *//*
			preauthDTO.setProductBasedProRata(null != product.getProrataFlag() ? product.getProrataFlag() : "N");
			preauthDTO.setProductBasedPackage(null != product.getPackageAvailableFlag() ? product.getPackageAvailableFlag() : "N");
			//ends.
			preauthDTO.setPackageAvailableFlag(null != product.getPackageAvailableFlag() ? product.getPackageAvailableFlag() : "N");
		}
		return preauthDTO;
	}*/
	
	
	private PreauthDTO getProrataFlagFromProduct(PreauthDTO preauthDTO)
	{
		Product product = masterService.getProrataForProduct(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
		if(null != product)
		{
			preauthDTO.setProrataDeductionFlag(null != product.getProrataFlag() ? product.getProrataFlag() : null);
			/**
			 * product based variable is added to enable or disable the component in page level.
			 * This would be static. -- starts
			 * */
			preauthDTO.setProductBasedProRata(null != product.getProrataFlag() ? product.getProrataFlag() : null);
			preauthDTO.setProductBasedPackage(null != product.getPackageAvailableFlag() ? product.getPackageAvailableFlag() : null);
			//ends.
			preauthDTO.setPackageAvailableFlag(null != product.getPackageAvailableFlag() ? product.getPackageAvailableFlag() : null);
			//added for CR GLX2020069 GMC prorata calculation
			if(product.getCode() != null && (product.getCode().equalsIgnoreCase(ReferenceTable.STAR_GMC_PRODUCT_CODE) || product.getCode().equalsIgnoreCase(ReferenceTable.STAR_GMC_NBFC_PRODUCT_CODE))){
				Double sumInsured = calcService.getInsuredSumInsuredForGMC(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getPolicy().getSectionCode());
				MasRoomRentLimit gmcProrataFlag = intimationService.getMasRoomRentLimitbySuminsured(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),sumInsured);
				if(gmcProrataFlag != null && gmcProrataFlag.getProportionateFlag() != null){
					System.out.println("GMC PROP LIMIT APPLICALBLE FLAG" +gmcProrataFlag.getProportionateFlag() + "Charges Applicalble" +gmcProrataFlag.getCharges());
					preauthDTO.setProrataDeductionFlag(null != gmcProrataFlag.getProportionateFlag() ? gmcProrataFlag.getProportionateFlag() : "N");	
					preauthDTO.setProductBasedProRata(null != gmcProrataFlag.getProportionateFlag() ? gmcProrataFlag.getProportionateFlag() : "N");
				}else {
					preauthDTO.setProrataDeductionFlag("N");	
					preauthDTO.setProductBasedProRata("N");
				}
			}
			
		}
		return preauthDTO;
	}
	
	private void loadRRCRequestValues(PreauthDTO preauthDTO,Double sumInsured,String stage)
	{
		RRCDTO requestRRCDTO = new RRCDTO();
		
		if(null != preauthDTO.getClaimDTO().getNewIntimationDto())
		{
			//load policy data
			
			String policyNumber = preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber();
			requestRRCDTO.setPolicyNo(policyNumber);
			requestRRCDTO.setIntimationNo(preauthDTO.getNewIntimationDTO().getIntimationId());
			requestRRCDTO.setProductName(preauthDTO.getNewIntimationDTO().getProductName());
			//Duration on hold
			Date admissionDate = preauthDTO.getNewIntimationDTO().getAdmissionDate();
//			String duration = dbCalculationService.getPolicyAgeing(admissionDate, policyNumber);
			String duration = preauthDTO.getNewIntimationDTO().getPolicyYear();
			
			requestRRCDTO.setDuration(duration);
			requestRRCDTO.setSumInsured(sumInsured);
			
			//load Hospital data
			requestRRCDTO.setHospitalName(preauthDTO.getNewIntimationDTO().getHospitalDto().getName());
			requestRRCDTO.setHospitalCity(preauthDTO.getNewIntimationDTO().getHospitalDto().getCity());
			//if(null != preauthDTO.getClaimDTO().getNewIntimationDto().getHospitalDto().getRegistedHospitals())
			requestRRCDTO.setHospitalZone(preauthDTO.getNewIntimationDTO().getHospitalDto().getHospitalZone());
			requestRRCDTO.setDateOfAdmission(admissionDate);
			if(null != preauthDTO.getPreauthDataExtractionDetails() && null != preauthDTO.getPreauthDataExtractionDetails().getDischargeDate())
			requestRRCDTO.setDateOfDischarge(preauthDTO.getPreauthDataExtractionDetails().getDischargeDate());
			
			//load Insured data
			requestRRCDTO.setInsuredName(preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredName());
			if(null != preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredAge())
			requestRRCDTO.setInsuredAge(preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredAge().longValue());
			if(null != preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredGender() )
			requestRRCDTO.setSex(preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredGender().getValue());
			
			requestRRCDTO.setClaimType(preauthDTO.getClaimDTO().getClaimTypeValue());
			requestRRCDTO.setProcessingStage(stage);
			
			TmpEmployee tmpEmployee = reimbursementService.getEmployeeDetails(preauthDTO.getStrUserName());
			if(null != tmpEmployee)
			{
				/*if(!(null != tmpEmployee.getEmpFirstName()))
					tmpEmployee.setEmpFirstName("");
				else if(!(null != tmpEmployee.getEmpMiddleName()))
					tmpEmployee.setEmpMiddleName("");
				else if(!(null != tmpEmployee.getEmpLastName()))
					tmpEmployee.setEmpLastName("");*/
				StringBuffer strName = new StringBuffer();
				if(null != tmpEmployee.getEmpFirstName())
				{
					strName.append(tmpEmployee.getEmpFirstName());
				}
				if(null != tmpEmployee.getEmpMiddleName())
				{
					if(("").equalsIgnoreCase(strName.toString()))
					{
						strName.append(tmpEmployee.getEmpMiddleName()); 
					}
					else
					{
						strName.append(tmpEmployee.getEmpMiddleName());
					}
				}
				if(null != tmpEmployee.getEmpLastName())
				{
					if(("").equalsIgnoreCase(strName.toString()))
					{
						strName.append(tmpEmployee.getEmpLastName()); 
					}
					else
					{
						strName.append(tmpEmployee.getEmpLastName());
					}
				}
					
				//requestRRCDTO.setEmployeeName(tmpEmployee.getEmpFirstName()+tmpEmployee.getEmpMiddleName()+tmpEmployee.getEmpLastName());
				requestRRCDTO.setEmployeeName(strName.toString());
				requestRRCDTO.setEmployeeId(tmpEmployee.getEmpId());
			}
			//requestRRCDTO.setEmployeeNameList(getEmployeeNamesFromMaster());
			requestRRCDTO.setDataSourcesMap(getEmployeeNamesFromMaster());
			
			
			setRequestStageIdForRRC(requestRRCDTO,stage);
			/*ExtraEmployeeEffortDTO extraEffortEmpDTO = new ExtraEmployeeEffortDTO();
			//EmployeeMasterDTO empMasterDTO = new EmployeeMasterDTO();
			//empMasterDTO.setEmployeeName(requestRRCDTO.getEmployeeName());
			extraEffortEmpDTO.setEmployeeId(requestRRCDTO.getEmployeeId());
			//extraEffortEmpDTO.setEmployeeName(requestRRCDTO.getEmployeeName());
			//extraEffortEmpDTO.setEmployeeNameDTO(empMasterDTO);
			
			List<ExtraEmployeeEffortDTO> extraEffortDTOList = new ArrayList<ExtraEmployeeEffortDTO>();
			extraEffortDTOList.add(extraEffortEmpDTO);
			//requestRRCDTO.setEmployeeEffortList(extraEffortDTOList);
			
			//requestRRCDTO.setEmployeeDept();
*/			preauthDTO.setRrcDTO(requestRRCDTO);
			
			
		}
		
	}
	

	private void loadRRCRequestValuesForCashless(RRCDTO requestRRCDTO,Double sumInsured,String stage)
	{
		if(null != requestRRCDTO.getNewIntimationDTO())
		{
			//load policy data
			
			String policyNumber = requestRRCDTO.getNewIntimationDTO().getPolicy().getPolicyNumber();
			requestRRCDTO.setPolicyNo(policyNumber);
			requestRRCDTO.setIntimationNo(requestRRCDTO.getNewIntimationDTO().getIntimationId());
			requestRRCDTO.setProductName(requestRRCDTO.getNewIntimationDTO().getProductName());
			//Duration on hold
			Date admissionDate = requestRRCDTO.getNewIntimationDTO().getAdmissionDate();
//			String duration = dbCalculationService.getPolicyAgeing(admissionDate, policyNumber);
			String duration = requestRRCDTO.getNewIntimationDTO().getPolicyYear();
			requestRRCDTO.setDuration(duration);
			requestRRCDTO.setSumInsured(sumInsured);
			
			//load Hospital data
			requestRRCDTO.setHospitalName(requestRRCDTO.getNewIntimationDTO().getHospitalDto().getName());
			requestRRCDTO.setHospitalCity(requestRRCDTO.getNewIntimationDTO().getHospitalDto().getCity());
			//if(null != preauthDTO.getClaimDTO().getNewIntimationDto().getHospitalDto().getRegistedHospitals())
			requestRRCDTO.setHospitalZone(requestRRCDTO.getNewIntimationDTO().getHospitalDto().getHospitalZone());
			requestRRCDTO.setDateOfAdmission(admissionDate);
			
			if(null != requestRRCDTO.getClaimDto())
			{
				String claimType = requestRRCDTO.getClaimDto().getClaimTypeValue();
				Long claimKey = requestRRCDTO.getClaimDto().getKey();
				if(SHAConstants.CLAIMREQUEST_CASHLESS.equalsIgnoreCase(claimType))
				{
					Preauth preauth = preauthService.getLatestPreauthByClaim(claimKey);
					if(null != preauth)
					{
						requestRRCDTO.setDateOfDischarge(preauth.getDateOfDischarge());
					}
				}
				else if(SHAConstants.CLAIMREQUEST_REIMBURSEMENT.equalsIgnoreCase(claimType))
				{
					Reimbursement reimbursement = rodService.getPreviousRODDetails(claimKey);
					if(null != reimbursement)
					{
						requestRRCDTO.setDateOfDischarge(reimbursement.getDateOfDischarge());
					}
				}
			}
			/*if(null != preauthDTO.getPreauthDataExtractionDetails() && null != preauthDTO.getPreauthDataExtractionDetails().getDischargeDate())
			requestRRCDTO.setDateOfDischarge(preauthDTO.getPreauthDataExtractionDetails().getDischargeDate());*/
			
			//load Insured data
			requestRRCDTO.setInsuredName(requestRRCDTO.getNewIntimationDTO().getInsuredPatient().getInsuredName());
			if(null != requestRRCDTO.getNewIntimationDTO().getInsuredPatient().getInsuredAge())
			requestRRCDTO.setInsuredAge(requestRRCDTO.getNewIntimationDTO().getInsuredPatient().getInsuredAge().longValue());
			if(null != requestRRCDTO.getNewIntimationDTO().getInsuredPatient().getInsuredGender() )
			requestRRCDTO.setSex(requestRRCDTO.getNewIntimationDTO().getInsuredPatient().getInsuredGender().getValue());
			
			if(null != requestRRCDTO.getClaimDto())
			{
				requestRRCDTO.setClaimType(requestRRCDTO.getClaimDto().getClaimTypeValue());
			}
			requestRRCDTO.setProcessingStage(stage);
			
			TmpEmployee tmpEmployee = reimbursementService.getEmployeeDetails(requestRRCDTO.getStrUserName());
			if(null != tmpEmployee)
			{
				StringBuffer strName = new StringBuffer();
				if(null != tmpEmployee.getEmpFirstName())
				{
					strName.append(tmpEmployee.getEmpFirstName());
				}
				if(null != tmpEmployee.getEmpMiddleName())
				{
					if(("").equalsIgnoreCase(strName.toString()))
					{
						strName.append(tmpEmployee.getEmpMiddleName()); 
					}
					else
					{
						strName.append(tmpEmployee.getEmpMiddleName());
					}
				}
				if(null != tmpEmployee.getEmpLastName())
				{
					if(("").equalsIgnoreCase(strName.toString()))
					{
						strName.append(tmpEmployee.getEmpLastName()); 
					}
					else
					{
						strName.append(tmpEmployee.getEmpLastName());
					}
				}
				/*if(!(null != tmpEmployee.getEmpFirstName()))
					tmpEmployee.setEmpFirstName("");
				else if(!(null != tmpEmployee.getEmpMiddleName()))
					tmpEmployee.setEmpMiddleName("");
				else if(!(null != tmpEmployee.getEmpLastName()))
					tmpEmployee.setEmpLastName("");*/
				
				//requestRRCDTO.setEmployeeName(tmpEmployee.getEmpFirstName()+tmpEmployee.getEmpMiddleName()+tmpEmployee.getEmpLastName());
				requestRRCDTO.setEmployeeName(strName.toString());
				requestRRCDTO.setEmployeeId(tmpEmployee.getEmpId());
				SelectValue empEffort = new SelectValue();
				empEffort.setId(tmpEmployee.getKey());
				empEffort.setValue(tmpEmployee.getEmpId()+"-"+tmpEmployee.getEmpFirstName());
				requestRRCDTO.getEmployeeEffortDTO().setSelEmployeeId(empEffort);
			}
			//requestRRCDTO.setEmployeeNameList(getEmployeeNamesFromMaster());
			requestRRCDTO.setDataSourcesMap(getEmployeeNamesFromMaster());
			//Map<String,Object> containerMap = new HashMap<String, Object>();
			
			//containerMap.put(SHAConstants.EMPLOYEE_NAME_ID_MAP , masterService.loadEmployeeNameData());
			setRequestStageIdForRRC(requestRRCDTO,stage);
			/*ExtraEmployeeEffortDTO extraEffortEmpDTO = new ExtraEmployeeEffortDTO();
			//EmployeeMasterDTO empMasterDTO = new EmployeeMasterDTO();
			//empMasterDTO.setEmployeeName(requestRRCDTO.getEmployeeName());
			extraEffortEmpDTO.setEmployeeId(requestRRCDTO.getEmployeeId());
			//extraEffortEmpDTO.setEmployeeName(requestRRCDTO.getEmployeeName());
			//extraEffortEmpDTO.setEmployeeNameDTO(empMasterDTO);
			
			List<ExtraEmployeeEffortDTO> extraEffortDTOList = new ArrayList<ExtraEmployeeEffortDTO>();
			extraEffortDTOList.add(extraEffortEmpDTO);
			//requestRRCDTO.setEmployeeEffortList(extraEffortDTOList);
			
			//requestRRCDTO.setEmployeeDept();
*/			//preauthDTO.setRrcDTO(requestRRCDTO);
			
			
		}
		
	}
	
	private RRCDTO setRequestStageIdForRRC(RRCDTO requestRRCDTO , String stage)
	{
		if((SHAConstants.PROCESS_PRE_MEDICAL).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.PRE_MEDICAL_PRE_AUTH_STAGE);
		}
		if((SHAConstants.PROCESS_PREAUTH).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.PREAUTH_STAGE);
		}
		else if ((SHAConstants.PRE_MEDICAL_PROCESSING_ENHANCEMENT).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.PRE_MEDICAL_ENHANCEMENT_STAGE);
		}
		else if ((SHAConstants.PROCESS_ENHANCEMENT).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.ENHANCEMENT_STAGE);
		}
		else if ((SHAConstants.PROCESS_WITHDRAW_PREAUTH).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.WITHDRAW_STAGE);
		}
		else if ((SHAConstants.PROCESS_DOWNSIZE_PREAUTH).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.DOWNSIZE_STAGE);
		}
		else if ((SHAConstants.PROCESS_DOWNSIZE_REQUEST_PREAUTH).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.DOWNSIZE_STAGE);
		}
		
		else if ((SHAConstants.PROCESS_PED_QUERY).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.PED_QUERY);
		}
		
		else if ((SHAConstants.PROCESS_REJECTION).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.PROCESS_REJECTION_STAGE);
		}
		else if ((SHAConstants.ACKNOWLEDGE_HOSPITAL_COMMUNICATION).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.ACKNOWLEDGE_HOSPITAL_STAGE);
		}
		else if ((SHAConstants.FIELD_VISIT).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.FVR_STAGE_KEY);
		}
		
		else if ((SHAConstants.PED_REQUEST_PROCESS).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.PED_ENDORSEMENT_STAGE);
		}
		
		else if ((SHAConstants.PED_REQUEST_APPROVER).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.PED_ENDORSEMENT_STAGE);
		}
		else if ((SHAConstants.ADVISE_ON_PED).equals(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.PED_ENDORSEMENT_STAGE);
		}
		else if ((SHAConstants.PROCESS_SUBMIT_SPECIALIST_ADVISE_CASHLESS).equals(stage))
		{
			/**
			 * To Confirm stage with developer . -- No separate stage available for submit specialist. 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.PED_ENDORSEMENT_STAGE);
		}
		else if ((SHAConstants.PROCESS_COORDINATOR_REPLY).equals(stage))
		{
			/**
			 * To Confirm stage with developer . 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.COORDINATOR_PROCESS_REPLY_STAGE);
		}
		
		else if ((SHAConstants.PROCESS_SUBMIT_SPECIALIST_ADVISE_REIMBURSEMENT).equals(stage))
		{
			/**
			 * To Confirm stage with developer . 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.SPECIALIST_PROCESS_STAGE);
			//requestRRCDTO.setRequestedStageId(ReferenceTable.COORDINATOR_PROCESS_REPLY_STAGE);
		}
		else if ((SHAConstants.PROCESS_COORDINATOR_REPLY_REIMBURSEMENT).equals(stage))
		{
			/**
			 * To Confirm stage with developer . -- no separate stage available 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.CLAIM_REQUEST_STAGE);
		}
		else if ((SHAConstants.PROCESS_INVESTIGATION_INTIATED).equals(stage))
		{
			/**
			 * To Confirm stage with developer . 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.INVESTIGATION_STAGE);
		}
		else if ((SHAConstants.ASSIGN_INVESTIGATION_INTIATED).equals(stage))
		{
			/**
			 * To Confirm stage with developer . 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.INVESTIGATION_STAGE);
		//requestRRCDTO.setRequestedStageId(ReferenceTable.CLAIM_REQUEST_STAGE);
		}
		else if ((SHAConstants.ACKNOWLEDGE_INVESTIGATION).equals(stage))
		{
			/**
			 * To Confirm stage with developer . 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.INVESTIGATION_STAGE);
			//requestRRCDTO.setRequestedStageId(ReferenceTable.CLAIM_REQUEST_STAGE);

		//	requestRRCDTO.setRequestedStageId(ReferenceTable.INVESTIGATION_STAGE);
		}
		else if ((SHAConstants.ACKNOWLEDGE_DOC_RECEIVED).equals(stage))
		{
			/**
			 * To Confirm stage with developer . 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.ACKNOWLEDGE_STAGE_KEY);
		//	requestRRCDTO.setRequestedStageId(ReferenceTable.INVESTIGATION_STAGE);
		}
		else if ((SHAConstants.CREATE_ROD).equals(stage))
		{
			/**
			 * To Confirm stage with developer . 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.CREATE_ROD_STAGE_KEY);
		//	requestRRCDTO.setRequestedStageId(ReferenceTable.INVESTIGATION_STAGE);
		}
		else if ((SHAConstants.BILL_ENTRY).equals(stage))
		{
			/**
			 * To Confirm stage with developer . 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.BILL_ENTRY_STAGE_KEY);
		//	requestRRCDTO.setRequestedStageId(ReferenceTable.INVESTIGATION_STAGE);
		}
		
		else if((SHAConstants.ADD_ADDITIONAL_DOCUMENTS).equals(stage))
		{
			/**
			 * The stage needs to revisited. Need to check sathish sir for this once.
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.ACKNOWLEDGE_STAGE_KEY);
		}
		
		else if((SHAConstants.PROCESS_UPLOAD_INVESTIGATION).equals(stage))
		{
			/**
			 * The stage needs to revisited. Need to check sathish sir for this once.
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.UPLOAD_INVESTIGATION_STAGE);

		//	requestRRCDTO.setRequestedStageId(ReferenceTable.CLAIM_REGISTRATION_STAGE);
		}
		else if((SHAConstants.PROCESS_CLAIM_REGISTRATION).equals(stage))
		{
			/**
			 * The stage needs to revisited. Need to check sathish sir for this once.
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.CLAIM_REGISTRATION_STAGE);
		}
		
		else if((SHAConstants.PROCESS_CONVERT_CLAIM).equals(stage))
		{
			/**
			 * The stage needs to be revisted . Need to check with sathish sir.
			 * 
			 * */
			requestRRCDTO.setRequestedStageId(ReferenceTable.CLAIM_REGISTRATION_STAGE);
		}
		
		
		
		
		else if((SHAConstants.ZONAL_REVIEW).equalsIgnoreCase(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.ZONAL_REVIEW_STAGE);
		}
		else if((SHAConstants.CLAIM_REQUEST).equalsIgnoreCase(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.CLAIM_REQUEST_STAGE);
		}
		
		else if((SHAConstants.BILLING).equalsIgnoreCase(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.BILLING_STAGE);
		}
		else if((SHAConstants.RRC_FINANCIAL).equalsIgnoreCase(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.FINANCIAL_STAGE);
		}
		
		else if((SHAConstants.INITIATE_RRC_REQUEST).equalsIgnoreCase(stage))
		{
			requestRRCDTO.setRequestedStageId(ReferenceTable.RRC_STAGE);
		}
		
		return requestRRCDTO;
	}
	
	private Map<String, Object>  getEmployeeNamesFromMaster()
	{
		BeanItemContainer<SelectValue> employeeNameList = masterService.getEmployeeNameFromMaster();
		Map<String, Object> employeeNameMap = new HashMap<String, Object>();
		employeeNameMap.put(SHAConstants.EMPLOYEE_NAME_LIST,employeeNameList);
		employeeNameMap.put(SHAConstants.EMPLOYEE_NAME_ID_MAP , masterService.loadEmployeeNameData());
		employeeNameMap.put(SHAConstants.EMPLOYEE_ID, masterService.getEmployeeLoginNameContainer());
		return employeeNameMap;
	}
	
	private void loadRRCRequestValuesForProcessing(RRCDTO requestRRCDTO,Double sumInsured,String stage)
	{
		//RRCDTO requestRRCDTO = new RRCDTO();
		
		if(null != requestRRCDTO.getClaimDTO().getNewIntimationDto())
		{
			//load policy data
			String policyNumber = requestRRCDTO.getNewIntimationDTO().getPolicy().getPolicyNumber();
			requestRRCDTO.setPolicyNo(policyNumber);
			requestRRCDTO.setIntimationNo(requestRRCDTO.getNewIntimationDTO().getIntimationId());
			requestRRCDTO.setProductName(requestRRCDTO.getNewIntimationDTO().getProductName());
			//Duration on hold
			Date admissionDate = requestRRCDTO.getNewIntimationDTO().getAdmissionDate();
//			String duration = dbCalculationService.getPolicyAgeing(admissionDate, policyNumber);
			String duration = requestRRCDTO.getNewIntimationDTO().getPolicyYear();
			requestRRCDTO.setDuration(duration);
			requestRRCDTO.setSumInsured(sumInsured);
			
			//load Hospital data
			requestRRCDTO.setHospitalName(requestRRCDTO.getNewIntimationDTO().getHospitalDto().getName());
			requestRRCDTO.setHospitalCity(requestRRCDTO.getNewIntimationDTO().getHospitalDto().getCity());
			//if(null != preauthDTO.getClaimDTO().getNewIntimationDto().getHospitalDto().getRegistedHospitals())
			requestRRCDTO.setHospitalZone(requestRRCDTO.getNewIntimationDTO().getHospitalDto().getHospitalZone());
			requestRRCDTO.setDateOfAdmission(admissionDate);
			/*if(null != preauthDTO.getPreauthDataExtractionDetails() && null != preauthDTO.getPreauthDataExtractionDetails().getDischargeDate())
			requestRRCDTO.setDateOfDischarge(preauthDTO.getPreauthDataExtractionDetails().getDischargeDate());*/
			
			//load Insured data
			requestRRCDTO.setInsuredName(requestRRCDTO.getNewIntimationDTO().getInsuredPatient().getInsuredName());
			if(null != requestRRCDTO.getNewIntimationDTO().getInsuredPatient().getInsuredAge())
			requestRRCDTO.setInsuredAge(requestRRCDTO.getNewIntimationDTO().getInsuredPatient().getInsuredAge().longValue());
			if(null != requestRRCDTO.getNewIntimationDTO().getInsuredPatient().getInsuredGender() )
			requestRRCDTO.setSex(requestRRCDTO.getNewIntimationDTO().getInsuredPatient().getInsuredGender().getValue());
			
			requestRRCDTO.setClaimType(requestRRCDTO.getClaimDTO().getClaimTypeValue());
			requestRRCDTO.setProcessingStage(stage);
			
			
			/*TmpEmployee tmpEmployee = reimbursementService.getEmployeeDetails(requestRRCDTO.getStrUserName());
			//Needs to be changed for process and review request
			if(null != tmpEmployee)
			{
				requestRRCDTO.setEmployeeName(tmpEmployee.getEmpFirstName()+tmpEmployee.getEmpMiddleName()+tmpEmployee.getEmpLastName());
				requestRRCDTO.setEmployeeId(tmpEmployee.getEmpId());
			}*/
			
			
			
			RRCRequest rrcRequest = reviewRRCRequestService.getRRCRequestByKey(requestRRCDTO.getRrcRequestKey());
			requestRRCDTO.setRemarks(rrcRequest.getRequestRemarks());
			requestRRCDTO.setRrcRequestNo(rrcRequest.getRrcRequestNumber());
			
			if(null != rrcRequest && null != rrcRequest.getRequestedStageId())
			{
				requestRRCDTO.setProcessingStageKey(rrcRequest.getRequestedStageId().getKey());
				requestRRCDTO.setProcessingStage(rrcRequest.getRequestedStageId().getStageName());
			}
			
			if(null != requestRRCDTO.getClaimDTO())
			{
				String claimType = requestRRCDTO.getClaimDTO().getClaimTypeValue();
				Long claimKey = requestRRCDTO.getClaimDTO().getKey();
				if(SHAConstants.CLAIMREQUEST_CASHLESS.equalsIgnoreCase(claimType))
				{
					Preauth preauth = preauthService.getLatestPreauthByClaim(claimKey);
					if(null != preauth)
					{
						requestRRCDTO.setDateOfDischarge(preauth.getDateOfDischarge());
					}
				}
				else if(SHAConstants.CLAIMREQUEST_REIMBURSEMENT.equalsIgnoreCase(claimType))
				{
					Reimbursement reimbursement = rodService.getPreviousRODDetails(claimKey);
					if(null != reimbursement)
					{
						requestRRCDTO.setDateOfDischarge(reimbursement.getDateOfDischarge());
					}
				}
			}
			
			/*if(null != rrcRequest.getReimbursement())
				requestRRCDTO.setDateOfDischarge(rrcRequest.getReimbursement().getDateOfDischarge());*/
			
			if(null != rrcRequest.getRequestedTypeId())
			{
				requestRRCDTO.setRrcRequestType(rrcRequest.getRequestedTypeId().getValue());
			}
			if(null != rrcRequest.getRrcType()){
				requestRRCDTO.setRrcType(rrcRequest.getRrcType());
			}
			TmpEmployee tmpEmployee = reimbursementService.getEmployeeDetails(rrcRequest.getRequestorID());
			//Needs to be changed for process and review request
			if(null != tmpEmployee)
			{
				/*if(!(null != tmpEmployee.getEmpFirstName()))
					tmpEmployee.setEmpFirstName("");
				else if(!(null != tmpEmployee.getEmpMiddleName()))
					tmpEmployee.setEmpMiddleName("");
				else if(!(null != tmpEmployee.getEmpLastName()))
					tmpEmployee.setEmpLastName("");
				requestRRCDTO.setEmployeeName(tmpEmployee.getEmpFirstName()+tmpEmployee.getEmpMiddleName()+tmpEmployee.getEmpLastName());*/
				StringBuffer strName = new StringBuffer();
				if(null != tmpEmployee.getEmpFirstName())
				{
					strName.append(tmpEmployee.getEmpFirstName());
				}
				if(null != tmpEmployee.getEmpMiddleName())
				{
					if(("").equalsIgnoreCase(strName.toString()))
					{
						strName.append(tmpEmployee.getEmpMiddleName()); 
					}
					else
					{
						strName.append(tmpEmployee.getEmpMiddleName());
					}
				}
				if(null != tmpEmployee.getEmpLastName())
				{
					if(("").equalsIgnoreCase(strName.toString()))
					{
						strName.append(tmpEmployee.getEmpLastName()); 
					}
					else
					{
						strName.append(tmpEmployee.getEmpLastName());
					}
				}
					
				//requestRRCDTO.setEmployeeName(tmpEmployee.getEmpFirstName()+tmpEmployee.getEmpMiddleName()+tmpEmployee.getEmpLastName());
				requestRRCDTO.setEmployeeName(strName.toString());
				requestRRCDTO.setEmployeeId(tmpEmployee.getEmpId());
			}
			
			requestRRCDTO.setCreatedBy(rrcRequest.getCreatedBy());
			requestRRCDTO.setCreatedDate(rrcRequest.getCreatedDate());
			
			requestRRCDTO.setProcessedBy(rrcRequest.getProcessedBy());
			requestRRCDTO.setProcessedDate(rrcRequest.getProcessedDate());

			requestRRCDTO.setReviewedBy(rrcRequest.getReviewedBy());
			requestRRCDTO.setReviewedDate(rrcRequest.getReviewedDate());
			requestRRCDTO.setRequestorID(rrcRequest.getRequestorID());
			
			requestRRCDTO.setRrcintiatedDate(rrcRequest.getRrcInitiatedDate());

			if(SHAConstants.PROCESS_RRC_REQUEST.equalsIgnoreCase(stage))
			{
				requestRRCDTO.setRequestOnHoldRemarks(rrcRequest.getRequestHoldRemarks());
				requestRRCDTO.setEmployeeEffortList(reviewRRCRequestService.getEmployeeDetailsFromRRCDetails(requestRRCDTO.getRrcRequestKey()));
				/*ExtraEmployeeEffortDTO extraEffortEmpDTO = new ExtraEmployeeEffortDTO();
				EmployeeMasterDTO empMasterDTO = new EmployeeMasterDTO();
				empMasterDTO.setEmployeeName(requestRRCDTO.getEmployeeName());
				extraEffortEmpDTO.setEmployeeId(requestRRCDTO.getEmployeeId());
				//extraEffortEmpDTO.setEmployeeName(requestRRCDTO.getEmployeeName());
				extraEffortEmpDTO.setEmployeeNameDTO(empMasterDTO);
				List<ExtraEmployeeEffortDTO> extraEffortDTOList = new ArrayList<ExtraEmployeeEffortDTO>();
				extraEffortDTOList.add(extraEffortEmpDTO);
				requestRRCDTO.setEmployeeEffortList(extraEffortDTOList);
*/			}
			else if(SHAConstants.REVIEW_RRC_REQUEST.equalsIgnoreCase(stage))
			{
				
				setReviewAndModifyRRCValues(requestRRCDTO, rrcRequest);
				/*requestRRCDTO.setProcessedBy(rrcRequest.getProcessedBy());
				requestRRCDTO.setProcessedDate(rrcRequest.getProcessedDate());*/
			}
			else if(SHAConstants.MODIFY_RRC_REQUEST.equalsIgnoreCase(stage))
			{
				
				setReviewAndModifyRRCValues(requestRRCDTO, rrcRequest);
				if(null != rrcRequest.getModifierEligibilityTypeId())
					requestRRCDTO.setRrcModifiedEligiblityValue(rrcRequest.getModifierEligibilityTypeId().getValue());
				if(null != rrcRequest.getModifierSavedAmount())
					requestRRCDTO.setRrcModifiedSavedAmount(String.valueOf(rrcRequest.getModifierSavedAmount()));
				if(null != rrcRequest.getModifyRemarks())
				requestRRCDTO.setRrcModifiedRemarks(rrcRequest.getModifyRemarks());
				
				//RRC Review data.
				if(null != rrcRequest.getReviewerEligibilityTypeId())
					requestRRCDTO.setReviewEligiblityValue(rrcRequest.getReviewerEligibilityTypeId().getValue());
				//requestRRCDTO.setSavedAmount(null != rrcRequest.getReviewerSavedAmount() ? String.valueOf(rrcRequest.getReviewerSavedAmount()): "");
				requestRRCDTO.setEligibilityRemarks(rrcRequest.getReviewRemarks());
			}
			else if(SHAConstants.SEARCH_RRC_REQUEST.equalsIgnoreCase(stage))
			{
				
				setReviewAndModifyRRCValues(requestRRCDTO, rrcRequest);
				
				//RRC Review data.
				if(null != rrcRequest.getReviewerEligibilityTypeId())
					requestRRCDTO.setReviewEligiblityValue(rrcRequest.getReviewerEligibilityTypeId().getValue());
				if(null != rrcRequest.getProcessedDate())
					requestRRCDTO.setRrcRequestProcessedDate(String.valueOf(rrcRequest.getProcessedDate()));
			}
			
			//Dinesh
			else if(SHAConstants.RRC_STATUS_SCREEN.equalsIgnoreCase(stage))
			{
				
				setReviewAndModifyRRCValues(requestRRCDTO, rrcRequest);
				
				//RRC Review data.
				if(null != rrcRequest.getReviewerEligibilityTypeId())
					requestRRCDTO.setReviewEligiblityValue(rrcRequest.getReviewerEligibilityTypeId().getValue());
				if(null != rrcRequest.getProcessedDate())
					requestRRCDTO.setRrcRequestProcessedDate(String.valueOf(rrcRequest.getProcessedDate()));
			}

			
			//requestRRCDTO.setEmployeeDept();
			//preauthDTO.setRrcDTO(requestRRCDTO);

		}
		
	}

	private void setReviewAndModifyRRCValues(RRCDTO requestRRCDTO,
			RRCRequest rrcRequest) {
		if(null != rrcRequest.getReimbursement())
			requestRRCDTO.setRodKey(rrcRequest.getReimbursement().getKey());
		if(null != rrcRequest.getEligiblityTypeId())
		{
			SelectValue eligibility = new SelectValue();
			eligibility.setId( rrcRequest.getEligiblityTypeId().getKey());
			eligibility.setValue(rrcRequest.getEligiblityTypeId().getValue());
			requestRRCDTO.setEligibility(eligibility);	
			requestRRCDTO.setRrcRequestRRCEligiblityId(rrcRequest.getEligiblityTypeId().getKey());
			requestRRCDTO.setRequestRRCElgilibilityValue(rrcRequest.getEligiblityTypeId().getValue());
		}
		if(null != rrcRequest.getReviewerEligibilityTypeId())
		{
			
			SelectValue revieweEligibility = new SelectValue();
			revieweEligibility.setId(rrcRequest.getReviewerEligibilityTypeId().getKey());
			revieweEligibility.setValue(rrcRequest.getReviewerEligibilityTypeId().getValue());
			requestRRCDTO.setReviewEligiblity(revieweEligibility);
		}
		requestRRCDTO.setRequestEligbilityRRCRemarks(rrcRequest.getEligibiltyRemarks());
		requestRRCDTO.setRequestRRCSavedAmount(null != rrcRequest.getRequestorSavedAmount() ? String.valueOf(rrcRequest.getRequestorSavedAmount()) : "");
		if(requestRRCDTO.getIsRrcStatusScreen()){
			requestRRCDTO.setEmployeeEffortList(reviewRRCRequestService.getEmployeeDetailsFromRRCDetailsForStatusScreen(requestRRCDTO.getRrcRequestKey()));
		}
		else{
		requestRRCDTO.setEmployeeEffortList(reviewRRCRequestService.getEmployeeDetailsFromRRCDetails(requestRRCDTO.getRrcRequestKey()));
		}
		requestRRCDTO.setRrcCategoryList(reviewRRCRequestService.getCategoryDetailsFromRRCCategory(requestRRCDTO.getRrcRequestKey()));
		
		/*requestRRCDTO.setProcessedBy(rrcRequest.getProcessedBy());
		requestRRCDTO.setProcessedDate(rrcRequest.getProcessedDate());

		requestRRCDTO.setReviewedBy(rrcRequest.getReviewedBy());
		requestRRCDTO.setReviewedDate(rrcRequest.getReviewedDate());
		
		requestRRCDTO.setRrcintiatedDate(rrcRequest.getRrcInitiatedDate());*/
		
	/*	TmpEmployee tmpEmployee = reimbursementService.getEmployeeDetails(rrcRequest.getCreatedBy());
		//Needs to be changed for process and review request
		if(null != tmpEmployee)
		{
			requestRRCDTO.setEmployeeName(tmpEmployee.getEmpFirstName()+tmpEmployee.getEmpMiddleName()+tmpEmployee.getEmpLastName());
			requestRRCDTO.setEmployeeId(tmpEmployee.getEmpId());
		}*/
		
	}

	private void setCategoryFlag(Reimbursement reimbursementObjectByKey,
			PreauthDTO reimbursementDTO) {
		if (reimbursementObjectByKey.getDocAcknowLedgement()
				.getHospitalisationFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getHospitalisationFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setHospitalizaionFlag(true);
		}
		if (reimbursementObjectByKey.getDocAcknowLedgement()
				.getPreHospitalisationFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getPreHospitalisationFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setPreHospitalizaionFlag(true);
		}
		if (reimbursementObjectByKey.getDocAcknowLedgement()
				.getPostHospitalisationFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getPostHospitalisationFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setPostHospitalizaionFlag(true);
		}

		if (reimbursementObjectByKey.getDocAcknowLedgement()
				.getHospitalizationRepeatFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getHospitalizationRepeatFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setIsHospitalizationRepeat(true);
		}
		
		if (reimbursementObjectByKey.getDocAcknowLedgement()
				.getPartialHospitalisationFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getPartialHospitalisationFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setPartialHospitalizaionFlag(true);
		}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement()
				.getHospitalCashFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getHospitalCashFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setAddOnBenefitsHospitalCash(true);
		}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement()
				.getPatientCareFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getPatientCareFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setAddOnBenefitsPatientCare(true);
		}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement()
				.getLumpsumAmountFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getLumpsumAmountFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setLumpSumAmountFlag(true);
		}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement()
				.getOtherBenefitsFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getOtherBenefitsFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setOtherBenefitsFlag(true);
		}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement()
				.getEmergencyMedicalEvaluation() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getEmergencyMedicalEvaluation().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setEmergencyMedicalEvaluation(true);
		}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement()
				.getCompassionateTravel() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getCompassionateTravel().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setCompassionateTravel(true);
		}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement()
				.getRepatriationOfMortalRemain() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getRepatriationOfMortalRemain().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setRepatriationOfMortalRemains(true);
		}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement()
				.getPreferredNetworkHospita() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getPreferredNetworkHospita().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setPreferredNetworkHospital(true);
		}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement()
				.getSharedAccomodation() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getSharedAccomodation().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setSharedAccomodation(true);
		}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement().getModeOfReceiptId() != null){
			reimbursementDTO.setModeOfReceipt(reimbursementObjectByKey.getDocAcknowLedgement().getModeOfReceiptId().getKey());
		}
		
		
		
	}

	private void paymentDetailsForfinancial(Reimbursement reimbursement,
			PreauthDTO reimbursementDto, Hospitals hospitals) {
		try {
			PreauthDataExtaractionDTO dataExtractionDto = reimbursementDto
					.getPreauthDataExtractionDetails();
			dataExtractionDto.setEmailId(reimbursement.getPayeeEmailId());
		
			dataExtractionDto.setIfscCode(hospitals.getIfscCode());
			dataExtractionDto.setPayableAt(reimbursement.getPayableAt());
			
			if (reimbursement.getPayeeName() != null) {
				SelectValue selected = new SelectValue();
				selected.setId(1l);
				selected.setValue(reimbursement.getPayeeName());
				dataExtractionDto.setPayeeName(selected);
			}
			
			if(reimbursement.getPaymentModeId() != null && reimbursement.getPaymentModeId().equals(ReferenceTable.PAYMENT_MODE_BANK_TRANSFER)){
				
				BankMaster masBank = createRodService.getBankMasterByKey(reimbursement.getBankId(), masterService);
				if(masBank != null){
					dataExtractionDto.setBankName(masBank.getBankName());
					dataExtractionDto.setBranch(masBank.getBranchName());
					dataExtractionDto.setCity(masBank.getCity());
					dataExtractionDto.setIfscCode(masBank.getIfscCode());
				}
				dataExtractionDto.setAccountNo(reimbursement.getAccountNumber());
				dataExtractionDto.setAccType(reimbursement.getAccountType());
				dataExtractionDto.setAccountPref(reimbursement.getAccountPreference());
				
			}else{
			
				if (dataExtractionDto.getIfscCode() != null) {
					BankMaster masBank = createRodService.getBankMaster(
							dataExtractionDto.getIfscCode(), masterService);
					if(masBank != null){
						dataExtractionDto.setBankName(masBank.getBankName());
						dataExtractionDto.setBranch(masBank.getBranchName());
						dataExtractionDto.setCity(masBank.getCity());
					}
					dataExtractionDto.setAccountNo(reimbursement.getAccountNumber());
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}

	}
	private void setReimbursementValues(Reimbursement reimbursement,
			PreauthDTO reimbursmentDTO) {
		reimbursmentDTO.setKey(reimbursement.getKey());
		reimbursmentDTO.setStatusKey(reimbursement.getStatus().getKey());
		reimbursmentDTO.setStageKey(reimbursement.getStage().getKey());
		
		//CR R201801323
		reimbursmentDTO.getNewIntimationDTO().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(reimbursmentDTO.getNewIntimationDTO().getPolicy().getKey(), reimbursmentDTO.getNewIntimationDTO().getInsuredPatient().getKey()));
		
		/**
		 * Bank id as been changed from Long to MAS_BANK type. hence below line
		 * as been changed accordingly
		 * */
		reimbursmentDTO.setBankId(reimbursement.getBankId());
		reimbursmentDTO.setAccountNumber(reimbursement.getAccountNumber());
		reimbursmentDTO.setAccountPreference(reimbursement.getAccountPreference());
		reimbursmentDTO.setAccountType(reimbursement.getAccountType());
		reimbursmentDTO.setNameAsPerBankAccount(reimbursement.getNameAsPerBankAccount());
		reimbursmentDTO.setPayableAt(reimbursement.getPayableAt());
		reimbursmentDTO.setPayeeEmailId(reimbursement.getPayeeEmailId());
		reimbursmentDTO.setPanNumber(reimbursement.getPanNumber());
		reimbursmentDTO.setPayeeName(reimbursement.getPayeeName());
		reimbursmentDTO.setPaymentModeId(reimbursement.getPaymentModeId());
		reimbursmentDTO.setPayModeChangeReason(reimbursement.getPayModeChangeReason());
	   
		reimbursmentDTO.setRodNumber(reimbursement.getRodNumber());
		PreauthDataExtaractionDTO dataExtraction = reimbursmentDTO
				.getPreauthDataExtractionDetails();
		dataExtraction.setBankId(reimbursement.getBankId());
		dataExtraction.setAccountNo(reimbursement.getAccountNumber());
		dataExtraction.setNameAsPerBank(reimbursement.getNameAsPerBankAccount());
		dataExtraction.setAccountPref(reimbursement.getAccountPreference());
		dataExtraction.setAccType(reimbursement.getAccountType());
		dataExtraction.setPayableAt(reimbursement.getPayableAt());
		dataExtraction.setEmailId(reimbursement.getPayeeEmailId());
		dataExtraction.setPanNo(reimbursement.getPanNumber());
		
		
		dataExtraction.setDocAckknowledgement(reimbursement
				.getDocAcknowLedgement());
		dataExtraction.setDocAcknowledgementKey(reimbursement
				.getDocAcknowLedgement() != null ? reimbursement
				.getDocAcknowLedgement().getKey() : null);
		
		reimbursmentDTO.setDocumentReceivedFromId(reimbursement.getDocAcknowLedgement().getDocumentReceivedFromId() != null ? reimbursement.getDocAcknowLedgement().getDocumentReceivedFromId().getKey() : 0l);
		reimbursmentDTO.setMakerVerified(reimbursement.getDocAcknowLedgement().getMakerVerified());
		//code changed by noufel since verification process flow changed
		reimbursmentDTO.setCheckerVerified("Y");
		
		dataExtraction.setPaymentModeFlag(reimbursement.getPaymentModeId());
		dataExtraction.setPanNo(reimbursement.getPanNumber());
		dataExtraction.setChangeInReasonDOA(reimbursement.getReasonForChange());
		dataExtraction.setLegalFirstName(reimbursement.getLegalHeirFirstName());
		dataExtraction.setLegalLastName(reimbursement.getLegalHeirLastName());
		dataExtraction.setLegalMiddleName(reimbursement
				.getLegalHeirMiddleName());
		dataExtraction.setAccountNo(reimbursement.getAccountNumber());
//		dataExtraction.setPayeeName();
		dataExtraction.setPayableAt(reimbursement.getPayableAt());
		dataExtraction.setBillingInternalRemarks(reimbursement.getBillingInternalRemarks());
		dataExtraction.setFaInternalRemarks(reimbursement.getFaInternalRemarks());
	}

	/*private BillEntryDetailsDTO getBillDetailsDTO(RODBillDetails billDetails,
			UploadDocumentDTO uploadDocumentDTO) {
		BillEntryDetailsDTO dto = new BillEntryDetailsDTO();
		dto.setItemName(billDetails.getItemName());
		dto.setKey(billDetails.getKey());
		SelectValue classificationValue = new SelectValue();
		classificationValue.setId(billDetails.getBillClassification().getKey());
		classificationValue.setValue(billDetails.getBillClassification()
				.getValue());
		dto.setClassification(classificationValue);
		dto.setItemNo(billDetails.getItemNumber());
		dto.setZonalRemarks(uploadDocumentDTO.getZonalRemarks());
		dto.setCorporateRemarks(uploadDocumentDTO.getCorporateRemarks());
		dto.setBillingRemarks(uploadDocumentDTO.getBillingRemarks());
		dto.setNoOfDays(billDetails.getNoOfDaysBills() != null ? billDetails
				.getNoOfDaysBills().doubleValue() : 0d);
		dto.setPerDayAmt(billDetails.getPerDayAmountBills());
		dto.setBillValue(billDetails.getClaimedAmountBills());
		dto.setItemValue(billDetails.getClaimedAmountBills());
		SelectValue billCategoryvalue = new SelectValue();
		billCategoryvalue.setId(billDetails.getBillCategory().getKey());
		billCategoryvalue.setValue(billDetails.getBillCategory().getValue());
		dto.setCategory(billCategoryvalue);
		return dto;
	}*/

	protected void showMedicalApprovalProcessClaimRequest(
			@Observes @CDIEvent(MenuPresenter.SHOW_MEDICAL_APPROVAL_PROCESS_CLAIM_REQUEST) final ParameterDTO parameters) {
		Date startDate = new Date();
		log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> SHOW MEDICAL APPROVAL CLAIM REQUEST METHOD STARTED %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ startDate);


		SearchProcessClaimRequestTableDTO tableDTO = (SearchProcessClaimRequestTableDTO) parameters
				.getPrimaryParameter();

		Reimbursement reimbursementObjectByKey = rodService
		.getReimbursementObjectByKey(tableDTO.getRodKey());
		
		Date date1 = new Date();
		log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> BEFORE INVOKING ROD SUMMARY DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date1);
		
		List<UploadDocumentDTO> rodSummaryDetails = rodService
				.getRODSummaryDetails(reimbursementObjectByKey.getKey());
		Date date2 = new Date();

		log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> AFTER INVOKING ROD SUMMARY DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date2);
		
		log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL DURATION FOR RODSUMMARY DETAILS METHOD %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date1, date2));
		
		Boolean isValidClaimForMA = true;
		
		/*
		 * List<Long> documentSummaryKeys = new ArrayList<Long>(); for
		 * (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
		 * documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
		 * uploadDocumentDTO.setStatus(true); List<RODBillDetails>
		 * billEntryDetails = rodService
		 * .getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
		 * List<BillEntryDetailsDTO> dtoList = new
		 * ArrayList<BillEntryDetailsDTO>(); if (billEntryDetails != null &&
		 * !billEntryDetails.isEmpty()) { for (RODBillDetails billEntryDetailsDO
		 * : billEntryDetails) {
		 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
		 * uploadDocumentDTO)); } }
		 * uploadDocumentDTO.setBillEntryDetailList(dtoList); }
		 */
		/*
		 * Double totalBilledAmount = reimbursementService
		 * .getTotalBilledAmount(documentSummaryKeys);
		 */
		Date date3 = new Date();
		log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> BEFORE INVOKING ZONAL  MEDICAL REVIEW MAPPER  GET REIMBURSEMENT DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date3);
		ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
//		ZonalMedicalReviewMapper.getAllMapValues();
		PreauthDTO reimbursementDTO = mapper
				.getReimbursementDTO(reimbursementObjectByKey);
		Date date4 = new Date();
		log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> AFTER INVOKING ZONAL  MEDICAL REVIEW MAPPER  GET REIMBURSEMENT DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date4);
		log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL DURATION FOR GET REIMBURSEMENT DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date3, date4));

		if(null != reimbursementObjectByKey)
		{
			Claim claimByKey = (reimbursementObjectByKey.getClaim());
			if(null != claimByKey)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
				{
					isValidClaimForMA = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
			
			/*for bancs*/
			
			if(reimbursementObjectByKey.getCatastrophicLoss() != null) {
				
				SelectValue catastropheData = masterService.getCatastropheData(reimbursementObjectByKey.getCatastrophicLoss());
				if(catastropheData != null){
					reimbursementDTO.getPreauthDataExtractionDetails().setCatastrophicLoss(new SelectValue(reimbursementObjectByKey.getCatastrophicLoss(),catastropheData.getValue()));
				}
			}
		 
			if(reimbursementObjectByKey.getNatureOfLoss() != null) {
				
				MastersValue master = masterService.getMaster(reimbursementObjectByKey.getNatureOfLoss());
				if(master != null){
					reimbursementDTO.getPreauthDataExtractionDetails().setNatureOfLoss(new SelectValue(reimbursementObjectByKey.getNatureOfLoss(),master.getValue()));
				}
			}
		
			if(reimbursementObjectByKey.getCauseOfLoss() != null) {
				
				MastersValue causeOfLoss =  masterService.getMaster(reimbursementObjectByKey.getCauseOfLoss());
				
				if(causeOfLoss != null){
					reimbursementDTO.getPreauthDataExtractionDetails().setCauseOfLoss(new SelectValue(reimbursementObjectByKey.getCauseOfLoss(),causeOfLoss.getValue()));
				}
			}
			if(reimbursementObjectByKey.getImplantFlag() != null ){
				if(reimbursementObjectByKey.getImplantFlag().equals("Y")){
					reimbursementDTO.getPreauthDataExtractionDetails().setImplantApplicable(true);
				}
			}	
		}
		if(isValidClaimForMA)
		{
			
			if(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag() != null && ("Y").equalsIgnoreCase(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag()))
			{
				List<ReconsiderRODRequestTableDTO> reconsiderDTOList = getReconsiderRODRequestForBillEntry(tableDTO.getRodKey());
				if(null != reconsiderDTOList && !reconsiderDTOList.isEmpty())
				{
					reimbursementDTO.setReconsiderRodRequestList(reconsiderDTOList);
					for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderDTOList) {
						if(null != reconsiderRODRequestTableDTO.getIsRejectReconsidered() && reconsiderRODRequestTableDTO.getIsRejectReconsidered())
						{
							reimbursementDTO.setIsRejectReconsidered(true);
						}
						else
						{
							reimbursementDTO.setIsRejectReconsidered(false);
						}
					}
				}
			}
			
			/*
			 * reimbursementDTO.setAmountConsidered(totalBilledAmount != null ?
			 * String .valueOf(totalBilledAmount.intValue()) : "0");
			 * reimbursementDTO .setInitialAmountConsidered(totalBilledAmount !=
			 * null ? String .valueOf(totalBilledAmount.intValue()) : "0");
			 * reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
			 * reimbursementDTO.setHumanTask(tableDTO.getHumanTask());
			 */
	
			
	
			//reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
			reimbursementDTO.setStrUserName(tableDTO.getUsername());
			reimbursementDTO.setStrPassword(tableDTO.getPassword());
			reimbursementDTO.setTaskNumber(tableDTO.getTaskNumber());
			
			
			reimbursementDTO.setUserRole(tableDTO.getUserRole());
			reimbursementDTO.setRodNumber(reimbursementObjectByKey.getRodNumber());
			Claim claimByKey = reimbursementObjectByKey.getClaim();
			if(claimByKey!=null){
				
				Long hospital = claimByKey.getIntimation().getHospital();
				Hospitals hospitalById = hospitalService.getHospitalById(hospital);
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					reimbursementDTO.setIsSuspicious(hospitalById.getSuspiciousType());
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
						reimbursementDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
					}
				}
				
			}
			
			// R1045
			reimbursementDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			reimbursementDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			reimbursementDTO.setCrmFlagged(claimByKey.getCrcFlag());
			
			reimbursementDTO.setVipCustomer(claimByKey.getIsVipCustomer());
			reimbursementDTO.setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
			
			Date date8 = new Date();
			reimbursementDTO
					.setReconsiderationList(getReconsiderRODRequest(claimByKey));
			Date date9 = new Date();
			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY GET RECONSIDER ROD REQUEST %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date8,  date9));
			
			BeanItemContainer<SelectValue> medicalContainer = masterService
					.getSelectValueContainer(ReferenceTable.MEDICAL_VERIFICATION);
			BeanItemContainer<SelectValue> treatmentContainer = masterService
					.getSelectValueContainer(ReferenceTable.TREATMENT_QUALITY_VERIFICATION);
	
			// setHospitalDetailsToDTO(hospitalById, reimbursementDTO);
			Date date10 = new Date();
			setReimbursmentTOPreauthDTO(mapper, claimByKey,
					reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.CLAIM_REQUEST);
			
			if(reimbursementObjectByKey.getDocAcknowLedgement() != null
					&& reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
					&& ReferenceTable.RECEIVED_FROM_INSURED.equals(reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey())
					&& reimbursementObjectByKey.getPatientStatus() != null 
					&& reimbursementObjectByKey.getPatientStatus().getKey() != null 
					&& ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(reimbursementObjectByKey.getPatientStatus().getKey())) {
				List<NomineeDetailsDto> nomineeDtoList = intimationService.getNomineeDetailsListByTransactionKey(tableDTO.getRodKey());
				if( nomineeDtoList != null && !nomineeDtoList.isEmpty()){
					reimbursementDTO.getNewIntimationDTO().setNomineeList(nomineeDtoList);
				}
				else{
					
					/*if(reimbursementObjectByKey.getNomineeName() != null) {
						reimbursementDTO.getNewIntimationDTO().setNomineeName(reimbursementObjectByKey.getNomineeName());
					}	
					if(reimbursementObjectByKey.getNomineeAddr() != null) {
						reimbursementDTO.getNewIntimationDTO().setNomineeAddr(reimbursementObjectByKey.getNomineeAddr());
					}*/
					
					
					List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(reimbursementDTO.getKey());	
					if(displayDto != null && !displayDto.isEmpty()) {
						
						List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
						LegalHeirDTO legalHeirDTODisplay;
						for (LegalHeir legalHeir : displayDto) {
							
							legalHeirDTODisplay = new LegalHeirDTO(legalHeir);
							legalHeirDTODisplay.setRelationshipContainer(masterService.getRelationshipContainerValues());
							list.add(legalHeirDTODisplay);
							
						}		
						reimbursementDTO.setLegalHeirDTOList(list);
						
					}
					
				}
			}
			LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
			legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
			reimbursementDTO.setLegalHeirDto(legalHeirDTO);
			
			Date date11 = new Date();
			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY SET REIMBURSEMENT TO PREAUTH DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date10,  date11));

			
			
			String[] hospSplit = reimbursementObjectByKey.getRodNumber().split("/");
			String hsopSplitNo = hospSplit[hospSplit.length - 1];
			Integer hospNo = Integer.valueOf(hsopSplitNo);
			if(reimbursementObjectByKey.getStatus() != null && !reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.BILLING_REFER_TO_MEDICALA_APPROVER) &&  !reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER) && hospNo.equals(1) && reimbursementObjectByKey.getClaim().getClaimType() != null && reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(reimbursementObjectByKey.getClaim().getKey());
				//IMSSUPPOR-30613
				if(latestPreauthByClaim!=null){
				reimbursementDTO.setPreviousPreauthKey(latestPreauthByClaim.getKey());
				List<PedValidation> findPedValidationByPreauthKey = preauthService.findPedValidationByPreauthKey(latestPreauthByClaim.getKey());
				List<Procedure> findProcedureByPreauthKey = preauthService.findProcedureByPreauthKey(latestPreauthByClaim.getKey());
				List<DiagnosisDetailsTableDTO> diagnosisTableList = reimbursementDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
				List<ProcedureDTO> procedureExclusionCheckTableList = reimbursementDTO.getPreauthMedicalProcessingDetails().getProcedureExclusionCheckTableList();
				for (ProcedureDTO procedureDTO : procedureExclusionCheckTableList) {
					for (Procedure procedure : findProcedureByPreauthKey) {

						if(procedure.getProcedureID() != null){
							if(procedure.getProcedureID().equals(procedureDTO.getProcedureName().getId())) {
								procedureDTO.setOldApprovedAmount(procedure.getNetApprovedAmount());
								break;
							}
						}
					}
				}
				
				for (DiagnosisDetailsTableDTO diagnosisDTO : diagnosisTableList) {
					for (PedValidation pedValidation : findPedValidationByPreauthKey) {
						if(pedValidation.getDiagnosisId().equals(diagnosisDTO.getDiagnosisId())) {
							diagnosisDTO.setOldApprovedAmount(pedValidation.getNetApprovedAmount());
							break;
						}
					}
				}
				}
			}
	
			Date date12 = new Date();
			DBCalculationService dbCalculationService = new DBCalculationService();
			Double insuredSumInsured = dbCalculationService.getInsuredSumInsured(
					reimbursementDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), reimbursementDTO
							.getPolicyDto().getKey(),reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			Date date13 = new Date();
			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY INSURED SUM INSURED PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date12,  date13));

			Map<Integer, Object> detailsMap = new HashMap<Integer, Object>();
			
//			if(null != reimbursementDTO && null != reimbursementDTO.getNewIntimationDTO() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto() 
//					&& null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType()
//					&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType().getKey().equals(ReferenceTable.NON_NETWORK_HOSPITAL_TYPE_ID))
//			{
//				String cityClass = createRodService.getHospitalCityClass(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
//				reimbursementDTO.getNewIntimationDTO().getHospitalDto()
//				.getRegistedHospitals().setCityClass(cityClass);
//				
//			}
			Long policyKey = reimbursementDTO.getPolicyDto().getKey();
			
			Long insuredKey = reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey();
			
			String policyInsuredAgeingFlag = dBCalculationService.getPolicyInsuredAgeingFlag(policyKey,insuredKey);
			
			reimbursementDTO.setPolicyInsuredAgeingFlag(policyInsuredAgeingFlag);
			
			if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
			{
			Intimation intimation = intimationService
					.getIntimationByKey(claimByKey.getIntimation().getKey());
			reimbursementDTO.setDocRecievedDate(intimation.getAdmissionDate());
			
			}
			else if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
			Date docRecievedDate = dBCalculationService.getDocRecievedDate(claimByKey.getKey());
			reimbursementDTO.setDocRecievedDate(docRecievedDate);
			}
	
			if(reimbursementObjectByKey.getSectionCategory() != null){
				
				Date date14 = new Date();
				
				if(ReferenceTable.getGMCProductList().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
					insuredSumInsured = dbCalculationService.getInsuredSumInsuredForGMC(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(),
							reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getSectionCode());
					detailsMap = dbCalculationService
							.getHospitalizationDetailsForGMC(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
				}else{
					detailsMap = dbCalculationService
							.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
				}
				
				Date date15 = new Date();
				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY HOSPITALIZATION DETAILS PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date14,  date15));

			}else{
				
				Long sectionCategory = 0l;
				if(reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.STAR_CARDIAC_CARE_POLICY) || reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.DIABETES_INDIVIDUAL_POLICY) || reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.DIABETES_FLOATER_POLICY))
				{
					sectionCategory = 1l;
				}
				
				Date date14 = new Date();
				if(ReferenceTable.getGMCProductList().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
					insuredSumInsured = dbCalculationService.getInsuredSumInsuredForGMC(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(),
							reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getSectionCode());
					detailsMap = dbCalculationService
							.getHospitalizationDetailsForGMC(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,"0");
				}else{
					
					String policyPlan = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null ? reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() : "0";
					
					/*if(ReferenceTable.MEDI_CLASSIC_BASIC_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) || ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {*/
					if(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
							&& (((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
									|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
									|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
							|| ((SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
									&& reimbursementDTO.getNewIntimationDTO().getPolicy().getProductType().getKey().equals(ReferenceTable.INDIVIDUAL_POLICY)))) {
					policyPlan = reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() != null ? reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() : "0";
					}
					
					detailsMap = dbCalculationService
							.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,policyPlan);
				}
				
				Date date15 = new Date();
				
				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY HOSPITALIZATION DETAILS PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date14,  date15));

			}
			
			if(detailsMap != null && detailsMap.get(15) != null){
//				reimbursementDTO.setAmbulanceLimitAmount((Double)detailsMap.get(15));
			}

			reimbursementDTO = getProrataFlagFromProduct(reimbursementDTO);
			
			if(reimbursementObjectByKey.getProrataDeductionFlag() != null) {
				reimbursementDTO.setProrataDeductionFlag(reimbursementObjectByKey.getProrataDeductionFlag());
			}
			
			/**
			 * product based variable is added to enable or disable the component in page level.
			 * This would be static. -- starts
			 * */
			//reimbursementDTO.setProductBasedProRata(reimbursementObjectByKey.getProrataDeductionFlag());
			//reimbursementDTO.setProductBasedPackage(reimbursementObjectByKey.getPackageAvailableFlag());
			//ends.
			reimbursementDTO.setPackageAvailableFlag(reimbursementObjectByKey.getPackageAvailableFlag());
			
			
	
			List<Long> documentSummaryKeys = new ArrayList<Long>();
			
			List<DMSDocumentDetailsDTO> dmsDocDetailList = getClaimsDMSList(claimByKey.getIntimation().getIntimationId());
			
			/**
			 * Fix for implemeting claims dms in bill entry screen.. -- starts
			 * **//*
			if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
			{
				for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
					if(null != claimByKey)
					{
						uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
						uploadDocumentDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
					}
				}
			}*/
			
			/**
			 * Added for enabling view documents in preauth screen while raising query -- fix starts.
			 * */
			if(null != claimByKey)
			{
				Date date17 = new Date();
				reimbursementDTO.setDmsDocumentDTOList(dmsDocDetailList);
				Date date18 = new Date();
				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY CLAIMS DMS LIST FETCH %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date17,  date18));

			}
			/**
			 * Added for enabling view documents in preauth screen while raising query -- fix ends
			 * */
			Double productBasedAmbulanceAmt = getProductBasedAmbulanceAmt(tableDTO.getRodKey());
	
			List<UploadDocumentDTO> rodBillSummaryDetails = rodService
					.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);
			if(rodBillSummaryDetails != null){
				for (UploadDocumentDTO uploadDocumentDTO : rodBillSummaryDetails) {
					uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
				}
			}
			
			for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
						/*if(null != reimbursementObjectByKey)
						{
							uploadDocumentDTO.setIntimationNo(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId());
							uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfAdmission()));
							uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfDischarge()));
							uploadDocumentDTO.setInsuredPatientName(reimbursementObjectByKey.getClaim().getIntimation().getInsuredPatientName());
						}*/
				
				/**
				 * Fix for implemeting claims dms in bill entry screen.. -- starts
				 * **/
				if(null != claimByKey)
				{
					uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
					uploadDocumentDTO.setDmsDocumentDTOList(dmsDocDetailList);
				}
				
				
				
				documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
				uploadDocumentDTO.setStatus(true);
				Date date19 = new Date();
				List<RODBillDetails> billEntryDetails = rodService
						.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
				Date date20 = new Date();
				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY BILL ENTRY DETAILS LIST %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date19,  date20));

				List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
				if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
					for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
						/*
						 * <<<<<<< HEAD
						 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
						 * uploadDocumentDTO)); =======
						 */
						dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
								uploadDocumentDTO));
						// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
					}
				}
				/*
				 * uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
				 * .get(8));
				 */
				uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
						.get(8));
				uploadDocumentDTO
						.setProductBasedICURent((Double) detailsMap.get(9));
				
				Product product = reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct();
				if(product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey()) && 
						reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
					uploadDocumentDTO
					.setProductBasedRoomRent(0d);
					uploadDocumentDTO
								.setProductBasedICURent(0d);
				}
				/*uploadDocumentDTO.setProductBasedAmbulanceAmt((Double) detailsMap
						.get(15));*/
				uploadDocumentDTO.setProductBasedAmbulanceAmt(productBasedAmbulanceAmt);
				uploadDocumentDTO.setStatus(false);
				uploadDocumentDTO.setBillEntryDetailList(dtoList);
				uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
				uploadDocumentDTO.setRodKey(reimbursementObjectByKey.getKey());
				uploadDocumentDTO.setStrUserName(tableDTO.getUsername());
				
			}
			
			/*List<UploadDocumentDTO> rodBillSummaryDetails = rodService
					.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);
			if(rodBillSummaryDetails != null){
				for (UploadDocumentDTO uploadDocumentDTO : rodBillSummaryDetails) {
					uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
				}
			}*/
			
			reimbursementDTO.getUploadDocDTO().setBillingWorkSheetUploadDocumentList(rodBillSummaryDetails);
			Double totalBilledAmount = reimbursementService
					.getTotalBilledAmount(documentSummaryKeys);
			
			reimbursementDTO.setAmountRequested(totalBilledAmount != null ? String
					.valueOf(totalBilledAmount.intValue()) : "0");
			reimbursementDTO.setAmountConsidered(totalBilledAmount != null ? String
					.valueOf(totalBilledAmount.intValue()) : "0");
			reimbursementDTO
					.setInitialAmountConsidered(totalBilledAmount != null ? String
							.valueOf(totalBilledAmount.intValue()) : "0");
			reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
			//reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
		//	reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
	
			Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
					.getIntimation().getHospital());
			ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
					.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
			if(hospitalById != null){
				
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalState(hospitalById.getState());
				updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
				updateHospitalDetails.setPanNumber(hospitalById.getPanNumber());
				updateHospitalDetails.setHospitalTypeId(hospitalById.getHospitalType().getKey());
				//updateHospitalDetails.setInpatientBeds(hospitalById.getInpatientBeds() != null ? String.valueOf(hospitalById.getInpatientBeds()) : "0");
				updateHospitalDetails.setHospitalName(hospitalById.getName());
				updateHospitalDetails.setHospitalPhoneNo(hospitalById.getPhoneNumber());
				updateHospitalDetails.setHopitalRegNumber(hospitalById.getRegistrationNumber());
				updateHospitalDetails.setHospitalPincode(hospitalById.getPincode());
				updateHospitalDetails.setOtFacilityFlag(hospitalById.getOtFacilityFlag());
				updateHospitalDetails.setIcuFacilityFlag(hospitalById.getIcuFacilityFlag());
				updateHospitalDetails.setHospitalAddress1(hospitalById.getAddress());
	
			}
			
			List<MedicalVerificationDTO> medicalDTO = new ArrayList<MedicalVerificationDTO>();
			List<TreatmentQualityVerificationDTO> treatmentDTO = new ArrayList<TreatmentQualityVerificationDTO>();
			List<ClaimVerification> claimVerificationByReimbKey = reimbursementService
					.getClaimVerificationByReimbKey(reimbursementObjectByKey
							.getKey());
			if (claimVerificationByReimbKey != null) {
				MedicalVerificationDTO medicalVerifyDTO = null;
				for (ClaimVerification claimVerification : claimVerificationByReimbKey) {
					if (claimVerification.getVerificationType() != null
							&& claimVerification.getVerificationType()
									.toLowerCase().equalsIgnoreCase("medical")) {
	
						medicalVerifyDTO = new MedicalVerificationDTO();
						List<SelectValue> itemIds = medicalContainer.getItemIds();
						if (itemIds != null && !itemIds.isEmpty()) {
							for (SelectValue selectValue : itemIds) {
								if (claimVerification.getVerificationTypeId()
										.equals(selectValue.getId())) {
									medicalVerifyDTO.setDescriptionId(selectValue
											.getId());
									medicalVerifyDTO.setDescription(selectValue
											.getValue());
									break;
								}
							}
						}
						medicalVerifyDTO.setKey(claimVerification.getKey());
						medicalVerifyDTO.setRemarks(claimVerification
								.getMedicalRemarks());
						medicalVerifyDTO.setVerifiedFlag(claimVerification
								.getVerifiedFlag());
	
						medicalDTO.add(medicalVerifyDTO);
					} else if (claimVerification.getVerificationType() != null
							&& claimVerification.getVerificationType()
									.toLowerCase().equalsIgnoreCase("treatment")) {
	
						TreatmentQualityVerificationDTO treatmentVerifyDTO = new TreatmentQualityVerificationDTO();
						List<SelectValue> itemIds = treatmentContainer.getItemIds();
						if (itemIds != null && !itemIds.isEmpty()) {
							for (SelectValue selectValue : itemIds) {
								if (claimVerification.getVerificationTypeId()
										.equals(selectValue.getId())) {
									treatmentVerifyDTO.setDescriptionId(selectValue
											.getId());
									treatmentVerifyDTO.setDescription(selectValue
											.getValue());
									break;
								}
							}
						}
						treatmentVerifyDTO.setKey(claimVerification.getKey());
						treatmentVerifyDTO.setRemarks(claimVerification
								.getMedicalRemarks());
						treatmentVerifyDTO.setVerifiedFlag(claimVerification
								.getVerifiedFlag());
	
						treatmentDTO.add(treatmentVerifyDTO);
					}
				}
			}
			if (claimByKey.getClaimType() != null
					&& claimByKey.getClaimType().getKey() != null
					&& claimByKey.getClaimType().getKey()
							.equals(ReferenceTable.CLAIM_TYPE_CASHLESS_ID)) {
				
				
				reimbursementDTO.setIsCashlessType(true);
				
	            Preauth previousPreauth = getPreviousPreauth(claimByKey.getKey());
	            reimbursementDTO
				.setTreatmentRemarksList(getTreatmentRemarksHistory(claimByKey.getKey()));
				
				if(previousPreauth != null) {
					reimbursementDTO.setPreauthKey(previousPreauth.getKey());
				}
			}
			
			reimbursementDTO.getPreauthMedicalDecisionDetails()
					.setMedicalVerificationTableDTO(medicalDTO);
			reimbursementDTO.getPreauthMedicalDecisionDetails()
					.setTreatmentVerificationDTO(treatmentDTO);
			reimbursementDTO.getPreauthDataExtractionDetails()
					.setReasonForAdmission(
							claimByKey.getIntimation().getAdmissionReason());
			reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
					reimbursementObjectByKey.getKey());
	
			if (reimbursementObjectByKey.getStatus().getKey()
					.equals(ReferenceTable.BILLING_REFER_TO_MEDICALA_APPROVER)
					|| reimbursementObjectByKey
							.getStatus()
							.getKey()
							.equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER)) {
				Long medicalApproverKey = reimbursementService
						.getLatestMedicalApproverKey(reimbursementObjectByKey.getKey());
				MedicalApprover medicalApprover = reimbursementService.getMedicalApproverByKey(medicalApproverKey);
				if (medicalApprover != null) {
					reimbursementDTO.setPreviousRemarks(medicalApprover
							.getReferringRemarks());
					reimbursementDTO.setPreviousReasonForReferring(medicalApprover
							.getReasonForReferring());
					
					if(medicalApprover.getReferringRemarks() == null){
						reimbursementDTO.setPreviousRemarks(medicalApprover.getApproverReply());
					}
					reimbursementDTO.setMedicalApproverKey(medicalApproverKey);
				}
				
				if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER)){
					reimbursementDTO.setIsReplyToFA(true);
				}
				
				reimbursementDTO.setIsReferToMedicalApprover(true);
			}
			
			if(reimbursementObjectByKey.getStatus().getKey()
					.equals(ReferenceTable.CLAIM_REQUEST_ESCALATION_STATUS)) {
				PreauthEscalate preauthEscalate = reimbursementService.getEscalateByClaimKey(reimbursementObjectByKey.getClaim().getKey());
				reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEscalateRemarks());
				reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEscalateRemarks());
				reimbursementDTO.getPreauthMedicalDecisionDetails().setEscalateRemarks(preauthEscalate.getEscalateRemarks());
				reimbursementDTO.setIsEscalateReplyEnabled(true);
			}else if(reimbursementObjectByKey.getStatus().getKey()
					.equals(ReferenceTable.CLAIM_REQUEST_ESCALATION_REPLY_STATUS)) {
				PreauthEscalate preauthEscalate = reimbursementService.getEscalateByClaimKey(reimbursementObjectByKey.getClaim().getKey());
				reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEsclateReplyRemarks());
				reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEsclateReplyRemarks());
				reimbursementDTO.getPreauthMedicalDecisionDetails().setEscalateReply(preauthEscalate.getEsclateReplyRemarks());
				reimbursementDTO.setIsEscalateReplyEnabled(false);
			}
			else if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.PROCESS_CLAIM_REQUEST_DISAPPROVE_REJECT_STATUS)){
				ReimbursementRejectionDto reimbursementRejectionByKey = reimbursementRejectionService.getReimbursementRejectionByKey(reimbursementObjectByKey.getKey());
				if(reimbursementRejectionByKey != null){
				    reimbursementDTO.getPreauthMedicalDecisionDetails().setRejectionRemarks(reimbursementRejectionByKey.getDisapprovedRemarks());
				}
			}else if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.PROCESS_CLAIM_REQUEST_QUERY_REJECT_STATUS)){
				ReimbursementQuery reimbursementyQueryByRodKey = reimbursementQuerySerice.getReimbursementyQueryByRodKey(reimbursementObjectByKey.getKey());
				
				if(reimbursementyQueryByRodKey != null){
					reimbursementDTO.getPreauthMedicalDecisionDetails().setQueryRemarks(reimbursementyQueryByRodKey.getRejectionRemarks());
				}
			}else if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.UPLOAD_INVESIGATION_COMPLETED)
					|| reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.INITIATE_INVESTIGATION_DIS_APPROVED)){
				reimbursementDTO.getPreauthMedicalDecisionDetails().setApprovalRemarks("-");
				Investigation investigation = investigationService.getInvestigationByTransactionKey(reimbursementObjectByKey.getKey());
				if(investigation != null){
					reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(investigation.getRemarks());
				}
			}
	
			
			setCategoryFlag(reimbursementObjectByKey, reimbursementDTO);
	
			if (!reimbursementDTO.getHospitalizaionFlag()) {
				reimbursementDTO = setHospitalizationAmount(reimbursementDTO);
			}
	
			setPreAndPostHopitalizationAmount(reimbursementDTO);
	
			if (reimbursementObjectByKey.getStatus().getKey() != null
					&& reimbursementObjectByKey.getStatus().getKey()
							.equals(ReferenceTable.ZONAL_REVIEW_REJECTION_STATUS)) {
				reimbursementDTO.getPreauthMedicalProcessingDetails()
						.setApprovalRemarks(
								reimbursementObjectByKey.getRejectionRemarks());
			} else if (reimbursementObjectByKey.getStatus().getKey() != null
					&& reimbursementObjectByKey.getStatus().getKey()
							.equals(ReferenceTable.ZONAL_REVIEW_QUERY_STATUS)) {
				//ReimbursementQuery reimbursementQueryByReimbursmentKey = reimbursementService
				//		.getReimbursementQueryByReimbursmentKey(reimbursementObjectByKey
				//				.getKey());
				reimbursementDTO.setIsZonalReviewQuery(true);
				// reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(reimbursementQueryByReimbursmentKey
				// != null ? reimbursementQueryByReimbursmentKey.getQueryRemarks() :
				// "");
			} else if (reimbursementObjectByKey.getStatus().getKey() != null
					&& reimbursementObjectByKey.getStatus().getKey()
							.equals(ReferenceTable.ZONAL_REVIEW_APPROVE_STATUS)) {
				reimbursementDTO.getPreauthMedicalProcessingDetails()
						.setApprovalRemarks(
								reimbursementObjectByKey.getApprovalRemarks());
			}
			if(claimByKey.getStatus() != null) {
				if(claimByKey.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS) ||  claimByKey.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS)) {
					reimbursementDTO.setIsWithDrawn(true);
				}
			}
			Boolean rejectionExistOrNot = acknowledgementDocumentsReceivedService.isRejectionExistOrNot(reimbursementObjectByKey.getKey());
	        reimbursementDTO.setIsRejectionROD(rejectionExistOrNot);
			reimbursementDTO.setFvrCount(intimationService.getFVRCount(reimbursementDTO.getNewIntimationDTO().getKey())); 
			
			Date date21 = new Date();
			loadRRCRequestValues(reimbursementDTO,insuredSumInsured,SHAConstants.CLAIM_REQUEST);
			Date date22 = new Date();
			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY LOAD RRC REQUEST VALUES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date21,  date22));

			
			if(reimbursementDTO.getPreauthMedicalDecisionDetails().getInvestigatorCode() != null){
				TmpInvestigation tmpInvestigationByInvestigatorCode = investigationService.getTmpInvestigationByInvestigatorCode(reimbursementDTO.getPreauthMedicalDecisionDetails().getInvestigatorCode());
				reimbursementDTO.getPreauthMedicalDecisionDetails().setInvestigatorName(tmpInvestigationByInvestigatorCode);
				reimbursementDTO.getPreauthMedicalDecisionDetails().setInvestigationReviewRemarks(reimbursementObjectByKey.getInvestigatorRemarks());
				reimbursementDTO.getPreauthMedicalDecisionDetails().setInvestigationReportReviewed(true);
			}
	
			String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
			if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
				String get64vbStatus = PremiaService.getInstance().get64VBStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), reimbursementDTO.getNewIntimationDTO().getIntimationId());
				if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
					reimbursementDTO.setIsDishonoured(true);
				}  else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
					reimbursementDTO.setIsPending(true);
				}
			}
			Date date23 = new Date();
			reimbursementDTO.setSittingsAmount(dbCalculationService.getDialysisAmount(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
		
			Map<String, Integer> productBenefitFlag = dbCalculationService.getProductBenefitFlag(reimbursementObjectByKey.getClaim().getKey(), reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey());
			
			if(productBenefitFlag.get(SHAConstants.PRE_HOSP_FLAG).equals(0)) {
				reimbursementDTO.setIsPreHospApplicable(false);
			}
			
			if(productBenefitFlag.get(SHAConstants.POST_HOSP_FLAG).equals(0)) {
				reimbursementDTO.setIsPostHospApplicable(false);
			}
			
			if(productBenefitFlag.get(SHAConstants.LUMP_SUM_FLAG).equals(1)) {
				reimbursementDTO.setIsLumpsumApplicable(true);
			}
			
			if(productBenefitFlag.get(SHAConstants.HOSPITALCASH_FLAG).equals(1)) {
				reimbursementDTO.setIsHospitalCashApplicable(true);
			}
			
			if(productBenefitFlag.get(SHAConstants.PATIENTCARE_FLAG).equals(1)) {
				reimbursementDTO.setIsPatientCareApplicable(true);
			}
			
			//IMSSUPPOR-28847
			if(productBenefitFlag.get(SHAConstants.OTHER_BENEFITS_FLAG).equals(1)) {
				reimbursementDTO.setIsOthrBenefitApplicable(true);
			}
			
			Date date24 = new Date();
			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY GET DIALYSIS AMOUT PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date23,  date24));

			if(reimbursementObjectByKey.getStatus() != null && !(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.BILLING_REFER_TO_MEDICALA_APPROVER) || reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER))) {
				if(reimbursementDTO.getIsReverseAllocation()) {
					reimbursementDTO.setIsReverseAllocation(false);
				}
			}
	
			/* maternity flag
			 * from db
			 */
			Date date27 = new Date();
			//String maternityFlag=dbCalculationService.getMaternityFlagForProduct(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY MATERNITY FLAG  PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date27, new Date()));

//			if(maternityFlag.equalsIgnoreCase("Y")){
//				reimbursementDTO.setMaternityFlag(true);
//			}
			
			Date date28 = new Date();
			 Boolean queryReceivedStatusRod = reimbursementQuerySerice.isQueryReceivedStatusRod(reimbursementObjectByKey.getKey());
			 
				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY QUERY RECEIVED ROD %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));

			 
			 if(queryReceivedStatusRod){
				 reimbursementDTO.setIsQueryReceived(true);
			 }
			
			reimbursementDTO.setIsReverseAllocation(false);
			//Date date29 = new Date();
			Map<String, String> popupMessages = dbCalculationService.getPOPUPMessages(reimbursementDTO.getPolicyKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY POPUP MESSAGE PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));
			
			reimbursementDTO.setPopupMap(popupMessages);
			List<String> popupSIRestrication = calcService.getSIRestrication(reimbursementDTO.getNewIntimationDTO().getIntimationId(),reimbursementDTO.getNewIntimationDTO().getKey(), reimbursementDTO.getPolicyKey());
			reimbursementDTO.setPopupSIRestrication(popupSIRestrication);
			
			List<String> popupPrevClmInvest = calcService.getPreviousClaimInvestigatedAlert(reimbursementDTO.getPolicyKey(),reimbursementDTO.getNewIntimationDTO().getKey() );
		    reimbursementDTO.setPopupPrevClmInvst(popupPrevClmInvest);
			
			if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
					&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
				//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
					Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks(): SHAConstants.SUSPICIOUS_HOSP);
					reimbursementDTO.setSuspiciousPopupMap(suspiciousMap);
				//}
			}
			if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
					&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
				//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
					Map<String, String> nonPreferredsMap = SHAUtils.getNonPreferredMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
					reimbursementDTO.setNonPreferredPopupMap(nonPreferredsMap);
				//}
			}
			
		    try{
		    	ImsUser imsUser = tableDTO.getImsUser();
		    	
		    	
		    	if(imsUser != null){
		    		String[] userRoleList = imsUser.getUserRoleList();
		    		
		    		WeakHashMap<String, Object> escalateValidation = SHAUtils.getEscalateValidation(userRoleList);
		    		
					if((Boolean)escalateValidation.get(SHAConstants.RMA6)){
						reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA6(true);
					}else if((Boolean)escalateValidation.get(SHAConstants.RMA5)){
						reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA5(true);
					}
					else if((Boolean) escalateValidation.get(SHAConstants.RMA4)){
						reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA4(true);
					}else if((Boolean) escalateValidation.get(SHAConstants.RMA3)){
						reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA3(true);
					}else if((Boolean) escalateValidation.get(SHAConstants.RMA2)){
						reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA2(true);
					}else if((Boolean) escalateValidation.get(SHAConstants.RMA1)){
						reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA1(true);
					} 
		    		
		    	}
		    	
		    }catch(Exception e){
		    	e.printStackTrace();
		    }
			

//<<<<<<< HEAD
//			reimbursementDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(reimbursementDTO.getNewIntimationDTO().getAdmissionDate(), reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
			Date date15  = new Date();
//=======

//			reimbursementDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(reimbursementDTO.getNewIntimationDTO().getAdmissionDate(), reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
		    String policyYear = reimbursementDTO.getNewIntimationDTO().getPolicyYear();
		    if(policyYear != null){
		    	String intValue = policyYear.replaceAll("[^0-9]", "");
		    	Integer policyAgeing = SHAUtils.getIntegerFromStringWithComma(intValue);
		    	reimbursementDTO.setAdmissionDatePopup(policyAgeing != null ? policyAgeing.equals(0) ? true : false :false);
		    }
		    
		    

			reimbursementDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey()));
			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY PEQ QUERY SERVICE PED INTIATED %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date15,  new Date()));
			
			reimbursementDTO.setIsPEDInitiatedForBtn(reimbursementDTO.getIsPEDInitiated());
			
			//CR  R1086
			if(reimbursementDTO.getIsPEDInitiated()){
				boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				reimbursementDTO.setInsuredDeleted(isInsuredDeleted);
				
				//CR R1156
				boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				reimbursementDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);
			}
			
			if(reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
					&& reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_INSURED)){
				Date date17 = new Date();
//				Boolean isPedWatchList = pedQueryService.isTaskAvailableInWatchListForIntimation(reimbursementDTO.getNewIntimationDTO().getIntimationId());
				Boolean isPedWatchList = preauthService.getDBTaskForPreauth(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId(), SHAConstants.PED_WATCHLIST_CURRENT_QUEUE);
				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY PEQ WATCH LIST BPMN %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date17,  new Date()));
				reimbursementDTO.setIsPedWatchList(isPedWatchList);
			}
			
			if(reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest() != null && reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest().equalsIgnoreCase("Y")) {
					reimbursementDTO.setIsReconsiderationRequest(true);
			}
			
			List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
			List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			
			reimbursementDTO.setInsuredPedDetails(pedByInsured);
			reimbursementDTO.setApprovedPedDetails(approvedPedByInsured);
			reimbursementDTO.setSearchFormDTO(tableDTO.getSearchDTO());
			//SHAUtils.setDefaultCopayValue(reimbursementDTO);

			if(reimbursementObjectByKey != null && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag().equalsIgnoreCase("Y")) {
				 reimbursementDTO.setRodTotalClaimedAmount(reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d);
			 }

			
			if(reimbursementObjectByKey != null && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag().equalsIgnoreCase("Y")) {
				 reimbursementDTO.setRodTotalClaimedAmount(reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d);
			 }
			
			 if(reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)
					 && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
					 && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
			 
					 if(hospitalById != null){
							Boolean hospitalDiscount = SHAUtils.isHospitalDiscount(hospitalById);
							reimbursementDTO.setIsHospitalDiscountApplicable(hospitalDiscount);
					 }
			 }
			 
			 if(reimbursementDTO.getNewIntimationDTO() != null && reimbursementDTO.getNewIntimationDTO().getInsuredPatient() != null &&
					 reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
					Long claimCount = preauthService.getClaimCount(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
					if(claimCount != null){
						reimbursementDTO.setClaimCount(claimCount);
					}
				}
			 
				Date policyFromDate = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
				
				Date admissionDate = reimbursementDTO.getNewIntimationDTO().getAdmissionDate();
				
			
//				bean.getPolicyDto().getPolicyType();
				Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
				if(diffDays != null && diffDays<90){
					reimbursementDTO.setIs64VBChequeStatusAlert(true);
				}
				reimbursementDTO.setDbOutArray(tableDTO.getDbOutArray());
				
				//gmc
				Intimation intimation = claimByKey.getIntimation();
				Long mainNo = 0L;
				if(intimation.getInsured().getDependentRiskId() !=null){
					mainNo = intimation.getInsured().getDependentRiskId();
				}else{
					mainNo = intimation.getInsured().getInsuredId();
				}
				
				
//				CoorporateBuffer buffer = masterService.getBufferbyinsuerdNo(intimation.getInsured().getInsuredId());
//				Map<String, Double> values = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_CB,intimation.getPolicy().getPolicyNumber(),intimation.getInsured().getKey(),mainNo);
				
//				if(values != null && !values.isEmpty()){
//					if(values.get(SHAConstants.LN_POLICY_BUFFER_SI) != null){
//						reimbursementDTO.getPreauthDataExtractionDetails().setCorpBufferSI(values.get(SHAConstants.LN_POLICY_BUFFER_SI));	
//					}
//					if(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT) != null){
//						reimbursementDTO.getPreauthDataExtractionDetails().setCorpBufferUtilisedAmt(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT));	
//					}
//					if(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) != null){
//						reimbursementDTO.getPreauthDataExtractionDetails().setCorpBufferLimit(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT));	
//					}
//					if(values.get(SHAConstants.LN_INSURED_UTIL_AMT) != null &&
//							values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) !=null){
//						Double avlbBalance = values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) - values.get(SHAConstants.LN_INSURED_UTIL_AMT);
//						reimbursementDTO.getPreauthDataExtractionDetails().setCorpBufferAvalBal(avlbBalance);
//					}		
//				}
//				if(buffer !=null && buffer.getAllocatedAmount() !=null){
//					reimbursementDTO.getPreauthDataExtractionDetails().setCorpBufferAllocatedClaim(buffer.getAllocatedAmount().intValue());
//					reimbursementDTO.getPreauthDataExtractionDetails().setBufferType(buffer.getBufferType());
//				}
				
				Boolean isZUAQueryAvailable = masterService.getZUAQueryDetails(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());		
				if(null != isZUAQueryAvailable){
					
					reimbursementDTO.setIsZUAQueryAvailable(isZUAQueryAvailable);
				}

				Boolean policyValidation = policyService.getPolicyValidationObject(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
				reimbursementDTO.setIsPolicyValidate(policyValidation);
				
				Product product = reimbursementDTO.getNewIntimationDTO().getPolicy()
						.getProduct();
				if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())
						 && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
					List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsDTOForReimbursement = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(reimbursementObjectByKey.getKey());
					
					if(updateOtherClaimDetailsDTOForReimbursement != null){
						
						Integer admissionAmt = 0;
						
						for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsDTOForReimbursement) {
							if(updateOtherClaimDetailDTO.getAdmissibleAmount() != null){
								admissionAmt += updateOtherClaimDetailDTO.getAdmissibleAmount().intValue();
							}
						}
						
						reimbursementDTO.setOtherInsurerAdmissibleAmt(admissionAmt);
						
					}
				}
				
				reimbursementDTO.getPreauthMedicalDecisionDetails().setIsFvrIntiated(preauthService.getFVRStatusIdByClaimKey(reimbursementDTO.getClaimKey()));
				reimbursementDTO.getPreauthMedicalDecisionDetails().setIsFvrIntiatedMA(preauthService.getFVRStatusIdMAByClaimKey(reimbursementDTO.getClaimKey()));
				reimbursementDTO.getPreauthMedicalDecisionDetails().setIsFvrReplyReceived(preauthService.isFVRReplyReceived(reimbursementDTO.getClaimKey()));
				
				FieldVisitRequest fvrObj = preauthService.getPendingFVRByClaimKey(reimbursementDTO.getClaimKey());
				if(fvrObj != null && fvrObj.getFvrId() != null && !fvrObj.getFvrId().isEmpty()){
					String fvrPendingReason = starFaxFVRRevisedService.getFvrRequestPendingReason(fvrObj.getFvrId());   //TODO FVR ALERT R1050
					reimbursementDTO.setFVRPendingRsn("FVR kept pending due to "+ fvrPendingReason);					
					
				}	
				
				Boolean popupMessagesForProduct = dbCalculationService.getPOPUPMessagesForProduct(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(), claimByKey.getIntimation().getInsured().getKey(), claimByKey.getIntimation().getPolicy().getProduct().getKey());
				reimbursementDTO.setIsChangeInsumInsuredAlert(popupMessagesForProduct);
				reimbursementService.isFvrOrInvInitiatedinZMR(reimbursementDTO);
				reimbursementService.isFvrOrInvesOrQueryInitiated(reimbursementDTO);
				
				reimbursementDTO.setScreenName(tableDTO.getScreenName());
				
				/** R1139 **/			
				//Investigation investigation = investigationService.getInvestigationByTransactionKey(reimbursementDTO.getKey());
				
				Investigation investigation = investigationService.getLatestInvsByClaimKey(reimbursementDTO.getClaimDTO().getKey());
				if(investigation != null){
				
					List<AssignedInvestigatiorDetails> assignInvsList = reimbursementService.getInvestigationCountAlert(investigation.getKey());
				 
					if (assignInvsList != null && !assignInvsList.isEmpty()) {
						reimbursementDTO.getPreauthDataExtractionDetails().setIsMultipleInvsAssigned(Boolean.TRUE);
						int invsReplyCount = 0;
						int invesCompletedOrCancelCount = 0;
						Integer investigatorsCount = assignInvsList.size();
						reimbursementDTO.getPreauthDataExtractionDetails().setInvestigatorsCount(investigatorsCount);
						
						for (AssignedInvestigatiorDetails assignedInvestigatiorDetails : assignInvsList) {
							if(null != assignedInvestigatiorDetails.getStatus() && 
									ReferenceTable.UPLOAD_INVESIGATION_COMPLETED.equals(assignedInvestigatiorDetails.getStatus().getKey())||
									ReferenceTable.INVESTIGATION_GRADING.equals(assignedInvestigatiorDetails.getStatus().getKey())){
								invsReplyCount++;
							}
							if(null != assignedInvestigatiorDetails.getStatus() && 
									(ReferenceTable.UPLOAD_INVESIGATION_COMPLETED.equals(assignedInvestigatiorDetails.getStatus().getKey())||
									 ReferenceTable.PARALLEL_INVES_CANCELLED.equals(assignedInvestigatiorDetails.getStatus().getKey())) ||
									 ReferenceTable.INVESTIGATION_GRADING.equals(assignedInvestigatiorDetails.getStatus().getKey())){
								
								invesCompletedOrCancelCount++;
							}
						}
						if(investigatorsCount == invesCompletedOrCancelCount){
							reimbursementDTO.getPreauthDataExtractionDetails().setIsMultipleInvsAssigned(Boolean.FALSE);		
						}
						reimbursementDTO.getPreauthDataExtractionDetails().setInvsReplyReceivedCount(invsReplyCount);
					}	
				}
				reimbursementDTO.getPreauthMedicalDecisionDetails().setIsInvsInitiated(preauthService.isInvsInitiated(reimbursementDTO.getClaimDTO().getKey()));
				
				ViewFVRDTO additionalTrgptsDto = null;
		    	List<ViewFVRDTO> additionalTrgptsList = new ArrayList<ViewFVRDTO>();
		    	ViewFVRDTO trgptsDto = null;
		    	List<ViewFVRDTO> trgptsList = new ArrayList<ViewFVRDTO>();
		    	
		    	FieldVisitRequest fieldVisitRequest = viewFVRService.getFVRByClaimKey(reimbursementDTO.getClaimDTO().getKey());
		    	
		    	if(fieldVisitRequest != null){
		    		List<FvrTriggerPoint> triggerPointsList= reimbursementService.getFVRTriggerPoints(fieldVisitRequest.getKey());
		    		for (FvrTriggerPoint fvrTriggerPoint : triggerPointsList) {
		    			additionalTrgptsDto = new ViewFVRDTO();
		    			additionalTrgptsDto.setRemarks(fvrTriggerPoint.getRemarks());
		    			additionalTrgptsDto.setKey(fvrTriggerPoint.getKey());
		    			additionalTrgptsDto.setCreatedDate(fvrTriggerPoint.getCreatedDate());
		    			additionalTrgptsDto.setCreatedBy(fvrTriggerPoint.getCreatedBy());
		    			additionalTrgptsDto.setTriggerPointsAlreadyExist(Boolean.TRUE);
		    			additionalTrgptsList.add(additionalTrgptsDto);
		    		}
		    		
		    	}
		    	if(null != additionalTrgptsList && !additionalTrgptsList.isEmpty()){
		    		reimbursementDTO.getPreauthMedicalDecisionDetails().setFvrAdditionalTriggerPtsList(additionalTrgptsList);
		    		trgptsList.addAll(additionalTrgptsList);
		    		reimbursementDTO.getPreauthMedicalDecisionDetails().setFvrTriggerPtsList(trgptsList);
		    	}
		    	else
		    	{
		    		for(int i = 1; i<=5;i++){
		        		trgptsDto = new ViewFVRDTO();
		        		trgptsDto.setRemarks("");
		        		trgptsList.add(trgptsDto);
		        	}
		    		reimbursementDTO.getPreauthMedicalDecisionDetails().setFvrTriggerPtsList(trgptsList);
		    	}
		    	
		    	boolean sendToAssignInv = false;
				 
		    	String invBypassAllowed = dbCalculationService.bypassInvestigationAllowed(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
				sendToAssignInv = (SHAConstants.YES_FLAG).equalsIgnoreCase(invBypassAllowed) ? true : false;
				 
//				sendToAssignInv = true; //For Testing Purpose Need to Be commented  TODO 1227
				 
				reimbursementDTO.setDirectToAssignInv(sendToAssignInv);
		    	
		    Policy policy = reimbursementDTO.getNewIntimationDTO().getPolicy();
				
			if(ReferenceTable.getGMCProductList().containsKey(policy.getProduct().getKey())){
				List<SelectValue> duplicateInsuredDetails = dbCalculationService.getDuplicateInsuredDetails(policy.getKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				reimbursementDTO.setDuplicateInsuredList(duplicateInsuredDetails);
			}
			// R1152
			if (reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null
					&& reimbursementDTO.getNewIntimationDTO().getHospitalDto()
							.getCpuId() != null
					&& reimbursementDTO.getNewIntimationDTO().getPolicy()
							.getHomeOfficeCode() != null) {
				TmpCPUCode cpu = rodService.getCpuDetails(reimbursementDTO
						.getNewIntimationDTO().getHospitalDto().getCpuId());

				OrganaizationUnit branch = rodService
						.getBranchCode(reimbursementDTO.getNewIntimationDTO()
								.getPolicy().getHomeOfficeCode());

				if (cpu != null && branch != null
						&& branch.getCpuCode() != null) {
					if (!branch.getCpuCode().equalsIgnoreCase(
							cpu.getCpuCode().toString())) {
						reimbursementDTO.setIsGeoSame(Boolean.FALSE);
					}
				}
			}	
		    	
				//CR2019017 - Start
			if((reimbursementObjectByKey.getScoringFlag() ==  null || reimbursementObjectByKey.getScoringFlag().equals("N"))
					|| (claimByKey.getPpFlag() ==  null || claimByKey.getPpFlag().equals("N")) ){
				reimbursementDTO.setScoringClicked(false);
				reimbursementDTO.setIsSDEnabled(false);
			}else{
				reimbursementDTO.setScoringClicked(true);
				reimbursementDTO.setIsSDEnabled(preauthService.getScoringDetails(claimByKey.getIntimation().getKey()));
			}	
		    	
		    	reimbursementDTO.setIsValidationReq(preauthService.getReimbursementStatus(reimbursementDTO.getIntimationKey(), reimbursementDTO.getRodNumber()));
		    	
		    	/*if((reimbursementDTO.getStatusKey().intValue() == ReferenceTable.BILL_ENTRY_STATUS_KEY.intValue())){
		    		reimbursementDTO.setIsValidationReq(preauthService.getReimbursementStatus(reimbursementDTO.getIntimationKey(), reimbursementDTO.getRodNumber()));
				}else{
					reimbursementDTO.setIsValidationReq(false);
				}*/
				//CR2019017 - End
		    			    	
		    	String topAlertFlag = claimService.getTopUpPolicyDetails(reimbursementDTO.getPolicyDto().getPolicyNumber(),reimbursementDTO);
		    	reimbursementDTO.setTopUpPolicyAlertFlag(topAlertFlag);
		    	//CR2019202
				 Map<String, String> getFraudAlert = calcService.getFraudAlerts(reimbursementDTO.getNewIntimationDTO().getIntimationId());
				 if(getFraudAlert != null && !getFraudAlert.isEmpty()){
					 reimbursementDTO.setFraudAlertFlag(getFraudAlert.get(SHAConstants.FLAG) != null ? getFraudAlert.get(SHAConstants.FLAG) : "N");
					 reimbursementDTO.setFraudAlertMsg(getFraudAlert.get(SHAConstants.ALERT_MESSAGE) != null ? getFraudAlert.get(SHAConstants.ALERT_MESSAGE) : null);
				 }
				 
				 //Added For GLX2021032 
				 
				 if(reimbursementDTO.getPreauthDataExtractionDetails().getRemarksBillEntry() !=null){

					 reimbursementDTO.getPreauthDataExtractionDetails().setRemarksBillEntry(reimbursementObjectByKey.getRemarksBillEntry());
				 }

		    	//added for MA
		    	Long ackDocKey = createRodService
						.getLatestDocAcknowledgementKey(tableDTO.getRodKey());
				DocAcknowledgement docAcknowledgment = createRodService
						.getDocAcknowledgementBasedOnKey(ackDocKey);
//				Boolean isValidClaimForBilling = true;
				
				if(null != docAcknowledgment)
				{
					Claim objClaim = docAcknowledgment.getClaim();
					if(null != objClaim)
					{
						if((SHAConstants.YES_FLAG).equalsIgnoreCase(objClaim.getLegalFlag()))
						{
							isValidClaimForMA = false;
							view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
						}
					}
				}
				//CR2019217
				 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(reimbursementDTO.getNewIntimationDTO().getIntimationId()); 
				 if(icrAgent != null && !icrAgent.isEmpty()) {
						String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
						reimbursementDTO.setIcrAgentValue(agentScorePoint);
						//added for SM Points suggested by Sathish Sir added by Noufel
						String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
						reimbursementDTO.setSmAgentValue(smScorepoint);
				 }
				 if(reimbursementObjectByKey.getIcacFlag() != null ){
					 reimbursementDTO.setIcacProcessFlag(reimbursementObjectByKey.getIcacFlag());
				 }
			 //CR2019234
					if(reimbursementDTO != null && reimbursementDTO.getNewIntimationDTO().getIntimatedBy() != null && 
							reimbursementDTO.getNewIntimationDTO().getIntimatedBy().getId() != null && 
									reimbursementDTO.getNewIntimationDTO().getIntimatedBy().getId().toString().equalsIgnoreCase(SHAConstants.AGENT_CODE) 
							|| reimbursementDTO.getNewIntimationDTO().getIntimatedBy().getId().toString().equalsIgnoreCase(SHAConstants.SALES_MANAGER_CODE)){
						view.showInfoPopUp("This claim has been intimated by" + reimbursementDTO.getNewIntimationDTO().getIntimatedBy().getValue());
					}
				
					//added for hold claim issue in auto allocation
					if(reimbursementDTO.getStatusKey() != null){
						reimbursementDTO.setOldStatusKey(reimbursementDTO.getStatusKey());
					}
					if(tableDTO.getIsAutoAllocationTrue()){
						reimbursementDTO.setIsPreauthAutoAllocationQ(tableDTO.getIsAutoAllocationTrue());
					}
		    	if(isValidClaimForMA){
		    		if (
		    				(("Y").equalsIgnoreCase(docAcknowledgment.getProdHospBenefitFlag()))
		    						&& ("N").equalsIgnoreCase(docAcknowledgment
		    								.getHospitalisationFlag())
		    						&& ("N").equalsIgnoreCase(docAcknowledgment
		    								.getPartialHospitalisationFlag())
		    						&& ("N").equalsIgnoreCase(docAcknowledgment
		    								.getPreHospitalisationFlag())
		    						&& ("N").equalsIgnoreCase(docAcknowledgment
		    								.getPostHospitalisationFlag())
		    						&& ("N").equalsIgnoreCase(docAcknowledgment
		    								.getLumpsumAmountFlag())
		    						&& ("N").equalsIgnoreCase(docAcknowledgment
				    						.getPatientCareFlag())
				    				&& ("N").equalsIgnoreCase(docAcknowledgment
						    				.getHospitalCashFlag())) {
		    					showMedicalProcessClaimRequestBenefitsWizard(tableDTO,reimbursementDTO);
		    				} else {
		    					reimbursementDTO.setAuditFlag(masterService.getCVCAuditQryFlagByIntimationKey(reimbursementDTO.getNewIntimationDTO().getKey()));
		    					view.setProcessClaimRequest(ClaimRequestWizard.class, reimbursementDTO);
		    				}
//		    		view.setProcessClaimRequest(ClaimRequestWizard.class, reimbursementDTO);

//		    		if (
//		    				((("Y").equalsIgnoreCase(docAcknowledgment.getHospitalCashFlag())) || (("Y")
//		    						.equalsIgnoreCase(docAcknowledgment.getPatientCareFlag())))
//		    						&& ("N").equalsIgnoreCase(docAcknowledgment
//		    								.getHospitalisationFlag())
//		    		
//		    						&& ("N").equalsIgnoreCase(docAcknowledgment
//		    								.getPartialHospitalisationFlag())
//		    						&& ("N").equalsIgnoreCase(docAcknowledgment
//		    								.getPreHospitalisationFlag())
//		    						&& ("N").equalsIgnoreCase(docAcknowledgment
//		    								.getPostHospitalisationFlag())
//		    						&& ("N").equalsIgnoreCase(docAcknowledgment
//		    								.getLumpsumAmountFlag())) {
//		    					showMedicalProcessClaimRequestBenefitsWizard(tableDTO);
//		    				} else {
//		    					view.setProcessClaimRequest(ClaimRequestWizard.class, reimbursementDTO);
//		    				}
		    		 
		    	}
		    	
		    	List<NegotiationAmountDetails> negDtls = preauthService.getNegotiationDetails(reimbursementDTO.getNewIntimationDTO().getKey());
				NegotiationAmountDetails latestNegAmt = null;
				if(negDtls != null && !negDtls.isEmpty()){
					latestNegAmt = negDtls.get(0);
				}
				if(latestNegAmt != null){
					reimbursementDTO.getPreauthMedicalDecisionDetails().setNegotiationAmount(latestNegAmt.getNegotiatedAmt());
					reimbursementDTO.getPreauthMedicalDecisionDetails().setNegotiationMade(true);
				}
				
				/*IMSSUPPOR-28291*/
				if(reimbursementObjectByKey.getNonAllopathicApprAmt() != null){
					reimbursementDTO.setOldNonAllopathicApprovedAmt(reimbursementObjectByKey.getNonAllopathicApprAmt());
				}
				Long hospitalId = claimByKey.getIntimation().getHospital();
				Hospitals hospitalCode = hospitalService.getHospitalById(hospitalId);
				
				if(hospitalCode.getHospitalCode() != null) {
					String seriousDeficiency = dBCalculationService.getSeriousDeficiency(hospitalCode.getHospitalCode());
					if(seriousDeficiency != null && !seriousDeficiency.isEmpty() && 
							seriousDeficiency.equalsIgnoreCase(SHAConstants.YES_FLAG)) {
						
						view.showInfoPopUp("Serious Deficiency noted in <br>" +hospitalCode.getHospitalCode() + "-" +hospitalCode.getName() + "<br>" + "For Details View Serious Deficiency Button");
						
					}
				}
				
				
				if(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode() != null
						&& (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()).equals(SHAConstants.PRODUCT_CODE_78)) {
					//String seriousDeficiency = dBCalculationService.getSeriousDeficiency(hospitalCode.getHospitalCode());
					if(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getBuyBackPed() != null &&
							(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getBuyBackPed()).equals(SHAConstants.YES_FLAG)) {
						
						SHAUtils.showMessageBoxWithCaption("As Buy Back of PED cover is accepted, PED waiting period is <br>" + "reduced from 36 months to 12 months","Information");
						
					}
				}
				if(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode() != null
						&& (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()).equals(SHAConstants.PRODUCT_CODE_88)) {
					//String seriousDeficiency = dBCalculationService.getSeriousDeficiency(hospitalCode.getHospitalCode());
					if(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getBuyBackPed() != null &&
							(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getBuyBackPed()).equals(SHAConstants.YES_FLAG)) {
						
						SHAUtils.showMessageBoxWithCaption("As Buy Back of PED cover is accepted, PED waiting period is <br>" + "reduced from 36 months to 12 months","Information");
						
					}
				}

		    	log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> SHOW MEDICAL APPROVAL CLAIM REQUEST METHOD ENDED %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(startDate, new Date()));

			
		}
	}

	protected void showUploadInvestigaitonReports(
			@Observes @CDIEvent(MenuPresenter.UPLOAD_INVESTIGATION_REPORT) final ParameterDTO parameters) {
		SearchUploadInvesticationTableDTO tableDto = (SearchUploadInvesticationTableDTO) parameters
				.getPrimaryParameter();
		
		Long investigationKey = tableDto.getInvestigationKey();
		
		Investigation investigationobj = investigationService
				.getByInvestigationKey(investigationKey);
		
		Claim claimByKey = investigationobj.getClaim();
		ClaimDto claimDTO = null;
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			
			claimDTO.setNewIntimationDto(newIntimationDto);
			
		}
		if(null != investigationobj)
		{
			tableDto.setClaimBackgroundDetails(investigationobj.getClaimBackgroundDetails());
			tableDto.setFactsOfCase(investigationobj.getFactsOfCase());
			List<DraftTriggerPointsToFocusDetailsTableDto> investigationDetailsBasedOnInvestigationKey = investigationService.getInvestigationDetailsBasedOnInvestigationKey(investigationKey);
			tableDto.setInvestigatorTriggerPointsList(investigationDetailsBasedOnInvestigationKey);
			
		}
		
		
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(tableDto.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_UPLOAD_INVESTIGATION);
		
		tableDto.setRrcDTO(rrcDTO);
		
		// R1045
		tableDto.setPreauthDTO(new PreauthDTO());
		tableDto.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
		tableDto.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
		tableDto.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		tableDto.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		
		tableDto.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
		tableDto.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		Long hospital = claimByKey.getIntimation().getHospital();
		Hospitals hospitalById = hospitalService.getHospitalById(hospital);
		
		if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
			tableDto.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				tableDto.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
			}
		}
		
		
		
		//R1152
    	if(newIntimationDto.getHospitalDto() != null && newIntimationDto.getHospitalDto().getCpuId() != null && newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getHomeOfficeCode() != null){
			TmpCPUCode cpu = rodService.getCpuDetails(newIntimationDto.getHospitalDto().getCpuId());
			OrganaizationUnit branch = rodService.getBranchCode(newIntimationDto.getPolicy().getHomeOfficeCode());
			if(cpu != null && branch != null && branch.getCpuCode() != null){
				if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
					tableDto.setIsGeoSame(Boolean.FALSE);
				}
			}
		}
    	
    	tableDto.getPreauthDTO().getNewIntimationDTO().setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
		
		view.setUploadInvestigationReports(UploadInvestigationReportView.class,
				true, tableDto);
	}
	
	protected void showCloseClaimSearchBasedView(
			@Observes @CDIEvent(MenuPresenter.CLOSE_CLAIM_SEARCH_BASED_ROD_LEVEL) final ParameterDTO parameters){
		
		SearchCloseClaimTableDTORODLevel tableDTO = (SearchCloseClaimTableDTORODLevel) parameters.getPrimaryParameter();
		
		NewIntimationDto intimationDto = new NewIntimationDto();
	
		Boolean isCloseClaimValid = true;
		if(tableDTO.getIntimationkey() != null){
			Intimation intimation = intimationService.getIntimationByKey(tableDTO.getIntimationkey());
			intimationDto = intimationService
					.getIntimationDto(intimation);
			Claim claim = claimService.getClaimsByIntimationNumber(intimation.getIntimationId());
			
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claim);
			tableDTO.setClaimDto(claimDTO);
			
			List<Reimbursement> reimbursementByClaimKey = reimbursementService.getRembursementDetails(claim.getKey());
			//IMSSUPPOR-37576 rejection rod need stop close
			if(reimbursementByClaimKey != null && ! reimbursementByClaimKey.isEmpty() && reimbursementByClaimKey.size()==1){
					if(ReferenceTable.getRejectedRODKeys().containsKey(reimbursementByClaimKey.get(0).getStatus().getKey())){
						
						if(isCloseClaimValid){
							isCloseClaimValid = false;
							view.showErrorPopUp("Closing of claim is not possible. Since ROD is Rejected");
						}
					}	
			}
			
			Reimbursement reimbursement = reimbursementService.getLatestActiveROD(claim.getKey());
			if(reimbursement==null){
				Preauth preauth= preauthService.getLatestPreauthByClaim(claim.getKey());
				
				String diagnosisForPreauthByKey = "";
				if(preauth != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
					
				}
				tableDTO.setDiagnosis(diagnosisForPreauthByKey);
			}else{
				String diagnosisForPreauthByKey = "";
				if(reimbursement != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
					
				}
				tableDTO.setDiagnosis(diagnosisForPreauthByKey);
			}
			
		}
		
		
		tableDTO.setIntimationDto(intimationDto);
		if(isCloseClaimValid){
			view.setCloseClaimSearchBasedRODLevelView(CloseClaimRodLevelView.class, true, tableDTO);
		}
	}

	
	protected void showReopenClaimView(
			@Observes @CDIEvent(MenuPresenter.REOPEN_CLAIM_PAGE) final ParameterDTO parameters){
		
		SearchReOpenClaimRodLevelTableDTO tableDTO = (SearchReOpenClaimRodLevelTableDTO) parameters.getPrimaryParameter();
		
		NewIntimationDto intimationDto = new NewIntimationDto();
		
		Boolean isValid = true;
		
		if(tableDTO.getIntimationkey() != null){
			Intimation intimation = intimationService.getIntimationByKey(tableDTO.getIntimationkey());
			
			System.out.println("---Start time of intimationdto reopen-rod---"+System.currentTimeMillis()+" "+intimation.getIntimationId());

			intimationDto = intimationService
					.getIntimationDto(intimation);
			
			System.out.println("---End time of intimationdto reopen-rod---"+System.currentTimeMillis()+" "+intimation.getIntimationId());
			
            Claim claim = claimService.getClaimsByIntimationNumber(intimation.getIntimationId());
            
            if(claim.getStatus().getKey().equals(ReferenceTable.CLAIM_CLOSED_STATUS)){
            	
            	isValid = false;
            	view.showErrorPopUp("Reopen of ROD is not possible. Since Claim is already closed");
            	
            }
            
			
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claim);
			tableDTO.setClaimDto(claimDTO);
			
			Reimbursement reimbursement = reimbursementService.getLatestActiveROD(claim.getKey());
			if(reimbursement==null){
				Preauth preauth= preauthService.getLatestPreauthByClaim(claim.getKey());
				
				String diagnosisForPreauthByKey = "";
				if(preauth != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
					
				}
				tableDTO.setDiagnosis(diagnosisForPreauthByKey);
			}else{
				String diagnosisForPreauthByKey = "";
				if(reimbursement != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
					
				}
				tableDTO.setDiagnosis(diagnosisForPreauthByKey);
			}
			
		}
		
		
		tableDTO.setIntimationDto(intimationDto);
		
		if(isValid){
		view.setReopenClaimSearchBasedView(ReOpenRodLevelClaimView.class, true, tableDTO);
		}
		
	}
	
	
	protected void showCloseClaimInProcessView(
			@Observes @CDIEvent(MenuPresenter.CLOSE_CLAIM_IN_PROCESS) final ParameterDTO parameters){
		
		SearchCloseClaimTableDTORODLevel tableDTO = (SearchCloseClaimTableDTORODLevel) parameters.getPrimaryParameter();
		
		NewIntimationDto intimationDto = new NewIntimationDto();
		
		if(tableDTO.getIntimationkey() != null){
			Intimation intimation = intimationService.getIntimationByKey(tableDTO.getIntimationkey());
			intimationDto = intimationService
					.getIntimationDto(intimation);
            Claim claim = claimService.getClaimsByIntimationNumber(intimation.getIntimationId());
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claim);
			tableDTO.setClaimDto(claimDTO);
			
			Reimbursement reimbursement = reimbursementService.getLatestActiveROD(claim.getKey());
			if(reimbursement==null){
				Preauth preauth= preauthService.getLatestPreauthByClaim(claim.getKey());
				
				String diagnosisForPreauthByKey = "";
				if(preauth != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
					
				}
				tableDTO.setDiagnosis(diagnosisForPreauthByKey);
			}else{
				String diagnosisForPreauthByKey = "";
				if(reimbursement != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
					
				}
				tableDTO.setDiagnosis(diagnosisForPreauthByKey);
			}
			
		}
		tableDTO.setIntimationDto(intimationDto);
		
		view.setCloseClaimInProcessView(CloseClaimInProcessView.class, true, tableDTO);
		
	}
	
	
	
	protected void showCloseClaimPageView(
			@Observes @CDIEvent(MenuPresenter.CLOSE_CLAIM_PAGE) final ParameterDTO parameters){
		
		Boolean isCloseClaimValid = true;
		
		SearchCloseClaimTableDTO tableDTO = (SearchCloseClaimTableDTO) parameters.getPrimaryParameter();
		
		NewIntimationDto intimationDto = new NewIntimationDto();
		
		CloseClaimPageDTO closeClaimDto = new CloseClaimPageDTO();

		if(tableDTO.getIntimationkey() != null){
			
			Claim claim = claimService.getClaimByKey(tableDTO.getClaimKey());

			closeClaimDto.setClaimKey(tableDTO.getClaimKey());
			
			closeClaimDto.setClosedProvisionAmt(claim.getCurrentProvisionAmount());
			
			Intimation intimation = claim.getIntimation();
			intimationDto = intimationService
					.getIntimationDto(intimation);
          

			ClaimDto claimDTO = ClaimMapper.getInstance().getClaimDto(claim);
			
			closeClaimDto.setClaimDto(claimDTO);
			
			Reimbursement reimbursement = reimbursementService.getLatestActiveROD(claim.getKey());
			if(reimbursement==null){
				Preauth preauth= preauthService.getLatestPreauthByClaim(claim.getKey());
				
				String diagnosisForPreauthByKey = "";
				if(preauth != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
					
				}
				tableDTO.setDiagnosis(diagnosisForPreauthByKey);
				closeClaimDto.setDiagnosis(diagnosisForPreauthByKey);
			}else{
				String diagnosisForPreauthByKey = "";
				if(reimbursement != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
					
				}
				tableDTO.setDiagnosis(diagnosisForPreauthByKey);
				closeClaimDto.setDiagnosis(diagnosisForPreauthByKey);
			}
			
			List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
					.search(claim.getKey(), false);
			
			List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
			for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {

				previousPreAuthTableDTO.setRequestedAmt(preauthService
						.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
								previousPreAuthTableDTO.getClaimKey()));
				newList.add(previousPreAuthTableDTO);

			}
			
			closeClaimDto.setPreviousPreauthDetailsList(newList);
			
			
			List<CloseClaimTableDTO> closeClaimList = new ArrayList<CloseClaimTableDTO>();
		
			CloseClaimTableDTO closeClaim = new CloseClaimTableDTO();
			closeClaim.setInsuredPatientName(intimation.getInsuredPatientName());
			closeClaim.setStrDateOfAdmission(SHAUtils.formatDate(intimation.getAdmissionDate()));
			Long aCknowledgeNumberCountByClaimKey = createRodService.getACknowledgeNumberCountByClaimKey(claim.getKey());
			
			if(aCknowledgeNumberCountByClaimKey != null){
				closeClaim.setNumberOfRod(aCknowledgeNumberCountByClaimKey.intValue());
			}
			closeClaim.setProvisionAmount(claim.getCurrentProvisionAmount());
			closeClaim.setClaimStatus(claim.getStatus().getProcessValue());
			closeClaimList.add(closeClaim);
			
			closeClaimDto.setCloseClaimList(closeClaimList);
			
			List<ViewDocumentDetailsDTO> listDocumentDetails = ackDocReceivedService.listOfEarlierAckByClaimKey(claim.getKey(),0l);
			
			closeClaimDto.setRodDocumentDetailsList(listDocumentDetails);
			
			BeanItemContainer<SelectValue> referenceContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
			
			List<Preauth> preauthByClaimKey = preauthService.getPreauthByClaimKey(claim.getKey());
			
			Preauth latestPreauth = preauthService.getLatestPreauthDetails(claim.getKey());
			
			if(latestPreauth != null){
				SelectValue select = new SelectValue();
				select.setId(latestPreauth.getKey());
				if(latestPreauth.getEnhancementType() != null){
					select.setValue(latestPreauth.getPreauthId() +" - Enhancement");
				}else{
					select.setValue(latestPreauth.getPreauthId() +" - Preauth");
				}
				
				referenceContainer.addBean(select);
			}
			
			List<Reimbursement> reimbursementByClaimKey = reimbursementService.getRembursementDetails(claim.getKey());
			/*//IMSSUPPOR-37576 rejection rod need stop close
			if(reimbursementByClaimKey != null && ! reimbursementByClaimKey.isEmpty() && reimbursementByClaimKey.size()==1){
					if(ReferenceTable.getRejectedRODKeys().containsKey(reimbursementByClaimKey.get(0).getStatus().getKey())){
						
						if(isCloseClaimValid){
							isCloseClaimValid = false;
							view.showErrorPopUp("Closing of claim is not possible. Since ROD is Rejected");
						}
					}	
			}*/
			
			if(claim.getStatus().getKey().equals(ReferenceTable.CLAIM_CLOSED_STATUS)){
				
				isCloseClaimValid = false;
				view.showErrorPopUp("Closing of claim is not possible. Since Claim is already closed");
			}
			
			if(claim.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)){
				
				if(latestPreauth !=  null && latestPreauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_REJECT_STATUS)){
					if(isCloseClaimValid){
						isCloseClaimValid = false;
						view.showErrorPopUp("Closing of claim is not possible. Since Preauth is Rejected");
					}
				}
			}
			
//			List<DocAcknowledgement> listOfAcknowledgement = createRodService.getListOfAcknowledgement(claim.getKey());
			
			List<DocAcknowledgement> listOfAcknowledgement = createRodService.getNonCancelledAcknowledgement(claim.getKey());
			
			if(listOfAcknowledgement != null){
				for (DocAcknowledgement docAcknowledgement : listOfAcknowledgement) {
					if(docAcknowledgement.getRodKey() == null){
						if(isCloseClaimValid){
							isCloseClaimValid = false;
							view.showErrorPopUp("Closing of claim is not possible. Since Rod is not created for acknowledgement");
							break;
						}
					}
				}
			}
			
			if(reimbursementByClaimKey != null && ! reimbursementByClaimKey.isEmpty()){
				for (Reimbursement reimbursement2 : reimbursementByClaimKey) {
					if(ReferenceTable.getFinancialApprovalStatus().containsKey(reimbursement2.getStatus().getKey())){
						
						if(isCloseClaimValid){
							isCloseClaimValid = false;
							view.showErrorPopUp("Closing of claim is not possible. Since ROD is already Approved");
							break;
						}
					}	
				}
			}
			
			
		
			Boolean isRodPaymentRejected = reimbursementService.isAllRODPaymentRejected(claim.getKey());
			
			if(claim.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY) && !isRodPaymentRejected){
				
				List<Preauth> preauthList = preauthService.getPreauthListByClaimKey(claim.getKey());

				if(preauthList != null && preauthList.size() >1){
					Preauth lastPreauth = preauthList.get(0);
					if(! lastPreauth.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS)
							&& ! lastPreauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_PREAUTH_WITHDRAW_STATUS)
							&& ! lastPreauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_WITHDRAW_AND_REJECT)
							&& ! lastPreauth.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_AND_REJECT_STATUS)){						

						if(isCloseClaimValid)
						{
							isCloseClaimValid = false;
							view.showErrorPopUp("Closing of claim is not possible. Please Withdraw the preauth");
						}
					}
				}else if(preauthList != null && preauthList.size() == 1){
					Preauth lastPreauth = preauthList.get(0);
					if(lastPreauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_APPROVE_STATUS)){
						if(isCloseClaimValid){
						isCloseClaimValid = false;
						view.showErrorPopUp("Closing of claim is not possible. Please Withdraw the preauth");
					}
				}
			}
		}
			
//			for (DocAcknowledgement docAcknowledgement : docAckListByClaim) {
//				if(docAcknowledgement.getRodKey() == null){
//					
//					isCloseClaimValid = false;
//					view.showErrorPopUp("Closing of claim is not possible. ");
//				}
//			}
			
			
			if(claim.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY) && preauthByClaimKey != null && ! preauthByClaimKey.isEmpty() 
					&& reimbursementByClaimKey != null && ! reimbursementByClaimKey.isEmpty() && !isRodPaymentRejected){
				
				for (Reimbursement reimbursement2 : reimbursementByClaimKey) {
					if(!(ReferenceTable.getCancelRODKeys().containsKey(reimbursement2.getStatus().getKey())) && ! reimbursement2.getDocAcknowLedgement().getStatus().getKey().equals(ReferenceTable.CANCEL_ACKNOWLEDGEMENT_STATUS)){
						
						if(isCloseClaimValid){
								isCloseClaimValid = false;
								view.showErrorPopUp("Closing of claim is not possible. Please Process/Cancel and then trying Closing");
								break;
						}
					}
				}
				
				if(isCloseClaimValid){
					Boolean preauthApprovedStatus = preauthService.isPreauthApprovedStatus(intimation, claim);
					Boolean enhancementApprovedOrDownsize = preauthService.isEnhancementApprovedOrDownsize(intimation, claim);
					if(preauthApprovedStatus || enhancementApprovedOrDownsize){
						if(isCloseClaimValid){
							
								isCloseClaimValid = false;
								view.showErrorPopUp("Closing of claim is not possible. Please Withdraw the preauth");
							
						}
					}
				}
			}else if(claim.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY) && preauthByClaimKey != null && ! preauthByClaimKey.isEmpty() &&
					 !isRodPaymentRejected){
				
				Boolean preauthApprovedStatus = preauthService.isPreauthApprovedStatus(intimation, claim);
				Boolean enhancementApprovedOrDownsize = preauthService.isEnhancementApprovedOrDownsize(intimation, claim);
				if(preauthApprovedStatus || enhancementApprovedOrDownsize){
					if(isCloseClaimValid){
							isCloseClaimValid = false;
							view.showErrorPopUp("Closing of claim is not possible. Please Withdraw the preauth");
					
					}
				}
			}
			
			if(reimbursementByClaimKey != null && ! reimbursementByClaimKey.isEmpty()){
				for (Reimbursement reimbursementDetails : reimbursementByClaimKey) {
					if(ReferenceTable.CANCEL_ROD_KEYS.containsKey(reimbursementDetails.getStatus().getKey())){
						if(reimbursementDetails.getDocAcknowLedgement() != null 
								&& ! reimbursementDetails.getDocAcknowLedgement().getStatus().getKey().equals(ReferenceTable.CANCEL_ACKNOWLEDGEMENT_STATUS)){
							if(isCloseClaimValid){
								isCloseClaimValid = false;
								view.showErrorPopUp("Closing of claim is not possible. Please Cancel the Acknowledgement");
								break;
							}
						}
					}
				}
			}
			
			
			SelectValue select = null;
			for (Reimbursement reimbursement2 : reimbursementByClaimKey) {
				
				if(! ReferenceTable.CANCEL_ROD_KEYS.containsKey(reimbursement2.getStatus().getKey())){
					select = new SelectValue();
					select.setId(reimbursement2.getKey());
					select.setValue(reimbursement2.getRodNumber() + "- ROD");
					referenceContainer.addBean(select);
				}
			}
			
			closeClaimDto.setReferenceNoContainer(referenceContainer);
			
			BeanItemContainer<SelectValue> fileTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
			
			BeanItemContainer<SelectValue> beanContainer = masterService.getSelectValueContainer(ReferenceTable.ROD_UPLOAD_DOC_TABLE_FILE_TYPE);
			
			List<SelectValue> itemIds = beanContainer.getItemIds();
			for (SelectValue item : itemIds) {
				if(! item.getValue().contains("Bill") && ! item.getValue().contains("Bil")  && ! item.getValue().contains("Bils")
						&& ! item.getValue().contains("FIR_MLC_AR") && ! item.getValue().contains("bil") && ! item.getValue().contains("Receipts")){
					fileTypeContainer.addBean(item);
				}
			}
			
			closeClaimDto.setFileTypeContainer(fileTypeContainer);
			
			closeClaimDto.setIntimationNumber(claim.getIntimation().getIntimationId());
			closeClaimDto.setClaimNumber(claim.getClaimId());
			
			closeClaimDto.setUserName(tableDTO.getUsername());
			
			BeanItemContainer<SelectValue> reasonForClosing = masterService.getMasterValueByReference(ReferenceTable.REASON_FOR_CLOSING);
			
			closeClaimDto.setReasonForCloseClaimContainer(reasonForClosing);

		}
		
		closeClaimDto.setNewIntimationDto(intimationDto);

		if(isCloseClaimValid){
			view.setCloseClaimPageView(CloseClaimView.class, true, closeClaimDto);
		}
		
	}
	
	protected void showReopenClaimPageView(
			@Observes @CDIEvent(MenuPresenter.REOPEN_CLAIM_PAGE_VIEW) final ParameterDTO parameters) {

		
		SearchReOpenClaimTableDTO tableDTO = (SearchReOpenClaimTableDTO) parameters.getPrimaryParameter();
		
		NewIntimationDto intimationDto = new NewIntimationDto();
		
		ReopenClaimPageDTO reopenClaimDto = new ReopenClaimPageDTO();
		
		if(tableDTO.getIntimationkey() != null){
			
			Claim claim = claimService.getClaimByKey(tableDTO.getClaimKey());
			
			
			reopenClaimDto.setClaimKey(tableDTO.getClaimKey());

			
			Intimation intimation = claim.getIntimation();
			intimationDto = intimationService
					.getIntimationDto(intimation);
          
			

			ClaimDto claimDTO = ClaimMapper.getInstance().getClaimDto(claim);
			reopenClaimDto.setClaimDto(claimDTO);
			
			Double insuredSumInsured = calcService.getInsuredSumInsured(intimationDto.getInsuredPatient().getInsuredId().toString(), intimationDto.getPolicy().getKey()
					,intimationDto.getInsuredPatient().getLopFlag());
			
			Double balanceSI = calcService.getBalanceSI(intimationDto.getPolicy().getKey(), intimationDto.getInsuredPatient().getKey(), 
					claim.getKey(), insuredSumInsured, intimation.getKey()).get(SHAConstants.TOTAL_BALANCE_SI);
			
			
			reopenClaimDto.setBalanceSI(balanceSI);
			
			Reimbursement reimbursement = reimbursementService.getLatestActiveROD(claim.getKey());
			
			Preauth preauth= preauthService.getLatestPreauthDetails(claim.getKey());
			
			if(reimbursement==null){
				
				
				String diagnosisForPreauthByKey = "";
				if(preauth != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
					
				}
				tableDTO.setDiagnosis(diagnosisForPreauthByKey);
			}else{
				String diagnosisForPreauthByKey = "";
				if(reimbursement != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
					
				}
				tableDTO.setDiagnosis(diagnosisForPreauthByKey);
				reopenClaimDto.setDiagnosis(diagnosisForPreauthByKey);
			}
			
			List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
					.search(claim.getKey(), false);
			
			List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
			for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {

				previousPreAuthTableDTO.setRequestedAmt(preauthService
						.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
								previousPreAuthTableDTO.getClaimKey()));
				newList.add(previousPreAuthTableDTO);

			}
			
			reopenClaimDto.setPreviousPreauthDetailsList(newList);

			List<ReopenClaimTableDTO> reopenClaimList = new ArrayList<ReopenClaimTableDTO>();
		
			ReopenClaimTableDTO reopenClaim = new ReopenClaimTableDTO();
			reopenClaim.setInsuredPatientName(intimation.getInsuredPatientName());
			reopenClaim.setStrDateOfAdmission(SHAUtils.formatDate(intimation.getAdmissionDate()));
			Long aCknowledgeNumberCountByClaimKey = createRodService.getACknowledgeNumberCountByClaimKey(claim.getKey());
			
			if(aCknowledgeNumberCountByClaimKey != null){
				reopenClaim.setNumberOfRod(aCknowledgeNumberCountByClaimKey.intValue());
			}
			
			List<Reimbursement> reimbursementByClaimKey = createRodService.getReimbursementByClaimKey(claim.getKey());
			
			reopenClaim.setClaimStatus(claim.getStatus().getProcessValue());

			Double provisionAmount = 0d;
			
			for (Reimbursement reimbursement2 : reimbursementByClaimKey) {
				Double provisionAmount2 = createRodService.getProvisionAmount(reimbursement2,claim);
				if(provisionAmount2 != null){
					provisionAmount += provisionAmount2;
				}
			}

			reopenClaim.setProvisionAmount(provisionAmount);
			
			reopenClaimList.add(reopenClaim);
			
			reopenClaimDto.setProvisionAmount(provisionAmount);
			
			if(claim.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)){
				List<Preauth> preauthList = preauthService.getPreauthListByClaimKey(claim.getKey());

				if(preauthList != null && preauthList.size() == 1){
					
					Preauth lastPreauth = preauthList.get(0);
					
					if(lastPreauth.getStatus() != null && (! lastPreauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_PREAUTH_WITHDRAW_STATUS) || ! lastPreauth.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS))){
						
						reopenClaimDto.setProvisionAmount(claim.getProvisionAmount());
						reopenClaim.setProvisionAmount(claim.getProvisionAmount());
						
					}else{
						
						if(lastPreauth.getWithdrawReason() != null && lastPreauth.getWithdrawReason().getKey() != null
								&& lastPreauth.getWithdrawReason().getKey().equals(ReferenceTable.PATIENT_NOT_ADMITTED)){
							reopenClaimDto.setProvisionAmount(0d);
						}else{
							reopenClaimDto.setProvisionAmount(claim.getProvisionAmount());
							reopenClaim.setProvisionAmount(claim.getProvisionAmount());
						}
						
					}
					
				}else{
					
					if(preauth != null && preauth.getStatus() != null && (! preauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_PREAUTH_WITHDRAW_STATUS) || ! preauth.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS))){

							reopenClaimDto.setProvisionAmount(claim.getProvisionAmount());
							reopenClaim.setProvisionAmount(claim.getProvisionAmount());

					}else{
						
						if(preauth != null && preauth.getWithdrawReason() != null && preauth.getWithdrawReason().getKey() != null
								&& preauth.getWithdrawReason().getKey().equals(ReferenceTable.PATIENT_NOT_ADMITTED)){
							reopenClaimDto.setProvisionAmount(0d);
						}else{
							reopenClaimDto.setProvisionAmount(claim.getProvisionAmount());
							reopenClaim.setProvisionAmount(claim.getProvisionAmount());
						}
					}

				}
			}else if(claim.getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)
					&& reimbursementByClaimKey.isEmpty()){
				
				List<DocAcknowledgement> listOfAcknowledgement = createRodService.getListOfAcknowledgement(claim.getKey());

				if(listOfAcknowledgement != null && ! listOfAcknowledgement.isEmpty()){
					
					for (DocAcknowledgement docAcknowledgement : listOfAcknowledgement) {
						
						provisionAmount = 0d;
						
						if(null != docAcknowledgement && null != docAcknowledgement.getHospitalisationFlag() && (SHAConstants.YES_FLAG).equalsIgnoreCase(docAcknowledgement.getHospitalisationFlag()))
							{
								if(null != docAcknowledgement.getHospitalizationClaimedAmount())
								{
									provisionAmount += docAcknowledgement.getHospitalizationClaimedAmount();
								}
								if(null != docAcknowledgement.getPreHospitalizationClaimedAmount())
								{
									provisionAmount += docAcknowledgement.getPreHospitalizationClaimedAmount();
								}
								if(null != docAcknowledgement.getPostHospitalizationClaimedAmount())
								{
									provisionAmount += docAcknowledgement.getPostHospitalizationClaimedAmount();
								}
							}
					}
					reopenClaimDto.setProvisionAmount(provisionAmount);
					
				}else{
					reopenClaimDto.setProvisionAmount(claim.getProvisionAmount());
				}

			}
			
			CloseClaim closeClaim = createRodService.getCloseClaim(claim.getKey());
			
			if(closeClaim != null && closeClaim.getClosedProvisionAmt() != null){
				reopenClaim.setProvisionAmount(closeClaim.getClosedProvisionAmt());
				reopenClaimDto.setProvisionAmount(closeClaim.getClosedProvisionAmt());
			}
			
			if(reopenClaimDto.getProvisionAmount() != null && balanceSI != null){
				
				Double minAmount = Math.min(reopenClaimDto.getProvisionAmount(), balanceSI);
				reopenClaimDto.setProvisionAmount(minAmount);
				
			}
			
			reopenClaimDto.setReopenClaimList(reopenClaimList);
			List<ViewDocumentDetailsDTO> listDocumentDetails = ackDocReceivedService.listOfEarlierAckByClaimKey(claim.getKey(),0l);
			
			for (ViewDocumentDetailsDTO viewDocumentDetailsDTO : listDocumentDetails) {
			
				if(viewDocumentDetailsDTO.getStatusKey() != null && ReferenceTable.CANCEL_ROD_KEYS.containsKey(viewDocumentDetailsDTO.getStatusKey())){
					viewDocumentDetailsDTO.setIsReadOnly(true);
				}

				if(viewDocumentDetailsDTO.getReimbursementKey() != null){
					CloseClaim rodAlreadyClosed = createRodService.getAlreadyRodClosed(viewDocumentDetailsDTO.getReimbursementKey());
					if(rodAlreadyClosed != null){
						viewDocumentDetailsDTO.setApprovedAmount(0d);
						viewDocumentDetailsDTO.setIsReadOnly(true);
					}
				}
				
				if(viewDocumentDetailsDTO.getIsReadOnly()){
					viewDocumentDetailsDTO.setApprovedAmount(0d);
				}
				viewDocumentDetailsDTO.setApprovedAmount(0d);
			}
			
			for (ViewDocumentDetailsDTO viewDocumentDetailsDTO : listDocumentDetails) {
				if(viewDocumentDetailsDTO.getModeOfReceipt() != null){
					viewDocumentDetailsDTO.setModeOfReceiptValue(viewDocumentDetailsDTO.getModeOfReceipt().getValue());
				}
				
				if(viewDocumentDetailsDTO.getDocumentReceivedDate() != null){
					viewDocumentDetailsDTO.setStrDocumentReceivedDate(SHAUtils.formatDate(viewDocumentDetailsDTO.getDocumentReceivedDate()));
				}
			}
			
			BeanItemContainer<SelectValue> reasonForClosing = masterService.getMasterValueByReference(ReferenceTable.REASON_FOR_REOPEN);
			
			reopenClaimDto.setReopenContainer(reasonForClosing);
			
			reopenClaimDto.setRodDocumentDetailsList(listDocumentDetails);
			
			reopenClaimDto.setIntimationNumber(claim.getIntimation().getIntimationId());
			
			reopenClaimDto.setClaimNumber(claim.getClaimId());
		}

		reopenClaimDto.setNewIntimationDto(intimationDto);

		view.setReopenClaimPageView(ReopenClaimView.class, true, reopenClaimDto);
		
	
	}
	
	public void showClaimWiseAllowApprovalPage(
			@Observes @CDIEvent(MenuPresenter.CLAIM_WISE_ALLLOW_APPROVAL) final ParameterDTO parameters){
		
		SearchClaimWiseAllowApprovalDto tableDto = (SearchClaimWiseAllowApprovalDto)parameters.getPrimaryParameter();
		NewIntimationDto intimationDto = new NewIntimationDto();

		if(tableDto.getIntimationkey() != null){
			Intimation intimation = intimationService.getIntimationByKey(tableDto.getIntimationkey());
			intimationDto = intimationService
					.getIntimationDto(intimation);
			Claim claim = claimService.getClaimsByIntimationNumber(intimation.getIntimationId());
			
			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claim);
			tableDto.setClaimDto(claimDTO);
			
			tableDto.setIntimationDto(intimationDto);
			
			view.setClaimWiseAllowApprovalPageView(ClaimWiseAllowApprovalView.class, true, tableDto);
		}
		
	}
	
	
	protected void showDoctorAccessability(
			@Observes @CDIEvent(MenuPresenter.DOCTOR_USER_ACCESSIBILITY) final ParameterDTO parameters) {
		
		SearchDoctorDetailsTableDTO tableDTO = (SearchDoctorDetailsTableDTO) parameters.getPrimaryParameter();
		
		ProductAndDocumentTypeDTO doctorDetailsDto = new ProductAndDocumentTypeDTO();
		if(tableDTO !=null) {
			doctorDetailsDto.setDoctorName(tableDTO.getDoctorName());
			/*doctorDetailsDto.setMinAmount(tableDTO.getMinAmt());
			doctorDetailsDto.setMaxAmount(tableDTO.getMaxAmt());*/
			doctorDetailsDto.setDoctorId(tableDTO.getLoginId());
		}
		
		MasUserLimitMapping userRole = userMappingService.getRoleDetails(tableDTO.getLoginId());
		if(userRole != null){
			doctorDetailsDto.setRole(userRole.getRoleId());
			MasRoleLimit roleLimit = userMappingService.getAmountDetails(userRole.getRoleId());
			
			if(roleLimit != null){
				doctorDetailsDto.setMinAmount(roleLimit.getMinAmt());
				doctorDetailsDto.setMaxAmount(roleLimit.getMaxAmt());
			}
		}
		
		MasUser userAllocation = userMappingService.getUserName(tableDTO.getLoginId());
		if(userAllocation.getShiftStartTime()!=null && userAllocation.getShiftEndTime()!=null && userAllocation.getHighValueFlag().equals(SHAConstants.YES_FLAG)) {
			doctorDetailsDto.setHighValueClaim(true);
			doctorDetailsDto.setShiftStartTime(userAllocation.getShiftStartTime());
			doctorDetailsDto.setShiftEndTime(userAllocation.getShiftEndTime());
		}else if(userAllocation.getHighValueFlag().equals(SHAConstants.N_FLAG)){
			doctorDetailsDto.setHighValueClaim(false);
		}
		
		
		
		if(userAllocation != null){
			/*if(userAllocation.getEligibleId() != null){
				
				SelectValue selectValue1 = new SelectValue();
				selectValue1.setId(userAllocation.getEligibleId().getKey());
				selectValue1.setValue(userAllocation.getEligibleId().getValue());
				
				doctorDetailsDto.setStatus(selectValue1);
			}*/
			
			/*if(userAllocation.getUserType() != null){
				SelectValue selectValue1 = new SelectValue();
				selectValue1.setId(userAllocation.getUserType().getKey());
				selectValue1.setValue(userAllocation.getUserType().getValue());
				doctorDetailsDto.setType(selectValue1);
			}*/
			if(userAllocation.getCorporateUserFlag()!=null && !userAllocation.getCorporateUserFlag().isEmpty()){
				
				if(userAllocation.getCorporateUserFlag().equals(SHAConstants.N_FLAG)) {
					SelectValue selectValue1 = new SelectValue();
					selectValue1.setId(ReferenceTable.AUTO_CPU_USER);
					selectValue1.setValue(SHAConstants.CPU_ALLOCATION_CPU_USER);
					doctorDetailsDto.setType(selectValue1);
				}else{
					SelectValue selectValue1 = new SelectValue();
					selectValue1.setId(ReferenceTable.AUTO_CORP_USER);
					selectValue1.setValue(SHAConstants.CPU_ALLOCATION_CORP_USER);
					doctorDetailsDto.setType(selectValue1);
				}
			}
			
			/*doctorDetailsDto.setQueueCount(userAllocation.getQueueCount());
			doctorDetailsDto.setStartTime(userAllocation.getWindowStartTime());
			doctorDetailsDto.setEndTime(userAllocation.getWindowEndTime());*/
			
		}
		
		BeanItemContainer<SelectValue> selectValueContainerForStatus = masterService
				.getUserStatusByMaster();
		
		BeanItemContainer<SelectValue> userTypeList = masterService
				.getSelectValueContainerByCode(ReferenceTable.AUTO_USERS);

		
		view.setProductAndDocumentTypeView(ProductAndDocumentTypeView.class, true, doctorDetailsDto, selectValueContainerForStatus,userTypeList);
	}
	
	protected void showUserAccessibility(@Observes @CDIEvent(MenuPresenter.USER_MANAGEMENT_ACCESSIBILITY) final ParameterDTO parameters){
		SearchDoctorDetailsTableDTO tableDTO = (SearchDoctorDetailsTableDTO) parameters.getPrimaryParameter();
		UserManagementDTO doctorDetailsDto = new UserManagementDTO();
		UserMgmtApplicableCpuDTO userMgmtApplicableCpuDTO = new UserMgmtApplicableCpuDTO();
		
		List<MasUserLimitMapping> limitMapping = userMagmtService.getUserLimitEmpListByNameAndActiveStatus(tableDTO.getEmpId());
		if(limitMapping != null && !limitMapping.isEmpty()) {
			List<UserManagementDTO> availableList = new ArrayList<UserManagementDTO>(); 
			for (MasUserLimitMapping masUserLimitMapping : limitMapping) {
				doctorDetailsDto = new UserManagementDTO();
				if(masUserLimitMapping.getActiveStatus().equals(SHAConstants.YES_FLAG)){
					MasRoleLimit roleIdMapping = userMagmtService.getUserOrgMappingDetailsByRolrId(masUserLimitMapping.getRoleId());
						SelectValue selVal = new SelectValue();
						selVal.setId(roleIdMapping.getKey());
						selVal.setValue(masUserLimitMapping.getRoleId());
						doctorDetailsDto.setLimit(selVal);
						
						if(masUserLimitMapping != null && masUserLimitMapping.getRoleId().contains(SHAConstants.FA)) {
							SelectValue roleVal = new SelectValue();
							roleVal.setId(0L);
							roleVal.setValue(SHAConstants.FA);
							doctorDetailsDto.setRoleCtegory(roleVal);
						}
						else if(masUserLimitMapping != null && masUserLimitMapping.getRoleId().contains(SHAConstants.BILLING_USER_LIMTS)){
							SelectValue roleVal = new SelectValue();
							roleVal.setId(1L);
							roleVal.setValue(SHAConstants.BILLING_AUTO_ALLOCATION);
							doctorDetailsDto.setRoleCtegory(roleVal);
						}
						else{
						
							SelectValue roleVal2 = new SelectValue();
							roleVal2.setId(2L);						
							roleVal2.setValue(SHAConstants.DOCTOR);
							doctorDetailsDto.setRoleCtegory(roleVal2);
						}
				}
				availableList.add(doctorDetailsDto);
			}
			doctorDetailsDto.setAvailableRoleLimitList(availableList);
		}
		
		if(tableDTO !=null) {
			doctorDetailsDto.setUserName(tableDTO.getDoctorName());
			doctorDetailsDto.setUserId(tableDTO.getEmpId());
		}
		TmpEmployee tmpEmp = userMagmtService.getEmployessValuesByInactiveStatus(tableDTO.getEmpId());
		if(tmpEmp != null && tmpEmp.getActiveStatus() != null) {
			if(tmpEmp.getActiveStatus().toString().equals(SHAConstants.DEACTIVE_USER)) {
			doctorDetailsDto.setDeActivateUser(true);
			}else{
				doctorDetailsDto.setDeActivateUser(false);
			}
		} 
		UserToOrgMapping orgMap = userMagmtService.getCpuListByOrgIdForUserMgmt(userMgmtApplicableCpuDTO.getCpuCode(),doctorDetailsDto.getUserId());
		if(null !=orgMap && orgMap.getLobFlag() != null && orgMap.getLobFlag().equalsIgnoreCase(SHAConstants.RETAIL_USER_MANAGEMENT)) {
			userMgmtApplicableCpuDTO.setRetail(true);
		}else if(null != orgMap && orgMap.getLobFlag() != null && orgMap.getLobFlag().equalsIgnoreCase(SHAConstants.GMC_POL_SERIVICE)){
			userMgmtApplicableCpuDTO.setGmc(true);
		}
		
		MasUser userAllocation = userMappingService.getUserName(tableDTO.getEmpId());
		if(null != userAllocation && userAllocation.getShiftStartTime()!=null && userAllocation.getShiftEndTime()!=null && userAllocation.getHighValueFlag().equals(SHAConstants.YES_FLAG)) {
			doctorDetailsDto.setHighValueClaim(true);
			doctorDetailsDto.setShiftStartTime(userAllocation.getShiftStartTime());
			doctorDetailsDto.setShiftEndTime(userAllocation.getShiftEndTime());
		}else if(null != userAllocation && userAllocation.getHighValueFlag() != null && userAllocation.getHighValueFlag().equals(SHAConstants.N_FLAG)){
			doctorDetailsDto.setHighValueClaim(false);
		}
		// CR2019213
		if(null != userAllocation &&userAllocation.getManualFlag() != null && userAllocation.getManualFlag().equalsIgnoreCase("Y") ){
			doctorDetailsDto.setManaulFlag(true);
		}else if(null != userAllocation && userAllocation.getManualFlag() != null &&  userAllocation.getManualFlag().equalsIgnoreCase("N") ){
			doctorDetailsDto.setManaulFlag(false);
		}else{
			doctorDetailsDto.setManaulFlag(false);
		}
		
		//added Allow Manual coding field in User Management screen
		
		if(null != userAllocation && userAllocation.getManualCodingFlag() != null && userAllocation.getManualCodingFlag().equalsIgnoreCase("Y") ){
			doctorDetailsDto.setManualCodingFlag(true);
		}else if(null != userAllocation && userAllocation.getManualCodingFlag() != null &&  userAllocation.getManualCodingFlag().equalsIgnoreCase("N") ){
			doctorDetailsDto.setManualCodingFlag(false);
		}else{
			doctorDetailsDto.setManualCodingFlag(false);
		}
		
		if(userAllocation != null){
			if(userAllocation.getCorporateUserFlag()!=null && !userAllocation.getCorporateUserFlag().isEmpty()){
				
				if(userAllocation.getCorporateUserFlag().equals(SHAConstants.N_FLAG)) {
					SelectValue selectValue1 = new SelectValue();
					selectValue1.setId(ReferenceTable.AUTO_CPU_USER);
					selectValue1.setValue(SHAConstants.CPU_ALLOCATION_CPU_USER);
					doctorDetailsDto.setType(selectValue1);
				}else{
					SelectValue selectValue1 = new SelectValue();
					selectValue1.setId(ReferenceTable.AUTO_CORP_USER);
					selectValue1.setValue(SHAConstants.CPU_ALLOCATION_CORP_USER);
					doctorDetailsDto.setType(selectValue1);
				}
			}
			// AutoAllocationCategory
			if(userAllocation.getDocumenType() != null && !userAllocation.getDocumenType().isEmpty()){
				MastersValue selectValueList = userMagmtService.getMasterKeyBasedOnMappingCode(userAllocation.getDocumenType());
				if(selectValueList != null && selectValueList.getKey() != null){
					SelectValue selectClaimType = new SelectValue();
					selectClaimType.setId(selectValueList.getKey());
					selectClaimType.setValue(selectValueList.getValue());
					doctorDetailsDto.setAutoAlloccationType(selectClaimType);
				}
			}
			// ClaimFlagInUserMaster
			if(userAllocation.getClaimApplicable() != null && !userAllocation.getClaimApplicable().isEmpty()){
				MastersValue selectValueList = userMagmtService.getClaimApplicableValueBasedOnValue(userAllocation.getClaimApplicable());
				if(selectValueList != null && selectValueList.getKey() != null){
					SelectValue selectClaimFlag = new SelectValue();
					selectClaimFlag.setId(selectValueList.getKey());
					selectClaimFlag.setValue(selectValueList.getValue());
					doctorDetailsDto.setClaimFlagInUserMaster(selectClaimFlag);
				}
			}
			//GLX2020178 by noufel
			if(null != userAllocation && userAllocation.getAllowRestrictToBand() != null && userAllocation.getAllowRestrictToBand().equalsIgnoreCase("Y") ){
				doctorDetailsDto.setRestrictToBand(true);
			}else if(null != userAllocation && userAllocation.getAllowRestrictToBand() != null &&  userAllocation.getAllowRestrictToBand().equalsIgnoreCase("N") ){
				doctorDetailsDto.setRestrictToBand(false);
			}else{
				doctorDetailsDto.setRestrictToBand(false);
			}
			
			// CR2019213
			if(null != userAllocation &&userAllocation.getManualPickFlagMA() != null && userAllocation.getManualPickFlagMA().equalsIgnoreCase("Y") ){
				doctorDetailsDto.setManualPickMAFlag(true);
			}else if(null != userAllocation && userAllocation.getManualPickFlagMA() != null &&  userAllocation.getManualPickFlagMA().equalsIgnoreCase("N") ){
				doctorDetailsDto.setManualPickMAFlag(false);
			}else{
				doctorDetailsDto.setManualPickMAFlag(false);
			}
			
			// combined processing by noufel
			if(null != userAllocation &&userAllocation.getManualPickHybridFlag() != null && userAllocation.getManualPickHybridFlag().equalsIgnoreCase("Y") ){
				doctorDetailsDto.setManualPickCombinedProcessFlag(true);
			}else if(null != userAllocation && userAllocation.getManualPickHybridFlag() != null &&  userAllocation.getManualPickHybridFlag().equalsIgnoreCase("N") ){
				doctorDetailsDto.setManualPickCombinedProcessFlag(false);
			}else{
				doctorDetailsDto.setManualPickCombinedProcessFlag(false);
			}
		}
		BeanItemContainer<SelectValue> userTypeList = masterService
				.getSelectValueContainerByCode(ReferenceTable.AUTO_USERS);
		

		// AutoAllocationCategory
		BeanItemContainer<SelectValue> documentTypeClaim = masterService
				.getAutoAllocationDocumentType();
		
		
		// ClaimFlagInUserMaster
		BeanItemContainer<SelectValue> claimFlagType = masterService
				.getClaimFlageType();
		
		
		view.setUserActivationView(UserACtivationView.class, true,
				doctorDetailsDto,userTypeList,documentTypeClaim,claimFlagType);
	}
	
	
	// ----------------------------------R3-search-NarenJ-----------------------------------

//	protected void showProcessFieldVisitSearch(
//			@Observes @CDIEvent(MenuItemBean.SHOW_PROCESS_FIELD_VISIT) final ParameterDTO parameters) {
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
//				.getTmpCpuCodes();
//		view.setViewFieldVisit(SearchProcessFieldVisitView.class, true,
//				selectValueContainerForCPUCode);
//	}

	protected void showInvestigationMasterSearch(
			@Observes @CDIEvent(MenuItemBean.INVESTIGATION_MASTER) final ParameterDTO parameters) {
		
		BeanItemContainer<SelectValue> selectValueForInvestigatorType =  masterService.getSelectValueContainer(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
		//BeanItemContainer<SelectValue> selectValueForInvestigatorName = investigationService.getRepresentativeListWithoutFilter();
		BeanItemContainer<SelectValue> selectValueForInvestigatorName = investigationService.getInvestigatorNameList();
		BeanItemContainer<SelectValue> selectValueForPrivateInvestigatorName = investigationService.getPrivateInvestigatorNameList();
	
		view.setViewInvestigationMaster(InvestigationMasterView.class,true, selectValueForInvestigatorType,selectValueForInvestigatorName,selectValueForPrivateInvestigatorName);
	}
	protected void showAssignInvestigationSearch(
			@Observes @CDIEvent(MenuItemBean.SHOW_ASSIGN_INVESTIGATION) final ParameterDTO parameters) {
		
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		
		BeanItemContainer<SelectValue> claimTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
		
		BeanItemContainer<SelectValue> claimTypeListContainer = masterService.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
		List<SelectValue> itemIds = claimTypeListContainer.getItemIds();
		for (SelectValue selectValue : itemIds) {
			if(selectValue.getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY) || selectValue.getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
				claimTypeContainer.addBean(selectValue);
			}
		}
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		
		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
		Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);
		Stage stageByKey4 = preauthService.getStageByKey(ReferenceTable.PREAUTH_STAGE);
		Stage stageByKey5 = preauthService.getStageByKey(ReferenceTable.ENHANCEMENT_STAGE);

		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey2.getKey());
		selectValue1.setValue(stageByKey2.getStageName());
		
		SelectValue selectValue2 = new SelectValue();
		selectValue2.setId(stageByKey3.getKey());
		selectValue2.setValue(stageByKey3.getStageName());
		
		SelectValue selectValue3 = new SelectValue();
		selectValue3.setId(stageByKey4.getKey());
		selectValue3.setValue(stageByKey4.getStageName());
		
		SelectValue selectValue4 = new SelectValue();
		selectValue4.setId(stageByKey5.getKey());
		selectValue4.setValue(stageByKey5.getStageName());
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue1);
		statusByStage.addBean(selectValue2);
		statusByStage.addBean(selectValue3);
		statusByStage.addBean(selectValue4);
		
		BeanItemContainer<SelectValue> selectValueForInvestigationState = SHAUtils.getSelectValueForPriority();
		
		Stage investigationStageByKey1 = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
		Stage investigationStageByKey2 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);
		Stage investigationStageByKey3 = preauthService.getStageByKey(ReferenceTable.PREAUTH_STAGE);

		SelectValue investigationSelectValue1 = new SelectValue();
		investigationSelectValue1.setId(1l);
		investigationSelectValue1.setValue("Investigation Initiated");
		
		SelectValue investigationSelectValue2 = new SelectValue();
		investigationSelectValue2.setId(2l);
		investigationSelectValue2.setValue("Investigation Request Drafted");
		
		SelectValue investigationSelectValue3 = new SelectValue();
		investigationSelectValue3.setId(3l);
		investigationSelectValue3.setValue("Investigation Approved");
		
		BeanItemContainer<SelectValue> statusByInvestigationState = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByInvestigationState.addBean(investigationSelectValue1);
		statusByInvestigationState.addBean(investigationSelectValue2);
		statusByInvestigationState.addBean(investigationSelectValue3);
		
		view.setViewAssignInvestigation(SearchAssignInvestigationView.class,
				true, selectValueContainerForCPUCode,claimTypeContainer,selectValueForPriority,statusByStage,statusByInvestigationState);
	}

	protected void showReAssignInvestigationSearch(
			@Observes @CDIEvent(MenuItemBean.SHOW_RE_ASSIGN_INVESTIGATION) final ParameterDTO parameters) {
		
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		
		BeanItemContainer<SelectValue> claimTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
		
		BeanItemContainer<SelectValue> claimTypeListContainer = masterService.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
		List<SelectValue> itemIds = claimTypeListContainer.getItemIds();
		for (SelectValue selectValue : itemIds) {
			if(selectValue.getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY) || selectValue.getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
				claimTypeContainer.addBean(selectValue);
			}
		}
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		
		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
		Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);
		Stage stageByKey4 = preauthService.getStageByKey(ReferenceTable.PREAUTH_STAGE);
		Stage stageByKey5 = preauthService.getStageByKey(ReferenceTable.ENHANCEMENT_STAGE);


		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey2.getKey());
		selectValue1.setValue(stageByKey2.getStageName());
		
		SelectValue selectValue2 = new SelectValue();
		selectValue2.setId(stageByKey3.getKey());
		selectValue2.setValue(stageByKey3.getStageName());
		
		SelectValue selectValue3 = new SelectValue();
		selectValue3.setId(stageByKey4.getKey());
		selectValue3.setValue(stageByKey4.getStageName());
		
		SelectValue selectValue4 = new SelectValue();
		selectValue4.setId(stageByKey5.getKey());
		selectValue4.setValue(stageByKey5.getStageName());
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue1);
		statusByStage.addBean(selectValue2);
		statusByStage.addBean(selectValue3);
		statusByStage.addBean(selectValue4);
		
		view.setViewReAssignInvestigation(SearchReAssignInvestigationView.class,
				true, selectValueContainerForCPUCode,claimTypeContainer,selectValueForPriority,statusByStage);
	}
	
	protected void showProcessInvestigationInitiatedSearch(
			@Observes @CDIEvent(MenuItemBean.SEARCH_PROCESS_INVESTIGATION_INITIATED) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		
		BeanItemContainer<SelectValue> claimTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
		
		BeanItemContainer<SelectValue> claimTypeListContainer = masterService.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
		List<SelectValue> itemIds = claimTypeListContainer.getItemIds();
		for (SelectValue selectValue : itemIds) {
			if(selectValue.getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY) || selectValue.getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
				claimTypeContainer.addBean(selectValue);
			}
		}
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		Stage stageByKey  = preauthService.getStageByKey(ReferenceTable.PROCESS_CLAIM_REQUEST_ZONAL_STAGE_KEY);
		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.PROCESS_CLAIM_REQUEST_STAGE_KEY);
		Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.PROCESS_CLAIM_FINANCIAL_STAGE_KEY);

		SelectValue ZMRSelectVal = new SelectValue(stageByKey.getKey(), stageByKey.getStageName());
		
		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey2.getKey());
		selectValue1.setValue(stageByKey2.getStageName());
		
		SelectValue selectValue2 = new SelectValue();
		selectValue2.setId(stageByKey3.getKey());
		selectValue2.setValue(stageByKey3.getStageName());
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(ZMRSelectVal);
		statusByStage.addBean(selectValue1);
		statusByStage.addBean(selectValue2);
		
		view.setViewProcessInvestigation(
				SearchProcessInvestigationInitiatedView.class, true,
				selectValueContainerForCPUCode,claimTypeContainer,selectValueForPriority,statusByStage);
	}

	protected void showAcknowledgeInvestigationCompletedSearch(
			@Observes @CDIEvent(MenuItemBean.SEARCH_ACKNOWLEDGE_INVESTIGATION_COMPLETED) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		
		BeanItemContainer<SelectValue> claimTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
		
		BeanItemContainer<SelectValue> claimTypeListContainer = masterService.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
		List<SelectValue> itemIds = claimTypeListContainer.getItemIds();
		for (SelectValue selectValue : itemIds) {
			if(selectValue.getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY) || selectValue.getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
				claimTypeContainer.addBean(selectValue);
			}
		}
		
       BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		
		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
		Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);

		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey2.getKey());
		selectValue1.setValue(stageByKey2.getStageName());
		
		SelectValue selectValue2 = new SelectValue();
		selectValue2.setId(stageByKey3.getKey());
		selectValue2.setValue(stageByKey3.getStageName());
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue1);
		statusByStage.addBean(selectValue2);
		
		view.setViewAcknowledgementInvestigation(
				SearchAckInvestigationCompletedView.class, true,
				selectValueContainerForCPUCode,claimTypeContainer,selectValueForPriority,statusByStage);

	}


	protected void showAcknowledgementDocumentReceiver(
			@Observes @CDIEvent(MenuItemBean.SHOW_ACKNOWLEDGEMENT_DOCUMENT_RECEIVED) final ParameterDTO parameters) {
		
		
//		getTaskManuallyFromBPMNForProcessPreauth();
	//	ReceivePreAuthTask receivePreauthTask = BPMClientContext.getPreAuthReceived(BPMClientContext.BPMN_TASK_USER, BPMClientContext.BPMN_PASSWORD);
		
		
		/*com.shaic.ims.bpm.claim.servicev2.preauth.search.PreMedicalPreAuthEnhTask processPreMedicalEnhTask = BPMClientContext.getProcessPreMedicalEnhancementTask(BPMClientContext.BPMN_TASK_USER, BPMClientContext.BPMN_PASSWORD);
		
		//com.shaic.ims.bpm.claim.servicev2.preauth.search.PreMedicalPreAuthTask preMedicalClaimTask = BPMClientContext.getProcessPreMedicalTask(BPMClientContext.BPMN_TASK_USER,BPMClientContext.BPMN_PASSWORD);
		//ClaimRegROTask manualRegisterClaimTaskForRO = BPMClientContext.getManualRegisterClaimTaskForRO(BPMClientContext.BPMN_TASK_USER,BPMClientContext.BPMN_PASSWORD);
		
		com.shaic.ims.bpm.claim.corev2.PagedTaskList tasks =  processPreMedicalEnhTask.getTasks(BPMClientContext.BPMN_TASK_USER, null,  null);
		
		List<HumanTask> humanTasks = tasks.getHumanTasks();
		System.out.println("PREENHANCEMENT TASK------------------------>" + humanTasks.size());
		List<String> arr = new ArrayList<String>();
		for (HumanTask humanTask : humanTasks) {
			PayloadBOType payloadCashless = humanTask.getPayloadCashless();
			if(payloadCashless != null && payloadCashless.getIntimation() != null && payloadCashless.getIntimation().getIntimationNumber() != null) {
				arr.add(payloadCashless.getIntimation().getIntimationNumber());
				 System.out.println(payloadCashless.getIntimation().getIntimationNumber());
			}
		}
		
		
		if (arr.size() > 0) {
		    StringBuilder nameBuilder = new StringBuilder();

		    for (String str : arr) {
		    	String n = String.valueOf(str);
		   //     nameBuilder.append("'").append(n.replace("'", "\\'")).append("',");
		        // can also do the following
		        // nameBuilder.append("'").append(n.replace("'", "''")).append("',");
		    }

		    nameBuilder.deleteCharAt(nameBuilder.length() - 1);

		    System.out.println(nameBuilder.toString()); 
		} */
		
		view.setViewG(SearchAcknowledgementDocumentReceiverView.class, true);
	}

	protected void showCreateROD(
			@Observes @CDIEvent(MenuItemBean.CREATE_ROD) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
//		BeanItemContainer<SelectValue> statusByStage = masterService.getStatusByStage(ReferenceTable.ACKNOWLEDGE_STAGE_KEY);
		
		Status status = preauthService.getStatusByKey(ReferenceTable.ACKNOWLEDGE_STATUS_KEY);
		
		
		SelectValue selectValue = new SelectValue();
		selectValue.setId(status.getKey());
		selectValue.setValue(status.getProcessValue());
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue);
		
		BeanItemContainer<SelectValue> selectValueForUploadedDocument = masterService
		.getSelectValueContainer(ReferenceTable.COMMON_VALUES);
		
		view.setViewCreateROD(SearchCreateRODView.class, true,
				selectValueContainerForCPUCode,selectValueForPriority,statusByStage,selectValueForUploadedDocument);
	}

	
	protected void showCancelROD(
			@Observes @CDIEvent(MenuItemBean.CANCEL_ACKNOWLEDGEMENT) final ParameterDTO parameters) {
		view.setViewG(SearchCancelAcknowledgementView.class, true);
	}
	
	protected void showHospitalWiseReport(
			@Observes @CDIEvent(MenuItemBean.HOSPITAL_WISE_REPORT) final ParameterDTO parameters) {
//		BeanItemContainer<SelectValue> selectValueContainerForDateType = masterService
//				.getTmpCpuCodeList();
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		BeanItemContainer<SelectValue> selectValueContainerForDateType =  usertoCPUMapService.getRevisedUserCpuContainer(userId);
		view.setViewHospitalWiseReport(HospitalWiseReportView.class, true,
				selectValueContainerForDateType);
	}
	
	protected void showHospitalIntimationReport(
			@Observes @CDIEvent(MenuItemBean.HOSPITAL_INTIMATION_STATUS) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForDateType = masterService
				.getTmpCpuCodeList();
		view.setViewHospitalIntimationStatusReport(HospitalIntimationStatusReportView.class, true,
				selectValueContainerForDateType);
	}
	
	
	
	protected void showMedicalMailReport(
			@Observes @CDIEvent(MenuItemBean.MEDICAL_MAIL_STATUS) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForDateType = masterService
				.getTmpCpuCodeList();
		view.setViewMedicalMailReport(MedicalMailReportView.class, true,
				selectValueContainerForDateType);
	}
	

	
	protected void showFVRAssignmentReport(
			@Observes @CDIEvent(MenuItemBean.FVR_ASSIGNMENT_REPORT) final ParameterDTO parameters) {
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = usertoCPUMapService.getRevisedUserCpuContainer(userId);
	   
	BeanItemContainer<SelectValue> selectValueContainerForReportType = masterService.getTmpCpuCodeList();	
	BeanItemContainer<SelectValue> selectValueContainerForClaimType = masterService.getClaimTypeContainer(ReferenceTable.CLAIM_TYPE);	
	BeanItemContainer<SelectValue> selectValueContainerForFvrCpuCode = selectValueContainerForCPUCode;
		view.setViewFvrReport(FVRAssignmentReportView.class, true,
				selectValueContainerForCPUCode,selectValueContainerForReportType,selectValueContainerForClaimType,selectValueContainerForFvrCpuCode);
		
	}	
	
	protected void showSearchOrUploadDocuments(
			@Observes @CDIEvent(MenuItemBean.SEARCH_OR_UPLOAD_DOCUMENTS) final ParameterDTO parameters) {
		
		BeanItemContainer<SelectValue> selectValueContainerForType =  masterService.getSelectValueContainer(ReferenceTable.COMMON_VALUES);	
		
		view.setViewSearchOrUploadDocuments(SearchUploadDocumentsView.class,true,selectValueContainerForType);
	}
	
	protected void showSearchOrUploadDocumentsForAckNotReceived(
			@Observes @CDIEvent(MenuItemBean.SEARCH_OR_UPLOAD_DOCUMENTS_FOR_ACK_NOT_RECEIVED) final ParameterDTO parameters) {
		
		BeanItemContainer<SelectValue> selectValueContainerForType =  masterService.getSelectValueContainer(ReferenceTable.COMMON_VALUES);	
		
		view.setViewSearchOrUploaddocumentsForAckNotReceived(UploadDocumentsForAckNotReceivedView.class,true,selectValueContainerForType);
	}

	protected void showSearchOrUploadDocumentsWizard(
			@Observes @CDIEvent(MenuPresenter.SEARCH_OR_UPLOAD_DOCUMENTS_WIZARD) final ParameterDTO parameters) {
		
		SearchUploadDocumentsTableDTO searchUploadDto = (SearchUploadDocumentsTableDTO)parameters.getPrimaryParameter();
		
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
		Long claimKey = searchUploadDto.getClaimKey();
		Claim claimByKey = claimService.getClaimByKey(claimKey);	
		ClaimDto claimDTO = null;
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());

			 claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKey);
			 if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
				 if(latestPreauthByClaim != null){
					 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
				 }
				 String diagnosisForPreauthByKey = "";
					if(latestPreauthByClaim != null ) {
						diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(latestPreauthByClaim.getKey());
						
					}
					rodDTO.setDiagnosis(diagnosisForPreauthByKey);
			 }
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
		}
		
		/*if(null != claimByKey && null != claimByKey.getClaimType() && null != claimByKey.getClaimType().getKey()
				&& claimByKey.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
		{
			rodDTO.setSearchUploadpreauthUploadTblList(getPreauthDetailsForUpload(claimByKey.getKey()));
		}*/
	/*	rodDTO.setSearchUploadpreauthUploadTblList(getPreauthDetailsForUpload(claimByKey.getKey()));
		rodDTO.setSearchUploadrodUploadTblList(getRodDetailsForUpload(claimByKey.getKey()));
		*/
		
		
		UploadDocumentDTO  uploadDto =  new UploadDocumentDTO();
		if(null != searchUploadDto.getAcknowledgementNo()){
		
		uploadDto.setAcknowledgementNo(searchUploadDto.getAcknowledgementNo());
		}
		uploadDto.setUsername(searchUploadDto.getUsername());
		
		uploadDto.setUploadDocsList(searchUploadDocService.getAckDocByDocAckKey(searchUploadDto.getAckDocKey()));
		
		//AcknowledgeDocument ackDoc = uploadSubmitService.getAcknowledgeDocument(searchUploadDto.getAckDocKey());
		//if(null != ackDoc)
		//{
		//	DocAcknowledgement docAcknowledgment = ackDoc.getDocAcknowledgement();
		//	if(null != docAcknowledgment)
			//{
			rodDTO.getDocumentDetails().setHospitalizationFlag(			
					searchUploadDto.getHospitalizationFlag());
			rodDTO.getDocumentDetails().setPreHospitalizationFlag(
					searchUploadDto.getPreHospitalizationFlag());
			rodDTO.getDocumentDetails().setPostHospitalizationFlag(
					searchUploadDto.getPostHospitalizationFlag());
			rodDTO.getDocumentDetails().setPartialHospitalizationFlag(
					searchUploadDto.getPartialHospitalizationFlag());
			rodDTO.getDocumentDetails().setLumpSumAmountFlag(
					searchUploadDto.getLumpSumAmountFlag());
			rodDTO.getDocumentDetails().setAddOnBenefitsHospitalCashFlag(
					searchUploadDto.getAddOnBenefitsHospitalCashFlag());
			rodDTO.getDocumentDetails().setAddOnBenefitsPatientCareFlag(
					searchUploadDto.getAddOnBenefitsPatientCareFlag());
			rodDTO.getDocumentDetails().setHospitalizationRepeatFlag(
					searchUploadDto.getHospitalizationRepeatFlag());
			
			rodDTO.setAcknowledgementNumber(searchUploadDto.getAckDocKey());
			
				
			//}
		//}
		
		
		rodDTO.setUploadDocumentsDTO(uploadDto);
		
		view.setSearchOrUploadDocumentsWizard(SearchUploadDocumentsWizardView.class, rodDTO);
	}
	
	
	
	
	protected void showSearchOrUploadDocumentsForAckNotReceivedWizard(
			@Observes @CDIEvent(MenuPresenter.SEARCH_OR_UPLOAD_DOCUMENTS_ACK_NOT_RECEIVED_WIZARD) final ParameterDTO parameters) {
		
		
		UploadDocumentsForAckNotReceivedTableDTO searchUploadDto = (UploadDocumentsForAckNotReceivedTableDTO)parameters.getPrimaryParameter();
		
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
		Long claimKey = searchUploadDto.getClaimKey();
		Claim claimByKey = claimService.getClaimByKey(claimKey);	
		ClaimDto claimDTO = null;
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			 claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			 if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
				 if(latestPreauthByClaim != null){
					 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
				 }
				 String diagnosisForPreauthByKey = "";
					if(latestPreauthByClaim != null ) {
						diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(latestPreauthByClaim.getKey());
						
					}
					rodDTO.setDiagnosis(diagnosisForPreauthByKey);
			 }
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
		}
		
		UploadDocumentDTO  uploadDto =  new UploadDocumentDTO();
		if(null != searchUploadDto.getIntimationNo()){
			
			uploadDto.setIntimationNo(searchUploadDto.getIntimationNo());
		}
		
		
		if(null != searchUploadDto.getClaimNo()){
			
			uploadDto.setClaimNo(searchUploadDto.getClaimNo());
		}
		
		if(null != searchUploadDto.getClaimType())
		{
			uploadDto.setClaimTypeValue(searchUploadDto.getClaimType());
		}
		
		uploadDto.setUploadDocsList(searchUploadDocServiceforAckNotReceived.getUploadedDocumentDetails(searchUploadDto.getIntimationNo(),SHAConstants.POST_PROCESS));
		
		uploadDto.setUsername(searchUploadDto.getUsername());
		
		
		rodDTO.setSearchUploadpreauthUploadTblList(getPreauthDetailsForUpload(claimByKey.getKey()));
		rodDTO.setSearchUploadrodUploadTblList(getRodDetailsForUpload(claimByKey.getKey()));
		
		rodDTO.setAcknowledgementNumber(searchUploadDto.getAckDocKey());
		rodDTO.setUploadDocumentsDTO(uploadDto);
		view.setSearchOrUploadDocumentsForAckNotReceivedWizard(UploadDocumentsForAckNotReceivedWizardView.class, rodDTO);
	}
	
	
	private List<UploadDocumentsForAckNotReceivedPageTableDTO> getPreauthDetailsForUpload(Long claimKey)
	{
		return uploadSubmitServiceforAckNotReceived.getPreauthDetailsForUpload(claimKey);
	}

	private List<UploadDocumentsForAckNotReceivedPageTableDTO> getRodDetailsForUpload(Long claimKey)
	{
		return uploadSubmitServiceforAckNotReceived.getRODDetailsForUpload(claimKey);
	}
	
	
	protected void showCreateSearchLot(
			@Observes @CDIEvent(MenuItemBean.CREATE_OR_SEARCH_LOT) final ParameterDTO parameters) {
	
		//IMSSUPPOR-24284
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
	//BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodeList();	
	BeanItemContainer<SelectValue> selectValueContainerForCPUCode = calcService.getTmpCpuCodeListByUser(userId);
	BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getSelectValueContainer(ReferenceTable.CLAIM_TYPE);	
	BeanItemContainer<SelectValue> selectValueContainerForClaimant = masterService.getSelectValueContainer(ReferenceTable.ACK_DOC_RECEIVED_FROM);	
	BeanItemContainer<SelectValue> selectValueContainerForClaimType = masterService.getClaimTypeContainer(ReferenceTable.CLAIM_TYPE);	
	BeanItemContainer<SelectValue> selectValueContainerForPaymentStatus = masterService.getPaymentStatusValue(ReferenceTable.PAYMENT_STATUS);
	BeanItemContainer<SpecialSelectValue> selectValueContainerForProduct = masterService.getContainerForProduct();
	BeanItemContainer<SelectValue> selectValueContainerForPaymentMode = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
	BeanItemContainer<SelectValue> selectValueContainerForDocVerified = masterService.getPaymentStatusValue(ReferenceTable.DOCVERIFY);
	BeanItemContainer<SelectValue> selectValueContainerForVerificationType = masterService.getClaimTypeContainer(ReferenceTable.VERIFICATION_TYPE);	

	//
	//view.setViewCreateAndSearchLot(CreateAndSearchLotView.class, true);
	view.setViewCreateAndSearchLot(CreateAndSearchLotView.class, selectValueContainerForCPUCode,selectValueContainerForType,selectValueContainerForClaimant,selectValueContainerForClaimType,
			selectValueContainerForPaymentStatus,selectValueContainerForProduct,selectValueContainerForDocVerified,selectValueContainerForPaymentMode,selectValueContainerForVerificationType,true);
		
	}	
	
	
	protected void showCreateBatchOp(
			@Observes @CDIEvent(MenuItemBean.CREATE_BATCH_OP) final ParameterDTO parameters) {
	
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
	BeanItemContainer<SelectValue> selectValueContainerForCPUCode = calcService.getTmpCpuCodeListByUser(userId);
	BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getSelectValueContainer(ReferenceTable.CLAIM_TYPE);	
	BeanItemContainer<SelectValue> selectValueContainerForClaimant = masterService.getSelectValueContainer(ReferenceTable.ACK_DOC_RECEIVED_FROM);	
	BeanItemContainer<SelectValue> selectValueContainerForClaimType = masterService.getClaimTypeContainer(ReferenceTable.CLAIM_TYPE);	
	BeanItemContainer<SelectValue> selectValueContainerForPaymentStatus = masterService.getPaymentStatusValue(ReferenceTable.PAYMENT_STATUS);
	BeanItemContainer<SpecialSelectValue> selectValueContainerForProduct = masterService.getContainerForProduct();
	BeanItemContainer<SelectValue> selectValueContainerForPaymentMode = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
	BeanItemContainer<SelectValue> selectValueContainerForDocVerified = masterService.getPaymentStatusValue(ReferenceTable.DOCVERIFY);
	BeanItemContainer<SelectValue> selectValueContainerForPIOCode = masterService.getSelectValueContainerForPIOCode();
	
	//
	view.setViewCreateBatchOp(CreateBatchOpView.class, selectValueContainerForCPUCode,selectValueContainerForType,selectValueContainerForClaimant,selectValueContainerForClaimType,
			selectValueContainerForPaymentStatus,selectValueContainerForProduct,selectValueContainerForDocVerified,selectValueContainerForPaymentMode,selectValueContainerForPIOCode,true);
		
	}
	
	protected void showOPScreen(
			@Observes @CDIEvent(MenuItemBean.OP_SCREEN) final ParameterDTO parameters) {
	
	BeanItemContainer<SelectValue> selectValueContainerforZoneType = masterService.getTmpCpuCodeList();		
	view.setViewOPScreen(OpView.class, selectValueContainerforZoneType,true);
		
	}	

	
	protected void showTATReport(
			@Observes @CDIEvent(MenuItemBean.TAT_REPORT) final ParameterDTO parameters) {
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	

//		BeanItemContainer<SelectValue> selectValueContainerForCpu =  masterService.getTmpCpuCodeListWithoutDescription();
//	 BeanItemContainer<SelectValue> selectValueContainerForCPUCode = usertoCPUMapService.getUserCpuContainerWithoutDescription(userId);
	
	//BeanItemContainer<SelectValue> selectValueContainerForCpu = null;
	
		
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = usertoCPUMapService.getUserCpuContainerWithoutDescription(userId);
		
	BeanItemContainer<SelectValue> selectValueContainerForCPUCode = usertoCPUMapService.getRevisedUserCpuContainerWithoutDescription(userId);
		
	BeanItemContainer<SelectValue> selectValueContainerForOfficeCode = masterService.getOfficeCode();
	
//	view.setViewTATReport(TATReportView.class,selectValueContainerForCpu,selectValueContainerForOfficeCode,true);
		
	view.setViewTATReport(TATReportView.class,selectValueContainerForCPUCode,selectValueContainerForOfficeCode,true);
	}	
	
	protected void showRevisedProvision(
			@Observes @CDIEvent(MenuItemBean.REVISED_PROVISION) final ParameterDTO parameters) {
	
	//view.setViewTATReport(TATReportView.class,selectValueContainerForCpu,selectValueContainerForOfficeCode,true);
	view.setViewProvisionReport(SearchShowdowView.class,true);
	}	
	
	protected void showAutoClosure(
			@Observes @CDIEvent(MenuItemBean.AUTO_CLOSURE_BATCH) final ParameterDTO parameters) {
	
	//view.setViewTATReport(TATReportView.class,selectValueContainerForCpu,selectValueContainerForOfficeCode,true);
	    view.setAutoClosureView(AutoClosureBatchView.class,true);
	}	
	
	/*protected void showSearchLot(
			@Observes @CDIEvent(MenuItemBean.CREATE_LOT_MAKER) final ParameterDTO parameters) {
	
	BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodeList();	
	BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getTmpCpuCodeList();	
	BeanItemContainer<SelectValue> selectValueContainerForClaimant = masterService.getTmpCpuCodeList();	
	BeanItemContainer<SelectValue> selectValueContainerForClaimType = masterService.getTmpCpuCodeList();	
	BeanItemContainer<SelectValue> selectValueContainerForPaymentStatus = masterService.getTmpCpuCodeList();	
	
	//view.setViewSearchLot(SearchCreateOrSearchLOTView.class, true
		
	}	*/
	
	
	
	protected void showHelpDeskStatusReport(
			@Observes @CDIEvent(MenuItemBean.HELP_DESK_STATUS_REPORT) final ParameterDTO parameters) {
	
//	BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
//			.getTmpCpuCodeList();
		  String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = usertoCPUMapService.getRevisedUserCpuContainer(userId);
				
	BeanItemContainer<SelectValue> selectValueContainerForClaimType  = masterService.getClaimtypeContainer();	
		view.setViewHelpDeskStatusReport(HelpDeskStatusReportView.class, true,
				selectValueContainerForCPUCode,selectValueContainerForClaimType);
	}	
	
	protected void showDailyReport(
			@Observes @CDIEvent(MenuItemBean.DAILY_REPORT) final ParameterDTO parameters) {
	
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = usertoCPUMapService.getRevisedUserCpuContainer(userId);
		
//	BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
//			.getTmpCpuCodeList();				
		view.setViewDailyReport(DailyReportView.class, true,
				selectValueContainerForCPUCode, selectValueContainerForCPUCode);
	}	
	
	protected void showCpuWisePerformanceReport(
			@Observes @CDIEvent(MenuItemBean.CPU_WISE_PERFORMANCE_REPORT) final ParameterDTO parameters) {
	
//	BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
//			.getTmpCpuCodeList();				
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
	BeanItemContainer<SelectValue> selectValueContainerForCPUCode = usertoCPUMapService.getRevisedUserCpuContainer(userId);
		view.setViewCpuWisePerformanceReport(CpuWisePerformanceReportView.class, true,
				selectValueContainerForCPUCode);
	}	
	
	
	protected void showAgentBrokerReport(
			@Observes @CDIEvent(MenuItemBean.AGENT_BROKER_REPORT) final ParameterDTO parameters) {
	
//	BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
//			.getTmpCpuCodeList();	
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = usertoCPUMapService.getUserCpuContainer(userId);
		view.setViewAgentBrokerReport(AgentBrokerReportView.class, true);
	}	
	protected void showOPClaimReport(
			@Observes @CDIEvent(MenuItemBean.OP_CLAIM_REPORT) final ParameterDTO parameters) {
	
	//BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
	//		.getTmpCpuCodeList();				
		view.setViewOpClaimReport(OPClaimReportView.class, true);
	}	
	
	
	
	protected void showBillReceivedReport(
			@Observes @CDIEvent(MenuItemBean.BILL_RECIECVED_STATUS_REPORT) final ParameterDTO parameters) {
	
		
	//BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
	//		.getTmpCpuCodeList();				
		view.setViewBillReceivedReport(BillReceivedReportView.class, true);
	}	

	
	/**
	 * Method for payment process cpu menu.
	 * */
	protected void showPaymentProcessCpu(
			@Observes @CDIEvent(MenuItemBean.PAYMENT_PROCESS_CPU) final ParameterDTO parameters) {
	
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
		BeanItemContainer<SelectValue> selectValueContainerforCpuCode = usertoCPUMapService.getRevisedUserCpuContainer(userId);
		
		
//	BeanItemContainer<SelectValue> selectValueContainerforCpuCode = masterService
//			.getTmpCpuCodeList();
	BeanItemContainer<SelectValue> selectValueContainerforyear = masterService
			.getTmpCpuCodeList();
	/*BeanItemContainer<SelectValue> selectValueContainerforCpuLotNo = masterService
			.getcpuLotNo();*/
	BeanItemContainer<SelectValue> selectValueContainerforCpuLotNo = masterService
			.getCpuLotNumberForPaymentProcessCpu();
	BeanItemContainer<SelectValue> selectValueContainerforStatus = masterService
			.getTmpCpuCodeList();
	BeanItemContainer<SelectValue> selectValueContainerforbranch = masterService
			.getTmpCpuDescriptionList();
	
		view.setViewPaymentProcessCpu(PaymentProcessCpuView.class,true,selectValueContainerforCpuCode,selectValueContainerforyear,selectValueContainerforCpuLotNo,selectValueContainerforStatus,
				selectValueContainerforbranch);
				
	} 
	
	protected void showPaymentProcessCpuPage(
			@Observes @CDIEvent(MenuItemBean.PAYMENT_PROCESS_CPU_PAGE) final ParameterDTO parameters) {	
		PaymentProcessCpuTableDTO  paymentTableDto= (PaymentProcessCpuTableDTO) parameters
				.getPrimaryParameter();
		Claim claimObj = claimService.getClaimsByIntimationNumber(paymentTableDto.getIntimationNo());
		
		 
		
		if(claimObj != null)
		{			
			//List<Reimbursement> reimObjList = reimbursementService.getReimbursementByClaimKey(claimObj.getKey());
			
			Reimbursement reimbursement = null;
			if(null != paymentTableDto.getRodNo()){
			reimbursement = reimbursementService.getReimbursementObject(paymentTableDto.getRodNo());
				if(reimbursement != null)
				{
					reimObj = reimbursement;
				}
			}
			ClaimDto claimDto =  ClaimMapper.getInstance().getClaimDto(claimObj);
			
			if (claimObj.getIntimation().getPolicy().getHomeOfficeCode() != null) {
				 List<MasOmbudsman> ombudsmanOfficeList = getOmbudsmanOffiAddrByPIOCode(claimObj.getIntimation().getPolicy().getHomeOfficeCode());
				 if(ombudsmanOfficeList !=null && !ombudsmanOfficeList.isEmpty()){
					 claimDto.setOmbudsManAddressList(ombudsmanOfficeList);
				 }
			 }
			
			NewIntimationDto newIntimationDto = intimationService.getIntimationDto(claimObj.getIntimation());
			claimDto.setNewIntimationDto(newIntimationDto);
			PaymentProcessCpuPageDTO pageDto = new PaymentProcessCpuPageDTO(paymentTableDto,claimDto,reimbursement);
			pageDto.setClaimDto(claimDto);
			pageDto.setReimbursementObj(reimbursement);
			
			List<RODDocumentSummary> rodDocSummary = new ArrayList<RODDocumentSummary>();
			 
			 if(reimbursement != null ){
				 rodDocSummary = paymentProcessService.getBillDetails(reimbursement.getKey());
			
				 if((reimbursement.getPatientStatus() != null 
						 && (ReferenceTable.PATIENT_STATUS_DECEASED.equals(reimbursement.getPatientStatus().getKey())
								 || ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(reimbursement.getPatientStatus().getKey()))
						 && reimbursement.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId() != null
						 && ReferenceTable.RELATION_SHIP_SELF_KEY.equals(reimbursement.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId().getKey()))
						 || (reimbursement.getClaim().getIncidenceFlag() != null 
						 			&& SHAConstants.DEATH_FLAG.equalsIgnoreCase(reimbursement.getClaim().getIncidenceFlag()))) {
				 
					 List<ProposerNominee> selectedNomineeList = intimationService.getNomineeListByTransactionKey(reimbursement.getKey());
				 
					 if(selectedNomineeList != null && !selectedNomineeList.isEmpty()){
						 StringBuffer selectedNomineeName = new StringBuffer("");
						 for (ProposerNominee proposerNominee : selectedNomineeList) {
							
							 if(proposerNominee.getSelectedFlag() != null && SHAConstants.YES_FLAG.equalsIgnoreCase(proposerNominee.getSelectedFlag())){
								 selectedNomineeName = selectedNomineeName.toString().isEmpty() ? selectedNomineeName.append(proposerNominee.getNomineeName()) : selectedNomineeName.append(", ").append(proposerNominee.getNomineeName());
							 }
						 }
						 pageDto.getClaimDto().getNewIntimationDto().setNomineeName(selectedNomineeName.toString());
					 }
					 else {
						 
						 List<LegalHeir> legalHeirList = masterService.getlegalHeirListByTransactionKey(reimbursement.getKey());
							if(legalHeirList != null && !legalHeirList.isEmpty()) {
								List<LegalHeirDTO> legalHeirDTOList = new ArrayList<LegalHeirDTO>();
								LegalHeirDTO legalHeirDto;
								for (LegalHeir legalHeirObj : legalHeirList) {
									 legalHeirDto = new LegalHeirDTO(legalHeirObj);
									 legalHeirDto.setRelationshipContainer(masterService.getRelationshipContainerValues());
									 legalHeirDTOList.add(legalHeirDto);
								}
								pageDto.setLegalHeirDTOList(legalHeirDTOList);
							}
					 }
				 }
			 }
			
			 SimpleDateFormat newFormat = new SimpleDateFormat("dd/MM/yyyy");
			if(null != rodDocSummary && ! rodDocSummary.isEmpty())
			{
			   String billNumber = "";
			   
			   String billDate = "";
	        
			   for (RODDocumentSummary docSummary : rodDocSummary) {
				
				   billNumber = docSummary.getBillNumber() != null ? billNumber + docSummary.getBillNumber() + " , " :  billNumber ;
				   billDate = docSummary.getBillDate() != null ? billDate + docSummary.getBillDate() + " ," : billDate ;
				   
			}
			   pageDto.setBillNumber(billNumber);
			   String start_dt = billDate;
			   SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-DD"); 
			   try
			   {
			   if(! start_dt.isEmpty()){
				   Date date = (Date)formatter.parse(start_dt);
				  
				   String finalString = newFormat.format(date);			   	  
				   pageDto.setBillDateValue(finalString);
			     }
			   }		   
			  
			   catch (Exception e) {
			        e.printStackTrace();
			    }
			  
			  
			}
			
			if(null!= paymentTableDto.getInterestAmount()){
				
			 pageDto.setIntrestAmount(paymentTableDto.getInterestAmount());
			 pageDto.setIntrestAmountInWords(SHAUtils.getParsedAmount(paymentTableDto.getInterestAmount()));
			}
			 
			pageDto.setAdmissionDate(claimDto.getAdmissionDate());
			pageDto.setDischargeDate(claimDto.getDischargeDate());				
			
			
			String finalString1 = reimbursement != null &&
					reimbursement.getDocAcknowLedgement() != null && 
					reimbursement.getDocAcknowLedgement().getDocumentReceivedDate() != null ? newFormat.format(reimbursement.getDocAcknowLedgement().getDocumentReceivedDate()) : "";
			pageDto.setBillReceivedDateValue(finalString1);	
			
			if(null != paymentTableDto.getChequeDate())
			{
			String finalString2 = newFormat.format(paymentTableDto.getChequeDate());
			pageDto.setDdDateValue(finalString2);
			}
			
			if(null != paymentTableDto.getAmount())
			{
			pageDto.setAmountInwords(SHAUtils.getParsedAmount(paymentTableDto.getAmount()));
			}
			
			pageDto.setCreatedBy(paymentTableDto.getCreatedBy());
			
			if(reimbursement.getDocAcknowLedgement() != null && reimbursement.getDocAcknowLedgement().getModeOfReceiptId() != null ){
				pageDto.setModeOfReceipt(reimbursement.getDocAcknowLedgement().getModeOfReceiptId().getKey());
			}
			view.setViewPaymentProcessCpuPage(PaymentProcessCpuPageView.class,true,pageDto);
		}
		
				
 	}
//	protected void showRevisedEditIntimation(
//			@Observes @CDIEvent(MenuItemBean.REVISED_EDIT_INTIMATION) final ParameterDTO parameters) {
//		NewIntimationDto newIntimationDto = null;
//		if (parameters.getPrimaryParameter() instanceof NewIntimationDto) {
//			newIntimationDto = (NewIntimationDto) parameters
//					.getPrimaryParameter();
//		} else if (parameters.getPrimaryParameter() instanceof SearchEditHospitalDetailsTableDTO) {
//			searchEditHospitalDto = (SearchEditHospitalDetailsTableDTO) parameters
//					.getPrimaryParameter();
//			Intimation editHospitalIntimation = intimationService
//					.getIntimationByKey(searchEditHospitalDto.getKey());
//			newIntimationDto = intimationService
//					.getIntimationDto(editHospitalIntimation);
//		}
//
//		Long intimationId = newIntimationDto.getKey();
//		// Long polsysId = newIntimationDto.getTmpPolicy().getPolSysId();
//		Long policyKey = newIntimationDto.getPolicy().getKey();
//		// TmpPolicy policy = policyService.findTmppolicyById(polsysId);
//		Policy policy = policyService.getPolicyByKey(policyKey);
//		/*
//		 * TmpInsured insured = policyService.findByInsuredKey(newIntimationDto
//		 * .getInsuredPatientId().getKey());
//		 */
//		Insured insured = policyService.findByClsInsuredKey(newIntimationDto
//				.getInsuredPatient().getKey());
//		newIntimationDto.setInsuredPatient(insured);
//		Intimation intimationToEdit = intimationService
//				.getIntimationByKey(intimationId);
//		NewIntimationDto new_IntimationDto = intimationService
//				.getIntimationDto(intimationToEdit);
//		// new_IntimationDto.setTmpPolicy(policy);
//		new_IntimationDto.setPolicy(policy);
//		if (new_IntimationDto.getHospitalDto() != null) {
//			HospitalDto hospitalDto = hospitalService.read(new_IntimationDto
//					.getHospitalDto().getKey(), newIntimationDto
//					.getHospitalDto().getHospitalType());
//			new_IntimationDto.setHospitalDto(hospitalDto);
//			new_IntimationDto.setHospitalType(newIntimationDto.getHospitalDto()
//					.getHospitalType());
//			new_IntimationDto.setHospitalTypeValue(newIntimationDto
//					.getHospitalDto().getHospitalType().getValue());
//
//			CityTownVillage cityByKey = null;
//			State stateByKey = null;
//			if (hospitalDto.getRegistedHospitals() != null
//					&& new_IntimationDto.getHospitalDto().getHospitalType()
//							.getValue().toLowerCase().contains("network")) {
//				cityByKey = masterService.getCityByKey(hospitalDto
//						.getRegistedHospitals().getCityId());
//				hospitalDto.setCpuId(hospitalDto.getRegistedHospitals()
//						.getCpuId());
//				stateByKey = masterService.getStateByKey(hospitalDto
//						.getRegistedHospitals().getStateId());
//
//			} else {
//				cityByKey = masterService.getCityByKey(hospitalDto
//						.getNotRegisteredHospitals().getCityId());
//				stateByKey = masterService.getStateByKey(hospitalDto
//						.getNotRegisteredHospitals().getStateId());
//				hospitalDto.setCpuId(hospitalDto.getNotRegisteredHospitals()
//						.getCpuId());
//			}
//
//			new_IntimationDto.getHospitalDto().setCity(cityByKey.getValue());
//			new_IntimationDto.getHospitalDto().setState(stateByKey.getValue());
//			new_IntimationDto.setCity(cityByKey);
//			new_IntimationDto.setState(stateByKey);
//		}
//		if (new_IntimationDto.getNewBornFlag() != null
//				&& new_IntimationDto.getNewBornFlag()) {
//			List<NewBabyIntimation> babyIntimationList = intimationService
//					.getListOfNewBabyByIntimation(new_IntimationDto.getKey());
//			List<NewBabyIntimationDto> babyIntimationDtoList = new ArrayList<NewBabyIntimationDto>();
//			if (babyIntimationList != null && !babyIntimationList.isEmpty()) {
//				for (NewBabyIntimation newBabyIntimation : babyIntimationList) {
//					babyIntimationDtoList.add(new NewBabyIntimationMapper()
//							.getNewBabyIntimationDto(newBabyIntimation));
//				}
//			}
//			if (!babyIntimationDtoList.isEmpty()) {
//				new_IntimationDto
//						.setNewBabyIntimationListDto(babyIntimationDtoList);
//			}
//		}
//		new_IntimationDto.setInsuredPatient(insured);
//
//		// view.setNewIntimationView(IntimationDetailsView.class,
//		// new_IntimationDto);
//
//		view.setNewIntimationView(IntimationDetailsView.class,
//				new_IntimationDto, parameters);
//	}
	
	
	
	protected void showPaymentProcess(
			@Observes @CDIEvent(MenuItemBean.PAYMENT_PROCESS_REPORT) final ParameterDTO parameters) {
	
	BeanItemContainer<SelectValue> selectValueContainerforCpuCode = masterService
			.getTmpCpuCodeList();
	BeanItemContainer<SelectValue> selectValueContainerforyear = masterService
			.getTmpCpuCodeList();
	BeanItemContainer<SelectValue> selectValueContainerforCpuLotNo = masterService
			.getTmpCpuCodeList();
	BeanItemContainer<SelectValue> selectValueContainerforStatus = masterService
			.getTmpCpuCodeList();
	BeanItemContainer<SelectValue> selectValueContainerforbranch = masterService
			.getTmpCpuCodeList();
	
		view.setViewPaymentProcess(PaymentProcessView.class,true,selectValueContainerforCpuCode,selectValueContainerforyear,selectValueContainerforCpuLotNo,selectValueContainerforStatus,
				selectValueContainerforbranch);
				
	}
	
	
	protected void showPaymentProcessTransaction(
			@Observes @CDIEvent(MenuItemBean.PAYMENT_PROCESS_REPORT) final ParameterDTO parameters) {
	
	//BeanItemContainer<SelectValue> selectValueContainerForStatus = masterService
	//		.getTmpCpuCodeList();				
//		view.setViewPaymentProcessTransaction(PaymentProcessTransactionView.class, true,
//				selectValueContainerForStatus);
	}	
	

	protected void showEnterBillDetails(
			@Observes @CDIEvent(MenuItemBean.ENTER_BILL_DETAILS) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		
//		BeanItemContainer<SelectValue> statusByStage = masterService.getStatusByStage(ReferenceTable.CREATE_ROD_STAGE_KEY);
		
		Stage stageByKey = preauthService.getStageByKey(ReferenceTable.CREATE_ROD_STAGE_KEY);
		Stage billingStage = preauthService.getStageByKey(ReferenceTable.BILLING_STAGE);
		Stage financialStage = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);
		BeanItemContainer<SelectValue> masBillClassificationValues = masterService.getMasBillClassificationValuesForBillEntry();
		
		
		SelectValue selectValue = new SelectValue();
		selectValue.setId(stageByKey.getKey());
		selectValue.setValue(stageByKey.getStageName());
		
		SelectValue selBillValue = new SelectValue();
		if(null != billingStage)
		{
			selBillValue.setId(billingStage.getKey());
			selBillValue.setValue(billingStage.getStageName());
		}
		
		SelectValue selFinValue = new SelectValue();
		if(null != financialStage)
		{
			selFinValue.setId(financialStage.getKey());
			selFinValue.setValue(financialStage.getStageName());
		}
		
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue);
		statusByStage.addBean(selBillValue);
		statusByStage.addBean(selFinValue);
		
		view.setViewEnterBillDetails(SearchEnterBillDetailView.class, true,
				selectValueContainerForCPUCode,selectValueForPriority,statusByStage,masBillClassificationValues);
	}

	protected void showUploadInvestigation(
			@Observes @CDIEvent(MenuItemBean.UPLOAD_INVESTIGATION_REPORT) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> claimTypeListContainer = masterService.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
		view.setViewUploadInvestigation(SearchUploadInvesticationView.class, true,claimTypeListContainer);
	}
	
	protected void showPAUploadInvestigation(
			@Observes @CDIEvent(MenuItemBean.PA_UPLOAD_INVESTIGATION_REPORT) final ParameterDTO parameters) {
		view.setViewG(SearchUploadInvesticationView.class, true);
	}

	protected void showDraftQueryLetterSearch(
			@Observes @CDIEvent(MenuItemBean.DRAFT_QUERY_LETTER_SEARCH) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		
		
		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
		Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);

		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey2.getKey());
		selectValue1.setValue(stageByKey2.getStageName());
		
		SelectValue selectValue2 = new SelectValue();
		selectValue2.setId(stageByKey3.getKey());
		selectValue2.setValue(stageByKey3.getStageName());
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue1);
		statusByStage.addBean(selectValue2);
		
		view.setViewDefautQuery(SearchDraftQueryLetterView.class, true,
				selectValueContainerForCPUCode,selectValueForPriority,statusByStage);
	}

	protected void showProcessDraftQueryLetter(
			@Observes @CDIEvent(MenuItemBean.PROCESS_DRAFT_QUERY_LETTER) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		
		
        BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		
		
		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
		Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);

		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey2.getKey());
		selectValue1.setValue(stageByKey2.getStageName());
		
		SelectValue selectValue2 = new SelectValue();
		selectValue2.setId(stageByKey3.getKey());
		selectValue2.setValue(stageByKey3.getStageName());
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue1);
		statusByStage.addBean(selectValue2);
				
		view.setViewProcessDefautQuery(SearchProcessDraftQueryView.class, true,
				selectValueContainerForCPUCode,selectValueForPriority,statusByStage);
	}

//	protected void showGenerateReminderLetter(
//			@Observes @CDIEvent(MenuItemBean.GENERATE_REMINDER_LETTER_CLAIMWISE) final ParameterDTO parameters) {
//		Map<String,Object> referenceValue = new HashMap<String, Object>();
//		BeanItemContainer<SelectValue> cpuCodeContainer = masterService
//				.getTmpCpuCodeList();
//		BeanItemContainer<SelectValue> claimTypeContainer = masterService
//				.getClaimtypeContainer();
//		
//		referenceValue.put("cpuCodeContainer",cpuCodeContainer);
//		referenceValue.put("claimTypeContainer", claimTypeContainer);
//		
//		BeanItemContainer<SelectValue> categoryContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
//
//		SelectValue allCategorySelectValue = new SelectValue(null,SHAConstants.ALL);
//		SelectValue billsNotRecvdSelectValue = new SelectValue(null,SHAConstants.BILLS_NOT_RECEIVED);
//		SelectValue preAuthbillsNotRecvdSelectValue = new SelectValue(null,SHAConstants.PREAUTH_BILLS_NOT_RECEIVED);
//		SelectValue querySelectValue = new SelectValue(null,SHAConstants.QUERY);
//		categoryContainer.addBean(allCategorySelectValue);
//		categoryContainer.addBean(billsNotRecvdSelectValue);
//		categoryContainer.addBean(preAuthbillsNotRecvdSelectValue);
//		categoryContainer.addBean(querySelectValue);
//		
//		referenceValue.put("categoryContainer",categoryContainer);
//		
//		BeanItemContainer<SelectValue> reminderTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
//
//		SelectValue allReminder = new SelectValue(null,SHAConstants.ALL);
//		SelectValue firstReminder = new SelectValue(null,SHAConstants.FIRST_REMINDER);
//		SelectValue secondReminder = new SelectValue(null,SHAConstants.SECOND_REMINDER);
//		SelectValue closeReminder = new SelectValue(null,SHAConstants.CLOSE);
//		reminderTypeContainer.addBean(allReminder);
//		reminderTypeContainer.addBean(firstReminder);
//		reminderTypeContainer.addBean(secondReminder);
//		reminderTypeContainer.addBean(closeReminder);
//		
//		referenceValue.put("reminderTypeContainer",reminderTypeContainer);
//		  			
//		view.setViewGenerateReminderLetter(SearchGenerateRemainderView.class,
//				true, referenceValue);
//	}

	protected void showGenerateReminderLetters(
			@Observes @CDIEvent(MenuItemBean.GENERATE_REMINDER_LETTER_CLAIM_WISE) final ParameterDTO parameters) {
	
		Map<String,Object> referenceValue = new HashMap<String, Object>();
		BeanItemContainer<SelectValue> cpuCodeContainer = masterService
				.getTmpCpuCodeList();
		BeanItemContainer<SelectValue> claimTypeContainer = masterService
				.getClaimtypeContainer();
		
		referenceValue.put("cpuCodeContainer",cpuCodeContainer);
		referenceValue.put("claimTypeContainer", claimTypeContainer);	
		
		BeanItemContainer<SelectValue> categoryContainer = new BeanItemContainer<SelectValue>(SelectValue.class);

		SelectValue allCategorySelectValue = new SelectValue(null,SHAConstants.ALL);
		SelectValue billsNotRecvdSelectValue = new SelectValue(null,SHAConstants.BILLS_NOT_RECEIVED);
		SelectValue preAuthbillsNotRecvdSelectValue = new SelectValue(null,SHAConstants.PREAUTH_BILLS_NOT_RECEIVED);
		SelectValue querySelectValue = new SelectValue(null,SHAConstants.QUERY);
		categoryContainer.addBean(allCategorySelectValue);
		categoryContainer.addBean(billsNotRecvdSelectValue);
		categoryContainer.addBean(preAuthbillsNotRecvdSelectValue);
		categoryContainer.addBean(querySelectValue);
		
		referenceValue.put("categoryContainer",categoryContainer);
		
		BeanItemContainer<SelectValue> reminderTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);

		SelectValue allReminder = new SelectValue(null,SHAConstants.ALL);
		SelectValue firstReminder = new SelectValue(null,SHAConstants.FIRST_REMINDER);
		SelectValue secondReminder = new SelectValue(null,SHAConstants.SECOND_REMINDER);
		SelectValue closeReminder = new SelectValue(null,SHAConstants.CLOSE);
		reminderTypeContainer.addBean(allReminder);
		reminderTypeContainer.addBean(firstReminder);
		reminderTypeContainer.addBean(secondReminder);
		reminderTypeContainer.addBean(closeReminder);
		
		referenceValue.put("reminderTypeContainer",reminderTypeContainer);		
		
		view.setViewGenerateReminderLetter(SearchGenerateRemainderView.class,
				true, referenceValue);
	}
	
	// this for Bulk Reminder Search
	
	protected void showGenerateBulkReminderLetters(
			@Observes @CDIEvent(MenuItemBean.GENERATE_REMINDER_LETTER_BULK) final ParameterDTO parameters) {
	
		Map<String,Object> referenceValue = new HashMap<String, Object>();
		BeanItemContainer<SelectValue> cpuCodeContainer = masterService
				.getTmpCpuCodeList();
		BeanItemContainer<SelectValue> claimTypeContainer = masterService
				.getClaimtypeContainer();
		
		referenceValue.put("cpuCodeContainer",cpuCodeContainer);
		referenceValue.put("claimTypeContainer", claimTypeContainer);	
		
		BeanItemContainer<SelectValue> categoryContainer = new BeanItemContainer<SelectValue>(SelectValue.class);

		SelectValue billsNotRecvdSelectValue = new SelectValue(null,SHAConstants.BILLS_NOT_RECEIVED);
		SelectValue preAuthbillsNotRecvdSelectValue = new SelectValue(null,SHAConstants.PREAUTH_BILLS_NOT_RECEIVED);
		SelectValue querySelectValue = new SelectValue(null,SHAConstants.QUERY);
		categoryContainer.addBean(billsNotRecvdSelectValue);
		categoryContainer.addBean(preAuthbillsNotRecvdSelectValue);
		categoryContainer.addBean(querySelectValue);
		
		referenceValue.put("categoryContainer",categoryContainer);
		
		BeanItemContainer<SelectValue> reminderTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);

		SelectValue firstReminder = new SelectValue(null,SHAConstants.FIRST_REMINDER);
		SelectValue secondReminder = new SelectValue(null,SHAConstants.SECOND_REMINDER);
		SelectValue closeReminder = new SelectValue(null,SHAConstants.CLOSE);
		reminderTypeContainer.addBean(firstReminder);
		reminderTypeContainer.addBean(secondReminder);
		reminderTypeContainer.addBean(closeReminder);
		
		referenceValue.put("reminderTypeContainer",reminderTypeContainer);		
		
		List<BulkReminderResultDto> prevRemindBatchList = bulkReminderSerachSevice.searchPrevBatch();
		
		referenceValue.put("prevBatchList",prevRemindBatchList);
		
		view.setViewGenerateBulkReminderLetter(SearchGenerateRemainderBulkView.class,
				true, referenceValue);
	}
	
	protected void showPrintBulkReminderLetters(
			@Observes @CDIEvent(MenuItemBean.PRINT_REMINDER_LETTER_BULK) final ParameterDTO parameters) {
	
		Map<String,Object> referenceValue = new HashMap<String, Object>();
//		BeanItemContainer<SelectValue> cpuCodeContainer = masterService
//				.getTmpCpuCodeList();
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
//		BeanItemContainer<SelectValue> cpuCodeContainer = usertoCPUMapService.getUserCpuContainer(userId);
		BeanItemContainer<SelectValue> cpuCodeContainer = usertoCPUMapService.getRevisedUserCpuContainer(userId);
		BeanItemContainer<SelectValue> claimTypeContainer = masterService
				.getClaimtypeContainer();
		
		referenceValue.put("cpuCodeContainer",cpuCodeContainer);
		referenceValue.put("claimTypeContainer", claimTypeContainer);	
		
		BeanItemContainer<SelectValue> categoryContainer = new BeanItemContainer<SelectValue>(SelectValue.class);

		SelectValue billsNotRecvdSelectValue = new SelectValue(null,SHAConstants.BILLS_NOT_RECEIVED);
		SelectValue preAuthbillsNotRecvdSelectValue = new SelectValue(null,SHAConstants.PREAUTH_BILLS_NOT_RECEIVED);
		SelectValue querySelectValue = new SelectValue(null,SHAConstants.QUERY);
		categoryContainer.addBean(billsNotRecvdSelectValue);
		categoryContainer.addBean(preAuthbillsNotRecvdSelectValue);
		categoryContainer.addBean(querySelectValue);
		
		referenceValue.put("categoryContainer",categoryContainer);
		
		BeanItemContainer<SelectValue> reminderTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);

		SelectValue firstReminder = new SelectValue(null,SHAConstants.FIRST_REMINDER);
		SelectValue secondReminder = new SelectValue(null,SHAConstants.SECOND_REMINDER);
		SelectValue closeReminder = new SelectValue(null,SHAConstants.CLOSE);
		reminderTypeContainer.addBean(firstReminder);
		reminderTypeContainer.addBean(secondReminder);
		reminderTypeContainer.addBean(closeReminder);
		
		referenceValue.put("reminderTypeContainer",reminderTypeContainer);		
		
		view.setViewPrintBulkReminderLetter(SearchPrintRemainderBulkView.class,
				true, referenceValue);
	}
	
	
	protected void showPrintBulkPaymentLetters(
			@Observes @CDIEvent(MenuItemBean.PRINT_OMP_PAYEMENT_LETTER_BULK) final ParameterDTO parameters) {
	
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		view.setViewPrintBulkPaymentLetter(SearchPrintPaymentBulkView.class,true);
	}
	
	protected void showClaimsAuditReport(
			@Observes @CDIEvent(MenuItemBean.CVC_AUDIT_REPORT) final ParameterDTO parameters) {
	
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
		view.setViewClaimsAuditReport(ClaimAuditReportView.class,true);
	}
	
	
	protected void showDraftRejectionLetter(
			@Observes @CDIEvent(MenuItemBean.DRAFT_REJECTION_LETTER) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		
		  BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
			
			
			Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
			Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);

			SelectValue selectValue1 = new SelectValue();
			selectValue1.setId(stageByKey2.getKey());
			selectValue1.setValue(stageByKey2.getStageName());
			
			SelectValue selectValue2 = new SelectValue();
			selectValue2.setId(stageByKey3.getKey());
			selectValue2.setValue(stageByKey3.getStageName());
			
			BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
			statusByStage.addBean(selectValue1);
			statusByStage.addBean(selectValue2);
			
			
		view.setViewDefautRejectionLetter(SearchDraftRejectionLetterView.class,
				true, selectValueContainerForCPUCode,selectValueForPriority,statusByStage);
	}

	protected void showProcessDraftRejectionLetter(
			@Observes @CDIEvent(MenuItemBean.PROCESS_DRAFT_REJECTION_LETTER) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		
		 	BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
			
			
			Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
			Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);

			SelectValue selectValue1 = new SelectValue();
			selectValue1.setId(stageByKey2.getKey());
			selectValue1.setValue(stageByKey2.getStageName());
			
			SelectValue selectValue2 = new SelectValue();
			selectValue2.setId(stageByKey3.getKey());
			selectValue2.setValue(stageByKey3.getStageName());
			
			BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
			statusByStage.addBean(selectValue1);
			statusByStage.addBean(selectValue2);
		
		view.setViewProcessDefautRejection(
				SearchProcessDraftRejectionView.class, true,
				selectValueContainerForCPUCode,selectValueForPriority,statusByStage);
	}
	
	
	/**
	 * Submit Specialist for Reimbursement
	 * @param parameters
	 */
//:TODO reimbusement
	protected void showSubmitSpecialistAdvice(
			@Observes @CDIEvent(MenuItemBean.SUBMIT_SPECIALIST_ADVISE) final ParameterDTO parameters) {
		/*
		 * BeanItemContainer<SelectValue> selectValueContainerForCPUCode =
		 * masterService.getTmpCpuCodeList();
		 * view.setViewSubmitSpecialistAdvice(
		 * SearchSubmitSpecialistAdviseView.class, true,
		 * selectValueContainerForCPUCode);
		 */
		BeanItemContainer<SelectValue> selectValueForRefferedByDoc = masterService
				.getRefferedByDocList();
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodes();
		view.setViewG(SubmitSpecialistView.class, selectValueForRefferedByDoc,
				true, true, selectValueContainerForCPUCode);
	}

	protected void showProcessClaimRequestZonalReview(
			@Observes @CDIEvent(MenuItemBean.PROCESS_CLAIM_REQUEST_ZONAL_REVIEW) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> insuranceSource = masterService
				.getMasterValueByReference(ReferenceTable.INTIMATION_SOURCE);
		BeanItemContainer<SelectValue> networkHospitalType = masterService
				.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
		BeanItemContainer<SelectValue> hospitalType = masterService
				.getMasterValueByReference(ReferenceTable.HOSPITAL_TYPE);
		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getStageList();
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
				
//		BeanItemContainer<SelectValue> statusByStage = masterService.getStatusByStage(ReferenceTable.CREATE_ROD_STAGE_KEY);
		
		Status status = preauthService.getStatusByKey(ReferenceTable.BILL_ENTRY_STAGE_KEY);
		Status status1 = preauthService.getStatusByKey(ReferenceTable.ZONAL_REVIEW_COORDINATOR_REPLY_STATUS);
		
		SelectValue selectValue = new SelectValue();
		selectValue.setId(status.getKey());
		selectValue.setValue(status.getProcessValue());
		
		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(status1.getKey());
		selectValue1.setValue(status1.getProcessValue());
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue);
		statusByStage.addBean(selectValue1);

		view.setViewsProcessClaimRequestZonalReview(
				SearchProcessClaimRequestZonalView.class, true,
				insuranceSource, hospitalType, networkHospitalType,selectValueContainerForType,selectValueForPriority,statusByStage);
	}

	protected void showProcessClaimRequest(
			@Observes @CDIEvent(MenuItemBean.PROCESS_CLAIM_REQUEST) final ParameterDTO parameters) {
		SearchProcessClaimRequestFormDTO dto = null;
		if(parameters.getPrimaryParameter() != null && (parameters.getPrimaryParameter() instanceof SearchProcessClaimRequestFormDTO)) {
			dto = (SearchProcessClaimRequestFormDTO) parameters.getPrimaryParameter();
		}
		BeanItemContainer<SelectValue> insuranceSource = masterService
				.getMasterValueByReference(ReferenceTable.INTIMATION_SOURCE);
		BeanItemContainer<SelectValue> networkHospitalType = masterService
				.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
		BeanItemContainer<SelectValue> hospitalType = masterService
				.getMasterValueByReference(ReferenceTable.HOSPITAL_TYPE);
		BeanItemContainer<SelectValue> treatmentType = masterService
				.getMasterValueByReference(ReferenceTable.TREATMENT_MANAGEMENT);
		
		BeanItemContainer<SelectValue> productName = masterService.getSelectValueContainerForProduct();
		BeanItemContainer<SelectValue> cpuCode = masterService.getTmpCpuCodes();
		
		BeanItemContainer<SelectValue> claimType = masterService.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
		
		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getStageList();
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		
//		BeanItemContainer<SelectValue> statusByStage = masterService.getStatusByStage(ReferenceTable.CREATE_ROD_STAGE_KEY);
		
		Stage stageByKey = preauthService.getStageByKey(ReferenceTable.ZONAL_REVIEW_STAGE);
		Stage stageByKey1 = preauthService.getStageByKey(ReferenceTable.BILLING_STAGE);
		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);
		Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.CREATE_ROD_STAGE_KEY);
		Stage stageByKey4 = preauthService.getStageByKey(ReferenceTable.BILL_ENTRY_STAGE_KEY);
		Status statusByKey5 = preauthService.getStatusByKey(ReferenceTable.PREAUTH_COORDINATOR_REPLY_RECEIVED_STATUS); 
		Status statusByKey6 = preauthService.getStatusByKey(ReferenceTable.SPECIALIST_REPLY_RECEIVED);
		Status statusByKey7 = preauthService.getStatusByKey(ReferenceTable.FVR_REPLAY_RECIEVED_STATUS);
		
		
		
		
//		Status statusByKey2 = preauthService.getStatusByKey(ReferenceTable.BILLING_REFER_TO_MEDICALA_APPROVER);
//		Status statuseByKey3 = preauthService.getStatusByKey(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER);
//		Status statusByKey4 = preauthService.getStatusByKey(ReferenceTable.CLAIM_REQUEST_COORDINATOR_REPLY_RECEIVED_STATUS);
//		Status statusByKey5 = preauthService.getStatusByKey(ReferenceTable.CLAIM_REQUEST_SPECIALIST_REPLY_RECEIVED_STATUS);
//		Status statusByKey6 = preauthService.getStatusByKey(ReferenceTable.UPLOAD_INVESIGATION_COMPLETED);
//		Status statusByKey7 = preauthService.getStatusByKey(ReferenceTable.FVR_REPLAY_RECIEVED_STATUS);
//		Status statusByKey8 = preauthService.getStatusByKey(ReferenceTable.CLAIM_REQUEST_QUERY_RECEIVED_STATUS);
////		Status statusByKey9 = preauthService.getStatusByKey(ReferenceTable.FA_QUERY_REPLY_STATUS);
//		
		SelectValue selectValue = new SelectValue();
		selectValue.setId(stageByKey.getKey());
		selectValue.setValue(stageByKey.getStageName());
		
		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey1.getKey());
		selectValue1.setValue(stageByKey1.getStageName());
		
		SelectValue selectValue2 = new SelectValue();
		selectValue2.setId(stageByKey2.getKey());
		selectValue2.setValue(stageByKey2.getStageName());
		
		SelectValue selectValue3 = new SelectValue();
		selectValue3.setId(stageByKey3.getKey());
		selectValue3.setValue(stageByKey3.getStageName());
		
		SelectValue selectValue4 = new SelectValue();
		selectValue4.setId(stageByKey4.getKey());
		selectValue4.setValue(stageByKey4.getStageName());
		
		SelectValue selectValue5 = new SelectValue();
		selectValue5.setId(statusByKey5.getKey());
		selectValue5.setValue(statusByKey5.getProcessValue());
		
		SelectValue selectValue6 = new SelectValue();
		selectValue6.setId(statusByKey6.getKey());
		selectValue6.setValue(statusByKey6.getProcessValue());
		
		SelectValue selectValue7 = new SelectValue();
		selectValue7.setId(statusByKey7.getKey());
		selectValue7.setValue(statusByKey7.getProcessValue());
		
		SelectValue selectValue8 = new SelectValue();
		selectValue8.setId(1l);
		selectValue8.setValue(SHAConstants.SOURCE_INVESTIGATION_DISAPPROVED);
		
		SelectValue selectValue9 = new SelectValue();
		selectValue9.setId(2l);
		selectValue9.setValue(SHAConstants.SOURCE_INVESTIGATION_REPORT_RECEIVED);
		
//		
//		SelectValue selectValue1 = new SelectValue();
//		selectValue1.setId(statusByKey2.getKey());
//		selectValue1.setValue("Billing- "+ statusByKey2.getProcessValue());
//		
//		SelectValue selectValue2 = new SelectValue();
//		selectValue2.setId(statuseByKey3.getKey());
//		selectValue2.setValue("FA- "+statuseByKey3.getProcessValue());
//		
//		SelectValue selectValue3 = new SelectValue();
//		selectValue3.setId(statusByKey4.getKey());
//		selectValue3.setValue(statusByKey4.getProcessValue());
//		
//		SelectValue selectValue4 = new SelectValue();
//		selectValue4.setId(statusByKey5.getKey());
//		selectValue4.setValue(statusByKey5.getProcessValue());
//		
//		SelectValue selectValue5 = new SelectValue();
//		selectValue5.setId(statusByKey6.getKey());
//		selectValue5.setValue(statusByKey6.getProcessValue());
//		
//		SelectValue selectValue6 = new SelectValue();
//		selectValue6.setId(statusByKey7.getKey());
//		selectValue6.setValue(statusByKey7.getProcessValue());
//		
//		SelectValue selectValue7 = new SelectValue();
//		selectValue7.setId(statusByKey8.getKey());
//		selectValue7.setValue(SHAConstants.QUERY_REPLY);
//		
//		SelectValue selectValue8 = new SelectValue();
//		selectValue8.setId(0l);
//		selectValue8.setValue(SHAConstants.RECONSIDERATION);
		
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue);
		statusByStage.addBean(selectValue1);
		statusByStage.addBean(selectValue2);
		statusByStage.addBean(selectValue3);
		statusByStage.addBean(selectValue4);
		statusByStage.addBean(selectValue5);
		statusByStage.addBean(selectValue6);
		statusByStage.addBean(selectValue7);
		statusByStage.addBean(selectValue8);
		statusByStage.addBean(selectValue8);
		statusByStage.addBean(selectValue9);
//		statusByStage.addBean(selectValue5);
//		statusByStage.addBean(selectValue6);
//		statusByStage.addBean(selectValue7);
//		statusByStage.addBean(selectValue8);
		
		

		view.setViewsProcessClaimRequest(SearchProcessClaimRequestView.class,
				true, insuranceSource, hospitalType, networkHospitalType,
				treatmentType,selectValueContainerForType,productName,cpuCode,
				selectValueForPriority,statusByStage,claimType, dto,SHAConstants.MEDICAL_PENDING_SCREEN);
	}

	protected void showProcessClaimBilling(
			@Observes @CDIEvent(MenuItemBean.PROCESS_CLAIM_BILLING) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		BeanItemContainer<SelectValue> productNameCode = masterService
				.getProductCodeName();
		
		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getStageList();
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		
//		BeanItemContainer<SelectValue> statusByStage = masterService.getStatusByStage(ReferenceTable.CREATE_ROD_STAGE_KEY);
		
		Stage stageByKey = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
		

//		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.BILLING_STAGE);

		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);

		BeanItemContainer<SelectValue> claimType = masterService
				.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
		
		SelectValue selectValue = new SelectValue();
		selectValue.setId(stageByKey.getKey());
		selectValue.setValue(stageByKey.getStageName());
		
		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey2.getKey());
		selectValue1.setValue(stageByKey2.getStageName());
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue);
		statusByStage.addBean(selectValue1);
		
		view.setViewsProcessClaimBilling(SearchProcessClaimBillingView.class,
				true, selectValueContainerForCPUCode, productNameCode,selectValueContainerForType,selectValueForPriority,claimType,statusByStage);
	}


	protected void showProcessClaimRequestBenefitsBilling(
			@Observes @CDIEvent(MenuItemBean.PROCESS_CLAIM_REQUEST_BENEFITSBILLING) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> insuranceSource = masterService
				.getMasterValueByReference(ReferenceTable.INTIMATION_SOURCE);
		BeanItemContainer<SelectValue> networkHospitalType = masterService
				.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
		BeanItemContainer<SelectValue> hospitalType = masterService
				.getMasterValueByReference(ReferenceTable.HOSPITAL_TYPE);
		BeanItemContainer<SelectValue> treatmentType = masterService
				.getMasterValueByReference(ReferenceTable.TREATMENT_MANAGEMENT);

		view.setViewsProcessClaimRequestBenefits(
				SearchProcessClaimRequestBenefitsView.class, true,
				insuranceSource, hospitalType, networkHospitalType,
				treatmentType);
	}

	protected void showProcessClaimFinancials(
			@Observes @CDIEvent(MenuItemBean.PROCESS_CLAIM_FINANCIALS) final ParameterDTO parameters) {
		

		BeanItemContainer<SelectValue> claimType = masterService
				.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
		BeanItemContainer<SelectValue> productName = masterService.getSelectValueContainerForProduct();
		BeanItemContainer<SelectValue> cpuCode = masterService.getTmpCpuCodes();
		BeanItemContainer<SelectValue> type = masterService.getStatusByStage(ReferenceTable.BILLING_STAGE);
		BeanItemContainer<SelectValue> networkHospTypeParameter = masterService.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
		
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
		
//		BeanItemContainer<SelectValue> statusByStage = masterService.getStatusByStage(ReferenceTable.CREATE_ROD_STAGE_KEY);
		
		Stage stageByKey = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
		
		Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.BILLING_STAGE);
		
		SelectValue selectValue = new SelectValue();
		selectValue.setId(stageByKey.getKey());
		selectValue.setValue(stageByKey.getStageName());
		
		SelectValue selectValue1 = new SelectValue();
		selectValue1.setId(stageByKey2.getKey());
		selectValue1.setValue(stageByKey2.getStageName());
		
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue);
		statusByStage.addBean(selectValue1);
		
		
		view.setViewForSearchClaimFinancial(SearchProcessClaimFinancialsView.class, true,claimType,productName,cpuCode,type,selectValueForPriority,statusByStage,networkHospTypeParameter);
	}

	protected void showProcessOutpatientClaim(
			@Observes @CDIEvent(MenuItemBean.PORCESS_CLAIM_OP) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainer = masterService.getOPClaimTypeSelectValueContainer(ReferenceTable.CLAIM_TYPE);
		BeanItemContainer<SelectValue> selectValueContainerForPIOCode = masterService.getSelectValueContainerForPIOCode();

		view.setViewsProcessClaimClaimOP(
				SearchProcessOPClaimRequestView.class,
				selectValueContainer,selectValueContainerForPIOCode);
	}
	
	
	protected void showProcessClaimRequestBenefitsfinancial(
			@Observes @CDIEvent(MenuItemBean.PROCESS_CLAIM_REQUEST_BENEFITSFINANCIAL) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> insuranceSource = masterService
				.getMasterValueByReference(ReferenceTable.INTIMATION_SOURCE);
		BeanItemContainer<SelectValue> networkHospitalType = masterService
				.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
		BeanItemContainer<SelectValue> hospitalType = masterService
				.getMasterValueByReference(ReferenceTable.HOSPITAL_TYPE);
		BeanItemContainer<SelectValue> treatmentType = masterService
				.getMasterValueByReference(ReferenceTable.TREATMENT_MANAGEMENT);

		view.setViewsProcessClaimRequestBenefitsFinace(
				SearchProcessClaimRequestBenefitsFinancView.class, true,
				insuranceSource, hospitalType, networkHospitalType,
				treatmentType);
	}
	

	protected void showRe_OpenClaim(
			@Observes @CDIEvent(MenuItemBean.RE_OPEN_CLAIM_ROD_LEVEL) final ParameterDTO parameters) {
		view.setViewG(SearchReOpenClaimRodLevelView.class, true);
	}

	protected void showRe_OpenClaimClaimLevel(
			@Observes @CDIEvent(MenuItemBean.RE_OPEN_CLAIM_CLAIM_LEVEL) final ParameterDTO parameters) {
		view.setViewG(SearchReOpenClaimView.class, true);
	}
	
	protected void showCloseClaimRODLevelView(
			@Observes @CDIEvent(MenuItemBean.CLOSE_CLAIM_ROD_LEVEL) final ParameterDTO parameters) {
		view.setViewG(SearchCloseClaimRODLevelView.class, true);
	}
	
	protected void showCloseClaimClaimLevelSearch(
			@Observes @CDIEvent(MenuItemBean.CLOSE_CLAIM_CLAIM_LEVEL) final ParameterDTO parameters) {
		view.setViewG(SearchCloseClaimView.class, true);
	}
	
	
	protected void showInProcessCloseClaim(@Observes @CDIEvent(MenuItemBean.CLOSE_CLAIM_IN_PROCESS_ROD_LEVEL) final ParameterDTO parameters){
		view.setViewG(SearchCloseClaimInProcessView.class, true);
	}
	
	protected void showClaimWiseAllowApproval(@Observes @CDIEvent(MenuItemBean.CLAIM_WISE_ALLOW_APPROVAL) final ParameterDTO parameters){
		view.setViewG(SearchClaimWiseAllowApprovalView.class, true);
	}

	protected void showUploadTranslatedDocumentsR3(
			@Observes @CDIEvent(MenuItemBean.UPLOAD_TRANSLATED_DOCUMENTSR3) final ParameterDTO parameters) {
		view.setViewG(SearchProcessTranslationViewR3.class, true);
	}

	protected void showApproveClaim(
			@Observes @CDIEvent(MenuItemBean.APPROVE_CLAIM) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		view.setSearchApproveClaim(SearchApproveClaimView.class, true,
				selectValueContainerForCPUCode);
	}

	protected void showProcessClaim(
			@Observes @CDIEvent(MenuItemBean.PROCESS_CLAIM) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		view.setSearchProcessClaim(SearchProcessClaimView.class, true,
				selectValueContainerForCPUCode);
	}
	

	protected void showSearchUpdateNegotiation(@Observes @CDIEvent(MenuItemBean.UPDATE_NEGOTIATION) final ParameterDTO parameters){
		view.setViewG(SearchUpdateNegotiationView.class, true);
	}
	

	protected void showUpdateSublimit(@Observes @CDIEvent(MenuItemBean.UPDATE_SUBLIMIT) final ParameterDTO parameters){
		view.setViewG(SearchUpdateSublimitView.class, true);
	}


	protected void showUpdateRodDetails(@Observes @CDIEvent(MenuItemBean.UPDATE_ROD_DETAILS) final ParameterDTO parameters){
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
				.getTmpCpuCodes();
		BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();

		
		Status status = preauthService.getStatusByKey(ReferenceTable.ACKNOWLEDGE_STATUS_KEY);
		
		
		SelectValue selectValue = new SelectValue();
		selectValue.setId(status.getKey());
		selectValue.setValue(status.getProcessValue());
		BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
		statusByStage.addBean(selectValue);
		
		BeanItemContainer<SelectValue> selectValueForUploadedDocument = masterService
		.getSelectValueContainer(ReferenceTable.COMMON_VALUES);
		view.setUpdateRodDetailsView(SearchUpdateRodDetailsView.class, true,selectValueContainerForCPUCode,selectValueForPriority,statusByStage,selectValueForUploadedDocument);
	}
//	Commented the below Cashless Screen	
//	protected void showSearchProcessNegotiation(@Observes @CDIEvent(MenuItemBean.PROCESS_NEGOTIATION) final ParameterDTO parameters){
//		
//		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
//		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = usertoCPUMapService.getRevisedUserCpuContainer(userId);
//		BeanItemContainer<SelectValue> selectValueContainerForNegotiationCPUCode = masterService
//				.getTmpCpuCodesForNegotiationProcess();
//		BeanItemContainer<SelectValue> negotiationCpuCode = new BeanItemContainer<SelectValue>(SelectValue.class);
//		List<Long> cpuCode = new ArrayList<Long>();
//		for(int i=0;i<selectValueContainerForNegotiationCPUCode.size();i++){
//			cpuCode.add(selectValueContainerForNegotiationCPUCode.getIdByIndex(i).getId());
//		}
//		for(int j=0; j<selectValueContainerForCPUCode.size();j++){
//			if(cpuCode.contains(selectValueContainerForCPUCode.getIdByIndex(j).getId())){
//				negotiationCpuCode.addBean(selectValueContainerForCPUCode.getIdByIndex(j));
//			}
//		}
//		
//		view.setSearchProcessNegotiationView(SearchProcessNegotiationView.class,true,negotiationCpuCode);
//		
//	}
	
//	protected void showDoctorDetailsSearch(
//			@Observes @CDIEvent(MenuItemBean.USER_ACCESS_ALLOCATION) final ParameterDTO parameters) {
//		view.setViewG(SearchDoctorDetailsView.class, true);
//	}
	
	/*
	 * protected void showProcessClaimBillingWizard(
	 * 
	 * @Observes @CDIEvent(MenuPresenter.SHOW_PROCESS_CLAIM_BILLING) final
	 * ParameterDTO parameters) {
	 * 
	 * SearchProcessClaimBillingTableDTO tableDTO =
	 * (SearchProcessClaimBillingTableDTO) parameters .getPrimaryParameter();
	 * 
	 * //TODO : Need to give tableDTO.getKey() Reimbursement
	 * reimbursementObjectByKey =
	 * rodService.getReimbursementObjectByKey(tableDTO.getRodKey());
	 * List<UploadDocumentDTO> rodSummaryDetails =
	 * rodService.getRODSummaryDetails(reimbursementObjectByKey.getKey());
	 * 
	 * 
	 * List<Long> documentSummaryKeys = new ArrayList<Long>(); for
	 * (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
	 * documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey()); } Double
	 * totalBilledAmount =
	 * reimbursementService.getTotalBilledAmount(documentSummaryKeys);
	 * ZonalMedicalReviewMapper mapper = new ZonalMedicalReviewMapper();
	 * PreauthDTO reimbursementDTO =
	 * mapper.getReimbursementDTO(reimbursementObjectByKey);
	 * reimbursementDTO.setAmountConsidered(totalBilledAmount != null ?
	 * String.valueOf(totalBilledAmount.intValue()) : "0" );
	 * reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
	 * reimbursementDTO.setHumanTask(tableDTO.getHumanTask());
	 * 
	 * reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
	 * reimbursementDTO.setStrUserName(tableDTO.getUsername());
	 * reimbursementDTO.setStrPassword(tableDTO.getPassword());
	 * 
	 * Claim claimByKey = reimbursementObjectByKey.getClaim();
	 * reimbursementDTO.setReconsiderationList
	 * (getReconsiderRODRequest(claimByKey));
	 * 
	 * reimbursementDTO = setReimbursmentTOPreauthDTO(mapper, claimByKey,
	 * reimbursementObjectByKey, reimbursementDTO, true ); reimbursementDTO =
	 * getResiudalAmountToDTO(reimbursementDTO,
	 * reimbursementObjectByKey.getKey()); UploadDocumentDTO
	 * reimbursementBenefitsValue =
	 * claimRequestBenefitsService.getReimbursementBenefitsValue
	 * (reimbursementObjectByKey.getKey()); if(reimbursementBenefitsValue !=
	 * null) {
	 * reimbursementDTO.getPreauthDataExtractionDetails().setUploadDocumentDTO
	 * (reimbursementBenefitsValue); }
	 * 
	 * Double sumInsured =
	 * dbCalculationService.getInsuredSumInsured(String.valueOf
	 * (reimbursementDTO.
	 * getNewIntimationDTO().getInsuredPatient().getInsuredId()),
	 * reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
	 * List<Object> addOnBenefitsValues =
	 * dbCalculationService.getAddOnBenefitsValues
	 * (reimbursementObjectByKey.getKey(),
	 * reimbursementDTO.getNewIntimationDTO()
	 * .getInsuredPatient().getKey(),sumInsured ,
	 * reimbursementDTO.getNewIntimationDTO
	 * ().getPolicy().getProduct().getKey(),"HC"); if(addOnBenefitsValues !=
	 * null && !addOnBenefitsValues.isEmpty()) {
	 * reimbursementDTO.getPreauthDataExtractionDetails
	 * ().getUploadDocumentDTO().
	 * setPatientCarePerDayAmt(String.valueOf(addOnBenefitsValues.get(3))); }
	 * 
	 * List<AddOnBenefitsDTO> populateAddOnBenefitsTableValues =
	 * claimRequestBenefitsService
	 * .populateAddOnBenefitsTableValues(reimbursementDTO.getNewIntimationDTO(),
	 * reimbursementObjectByKey.getKey(), reimbursementDTO.getProductCopay());
	 * reimbursementDTO
	 * .getPreauthDataExtractionDetails().setAddOnBenefitsDTOList
	 * (populateAddOnBenefitsTableValues);
	 * view.setProcessClaimBilling(BillingWizard.class, reimbursementDTO); }
	 */

	protected void showProcessClaimBillingWizard(
			SearchProcessClaimBillingTableDTO tableDTO) {

		// SearchProcessClaimBillingTableDTO tableDTO =
		// (SearchProcessClaimBillingTableDTO) parameters
		// .getPrimaryParameter();

		// TODO : Need to give tableDTO.getKey()

		// SearchProcessClaimBillingTableDTO tableDTO =
		// (SearchProcessClaimBillingTableDTO) parameters
		// .getPrimaryParameter();

		Reimbursement reimbursementObjectByKey = rodService
				.getReimbursementObjectByKey(tableDTO.getRodKey());
		ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
//		ZonalMedicalReviewMapper.getAllMapValues();
		PreauthDTO reimbursementDTO = mapper
				.getReimbursementDTO(reimbursementObjectByKey);
		
		if(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag() != null && ("Y").equalsIgnoreCase(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag()))
		{
			List<ReconsiderRODRequestTableDTO> reconsiderDTOList = getReconsiderRODRequestForBillEntry(tableDTO.getRodKey());
			if(null != reconsiderDTOList && !reconsiderDTOList.isEmpty())
			{
				for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderDTOList) {
					if(null != reconsiderRODRequestTableDTO.getIsRejectReconsidered() && reconsiderRODRequestTableDTO.getIsRejectReconsidered())
					{
						reimbursementDTO.setIsRejectReconsidered(true);
					}
					else
					{
						reimbursementDTO.setIsRejectReconsidered(false);
					}
				}
			}
			reimbursementDTO.setReconsiderRodRequestList(getReconsiderRODRequestForBillEntry(tableDTO.getRodKey()));
		}

		Claim claimByKey = claimService.getClaimByClaimKey(reimbursementObjectByKey.getClaim().getKey());
		
		// R1045
		reimbursementDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		reimbursementDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		reimbursementDTO.setCrmFlagged(claimByKey.getCrcFlag());
		
		reimbursementDTO.setVipCustomer(claimByKey.getIsVipCustomer());
		reimbursementDTO.setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		LegalHeirDTO legalHeir = new LegalHeirDTO();
		legalHeir.setRelationshipContainer(masterService.getRelationshipContainerValues());
		reimbursementDTO.setLegalHeirDto(legalHeir);
		
		
		/*if(null != claimByKey)
		{
			if(null != reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId())
			{
				String  docReceivedFrom = reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getValue();
				reimbursementDTO.setPreviousAccountDetailsList(populatePreviousAccountDetails(claimByKey.getIntimation().getIntimationId(),docReceivedFrom));
			}
		}*/
		if(reimbursementObjectByKey.getCatastrophicLoss() != null) {
			
			SelectValue value = masterService.getCatastropheData(reimbursementObjectByKey.getCatastrophicLoss());
			reimbursementDTO.getPreauthDataExtractionDetails().setCatastrophicLoss(value);
		}

		if(reimbursementObjectByKey.getNatureOfLoss() != null) {
			
			SelectValue value = masterService.getMasterValueForNatureCause(reimbursementObjectByKey.getNatureOfLoss());
			reimbursementDTO.getPreauthDataExtractionDetails().setNatureOfLoss(value);
		}
		if(reimbursementObjectByKey.getCauseOfLoss() != null) {
			SelectValue value = masterService.getMasterValueForNatureCause(reimbursementObjectByKey.getCauseOfLoss());
			reimbursementDTO.getPreauthDataExtractionDetails().setCauseOfLoss(value);
		}
		if(null != claimByKey)
		{
			reimbursementDTO.setPreviousAccntDetailsList(calcService.getPreviousAccountDetails(claimByKey.getIntimation().getInsured().getInsuredId(),
					reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey()));
		}
		if(claimByKey!=null){
			
			Long hospital = claimByKey.getIntimation().getHospital();
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				reimbursementDTO.setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
					reimbursementDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}
		}
		setCategoryFlag(reimbursementObjectByKey, reimbursementDTO);
		
		//Long reimbursementKey = tableDTO.getRodKey();
		// Reimbursement previousLatestROD =
		// getPreviousLatestROD(claimByKey.getKey(), reimbursementObjectByKey);
		//if (false) {
			// reimbursementKey = previousLatestROD.getKey();
			// reimbursementDTO = mapper.getReimbursementDTO(previousLatestROD);
			// reimbursementDTO.setIsPostHospitalization(true);
			// setReimbursmentTOPreauthDTO(mapper, claimByKey,
			// previousLatestROD, reimbursementDTO, true );
			// Hospitals hospitalById =
			// hospitalService.getHospitalById(claimByKey.getIntimation().getHospital());
			// ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails =
			// reimbursementDTO.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
			// updateHospitalDetails.setHospitalCity(hospitalById.getCity());
			// updateHospitalDetails.setHospitalCity(hospitalById.getCity());
			// updateHospitalDetails.setHospitalState(hospitalById.getState());
			// updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
			// reimbursementDTO.setReconsiderationList(getReconsiderRODRequest(claimByKey));
			// reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
			// previousLatestROD.getKey());
			//
			// reimbursementDTO.setIsPreviousROD(true);
			// // reimbursementDTO.setPreviousROD(previousLatestROD);

		//} else {
			reimbursementDTO
					.setReconsiderationList(getReconsiderRODRequest(claimByKey));

			reimbursementDTO = setReimbursmentTOPreauthDTO(mapper, claimByKey,
					reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.BILLING);
			reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
					reimbursementObjectByKey.getKey());
			
			reimbursementDTO.setDoctorNote(reimbursementObjectByKey.getDoctorNote() != null? reimbursementObjectByKey.getDoctorNote() : "" );
		//}

			if(reimbursementObjectByKey.getDocAcknowLedgement() != null
					&& reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
					&& ReferenceTable.RECEIVED_FROM_INSURED.equals(reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey())
					&& reimbursementObjectByKey.getPatientStatus() != null 
					&& reimbursementObjectByKey.getPatientStatus().getKey() != null 
					&& ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(reimbursementObjectByKey.getPatientStatus().getKey())) {
				
				List<NomineeDetailsDto> nomineeDtoList = intimationService.getNomineeDetailsListByTransactionKey(tableDTO.getRodKey());
				if( nomineeDtoList != null && !nomineeDtoList.isEmpty()){
					reimbursementDTO.getNewIntimationDTO().setNomineeList(nomineeDtoList);
				}else{
				if(reimbursementObjectByKey.getNomineeName() != null) {
					reimbursementDTO.getNewIntimationDTO().setNomineeName(reimbursementObjectByKey.getNomineeName());
				}	
				if(reimbursementObjectByKey.getNomineeAddr() != null) {
					reimbursementDTO.getNewIntimationDTO().setNomineeAddr(reimbursementObjectByKey.getNomineeAddr());
				}
				}
				
			}
		UploadDocumentDTO reimbursementBenefitsValue = claimRequestBenefitsService
				.getReimbursementBenefitsValue(reimbursementObjectByKey
						.getKey());
		if (reimbursementBenefitsValue != null) {
			reimbursementDTO.getPreauthDataExtractionDetails()
					.setUploadDocumentDTO(reimbursementBenefitsValue);
		}
		if (null != reimbursementBenefitsValue
				&& reimbursementBenefitsValue.getPatientCareBenefitFlag() != null
				&& reimbursementBenefitsValue.getPatientCareBenefitFlag()
						.equalsIgnoreCase("PC")) {
			List<ReimbursementBenefitsDetails> patientCareTableByBenefitKey = reimbursementService
					.getPatientCareTableByBenefitKey(reimbursementBenefitsValue
							.getPatientBenefitKey());
			List<PatientCareDTO> patientCareDTOList = new ArrayList<PatientCareDTO>();
			if (patientCareTableByBenefitKey != null
					&& !patientCareTableByBenefitKey.isEmpty()) {
				PatientCareDTO dto = null;
				for (ReimbursementBenefitsDetails patientCareDetails : patientCareTableByBenefitKey) {
					dto = new PatientCareDTO();
					dto.setEngagedFrom(patientCareDetails.getEngagedFrom());
					dto.setEngagedTo(patientCareDetails.getEngagedTo());
					dto.setKey(patientCareDetails.getKey());
					patientCareDTOList.add(dto);
				}
			}
			reimbursementDTO.getPreauthDataExtractionDetails()
					.getUploadDocumentDTO()
					.setPatientCareDTO(patientCareDTOList);
		}
		/*
		 * <<<<<<< HEAD
		 * 
		 * List<UploadDocumentDTO> rodSummaryDetails = rodService
		 * .getRODSummaryDetails(reimbursementObjectByKey.getKey());
		 * 
		 * =======
		 */

		/**
		 * Added for amount claimed table enhancement---- starts
		 * */
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				reimbursementDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), reimbursementDTO
						.getPolicyDto().getKey(),reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());

		Map<Integer, Object> detailsMap = new HashMap<Integer, Object>();
		
//		if(null != reimbursementDTO && null != reimbursementDTO.getNewIntimationDTO() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto() 
//				&& null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType()
//				&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType().getKey().equals(ReferenceTable.NON_NETWORK_HOSPITAL_TYPE_ID))
//		{
//			String cityClass = createRodService.getHospitalCityClass(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
//			reimbursementDTO.getNewIntimationDTO().getHospitalDto()
//			.getRegistedHospitals().setCityClass(cityClass);
//			
//		}

		if(reimbursementObjectByKey.getSectionCategory() != null){
			
			if(ReferenceTable.getGMCProductList().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				insuredSumInsured = calcService.getInsuredSumInsuredForGMC(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(),
						reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getSectionCode());
				detailsMap = calcService
						.getHospitalizationDetailsForGMC(reimbursementDTO.getPolicyDto()
								.getProduct().getKey(), insuredSumInsured,
								reimbursementDTO.getNewIntimationDTO().getHospitalDto()
										.getRegistedHospitals().getCityClass(),
								reimbursementDTO.getNewIntimationDTO()
										.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
			}else{
				detailsMap = calcService
						.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
								.getProduct().getKey(), insuredSumInsured,
								reimbursementDTO.getNewIntimationDTO().getHospitalDto()
										.getRegistedHospitals().getCityClass(),
								reimbursementDTO.getNewIntimationDTO()
										.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
			}
			
		}else{
			
		Long sectionCategory = 0l;
		if(reimbursementDTO.getPolicyDto()
							.getProduct().getKey().equals(ReferenceTable.STAR_CARDIAC_CARE_POLICY) || reimbursementDTO.getPolicyDto()
							.getProduct().getKey().equals(ReferenceTable.DIABETES_INDIVIDUAL_POLICY) || reimbursementDTO.getPolicyDto()
							.getProduct().getKey().equals(ReferenceTable.DIABETES_FLOATER_POLICY))
		{
			sectionCategory = 1l;
		}

		if(ReferenceTable.getGMCProductList().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			insuredSumInsured = calcService.getInsuredSumInsuredForGMC(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(),
					reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getSectionCode());
			detailsMap = calcService
					.getHospitalizationDetailsForGMC(reimbursementDTO.getPolicyDto()
							.getProduct().getKey(), insuredSumInsured,
							reimbursementDTO.getNewIntimationDTO().getHospitalDto()
									.getRegistedHospitals().getCityClass(),
							reimbursementDTO.getNewIntimationDTO()
							.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,"0");
		}else{
			
			String policyPlan = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null ? reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() : "0";
			
			/*if(ReferenceTable.MEDI_CLASSIC_BASIC_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) || ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {*/
			if(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
					&& (((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
							SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
							|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
							|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
					|| ((SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
							SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
							&& reimbursementDTO.getNewIntimationDTO().getPolicy().getProductType().getKey().equals(ReferenceTable.INDIVIDUAL_POLICY)))) {
				policyPlan = reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() != null ? reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() : "0";
			}
			
			detailsMap = calcService
					.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
							.getProduct().getKey(), insuredSumInsured,
							reimbursementDTO.getNewIntimationDTO().getHospitalDto()
									.getRegistedHospitals().getCityClass(),
							reimbursementDTO.getNewIntimationDTO()
							.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,policyPlan);
		}
			
							/**
							 * The below code is commented as per sathish sir suggestion for ticket 2355 (production tracker).
							 * By default, the section category would be 1 for three products 
							 * MED-PRD-033 , MED-PRD-032 , MED-PRD-030
							 * 
							 * */
							
			
									//.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),0l,"0");
		}
		
//		if(detailsMap != null && detailsMap.get(15) != null){
//			reimbursementDTO.setAmbulanceLimitAmount((Double)detailsMap.get(15));
//		}
		
		List<Double> copayValue = calcService.getProductCoPay(reimbursementDTO
				.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
				.getKey(), reimbursementDTO.getClaimDTO().getNewIntimationDto()
				.getInsuredPatient().getKey(), reimbursementDTO.getClaimDTO().getNewIntimationDto()
				.getInsuredPatient().getInsuredId(),reimbursementDTO.getNewIntimationDTO());
		reimbursementDTO.setProductCopay(copayValue);

		/**
		 * Added for amount claimed table enhancement---- ends
		 * */

		List<UploadDocumentDTO> rodSummaryDetails = rodService
				.getRODSummaryDetails(reimbursementObjectByKey.getKey());
		
		
		List<DMSDocumentDetailsDTO> dmsDocDetailList = getClaimsDMSList(claimByKey.getIntimation().getIntimationId());
		/**
		 * Fix for implemeting claims dms in bill entry screen.. -- starts
		 * **/
		/*if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
		{
			for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
				if(null != claimByKey)
				{
					uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
					uploadDocumentDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
				}
			}
		}*/
		
		reimbursementDTO = getProrataFlagFromProduct(reimbursementDTO);
		
		reimbursementDTO.setProrataDeductionFlag(reimbursementObjectByKey.getProrataDeductionFlag());
		/**
		 * product based variable is added to enable or disable the component in page level.
		 * This would be static. -- starts
		 * */
		//reimbursementDTO.setProductBasedProRata(reimbursementObjectByKey.getProrataDeductionFlag());
		//reimbursementDTO.setProductBasedPackage(reimbursementObjectByKey.getPackageAvailableFlag());
		//ends.
		reimbursementDTO.setPackageAvailableFlag(reimbursementObjectByKey.getPackageAvailableFlag());
		
		Double productBasedAmbulanceAmt = getProductBasedAmbulanceAmt(tableDTO.getRodKey());

		
		List<UploadDocumentDTO> rodBillSummaryDetails = rodService
				.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);
		
		if(rodBillSummaryDetails != null){
			for (UploadDocumentDTO uploadDocumentDTO2 : rodBillSummaryDetails) {
				uploadDocumentDTO2.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
			}
		}

		// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
		List<Long> documentSummaryKeys = new ArrayList<Long>();
		for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
			
			/*if(null != reimbursementObjectByKey)
			{
				uploadDocumentDTO.setIntimationNo(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId());
				uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfAdmission()));
				uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfDischarge()));
				uploadDocumentDTO.setInsuredPatientName(reimbursementObjectByKey.getClaim().getIntimation().getInsuredPatientName());
			}*/
			
			/**
			 * Fix for implemeting claims dms in bill entry screen.. -- starts
			 * **/
			if(null != claimByKey)
			{
				uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
				uploadDocumentDTO.setDmsDocumentDTOList(dmsDocDetailList);
			}
			
			documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
			uploadDocumentDTO.setStatus(true);
			List<RODBillDetails> billEntryDetails = rodService
					.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
			List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
			if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
				for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
					/*
					 * <<<<<<< HEAD
					 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
					 * uploadDocumentDTO)); =======
					 */
					dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
							uploadDocumentDTO));
					// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
				}
			}
			uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
					.get(8));
			uploadDocumentDTO
					.setProductBasedICURent((Double) detailsMap.get(9));
			Product product = reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct();
			if(product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey()) && 
					reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
				uploadDocumentDTO
				.setProductBasedRoomRent(0d);
				uploadDocumentDTO
							.setProductBasedICURent(0d);
			}
			
			/*uploadDocumentDTO.setProductBasedAmbulanceAmt((Double) detailsMap
					.get(15));*/
			uploadDocumentDTO.setProductBasedAmbulanceAmt(productBasedAmbulanceAmt);
			uploadDocumentDTO.setStatus(false);
			uploadDocumentDTO.setBillEntryDetailList(dtoList);
			uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
			uploadDocumentDTO.setRodKey(reimbursementObjectByKey.getKey());

			uploadDocumentDTO.setStrUserName(tableDTO.getUsername());

			if (uploadDocumentDTO != null) {
				if ((ReferenceTable.BENEFITS_PATIENT_CARE)
						.equalsIgnoreCase(uploadDocumentDTO
								.getPatientCareBenefitFlag())) {
					List<PatientCareDTO> patientCareList = claimRequestBenefitsService
							.getPatientCareDetails(uploadDocumentDTO
									.getPatientBenefitKey());
					if (null != patientCareList && !patientCareList.isEmpty()) {
						uploadDocumentDTO.setPatientCareDTO(patientCareList);
					}
					// rodDTO.getAddOnBenefitsDTO().setAdmittedNoOfDays(uploadDocumentDTO.getPatientCareNoofDays());
				}
			}
		}
		
		/*List<UploadDocumentDTO> rodBillSummaryDetails = rodService
				.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);
		
		if(rodBillSummaryDetails != null){
			for (UploadDocumentDTO uploadDocumentDTO2 : rodBillSummaryDetails) {
				uploadDocumentDTO2.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
			}
		}*/
		
		reimbursementDTO.getUploadDocDTO().setBillingWorkSheetUploadDocumentList(rodBillSummaryDetails);

		Double totalBilledAmount = reimbursementService
				.getTotalBilledAmount(documentSummaryKeys);

		reimbursementDTO.setAmountConsidered(totalBilledAmount != null ? String
				.valueOf(totalBilledAmount.intValue()) : "0");
		reimbursementDTO
				.setInitialAmountConsidered(totalBilledAmount != null ? String
						.valueOf(totalBilledAmount.intValue()) : "0");
		reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
		//reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
		reimbursementDTO.setKey(reimbursementObjectByKey.getKey());
		reimbursementDTO.setRodNumber(reimbursementObjectByKey.getRodNumber());

		
		
		if (!reimbursementDTO.getHospitalizaionFlag()) {
			reimbursementDTO = setHospitalizationAmount(reimbursementDTO);
		}
		
		Boolean isBasedOnPremium = false;
		if(ReferenceTable.getPremiumDeductionProductKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) && (reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) && (reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag() != null && reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag().equalsIgnoreCase(SHAConstants.YES_FLAG))) {
			isBasedOnPremium = true;
		}
		
//		IMSSUPPOR-32761
		if(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyInstalmentFlag() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyInstalmentFlag().equalsIgnoreCase(SHAConstants.YES_FLAG) 
                && (reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) && (reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag() != null 
                && reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag().equalsIgnoreCase(SHAConstants.YES_FLAG))){
			isBasedOnPremium = true;
		}

		if(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyInstalmentFlag() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyInstalmentFlag().equalsIgnoreCase(SHAConstants.YES_FLAG) 
				&& (reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) && (reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag() != null 
				&& reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag().equalsIgnoreCase(SHAConstants.YES_FLAG))){
			isBasedOnPremium = true;
		}
		List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
				.search(reimbursementObjectByKey.getClaim().getKey(), isBasedOnPremium);

		List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
		for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {

			previousPreAuthTableDTO.setRequestedAmt(preauthService
					.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
							previousPreAuthTableDTO.getClaimKey()));
			newList.add(previousPreAuthTableDTO);

		}
		
		

		reimbursementDTO.setPreviousPreauthTableDTO(newList);

	//	reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
		reimbursementDTO.setStrUserName(tableDTO.getUsername());
		reimbursementDTO.setStrPassword(tableDTO.getPassword());
        reimbursementDTO.setTaskNumber(tableDTO.getTaskNumber());
		
		
		reimbursementDTO.getPreauthMedicalDecisionDetails().setBillingRemarks(
				"");
		
		
		List<AddOnBenefitsDTO> populateAddOnBenefitsTableValues = claimRequestBenefitsService
				.populateAddOnBenefitsTableValues(
						reimbursementDTO.getNewIntimationDTO(),
						reimbursementObjectByKey.getClaim().getKey(),
						reimbursementObjectByKey.getKey(),
						reimbursementDTO.getProductCopay(),null);
		reimbursementDTO.getPreauthDataExtractionDetails()
				.setAddOnBenefitsDTOList(populateAddOnBenefitsTableValues);
		reimbursementDTO = roomRentNursingMapping(reimbursementDTO, 8l, 9l, false);
		reimbursementDTO = roomRentNursingMapping(reimbursementDTO, 10l, 11l, true);
		reimbursementDTO.getPreauthDataExtractionDetails()
				.setDocAckknowledgement(
						reimbursementObjectByKey.getDocAcknowLedgement());

		if (reimbursementObjectByKey.getDocAcknowLedgement()
				.getHospitalizationRepeatFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getHospitalizationRepeatFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setIsHospitalizationRepeat(true);
		}
		
		if (reimbursementObjectByKey.getStatus().getKey()
				.equals(ReferenceTable.FINANCIAL_REFER_TO_BILLING)) {
			MedicalApprover medicalApprover = reimbursementService
					.getMedicalApprover(reimbursementObjectByKey.getKey());
			if (medicalApprover != null) {
				reimbursementDTO.setPreviousRemarks(medicalApprover
						.getApproverReply());
				reimbursementDTO.setPreviousReasonForReferring(medicalApprover
						.getReasonForReferring());
			}
			reimbursementDTO.setIsReferToBilling(true);
		}
		
		if (claimByKey.getClaimType() != null
				&& claimByKey.getClaimType().getKey()
						.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {

//			PreMedicalMapper premedicalMapper = new PreMedicalMapper();
			Preauth previousPreauth = getPreviousPreauth(claimByKey.getKey());
			
			if(previousPreauth != null) {
				reimbursementDTO.setPreauthKey(previousPreauth.getKey());
			}
		}
		
		if(claimByKey.getStatus() != null) {
			if(claimByKey.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS) ||  claimByKey.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS)) {
				reimbursementDTO.setIsWithDrawn(true);
			}
		}
		
		loadRRCRequestValues(reimbursementDTO,insuredSumInsured,SHAConstants.BILLING);
		
		String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
		if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
			String get64vbStatus = PremiaService.getInstance().get64VBStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), reimbursementDTO.getNewIntimationDTO().getIntimationId());
			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
				reimbursementDTO.setIsDishonoured(true);
			}  else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
				reimbursementDTO.setIsPending(true);
			}
		}
		reimbursementDTO.setSittingsAmount(calcService.getDialysisAmount(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
		Map<String, String> popupMessages = calcService.getPOPUPMessages(reimbursementDTO.getPolicyKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
		reimbursementDTO.setPopupMap(popupMessages);
		
		
		if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
				&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
			//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
				Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
				reimbursementDTO.setSuspiciousPopupMap(suspiciousMap);
			//}
		}
		if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
				&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
			//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
				Map<String, String> nonPreferredMap = SHAUtils.getNonPreferredMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
				reimbursementDTO.setNonPreferredPopupMap(nonPreferredMap);
			//}
		}
		
		// If hospitalization is not processed then remaining ROD should be rejected.
		Reimbursement hospROD = reimbursementService.getHospitalizationROD(reimbursementObjectByKey.getClaim().getKey());
		if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)) {
			if(hospROD == null) {
				reimbursementDTO.setIsHospitalizationRejected(true);
			}
		}
		if(ReferenceTable.getFHORevisedKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
				|| ReferenceTable.STAR_SPECIAL_CARE_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
				|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
					(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& (((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
								|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
								|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
						&& ("G").equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan())))
				|| (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
						{
			if(hospROD != null){
			     List<Hospitalisation> hospitalisationList = createRodService.getHospitalisationList(hospROD.getKey());
			     Integer noOfDays = 0;
			     if(hospitalisationList != null){
			    	 for (Hospitalisation hospitalisation : hospitalisationList) {
							noOfDays += hospitalisation.getNoOfDays() != null ? hospitalisation.getNoOfDays().intValue() : 0;
						}
			     }
			     
			     reimbursementDTO.setPreviousRODNoOfDays(noOfDays);
			}
		}
		
		Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
				.getIntimation().getHospital());
		
		paymentDetailsForfinancial(reimbursementObjectByKey, reimbursementDTO,
				hospitalById);
		
		setReimbursementValues(reimbursementObjectByKey, reimbursementDTO);
		
       Reimbursement hospitalizationOrPartialROD = reimbursementService.getHospitalizationOrPartialROD(reimbursementObjectByKey.getClaim().getKey());
		
		if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
			
			
			Integer seqNumber = 0;
			
			if(reimbursementObjectByKey.getRodNumber() != null){
				String[] split = reimbursementObjectByKey.getRodNumber().split("/");
				seqNumber = Integer.valueOf(split[split.length - 1]);
			}
			
			if(hospitalizationOrPartialROD == null && ! seqNumber.equals(1)) {
//				reimbursementDTO.setIsDishonoured(true);
				reimbursementDTO.setIsHospitalizationRejected(true);
			}
		}
		
		Map<String, Integer> productBenefitFlag = calcService.getProductBenefitFlag(reimbursementObjectByKey.getClaim().getKey(), reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey());
		
		if(productBenefitFlag.get(SHAConstants.PRE_HOSP_FLAG).equals(0)) {
			reimbursementDTO.setIsPreHospApplicable(false);
		}
		
		if(productBenefitFlag.get(SHAConstants.POST_HOSP_FLAG).equals(0)) {
			reimbursementDTO.setIsPostHospApplicable(false);
		}
		
		if(productBenefitFlag.get(SHAConstants.LUMP_SUM_FLAG).equals(1)) {
			reimbursementDTO.setIsLumpsumApplicable(true);
		}
		
		if(productBenefitFlag.get(SHAConstants.HOSPITALCASH_FLAG).equals(1)) {
			reimbursementDTO.setIsHospitalCashApplicable(true);
		}
		
		if(productBenefitFlag.get(SHAConstants.PATIENTCARE_FLAG).equals(1)) {
			reimbursementDTO.setIsPatientCareApplicable(true);
		}
		
		//IMSSUPPOR-28847
		if(productBenefitFlag.get(SHAConstants.OTHER_BENEFITS_FLAG).equals(1)) {
			reimbursementDTO.setIsOthrBenefitApplicable(true);
		}
		
		
		MastersValue networkHospitalType = masterService.getMaster(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNetworkHospitalTypeId());
		reimbursementDTO.setNetworkHospitalType(networkHospitalType.toString());
		
		reimbursementDTO = checkFinalEnhancement(reimbursementDTO);

		
		try {
			if(reimbursementObjectByKey.getReconsiderationRequest() != null && reimbursementObjectByKey.getReconsiderationRequest().equalsIgnoreCase("Y")) {
//				if(reimbursementObjectByKey.getDocAcknowLedgement().getPaymentCancellationFlag() !=  null && reimbursementObjectByKey.getDocAcknowLedgement().getPaymentCancellationFlag().equalsIgnoreCase("N")) {
					reimbursementDTO.setIsReconsiderationRequest(true);
					if(reimbursementService.isClaimPaymentAvailable(reimbursementObjectByKey.getRodNumber())) {
						Double claimPaymentAmountByRODNumber = reimbursementService.getClaimPaymentAmountByRODNumber(reimbursementObjectByKey.getRodNumber());
						reimbursementDTO.setClaimPaymentAmount(claimPaymentAmountByRODNumber);
					} else {
						reimbursementDTO.setIsReconsiderationRequest(false);
					}
//					Double claimPaymentAmountByRODNumber = reimbursementService.getClaimPaymentAmountByRODNumber(reimbursementObjectByKey.getRodNumber());
//					reimbursementDTO.setClaimPaymentAmount(claimPaymentAmountByRODNumber);
//				}
				
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
			reimbursementDTO.setIsCashlessType(true);
		}
		if(reimbursementDTO.getIsCashlessType() && reimbursementDTO.getHospitalizaionFlag() && (reimbursementDTO.getStatusKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY))){
			reimbursementDTO.setIsDirectToBilling(true);
			Preauth latestPreauth = reimbursementService.getLatestPreauthByClaim(reimbursementDTO.getClaimDTO().getKey());
			reimbursementDTO.getClaimDTO().setLatestPreauthKey(latestPreauth.getKey());
		}
//		reimbursementDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(reimbursementDTO.getNewIntimationDTO().getAdmissionDate(), reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
		
		String policyYear = reimbursementDTO.getNewIntimationDTO().getPolicyYear();
	    if(policyYear != null){
	    	String intValue = policyYear.replaceAll("[^0-9]", "");
	    	Integer policyAgeing = SHAUtils.getIntegerFromStringWithComma(intValue);
	    	reimbursementDTO.setAdmissionDatePopup(policyAgeing != null ? policyAgeing.equals(0) ? true : false :false);
	    }
		
		reimbursementDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey()));
		reimbursementDTO.setIsPEDInitiatedForBtn(reimbursementDTO.getIsPEDInitiated());
		
		//CR  R1086
		if(reimbursementDTO.getIsPEDInitiated()){
			boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			reimbursementDTO.setInsuredDeleted(isInsuredDeleted);
			
			//CR R1156
			boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			reimbursementDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);
		}
		
		List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
		List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
		
		reimbursementDTO.setInsuredPedDetails(pedByInsured);
		reimbursementDTO.setApprovedPedDetails(approvedPedByInsured);
		
		if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
			if(reimbursementDTO.getHospitalizaionFlag()) {
				Reimbursement partialHospitalizationRODWithSettled = getPartialHospitalizationRODWithSettled(claimByKey.getKey());
				ReimbursementCalCulationDetails hosptialization = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(reimbursementDTO.getKey(), ReferenceTable.HOSPITALIZATION);
				if(hosptialization != null) {
					reimbursementDTO.setBillingApprovedAmount(hosptialization.getPayableToHospAftTDS() != null ? hosptialization.getPayableToHospAftTDS().doubleValue() : 0d);
					reimbursementDTO.setPayableToHospAmt(hosptialization.getPayableToHospital() != null ? hosptialization.getPayableToHospital().doubleValue() : 0d);
					reimbursementDTO.setHospDiscountAmount(hosptialization.getHospitalDiscount() != null ? hosptialization.getHospitalDiscount().doubleValue() : 0d);
				}
				if(partialHospitalizationRODWithSettled != null) {
					ReimbursementCalCulationDetails reimbursementCalcObjByRodAndClassificationKey = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(partialHospitalizationRODWithSettled.getKey(), ReferenceTable.HOSPITALIZATION);
					reimbursementDTO.setPayableToInsAmt(reimbursementCalcObjByRodAndClassificationKey.getPayableInsuredAfterPremium() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableInsuredAfterPremium().doubleValue() : 0d);
					reimbursementDTO.setFAApprovedAmount(partialHospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? partialHospitalizationRODWithSettled.getFinancialApprovedAmount() : 0d);
				}
			} else if(reimbursementDTO.getPartialHospitalizaionFlag()) {
				Reimbursement hospitalizationRODWithSettled = getHospitalizationRODWithSettled(claimByKey.getKey());
				
				
				if(hospitalizationRODWithSettled != null) {
					Double totalHospRodFAApprovedAmt = getTotalHospRodFAApprovedAmt(hospitalizationRODWithSettled);
					ReimbursementCalCulationDetails reimbursementCalcObjByRodAndClassificationKey = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(hospitalizationRODWithSettled.getKey(), ReferenceTable.HOSPITALIZATION);
					reimbursementDTO.setPayableToHospAmt(reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital().doubleValue() : 0d);
					reimbursementDTO.setHospDiscountAmount(reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d);
					//Double amount = (reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d) + (hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : 0d);
					Double amount = reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital().doubleValue() : 0d;
					Double amount1 = (reimbursementCalcObjByRodAndClassificationKey.getAmountAlreadyPaidAmt() != null ? reimbursementCalcObjByRodAndClassificationKey.getAmountAlreadyPaidAmt().doubleValue() : 0d) - amount;
					if(amount1 > 0){
						amount += amount1;
					}
					
					reimbursementDTO.setPayableToHospAmt(amount);
					//reimbursementDTO.setFAApprovedAmount(hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : (reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() != null ? reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() : 0d));
					
					Double approvedAmt = hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : (reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() != null ? reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() : 0d);
					Double hospitalDiscnt = reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d;
					reimbursementDTO.setFAApprovedAmount(approvedAmt + hospitalDiscnt + totalHospRodFAApprovedAmt);
				}
			}
		}
		
		Boolean queryReceivedStatusRod = reimbursementQuerySerice.isQueryReceivedStatusRod(reimbursementObjectByKey.getKey());
		 
		 if(queryReceivedStatusRod){
			 reimbursementDTO.setIsQueryReceived(true);
		 }
		 
		 
			List<ReimbursementCalCulationDetails> reimbursementCalculationDetails = acknowledgementDocumentsReceivedService.getReimbursementCalculationDetails(reimbursementObjectByKey.getKey());
			if(reimbursementCalculationDetails != null && !reimbursementCalculationDetails.isEmpty()) {
				for (ReimbursementCalCulationDetails reimbursementCalCulationDetails2 : reimbursementCalculationDetails) {
					if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
							reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.HOSPITALIZATION)){
						
						HopitalizationCalulationDetailsDTO hospitalizationCalcDTO = getHospitalizationCalculationDTO(reimbursementCalCulationDetails2,reimbursementDTO, reimbursementObjectByKey.getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_BILLING) ? false : true);
						if(reimbursementDTO.getDocumentReceivedFromId() != null && reimbursementDTO.getDocumentReceivedFromId().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
					           hospitalizationCalcDTO.setBalanceToBePaid(0);
						}
						reimbursementDTO.setHospitalizationCalculationDTO(hospitalizationCalcDTO);
						
					}
					else if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
							reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.PRE_HOSPITALIZATION)){
						PreHopitalizationDetailsDTO preHospitalizationCalcDTO = getPreHospitalizationDTO(reimbursementCalCulationDetails2, reimbursementDTO, reimbursementObjectByKey.getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_BILLING) ? false : true);
						reimbursementDTO.setPreHospitalizationCalculationDTO(preHospitalizationCalcDTO);
						
					}else if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
							reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.POST_HOSPITALIZATION)){
						PostHopitalizationDetailsDTO postHospitalizationCalcDTO = getPostHospitalizationDTO(reimbursementCalCulationDetails2, reimbursementDTO, reimbursementObjectByKey.getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_BILLING) ? false : true);
						reimbursementDTO.setPostHospitalizationCalculationDTO(postHospitalizationCalcDTO);
					}
				}
			}
		
			reimbursementDTO.setAmountConsidered(reimbursementDTO.getAmountConsidedAfterCoPay() != null ? String
					.valueOf(reimbursementDTO.getAmountConsidedAfterCoPay().intValue()) : "0");
		 
//		 reimbursementService.setBPMForClaimBilling(reimbursementDTO, false, "MEDICAL", reimbursementObjectByKey);
			Double totalClaimedAmount = reimbursementService.getTotalClaimedAmount(reimbursementObjectByKey);
			 reimbursementDTO.setRodTotalClaimedAmount(totalClaimedAmount);
			 
			 if(reimbursementDTO.getAmountConsidedAfterCoPay() != null && totalBilledAmount != null && !reimbursementDTO.getAmountConsidedAfterCoPay().equals(totalBilledAmount)) {
				 reimbursementDTO.setAmountConsidered(String.valueOf(totalBilledAmount.longValue()));
			 }

			// SHAUtils.setDefaultCopayValue(reimbursementDTO);

			 if(reimbursementDTO.getIsReconsiderationRequest() != null && reimbursementDTO.getIsReconsiderationRequest()){
				 reimbursementDTO.setIsReverseAllocation(false);
			 }

			 if(reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)
					 && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
					 && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
			 
					 if(hospitalById != null){
							Boolean hospitalDiscount = SHAUtils.isHospitalDiscount(hospitalById);
							reimbursementDTO.setIsHospitalDiscountApplicable(hospitalDiscount);
					 }
			 }
			 
			 if(reimbursementDTO.getNewIntimationDTO() != null && reimbursementDTO.getNewIntimationDTO().getInsuredPatient() != null &&
					 reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
					Long claimCount = preauthService.getClaimCount(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
					if(claimCount != null){
						reimbursementDTO.setClaimCount(claimCount);
					}
				}

				Date policyFromDate = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
				
				Date admissionDate = reimbursementDTO.getNewIntimationDTO().getAdmissionDate();
				
			
//				bean.getPolicyDto().getPolicyType();
				Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
				if(diffDays != null && diffDays<90){
					reimbursementDTO.setIs64VBChequeStatusAlert(true);
				}	 
				reimbursementDTO.setDbOutArray(tableDTO.getDbOutArray());
				
				if(ReferenceTable.getFHORevisedKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
						|| ReferenceTable.JET_PRIVILEGE_PRODUCT.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) ||
						ReferenceTable.STAR_SPECIAL_CARE_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
						|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
							(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
								&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
										SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
										|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
										|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
								&& ("G").equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan()))
						|| (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
							&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
						{
					List<OtherBenefitsTableDto> benefitTableValues = reimbursementService.getBenefitTableValues(reimbursementDTO.getNewIntimationDTO(), insuredSumInsured, reimbursementObjectByKey);
					 reimbursementDTO.getPreauthMedicalDecisionDetails().setOtherBenefitTableDtoList(benefitTableValues);
				}
				
				if(ReferenceTable.getFHORevisedKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
						|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
							(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
								&& (((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
										SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
										|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
										|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
								&& ("G").equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan())))
						|| (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
							&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
						{		
					SelectValue causeOfInjury = new SelectValue();
					causeOfInjury.setId(reimbursementObjectByKey.getInjuryCauseId());						
			        reimbursementDTO.getPreauthDataExtractionDetails().setCauseOfInjury(causeOfInjury);
			        if(reimbursementObjectByKey.getInjuryCauseId() != null && reimbursementObjectByKey.getInjuryCauseId().equals(ReferenceTable.CAUSE_OF_INJURY_ACCIDENT_KEY)){
			        	reimbursementDTO.getPreauthDataExtractionDetails().setIsRTAButtonEnable(true);
			        }
				}
			   
				Boolean policyValidation = policyService.getPolicyValidationObject(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
				reimbursementDTO.setIsPolicyValidate(policyValidation);
				
				Product product = reimbursementDTO.getNewIntimationDTO().getPolicy()
						.getProduct();
				if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())
						 && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
					List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsDTOForReimbursement = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(reimbursementObjectByKey.getKey());
					
					if(updateOtherClaimDetailsDTOForReimbursement != null){
						
						Integer admissionAmt = 0;
						
						for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsDTOForReimbursement) {
							if(updateOtherClaimDetailDTO.getAdmissibleAmount() != null){
								admissionAmt += updateOtherClaimDetailDTO.getAdmissibleAmount().intValue();
							}
						}
						
						reimbursementDTO.setOtherInsurerAdmissibleAmt(admissionAmt);
						
					}
				}

				Boolean isZUAQueryAvailable = masterService.getZUAQueryDetails(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());		
				if(null != isZUAQueryAvailable){
					
					reimbursementDTO.setIsZUAQueryAvailable(isZUAQueryAvailable);
				}
				
		reimbursementDTO.setUpdatePaymentDtlsFlag(reimbursementObjectByKey.getUpdatePaymentDtlsFlag());
		reimbursementDTO.setNonPayableReasonListDto(null);
		
		if(ReferenceTable.getGMCProductList().containsKey(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey()) ||
				ReferenceTable.STAR_GOLD_GROUP_FOR_BANK_CUSTOMERS_KEY.equals(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey())){
			
		      Insured insuredByKey = intimationService.getInsuredByKey(reimbursementObjectByKey.getClaim().getIntimation().getInsured().getKey());
		      Insured MainMemberInsured = null;
		      
		      if(insuredByKey.getDependentRiskId() == null){
		    	  MainMemberInsured = insuredByKey;
		      }else{
		    	  Insured insuredByPolicyAndInsuredId = intimationService.getInsuredByPolicyAndInsuredNameForDefault(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getPolicyNumber(), insuredByKey.getDependentRiskId());
		    	  MainMemberInsured = insuredByPolicyAndInsuredId;
		      }
		      
		      if(MainMemberInsured != null){
		    	  reimbursementDTO.getNewIntimationDTO().setGmcMainMember(MainMemberInsured);
		    	  reimbursementDTO.getNewIntimationDTO().setGmcMainMemberName(MainMemberInsured.getInsuredName());
		    	  reimbursementDTO.getNewIntimationDTO().setEmployeeCode(MainMemberInsured.getInsuredEmployeeId());
		    	  
		    	  /**
		    	   * Part of CR R1186
		    	   */
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress1(MainMemberInsured.getAddress1());
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress2(MainMemberInsured.getAddress2());
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress3(MainMemberInsured.getAddress3());
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setCity(MainMemberInsured.getCity());
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setInsuredPinCode(MainMemberInsured.getInsuredPinCode());
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setInsuredState(MainMemberInsured.getInsuredState());
		    	  
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setCertificateNo(MainMemberInsured.getCertificateNo());
		    	  
		      }
			}
		
		if(reimbursementObjectByKey.getDocAcknowLedgement() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
				&& ReferenceTable.RECEIVED_FROM_INSURED.equals(reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey())
				&& reimbursementObjectByKey.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId() != null
				&& ReferenceTable.RELATION_SHIP_SELF_KEY.equals(reimbursementObjectByKey.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId().getKey())
				&& reimbursementObjectByKey.getPatientStatus() != null 
				&& reimbursementObjectByKey.getPatientStatus().getKey() != null 
				&& ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(reimbursementObjectByKey.getPatientStatus().getKey())) {
			
			List<NomineeDetailsDto> nomineeDtoList = intimationService.getNomineeDetailsListByTransactionKey(tableDTO.getRodKey());
			if( nomineeDtoList != null && !nomineeDtoList.isEmpty()){
				
				reimbursementDTO.getNewIntimationDTO().setNomineeList(nomineeDtoList);
			
			}else{
			
				List<LegalHeir> legalHeirList = masterService.getlegalHeirListByTransactionKey(tableDTO.getRodKey());
				if(legalHeirList != null && !legalHeirList.isEmpty()) {
					List<LegalHeirDTO> legalHeirDTOList = new ArrayList<LegalHeirDTO>();
					LegalHeirDTO legalHeirDto;
					for (LegalHeir legalHeirObj : legalHeirList) {
						 legalHeirDto = new LegalHeirDTO(legalHeirObj);
						 legalHeirDto.setRelationshipContainer(masterService.getRelationshipContainerValues());
						 legalHeirDTOList.add(legalHeirDto);
					}
					reimbursementDTO.setLegalHeirDTOList(legalHeirDTOList);
				}
			}
			
		}
		
		Policy policy = reimbursementDTO.getNewIntimationDTO().getPolicy();
		
		if(ReferenceTable.getGMCProductList().containsKey(policy.getProduct().getKey())){
			List<SelectValue> duplicateInsuredDetails = calcService.getDuplicateInsuredDetails(policy.getKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			reimbursementDTO.setDuplicateInsuredList(duplicateInsuredDetails);
		}
		 if(reimbursementDTO.getPolicyDto() != null && reimbursementDTO.getPolicyDto().getLinkPolicyNumber() != null){
				Insured insuredDetails = insuredService.getInsuredByInsuredKey(reimbursementDTO.getNewIntimationDTO().getInsuredKey());
				Map<String, String> getLinkedPolicyDtls = calcService.getLinkedPolicyDetails(reimbursementDTO.getPolicyDto().getPolicyNumber(), insuredDetails.getLinkEmpNumber());
				reimbursementDTO.getClaimDTO().getNewIntimationDto().setGmcMainMemberName(getLinkedPolicyDtls.get("INSURED_NAME"));
		}
		 
		 /*IMSSUPPOR-28291*/
		 if(reimbursementObjectByKey.getNonAllopathicApprAmt() != null){
			   reimbursementDTO.setOldNonAllopathicApprovedAmt(reimbursementObjectByKey.getNonAllopathicApprAmt());
		}


		String topAlertFlag = claimService.getTopUpPolicyDetails(policy.getPolicyNumber(),reimbursementDTO);
    	reimbursementDTO.setTopUpPolicyAlertFlag(topAlertFlag);
    	
    	//CR2019202
		 Map<String, String> getFraudAlert = calcService.getFraudAlerts(reimbursementDTO.getNewIntimationDTO().getIntimationId());
		 if(getFraudAlert != null && !getFraudAlert.isEmpty()){
			 reimbursementDTO.setFraudAlertFlag(getFraudAlert.get(SHAConstants.FLAG) != null ? getFraudAlert.get(SHAConstants.FLAG) : "N");
			 reimbursementDTO.setFraudAlertMsg(getFraudAlert.get(SHAConstants.ALERT_MESSAGE) != null ? getFraudAlert.get(SHAConstants.ALERT_MESSAGE) : null);
		 }
		 
		//CR2019217
		 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(reimbursementDTO.getNewIntimationDTO().getIntimationId()); 
		 if(icrAgent != null && !icrAgent.isEmpty()) {
				String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
				reimbursementDTO.setIcrAgentValue(agentScorePoint);
				//added for SM Points suggested by Sathish Sir added by Noufel
				String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
				reimbursementDTO.setSmAgentValue(smScorepoint);
		 }

    	//CR2019199
    	String activePopup = calcService.getCoInsuranceCheckValue(policy.getPolicyNumber());
    	
    	if(activePopup.equalsIgnoreCase(SHAConstants.YES_FLAG)){
    		reimbursementDTO.setIsCoInsurance(true);
    		List<CoInsuranceTableDTO>coInsuranceCheckList = calcService.getCoInsuranceDetails(policy.getPolicyNumber());
    		reimbursementDTO.setCoInsuranceList(coInsuranceCheckList);
    	}
    	if(reimbursementObjectByKey.getClaim().getLegalClaim() !=null
				 && reimbursementObjectByKey.getClaim().getLegalClaim().equals("Y")){
			 LegalTaxDeduction taxDeduction = reimbursementService.getTaxDeductionFromRODKey(reimbursementObjectByKey.getKey());
			 if(taxDeduction !=null){
				 LegalTaxDeductionMapper taxDeductionMapper = LegalTaxDeductionMapper.getInstance();
				 LegalBillingDTO billingDTO = taxDeductionMapper.getDTOFromTaxDeduction(taxDeduction);
				 billingDTO = reimbursementService.calculateLegalSettlment(billingDTO);
				 reimbursementDTO.setLegalBillingDTO(billingDTO);
			 }
		 }
    	
    	//Added for Product 076
    	if(("Y").equalsIgnoreCase(reimbursementObjectByKey.getDocAcknowLedgement().getProdHospBenefitFlag())) {
    		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();

    		Long rodKey = tableDTO.getRodKey();// = 7006l;
    		// Long rodKey = 5155l;
    		Long claimKey = tableDTO.getClaimKey();
    		// Long claimKey = 4042l;
    		// rodDTO.setHumanTask(tableDTO.getHumanTaskListDTO());
    		
    		//CR2019169
    		LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
    		legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
    		rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirDTO);
    		
    		List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(tableDTO.getRodKey());	
    		if(displayDto != null && !displayDto.isEmpty()) {
    		List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
    		LegalHeirDTO legalHeirDTODisplay;
    		for (LegalHeir legalHeirs : displayDto) {
    			legalHeirDTODisplay = new LegalHeirDTO(legalHeirs);
    			
    			/*legalHeirDTODisplay.setHeirName(legalHeir.getLegalHeirName());
    			SelectValue value = new SelectValue();
    			value.setId(legalHeir.getRelationCode());
    			value.setValue(legalHeir.getRelationDesc());
    			legalHeirDTODisplay.setRelationship(value);
    			legalHeirDTODisplay.setSharePercentage(legalHeir.getSharePercentage());
    			legalHeirDTODisplay.setAddress(legalHeir.getAddress());
    			SelectValue accValue = new SelectValue();
    			accValue.setValue(legalHeir.getAccountType());
    			legalHeirDTODisplay.setAccountType(accValue);
    			legalHeirDTODisplay.setBeneficiaryName(legalHeir.getBeneficiaryName());
    			legalHeirDTODisplay.setAccountNo(legalHeir.getAccountNo());
    			legalHeirDTODisplay.setIfscCode(legalHeir.getIfscCode());
    			SelectValue docValue = new SelectValue();
    			docValue.setValue(legalHeir.getAccountType());
    			legalHeirDTODisplay.setDocType(accValue);*/
    			legalHeirDTODisplay.setRelationshipContainer(masterService.getRelationshipContainerValues());
    			
    			list.add(legalHeirDTODisplay);
    			
    		}		
    		rodDTO.getPreauthDTO().setLegalHeirDTOList(list);	
    		}
    		populateDocumentDetails(rodDTO, rodKey,
    				ReferenceTable.CLAIM_BILLING_BENEFITS);

    		Claim claimByKeys = claimService.getClaimByKey(claimKey);
    		

    		NewIntimationDto newIntimationDto = new NewIntimationDto();
    		if (claimByKeys != null) {
    			newIntimationDto = intimationService.getIntimationDto(claimByKeys
    					.getIntimation());

    			ClaimDto claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKeys);
    			
    			if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
    				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
    				 if(latestPreauthByClaim != null){
    					 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
    				 }
    			 }
    			claimDTO.setNewIntimationDto(newIntimationDto);
    			rodDTO.setClaimDTO(claimDTO);
    		}
    		//added for new product
    		Insured insured = policyService.findByClsInsuredKey(newIntimationDto.getInsuredKey());
    		if(insured != null){
    			newIntimationDto.setInsuredPatient(insured);
    		}
    		rodDTO.getUploadDocumentsDTO().setAdmissionDate(rodDTO.getClaimDTO().getNewIntimationDto().getAdmissionDate());
    		Reimbursement objReimbursement = createRodService.getReimbursementObjectByKey(rodKey);
    		if(null != objReimbursement)
    		{
    			rodDTO.getUploadDocumentsDTO().setDischargeDate(objReimbursement.getDateOfDischarge());
    			//MED-PRD-076
    			rodDTO.getDocumentDetails().setDateOfAdmission(objReimbursement.getDateOfAdmission());
    			rodDTO.getDocumentDetails().setDateOfDischarge(objReimbursement.getDateOfDischarge());
    		}

    		List<Double> copayValues = calcService.getProductCoPay(rodDTO
    				.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
    				.getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
    				.getInsuredPatient().getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
    				.getInsuredPatient().getInsuredId(),rodDTO.getClaimDTO().getNewIntimationDto());
    		rodDTO.setProductCoPay(copayValues);

    		rodDTO.setProductBenefitMap(calcService.getProductBenefitFlag(
    				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
    						.getProduct().getKey()));
    		rodDTO.setStrUserName(tableDTO.getUsername());
    		rodDTO.setStrPassword(tableDTO.getPassword());
    	//	rodDTO.setHumanTask(tableDTO.getHumanTaskDTO());
    		rodDTO.getDocumentDetails().setRodKey(rodKey);
    		
    		Reimbursement reimbursement = createRodService.getReimbursementObjectByKey(rodKey);
    		if(null != reimbursement)
    		{
    			if(ReferenceTable.PAYMENT_MODE_CHEQUE_DD.equals(reimbursement.getPaymentModeId()))
    			{
    				rodDTO.getDocumentDetails().setPaymentMode(true);
    				
    			}
    			else if(ReferenceTable.PAYMENT_MODE_BANK_TRANSFER.equals(reimbursement.getPaymentModeId()))
    			{
    				rodDTO.getDocumentDetails().setPaymentMode(false);
    				rodDTO.getDocumentDetails().setAccountNo(reimbursement.getAccountNumber());
    				rodDTO.getDocumentDetails().setAccountPreference(reimbursement.getAccountPreference());
    				rodDTO.getDocumentDetails().setAccountType(reimbursement.getAccountType());
    				BankMaster bankDetails = masterService.getBankDetailsByKey(reimbursement.getBankId());
    				if(null != bankDetails)
    				{
    					rodDTO.getDocumentDetails().setIfscCode(bankDetails.getIfscCode());
    					rodDTO.getDocumentDetails().setBankName(bankDetails.getBankName());
    					rodDTO.getDocumentDetails().setCity(bankDetails.getCity());
    					rodDTO.getDocumentDetails().setBranch(bankDetails.getBranchName());	
    				}				
    			}
    			rodDTO.getDocumentDetails().setEmailId(reimbursement.getPayeeEmailId());
    			rodDTO.getDocumentDetails().setPanNo(reimbursement.getPanNumber());
    			rodDTO.getDocumentDetails().setPayableAt(reimbursement.getPayableAt());
    			rodDTO.getDocumentDetails().setReasonForChange(reimbursement.getReasonForChange());
    			rodDTO.getDocumentDetails().setLegalFirstName(reimbursement.getLegalHeirFirstName());
    			rodDTO.getDocumentDetails().setPayModeChangeReason(reimbursement.getPayModeChangeReason());
    		}
    		
    		Reimbursement hospRODs = reimbursementService.getHospitalizationROD(reimbursement.getClaim().getKey());
    		
    		if(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode() != null && 
    				! rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_076) &&
    				rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode() != null && 
    				! rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.GROUP_HOSPITAL_CASH_POLICY)){
    		if(null != reimbursement && null != reimbursement.getClaim() && null != reimbursement.getClaim().getClaimType()  && reimbursement.getClaim().getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)) {
    			if(hospRODs == null) {
//    				reimbursementDTO.setIsDishonoured(true);
    				rodDTO.setIsHospitalizationRejected(false);
    				
    				// Add for alert showing final sumbt cant move to fa screen only for hos cash flow change produt
    				reimbursementDTO.setIsHospitalizationRejected(false);    			
    				}
    		}
    		}else{
                // Add for alert showing final sumbt cant move to fa screen only for hos cash flow change produt
                reimbursementDTO.setIsDishonoured(false);
                reimbursementDTO.setIsHospitalizationRejected(false);
	        }

    		String strPremiaFlags = BPMClientContext.PREMIA_FLAG;
    		if(strPremiaFlags != null && ("true").equalsIgnoreCase(strPremiaFlags)) {
    			String get64vbStatus = PremiaService.getInstance().get64VBStatus(claimByKey.getIntimation().getPolicy().getPolicyNumber(), claimByKey.getIntimation().getIntimationId());
    			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
    				rodDTO.setIsDishonoured(true);
    			} 
    		}
    		Reimbursement hospitalizationOrPartialRODs = reimbursementService.getHospitalizationOrPartialROD(reimbursement.getClaim().getKey());
    		
    		if(null != reimbursement && null != reimbursement.getClaim() && null != reimbursement.getClaim().getClaimType()  && reimbursement.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
    		//if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
    			
    			Integer seqNumber = 0;
    			
    			if(reimbursement.getRodNumber() != null){
    				String[] split = reimbursement.getRodNumber().split("/");
    				seqNumber = Integer.valueOf(split[split.length - 1]);
    			}
    			
    			if(hospitalizationOrPartialRODs == null && ! seqNumber.equals(1)) {
    				rodDTO.setIsDishonoured(true);
    				rodDTO.setIsHospitalizationRejected(true);
    			}
    		}
    		//	rodDTO.setHumanTask(tableDTO.getHumanTaskDTO());
    		
    		List<AddOnBenefitsDTO> addOnBenefitsDTO = claimRequestBenefitsService
    				.populateAddOnBenefitsTableValuesPhc(rodDTO.getClaimDTO()
    						.getNewIntimationDto(), claimKey, rodKey, copayValues,null,rodDTO.getDocumentDetails());
    		if (null != addOnBenefitsDTO && !addOnBenefitsDTO.isEmpty()) {
    			rodDTO.setAddOnBenefitsDTO(addOnBenefitsDTO);
    		}
    		rodDTO.setIsBillingScreen(true);
    		rodDTO.setIsMedicalScreen(false);


    		rodDTO.setDbOutArray(tableDTO.getDbOutArray());
    		reimbursementDTO.setReceiptOfDocumentsDTO(rodDTO);
    		reimbursementDTO.getPreauthDataExtractionDetails().setPatientDayCareDueTo(rodDTO.getDocumentDetails().getPatientDayCareDueTo());
			reimbursementDTO.getPreauthDataExtractionDetails().setPatientDayCare(rodDTO.getDocumentDetails().getPatientDayCare());
			reimbursementDTO.getPreauthDataExtractionDetails().setHospitalCashDueTo(rodDTO.getDocumentDetails().getHospitalCashDueTo());

    	}
    	
    	//Added for GLX2020127
    	
    	Long policyKey = claimByKey.getIntimation().getPolicy().getKey();
		Long insuredKey = claimByKey.getIntimation().getInsured().getKey();
		String policyInsuredAgeingFlag = dBCalculationService.getPolicyInsuredAgeingFlag(policyKey,insuredKey);
		reimbursementDTO.setPolicyInsuredAgeingFlag(policyInsuredAgeingFlag);
		
		if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
		{
		Intimation intimation = intimationService
				.getIntimationByKey(claimByKey.getIntimation().getKey());
		reimbursementDTO.setDocRecievedDate(intimation.getAdmissionDate());
		
		}
		else if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
		Date docRecievedDate = dBCalculationService.getDocRecievedDate(claimByKey.getKey());
		reimbursementDTO.setDocRecievedDate(docRecievedDate);
		}
		reimbursementDTO.setScreenName(tableDTO.getScreenName());
		
    	
    		view.setProcessClaimBilling(BillingWizard.class, reimbursementDTO);
		
	}

	private PreauthDTO checkFinalEnhancement(PreauthDTO reimbursementDTO) {
		if(reimbursementDTO.getClaimDTO().getClaimType() !=  null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
			Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(reimbursementDTO.getClaimKey());
			//Preauth preauthByClaimKey = preauthService.getPreauthClaimKey(reimbursementDTO.getClaimKey());
			if(latestPreauthByClaim != null){
				if(latestPreauthByClaim.getEnhancementType() != null && latestPreauthByClaim.getEnhancementType().equalsIgnoreCase("F")) {
					reimbursementDTO.setIsFinalEnhancement(true);
				}
				reimbursementDTO.getPreauthDataExtractionDetails().setPreauthTotalApprAmt(latestPreauthByClaim.getTotalApprovalAmount());
			}
		}
		
		return reimbursementDTO;
	}

	private PreauthDTO roomRentNursingMapping(PreauthDTO bean, Long roomRentCategoryId, Long nursingChargesCategoryId, Boolean isIcuMapping) {
		List<RoomRentMatchingDTO> dtoList = new ArrayList<RoomRentMatchingDTO>();
		List<NursingChargesMatchingDTO> nursingDTOList = new ArrayList<NursingChargesMatchingDTO>();
		List<UploadDocumentDTO> uploadDocumentDTOList = bean
				.getUploadDocumentDTO();
		List<SelectValue> listValues = new ArrayList<SelectValue>();
		Long i = 1l;
		for (UploadDocumentDTO uploadDocumentDTO : uploadDocumentDTOList) {
			List<BillEntryDetailsDTO> billEntryDetailList = uploadDocumentDTO
					.getBillEntryDetailList();
			SelectValue value = null;
			for (BillEntryDetailsDTO billEntryDetailsDTO : billEntryDetailList) {

				if (billEntryDetailsDTO.getCategory() != null
						&& billEntryDetailsDTO.getCategory().getId() != null
						&& billEntryDetailsDTO.getCategory().getId().equals(roomRentCategoryId)) {
					RoomRentMatchingDTO dto = new RoomRentMatchingDTO();
					dto.setIdentityId(i++);
					dto.setItemName(billEntryDetailsDTO.getCategory().getId().equals(10l) ? "ICU Room Rent" : "Room Rent");
					dto.setId(billEntryDetailsDTO.getKey());
					dto.setBillNumber(billEntryDetailsDTO.getBillNo() != null ? billEntryDetailsDTO
							.getBillNo() : "");
					dto.setClaimedNoOfDays(billEntryDetailsDTO.getNoOfDays() != null ? billEntryDetailsDTO
							.getNoOfDays() : 0);
					dto.setAllowedNoOfDays(billEntryDetailsDTO
							.getNoOfDaysAllowed() != null ? billEntryDetailsDTO
							.getNoOfDaysAllowed() : 0);
					dto.setPerDayAmount(billEntryDetailsDTO.getPerDayAmt() != null ? billEntryDetailsDTO
							.getPerDayAmt() : 0);
					value = new SelectValue();
					value.setId(dto.getId());
					value.setValue(dto.getIdentityId().toString());
					listValues.add(value);
					dtoList.add(dto);
				} else if (billEntryDetailsDTO.getCategory() != null
						&& billEntryDetailsDTO.getCategory().getValue() != null
						&& billEntryDetailsDTO.getCategory().getId().equals(nursingChargesCategoryId)) {
					NursingChargesMatchingDTO dto = new NursingChargesMatchingDTO();
					dto.setItemName(billEntryDetailsDTO.getCategory().getId().equals(11l) ? " ICU Nursing Charges" : "Nursing Charges");
					// dto.setKey(i++);
					dto.setId(billEntryDetailsDTO.getKey());
					dto.setBillNumber(billEntryDetailsDTO.getBillNo() != null ? billEntryDetailsDTO
							.getBillNo() : "");
					dto.setClaimedNoOfDays(billEntryDetailsDTO.getNoOfDays() != null ? billEntryDetailsDTO
							.getNoOfDays() : 0);
					dto.setAllocatedClaimedNoOfDays(0d);
					nursingDTOList.add(dto);
				}
			}
		}

		if (!dtoList.isEmpty() && !nursingDTOList.isEmpty()) {
			if (dtoList.size() == 1 && nursingDTOList.size() == 1) {
				nursingDTOList.get(0).setMapToRoomDays(
						dtoList.get(0).getAllowedNoOfDays());
				dtoList.get(0).setNursingChargesDTOList(nursingDTOList);
				if(!isIcuMapping) {
					bean.setRoomRentMappingDTOList(dtoList);
					bean.setIsOneMapping(false);
				} else {
					bean.setIcuRoomRentMappingDTOList(dtoList);
					bean.setIsICUoneMapping(false);
				}
				bean.setIsOneMapping(true);
			} else if (dtoList.size() > 1 || nursingDTOList.size() > 1) {
				for (RoomRentMatchingDTO roomRentDTO : dtoList) {

					//List<NursingChargesMatchingDTO> nursingDTOLists = new ArrayList<NursingChargesMatchingDTO>();
					for (NursingChargesMatchingDTO nursingDTO : nursingDTOList) {
						nursingDTO.setListValues(listValues);
					}

					roomRentDTO.setNursingChargesDTOList(nursingDTOList);
				}
				if(!isIcuMapping) {
					bean.setRoomRentMappingDTOList(dtoList);
					bean.setIsOneMapping(false);
				} else {
					bean.setIcuRoomRentMappingDTOList(dtoList);
					bean.setIsICUoneMapping(false);
				}
				
			}
		}
		return bean;

	}

	/*private NursingChargesMatchingDTO getNursingDTO(Long key,
			NursingChargesMatchingDTO filledDto, List<SelectValue> listValues) {
		NursingChargesMatchingDTO dto = new NursingChargesMatchingDTO();
		dto.setItemName("Nursing Charges");
		dto.setKey(null);
		dto.setId(filledDto.getId());
		dto.setBillNumber(filledDto.getBillNumber());
		dto.setClaimedNoOfDays(filledDto.getClaimedNoOfDays());
		dto.setAllocatedClaimedNoOfDays(0d);
		dto.setListValues(listValues);
		return dto;
	}*/

	private PreauthDTO setHospitalizationAmount(PreauthDTO preauthDTO) {
		List<Reimbursement> reimbursementByClaimKey = createRodService
				.getReimbursementByClaimKey(preauthDTO.getClaimKey());
		Integer hospitalizationAmount = 0;
		for (Reimbursement reimbursement : reimbursementByClaimKey) {
			if (reimbursement.getDocAcknowLedgement().getHospitalisationFlag() != null
					&& reimbursement.getDocAcknowLedgement()
							.getHospitalisationFlag().equalsIgnoreCase("Y")) {
				List<Hospitalisation> hospitalisationList = createRodService
						.getHospitalisationList(reimbursement.getKey());
				for (Hospitalisation hospitalisation : hospitalisationList) {
					hospitalizationAmount += hospitalisation.getClaimedAmount() != null ? hospitalisation
							.getClaimedAmount().intValue() : 0;
				}
			}
		}
		preauthDTO.setHospitalizationAmount(hospitalizationAmount);
		return preauthDTO;
	}

	private PreauthDTO setPreAndPostHopitalizationAmount(PreauthDTO preauthDTO) {
		if(!(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey().equals(ReferenceTable.STAR_GMC_PRODUCT_KEY)
				|| preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey().equals(ReferenceTable.STAR_GMC_NBFC_PRODUCT_KEY))){
		calcService.getBillDetailsSummary(preauthDTO.getKey());
		}
		List<PreHospitalisation> preHospitalisationValues = billDetailsService
				.getPreHospitalisationList(preauthDTO.getKey());
		List<PostHospitalisation> postHospitalisationValues = billDetailsService
				.getPostHospitalisationList(preauthDTO.getKey());
		Integer postHospitalizationAmt = 0;
		Integer preHospitalizationAmt = 0;
		for (PostHospitalisation postHospitalisation : postHospitalisationValues) {
			postHospitalizationAmt += postHospitalisation
					.getClaimedAmountBills() != null ? postHospitalisation
					.getClaimedAmountBills().intValue() : 0;
		}

		for (PreHospitalisation preHospitalisation : preHospitalisationValues) {
			preHospitalizationAmt += preHospitalisation.getClaimedAmountBills() != null ? preHospitalisation
					.getClaimedAmountBills().intValue() : 0;
		}
		preauthDTO.getPreauthMedicalDecisionDetails().setBillingRemarks("");
		preauthDTO.setPreHospitalisationValue(String
				.valueOf(preHospitalizationAmt));
		preauthDTO.setPostHospitalisationValue(String
				.valueOf(postHospitalizationAmt));

		return preauthDTO;
	}

	protected void showFinancialProcessClaimBillingWizard(
			SearchProcessClaimFinancialsTableDTO tableDTO) {

		Reimbursement reimbursementObjectByKey = rodService
				.getReimbursementObjectByKey(tableDTO.getRodKey());
		List<UploadDocumentDTO> rodSummaryDetails = rodService
				.getRODSummaryDetails(reimbursementObjectByKey.getKey());
		
		Intimation intimationKey = intimationService.getIntimationByNo(tableDTO.getIntimationNo());

		/*
		 * List<Long> documentSummaryKeys = new ArrayList<Long>(); for
		 * (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
		 * documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
		 * uploadDocumentDTO.setStatus(true); List<RODBillDetails>
		 * billEntryDetails = rodService
		 * .getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
		 * List<BillEntryDetailsDTO> dtoList = new
		 * ArrayList<BillEntryDetailsDTO>(); if (billEntryDetails != null &&
		 * !billEntryDetails.isEmpty()) { for (RODBillDetails billEntryDetailsDO
		 * : billEntryDetails) {
		 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
		 * uploadDocumentDTO)); } }
		 * uploadDocumentDTO.setBillEntryDetailList(dtoList);
		 * 
		 * }
		 * 
		 * Double totalBilledAmount = reimbursementService
		 * .getTotalBilledAmount(documentSummaryKeys);
		 */
		ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
//		ZonalMedicalReviewMapper.getAllMapValues();
		PreauthDTO reimbursementDTO = mapper
				.getReimbursementDTO(reimbursementObjectByKey);
//		MastersValue master = masterService.getMaster(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNetworkHospitalTypeId());
//		reimbursementDTO.getNewIntimationDTO().getHospitalDto().setNetworkHospitalType(master.);
		/*if(("Y").equalsIgnoreCase(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getReconsiderationRequest()))
		{
			reimbursementDTO.setReconsiderRodRequestList(getReconsiderRODRequestForBillEntry(tableDTO.getRodKey()));
		}*/
		if(reimbursementObjectByKey.getCatastrophicLoss() != null) {
			
			SelectValue value = masterService.getCatastropheData(reimbursementObjectByKey.getCatastrophicLoss());
			reimbursementDTO.getPreauthDataExtractionDetails().setCatastrophicLoss(value);
		}

		if(reimbursementObjectByKey.getNatureOfLoss() != null) {
			
			SelectValue value = masterService.getMasterValueForNatureCause(reimbursementObjectByKey.getNatureOfLoss());
			reimbursementDTO.getPreauthDataExtractionDetails().setNatureOfLoss(value);
		}
		if(reimbursementObjectByKey.getCauseOfLoss() != null) {
			SelectValue value = masterService.getMasterValueForNatureCause(reimbursementObjectByKey.getCauseOfLoss());
			reimbursementDTO.getPreauthDataExtractionDetails().setCauseOfLoss(value);
		}
		
		//CR2019169
		LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
		legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
		reimbursementDTO.setLegalHeirDto(legalHeirDTO);
		
		if(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag() != null && ("Y").equalsIgnoreCase(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag()))
		{
			List<ReconsiderRODRequestTableDTO> reconsiderDTOList = getReconsiderRODRequestForBillEntry(tableDTO.getRodKey());
			if(null != reconsiderDTOList && !reconsiderDTOList.isEmpty())
			{
				for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderDTOList) {
					if(null != reconsiderRODRequestTableDTO.getIsRejectReconsidered() && reconsiderRODRequestTableDTO.getIsRejectReconsidered())
					{
						reimbursementDTO.setIsRejectReconsidered(true);
					}
					else
					{
						reimbursementDTO.setIsRejectReconsidered(false);
					}
				}
			}
			reimbursementDTO.setReconsiderRodRequestList(getReconsiderRODRequestForBillEntry(tableDTO.getRodKey()));
		}
		
		/*
		 * reimbursementDTO.setAmountConsidered(totalBilledAmount != null ?
		 * String .valueOf(totalBilledAmount.intValue()) : "0");
		 * reimbursementDTO .setInitialAmountConsidered(totalBilledAmount !=
		 * null ? String .valueOf(totalBilledAmount.intValue()) : "0");
		 * reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
		 * reimbursementDTO.setHumanTask(tableDTO.getHumanTask());
		 * reimbursementDTO.setHumanTask(tableDTO.getHumanTask());
		 * reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
		 * reimbursementDTO.setStrUserName(tableDTO.getUsername());
		 * reimbursementDTO.setStrPassword(tableDTO.getPassword());
		 */

		Claim claimByKey = reimbursementObjectByKey.getClaim();
		reimbursementDTO
				.setReconsiderationList(getReconsiderRODRequest(claimByKey));
		
		// R1045
		reimbursementDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
		reimbursementDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
		reimbursementDTO.setCrmFlagged(claimByKey.getCrcFlag());
		
		reimbursementDTO.setVipCustomer(claimByKey.getIsVipCustomer());
		reimbursementDTO.setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
		
		
	/*	if(null != claimByKey)
		{
			if(null != reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId())
			{
				String  docReceivedFrom = reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getValue();
				reimbursementDTO.setPreviousAccountDetailsList(populatePreviousAccountDetails(claimByKey.getIntimation().getIntimationId(),docReceivedFrom));
			}
		}*/
		
		if(null != claimByKey)
		{
			reimbursementDTO.setPreviousAccntDetailsList(calcService.getPreviousAccountDetails(claimByKey.getIntimation().getInsured().getInsuredId()
					,reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey()));
		}

		if(claimByKey!=null){
			
			Long hospital = claimByKey.getIntimation().getHospital();
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				reimbursementDTO.setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
					reimbursementDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}
		}
		setCategoryFlag(reimbursementObjectByKey, reimbursementDTO);
		

		if (!reimbursementDTO.getHospitalizaionFlag()) {
			reimbursementDTO = setHospitalizationAmount(reimbursementDTO);
		}

		reimbursementDTO = setReimbursmentTOPreauthDTO(mapper, claimByKey,
				reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.FINANCIAL);
		reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
				reimbursementObjectByKey.getKey());
		
		reimbursementDTO.setBillingApprovedDate(reimbursementObjectByKey.getBillingCompletedDate());
		
		/*if(reimbursementObjectByKey.getDocAcknowLedgement() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
				&& ReferenceTable.RECEIVED_FROM_INSURED.equals(reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey())
				&& reimbursementObjectByKey.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId() != null
				&& ReferenceTable.RELATION_SHIP_SELF_KEY.equals(reimbursementObjectByKey.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId().getKey())
				&& reimbursementObjectByKey.getPatientStatus() != null 
				&& reimbursementObjectByKey.getPatientStatus().getKey() != null 
				&& ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(reimbursementObjectByKey.getPatientStatus().getKey())) {*/
			
			List<NomineeDetailsDto> nomineeDtoList = intimationService.getNomineeDetailsListByTransactionKey(tableDTO.getRodKey());
			if( nomineeDtoList != null && !nomineeDtoList.isEmpty()){
				reimbursementDTO.getNewIntimationDTO().setNomineeList(nomineeDtoList);
			}
			else{
				
				List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(tableDTO.getRodKey());	
				if(displayDto != null && !displayDto.isEmpty()) {
					List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
					LegalHeirDTO legalHeirDTODisplay;
						for (LegalHeir legalHeir : displayDto) {
							legalHeirDTODisplay = new LegalHeirDTO(legalHeir);			
							
							/*legalHeirDTODisplay.setHeirName(legalHeir.getLegalHeirName());
							SelectValue value = new SelectValue();
							value.setId(legalHeir.getRelationCode());
							value.setValue(legalHeir.getRelationDesc());
							legalHeirDTODisplay.setRelationship(value);
							legalHeirDTODisplay.setSharePercentage(legalHeir.getSharePercentage());
							legalHeirDTODisplay.setAddress(legalHeir.getAddress());
							SelectValue accValue = new SelectValue();
							accValue.setValue(legalHeir.getAccountType());
							legalHeirDTODisplay.setAccountType(accValue);
							legalHeirDTODisplay.setBeneficiaryName(legalHeir.getBeneficiaryName());
							legalHeirDTODisplay.setAccountNo(legalHeir.getAccountNo());
							legalHeirDTODisplay.setIfscCode(legalHeir.getIfscCode());
							SelectValue docValue = new SelectValue();
							docValue.setValue(legalHeir.getAccountType());
							legalHeirDTODisplay.setDocType(accValue);*/
							legalHeirDTODisplay.setRelationshipContainer(masterService.getRelationshipContainerValues());
							list.add(legalHeirDTODisplay);
							
						}		
					
					reimbursementDTO.setLegalHeirDTOList(list);
				}
			}
		//}
		
		// Added for amount claimed table enhancement --- stops
		DBCalculationService dbCalculationService = new DBCalculationService();
		Double insuredSumInsured = dbCalculationService.getInsuredSumInsured(
				reimbursementDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), reimbursementDTO
						.getPolicyDto().getKey(),reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());

		Map<Integer, Object> detailsMap = new HashMap<Integer, Object>();
		
//		if(null != reimbursementDTO && null != reimbursementDTO.getNewIntimationDTO() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto() 
//				&& null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType()
//				&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType().getKey().equals(ReferenceTable.NON_NETWORK_HOSPITAL_TYPE_ID))
//		{
//			String cityClass = createRodService.getHospitalCityClass(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
//			reimbursementDTO.getNewIntimationDTO().getHospitalDto()
//			.getRegistedHospitals().setCityClass(cityClass);
//			
//		}

		if(reimbursementObjectByKey.getSectionCategory() != null){
			
			if(ReferenceTable.getGMCProductList().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				insuredSumInsured = dbCalculationService.getInsuredSumInsuredForGMC(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(),
						reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getSectionCode());
				detailsMap = dbCalculationService
						.getHospitalizationDetailsForGMC(reimbursementDTO.getPolicyDto()
								.getProduct().getKey(), insuredSumInsured,
								reimbursementDTO.getNewIntimationDTO().getHospitalDto()
										.getRegistedHospitals().getCityClass(),
								reimbursementDTO.getNewIntimationDTO()
										.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
			}else{
				detailsMap = dbCalculationService
						.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
								.getProduct().getKey(), insuredSumInsured,
								reimbursementDTO.getNewIntimationDTO().getHospitalDto()
										.getRegistedHospitals().getCityClass(),
								reimbursementDTO.getNewIntimationDTO()
										.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
			}
		
		}else{
			
			Long sectionCategory = 0l;
			if(reimbursementDTO.getPolicyDto()
								.getProduct().getKey().equals(ReferenceTable.STAR_CARDIAC_CARE_POLICY) || reimbursementDTO.getPolicyDto()
								.getProduct().getKey().equals(ReferenceTable.DIABETES_INDIVIDUAL_POLICY) || reimbursementDTO.getPolicyDto()
								.getProduct().getKey().equals(ReferenceTable.DIABETES_FLOATER_POLICY))
			{
				sectionCategory = 1l;
			}
			if(ReferenceTable.getGMCProductList().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				insuredSumInsured = dbCalculationService.getInsuredSumInsuredForGMC(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(),
						reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getSectionCode());
				detailsMap = dbCalculationService
						.getHospitalizationDetailsForGMC(reimbursementDTO.getPolicyDto()
								.getProduct().getKey(), insuredSumInsured,
								reimbursementDTO.getNewIntimationDTO().getHospitalDto()
										.getRegistedHospitals().getCityClass(),
								reimbursementDTO.getNewIntimationDTO()
										.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,"0");
			}else{
				
				String policyPlan = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null ? reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() : "0";
				
				/*if(ReferenceTable.MEDI_CLASSIC_BASIC_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) || ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {*/
				if(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
								|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
								|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
							|| ((SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
								&& reimbursementDTO.getNewIntimationDTO().getPolicy().getProductType().getKey().equals(ReferenceTable.INDIVIDUAL_POLICY))) {
					policyPlan = reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() != null ? reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() : "0";
				}
				
				detailsMap = dbCalculationService
						.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
								.getProduct().getKey(), insuredSumInsured,
								reimbursementDTO.getNewIntimationDTO().getHospitalDto()
										.getRegistedHospitals().getCityClass(),
								reimbursementDTO.getNewIntimationDTO()
										.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,policyPlan);
			}
			
		}
		
		
//		if(detailsMap != null && detailsMap.get(15) != null){
//			reimbursementDTO.setAmbulanceLimitAmount((Double)detailsMap.get(15));
//		}
		
		List<Double> copayValue = dbCalculationService.getProductCoPay(reimbursementDTO
				.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
				.getKey(), reimbursementDTO.getClaimDTO().getNewIntimationDto()
				.getInsuredPatient().getKey(),reimbursementDTO.getClaimDTO().getNewIntimationDto()
				.getInsuredPatient().getInsuredId(),reimbursementDTO.getNewIntimationDTO());
		reimbursementDTO.setProductCopay(copayValue);

		List<Long> documentSummaryKeys = new ArrayList<Long>();
		
		List<DMSDocumentDetailsDTO> dmsDocDetailList = getClaimsDMSList(claimByKey.getIntimation().getIntimationId());
		
		/**
		 * Fix for implemeting claims dms in bill entry screen.. -- starts
		 * **/
		/*if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
		{
			for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
				if(null != claimByKey)
				{
					uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
					uploadDocumentDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
				}
			}
		}*/
		
		/**
		 * Added for enabling view documents in preauth screen while raising query -- fix starts.
		 * */
		if(null != claimByKey)
		{
			reimbursementDTO.setDmsDocumentDTOList(dmsDocDetailList);
		}
		/**
		 * Added for enabling view documents in preauth screen while raising query -- fix ends
		 * */
		
		Double productBasedAmbulanceAmt = getProductBasedAmbulanceAmt(tableDTO.getRodKey());
		
		List<UploadDocumentDTO> rodBillSummaryDetails = rodService
				.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);
		
		if(rodBillSummaryDetails != null){
			for (UploadDocumentDTO uploadDocumentDTO2 : rodBillSummaryDetails) {
				uploadDocumentDTO2.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
			}
		}
		List<BillEntryDetailsDTO> dtoList = null;
		for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
			
			if(null != reimbursementObjectByKey)
			{
				uploadDocumentDTO.setIntimationNo(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId());
				uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfAdmission()));
				uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfDischarge()));
				uploadDocumentDTO.setInsuredPatientName(reimbursementObjectByKey.getClaim().getIntimation().getInsuredPatientName());
			}
			
			if(null != claimByKey)
			{
				uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
				uploadDocumentDTO.setDmsDocumentDTOList(dmsDocDetailList);
			}
			
			documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
			uploadDocumentDTO.setStatus(true);
			List<RODBillDetails> billEntryDetails = rodService
					.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
			dtoList = new ArrayList<BillEntryDetailsDTO>();
			if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
				for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
					/*
					 * <<<<<<< HEAD
					 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
					 * uploadDocumentDTO)); =======
					 */
					dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
							uploadDocumentDTO));
					// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
				}
			}
			/*
			 * uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
			 * .get(8));
			 */
			uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
					.get(8));
			uploadDocumentDTO
					.setProductBasedICURent((Double) detailsMap.get(9));
			
			reimbursementDTO.getNewIntimationDTO().setRoomRentMaxAmount((Double)detailsMap.get(8));
			reimbursementDTO.getNewIntimationDTO().setIcuMaxAmount((Double) detailsMap.get(9));
			
			Product product = reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct();
			if(product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey()) && 
					reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
				uploadDocumentDTO
				.setProductBasedRoomRent(0d);
				uploadDocumentDTO
							.setProductBasedICURent(0d);
			}
			/*uploadDocumentDTO.setProductBasedAmbulanceAmt((Double) detailsMap
					.get(15));*/
			uploadDocumentDTO.setProductBasedAmbulanceAmt(productBasedAmbulanceAmt);
			uploadDocumentDTO.setStatus(false);
			uploadDocumentDTO.setBillEntryDetailList(dtoList);
			uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
			uploadDocumentDTO.setRodKey(reimbursementObjectByKey.getKey());

			uploadDocumentDTO.setStrUserName(tableDTO.getUsername());
		}
		/*List<UploadDocumentDTO> rodBillSummaryDetails = rodService
				.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);*/
		
		reimbursementDTO.getUploadDocDTO().setBillingWorkSheetUploadDocumentList(rodBillSummaryDetails);

		Double totalBilledAmount = reimbursementService
				.getTotalBilledAmount(documentSummaryKeys);
		reimbursementDTO.setAmountConsidered(totalBilledAmount != null ? String
				.valueOf(totalBilledAmount.intValue()) : "0");
		reimbursementDTO
				.setInitialAmountConsidered(totalBilledAmount != null ? String
						.valueOf(totalBilledAmount.intValue()) : "0");
		reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
		/*reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
		reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
		reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());*/
		reimbursementDTO.setStrUserName(tableDTO.getUsername());
		reimbursementDTO.setStrPassword(tableDTO.getPassword());
		reimbursementDTO.setTaskNumber(tableDTO.getTaskNumber());
		// Added for amount claimed table enhancement --- stops

		Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
				.getIntimation().getHospital());
		ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
				.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
		if(hospitalById != null){
			
			updateHospitalDetails.setHospitalCity(hospitalById.getCity());
			updateHospitalDetails.setHospitalCity(hospitalById.getCity());
			updateHospitalDetails.setHospitalState(hospitalById.getState());
			updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
			updateHospitalDetails.setHospitalName(hospitalById.getName());
			updateHospitalDetails.setPanNumber(hospitalById.getPanNumber());
			updateHospitalDetails.setHospitalAddress1(hospitalById.getAddress());
			updateHospitalDetails.setHopitalRegNumber(hospitalById.getRegistrationNumber());
			updateHospitalDetails.setHospitalPhoneNo(hospitalById.getPhoneNumber());
			updateHospitalDetails.setHospitalTypeId(hospitalById.getHospitalType().getKey());
			//updateHospitalDetails.setInpatientBeds(hospitalById.getInpatientBeds() != null ? hospitalById
					//.getInpatientBeds().toString() : "0");
			
		}
		
		UploadDocumentDTO reimbursementBenefitsValue = claimRequestBenefitsService
				.getReimbursementBenefitsValue(reimbursementObjectByKey
						.getKey());

		setReimbursementValues(reimbursementObjectByKey, reimbursementDTO);
		
		
		
		
		/*if(null != claimByKey && null != claimByKey.getClaimType() && null != claimByKey.getClaimType().getKey())
		{
			if((claimByKey.getClaimType().getKey()).equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
			{
					if (null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getHospitalType()) {
					populatePaymentDetailsForHosp(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getKey(), rodDTO);
					
				}
			}
			else 
			{
				rodDTO.getDocumentDetails().setPaymentModeFlag(
						ReferenceTable.PAYMENT_MODE_CHEQUE_DD);
				populatePaymentDetailsForReimbursementClaim(claimKey, rodDTO);
			}
		}
		*/
		paymentDetailsForfinancial(reimbursementObjectByKey, reimbursementDTO,
				hospitalById);
        
		if (reimbursementBenefitsValue != null) {
			reimbursementDTO.getPreauthDataExtractionDetails()
					.setUploadDocumentDTO(reimbursementBenefitsValue);
		}
		if (null != reimbursementBenefitsValue
				&& reimbursementBenefitsValue.getPatientCareBenefitFlag() != null
				&& reimbursementBenefitsValue.getPatientCareBenefitFlag()
						.equalsIgnoreCase("PC")) {
			List<ReimbursementBenefitsDetails> patientCareTableByBenefitKey = reimbursementService
					.getPatientCareTableByBenefitKey(reimbursementBenefitsValue
							.getPatientBenefitKey());
			List<PatientCareDTO> patientCareDTOList = new ArrayList<PatientCareDTO>();
			if (patientCareTableByBenefitKey != null
					&& !patientCareTableByBenefitKey.isEmpty()) {
				PatientCareDTO dto = null;
				for (ReimbursementBenefitsDetails patientCareDetails : patientCareTableByBenefitKey) {
					dto = new PatientCareDTO();
					dto.setEngagedFrom(patientCareDetails.getEngagedFrom());
					dto.setEngagedTo(patientCareDetails.getEngagedTo());
					dto.setKey(patientCareDetails.getKey());
					patientCareDTOList.add(dto);
				}
			}
			reimbursementDTO.getPreauthDataExtractionDetails()
					.getUploadDocumentDTO()
					.setPatientCareDTO(patientCareDTOList);
		}

		List<AddOnBenefitsDTO> populateAddOnBenefitsTableValues = claimRequestBenefitsService
				.populateAddOnBenefitsTableValues(
						reimbursementDTO.getNewIntimationDTO(),
						reimbursementObjectByKey.getClaim().getKey(),
						reimbursementObjectByKey.getKey(),
						reimbursementDTO.getProductCopay(),null);

		reimbursementDTO.getPreauthDataExtractionDetails()
				.setAddOnBenefitsDTOList(populateAddOnBenefitsTableValues);
		// Reimbursement previousLatestROD =
		// getPreviousLatestROD(claimByKey.getKey(), reimbursementObjectByKey);
		// if(previousLatestROD != null) {
		// setReimbursmentTOPreauthDTO(mapper, claimByKey, previousLatestROD,
		// reimbursementDTO, true );
		// Hospitals hospitalById =
		// hospitalService.getHospitalById(claimByKey.getIntimation().getHospital());
		// ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails =
		// reimbursementDTO.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
		// updateHospitalDetails.setHospitalCity(hospitalById.getCity());
		// updateHospitalDetails.setHospitalCity(hospitalById.getCity());
		// updateHospitalDetails.setHospitalState(hospitalById.getState());
		// updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
		// reimbursementDTO.setReconsiderationList(getReconsiderRODRequest(claimByKey));
		// }

		Boolean isBasedOnPremium = false;
		if(ReferenceTable.getPremiumDeductionProductKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) && (reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) && (reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag() != null && reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag().equalsIgnoreCase(SHAConstants.YES_FLAG))) {
			isBasedOnPremium = true;
		}
		if(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyInstalmentFlag() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyInstalmentFlag().equalsIgnoreCase(SHAConstants.YES_FLAG) 
				&& (reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) && (reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag() != null 
				&& reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag().equalsIgnoreCase(SHAConstants.YES_FLAG))){
			isBasedOnPremium = true;
		}
		
//		IMSSUPPOR-32761
		if(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyInstalmentFlag() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyInstalmentFlag().equalsIgnoreCase(SHAConstants.YES_FLAG) 
                && (reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) && (reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag() != null 
                && reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag().equalsIgnoreCase(SHAConstants.YES_FLAG))){
			isBasedOnPremium = true;
		}

		
		List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
				.search(reimbursementObjectByKey.getClaim().getKey(), isBasedOnPremium);

		List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
		for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {

			previousPreAuthTableDTO.setRequestedAmt(preauthService
					.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
							previousPreAuthTableDTO.getClaimKey()));
			newList.add(previousPreAuthTableDTO);
		}

		reimbursementDTO.setPreviousPreauthTableDTO(newList);

		reimbursementDTO.setBillingApprovedAmount(reimbursementObjectByKey
				.getBillingApprovedAmount());

		List<Reimbursement> hospitalizationROD = getHospitalizationROD(
				reimbursementObjectByKey.getClaim().getKey(),
				reimbursementObjectByKey);
		Reimbursement partialHospitalizationROD = getPartialHospitalizationROD(
				reimbursementObjectByKey.getClaim().getKey(),
				reimbursementObjectByKey);

		DocAcknowledgement docAcknowledgement = reimbursementObjectByKey
				.getDocAcknowLedgement();
		String hospitalFlag = null;
		String partialHospitalFlag = null;
		if (docAcknowledgement != null
				&& docAcknowledgement.getHospitalisationFlag() != null) {
			hospitalFlag = docAcknowledgement.getHospitalisationFlag();
			partialHospitalFlag = docAcknowledgement.getPartialHospitalisationFlag();
		}
		if (hospitalFlag != null && !hospitalFlag.equalsIgnoreCase("Y") && partialHospitalFlag != null && !partialHospitalFlag.equalsIgnoreCase("Y")) {
			/*if ((hospitalizationROD != null
					&& hospitalizationROD.getStatus() != null
					&& !ReferenceTable.FINANCIAL_APPROVE_STATUS
							.equals(hospitalizationROD.getStatus().getKey()) && !ReferenceTable.getPaymentStatus().containsKey(hospitalizationROD.getStatus().getKey())) ) {
				reimbursementDTO.setIsHospitalizationRODApproved(false);
			}*/
			
			if(hospitalizationROD != null && !hospitalizationROD.isEmpty()){
				for(Reimbursement hospitalRod :hospitalizationROD){
					if ((hospitalRod != null
							&& hospitalRod.getStatus() != null
							&&  ReferenceTable.getPaymentStatus().containsKey(hospitalRod.getStatus().getKey())) ) {
						reimbursementDTO.setIsHospitalizationRODApproved(true);
						break;
					}else{
						reimbursementDTO.setIsHospitalizationRODApproved(false);
					}
				}
			}

			if(partialHospitalizationROD != null
					&& partialHospitalizationROD.getStatus() != null
					&& ReferenceTable.FINANCIAL_APPROVE_STATUS
							.equals(partialHospitalizationROD.getStatus().getKey()) && ReferenceTable.getPaymentStatus().containsKey(partialHospitalizationROD.getStatus().getKey())) {
				reimbursementDTO.setIsHospitalizationRODApproved(true);
			}
		}
		

		if (reimbursementObjectByKey.getDocAcknowLedgement()
				.getHospitalizationRepeatFlag() != null
				&& reimbursementObjectByKey.getDocAcknowLedgement()
						.getHospitalizationRepeatFlag().toLowerCase()
						.equalsIgnoreCase("y")) {
			reimbursementDTO.setIsHospitalizationRepeat(true);
		}
		
		
		reimbursementDTO.getPreauthDataExtractionDetails()
				.setDocAckknowledgement(
						reimbursementObjectByKey.getDocAcknowLedgement());
		reimbursementDTO.getPreauthMedicalDecisionDetails().setApprovalRemarks(
				"");

		String specialityName = claimService
				.getSpecialityName(reimbursementObjectByKey.getClaim().getKey());

		reimbursementDTO.setSpecialityName(specialityName);
        
		String remedicalRemarks = null;
		String rebillingRemarks = null;
		Long latestMedicalApproverKey = reimbursementService.getLatestMedicalApproverKey(reimbursementObjectByKey.getKey());
		if(latestMedicalApproverKey != null){
			MedicalApprover medicalApproverByKey = reimbursementService.getMedicalApproverByKey(latestMedicalApproverKey);
			if(medicalApproverByKey != null){
				reimbursementDTO.setIsReMedical(true);
				remedicalRemarks = medicalApproverByKey.getApproverReply();
			}
		}
		Long latestApproverKey = reimbursementService.getLatestMedicalApproverForRebilling(reimbursementObjectByKey.getKey());
		if(latestApproverKey != null){
			MedicalApprover medicalApproverByKey = reimbursementService.getMedicalApproverByKey(latestApproverKey);
			if(medicalApproverByKey != null){
				reimbursementDTO.setIsReBilling(true);
				rebillingRemarks = medicalApproverByKey.getApproverReply();
			}
		}
		
		reimbursementDTO.getPreauthDataExtractionDetails().setBillingRemarks(rebillingRemarks);
		reimbursementDTO.getPreauthDataExtractionDetails().setMedicalRemarks(remedicalRemarks);
		reimbursementDTO.setFvrCount(intimationService.getFVRCount(reimbursementDTO.getNewIntimationDTO().getKey())); 
		
		if (claimByKey.getClaimType() != null
				&& claimByKey.getClaimType().getKey()
						.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {

//			PreMedicalMapper premedicalMapper = new PreMedicalMapper();
			
			Preauth previousPreauth = getPreviousPreauth(claimByKey.getKey());
			
			reimbursementDTO.setIsCashlessType(true);
			
			if(previousPreauth != null) {
				reimbursementDTO.setPreauthKey(previousPreauth.getKey());
			}
		}
		
		/*if (null != reimbursementObjectByKey && null != reimbursementObjectByKey.getProrataDeductionFlag() && !("").equalsIgnoreCase(reimbursementObjectByKey.getProrataDeductionFlag()))
		{
		reimbursementDTO.setProrataDeductionFlag(reimbursementObjectByKey.getProrataDeductionFlag());
		}
		*/
		reimbursementDTO = getProrataFlagFromProduct(reimbursementDTO);
		reimbursementDTO.setProrataDeductionFlag(reimbursementObjectByKey.getProrataDeductionFlag());
		/**
		 * product based variable is added to enable or disable the component in page level.
		 * This would be static. -- starts
		 * */
		//reimbursementDTO.setProductBasedProRata(reimbursementObjectByKey.getProrataDeductionFlag());
		//reimbursementDTO.setProductBasedPackage(reimbursementObjectByKey.getPackageAvailableFlag());
		//ends.
		reimbursementDTO.setPackageAvailableFlag(reimbursementObjectByKey.getPackageAvailableFlag());

//		if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
//			Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimByKey.getKey());
//			if(claimByKey.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS) ||  claimByKey.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS)) {
//				reimbursementDTO.setIsWithDrawn(true);
//			}
//		}
		
		loadRRCRequestValues(reimbursementDTO,insuredSumInsured,SHAConstants.RRC_FINANCIAL);
		
		

		if (reimbursementDTO.getClaimKey() != null) {
			List<Investigation> investigationList = investigationService
					.getByInvestigationByClaimKey(reimbursementDTO.getClaimKey());
			if (investigationList != null && investigationList.size() >= 0) {
				reimbursementDTO.setInvestigationSize(investigationList.size());
			} else {
				reimbursementDTO.setInvestigationSize(0);
			}
		}

		reimbursementDTO.setSittingsAmount(dbCalculationService.getDialysisAmount(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
		Map<String, Integer> productBenefitFlag = dbCalculationService.getProductBenefitFlag(reimbursementObjectByKey.getClaim().getKey(), reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey());
//			
		if(productBenefitFlag.get(SHAConstants.PRE_HOSP_FLAG).equals(0)) {
			reimbursementDTO.setIsPreHospApplicable(false);
		}
		
		if(productBenefitFlag.get(SHAConstants.POST_HOSP_FLAG).equals(0)) {
			reimbursementDTO.setIsPostHospApplicable(false);
		}
		
		if(productBenefitFlag.get(SHAConstants.LUMP_SUM_FLAG).equals(1)) {
			reimbursementDTO.setIsLumpsumApplicable(true);
		}
		
		if(productBenefitFlag.get(SHAConstants.HOSPITALCASH_FLAG).equals(1)) {
			reimbursementDTO.setIsHospitalCashApplicable(true);
		}
		
		if(productBenefitFlag.get(SHAConstants.PATIENTCARE_FLAG).equals(1)) {
			reimbursementDTO.setIsPatientCareApplicable(true);
		}
		
		//IMSSUPPOR-28847
		if(productBenefitFlag.get(SHAConstants.OTHER_BENEFITS_FLAG).equals(1)) {
			reimbursementDTO.setIsOthrBenefitApplicable(true);
		}
		
		
			if((!reimbursementDTO.getHospitalizaionFlag() && !reimbursementDTO.getPartialHospitalizaionFlag()) && ! reimbursementDTO.getPostHospitalizaionFlag() && reimbursementDTO.getPreHospitalizaionFlag()
					&& productBenefitFlag.get(SHAConstants.PRE_HOSP_FLAG).equals(0)) {
				reimbursementDTO.setIsDishonoured(true);
			} else if((!reimbursementDTO.getHospitalizaionFlag() && !reimbursementDTO.getPartialHospitalizaionFlag()) && ! reimbursementDTO.getPreHospitalizaionFlag() && reimbursementDTO.getPostHospitalizaionFlag()
					&& productBenefitFlag.get(SHAConstants.POST_HOSP_FLAG).equals(0)) {
				reimbursementDTO.setIsDishonoured(true);
			}

		
		if((!reimbursementDTO.getHospitalizaionFlag() && !reimbursementDTO.getPartialHospitalizaionFlag() && !reimbursementDTO.getLumpSumAmountFlag()) &&
				! reimbursementDTO.getIsPreHospApplicable() && ! reimbursementDTO.getIsPostHospApplicable()){
			reimbursementDTO.setIsDishonoured(true);
		}
		
		// If hospitalization is not processed then remaining ROD should be rejected.
		Reimbursement hospROD = reimbursementService.getHospitalizationROD(reimbursementObjectByKey.getClaim().getKey());
		if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)) {
			if(hospROD == null) {
//				reimbursementDTO.setIsDishonoured(true);
				reimbursementDTO.setIsHospitalizationRejected(true);
			}
		}
		
		if(ReferenceTable.getFHORevisedKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
				|| ReferenceTable.STAR_SPECIAL_CARE_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
				|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
					(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
								|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
								|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
						&& ("G").equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan()))
				|| (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
						{
			if(hospROD != null){
			     List<Hospitalisation> hospitalisationList = createRodService.getHospitalisationList(hospROD.getKey());
			     Integer noOfDays = 0;
			     if(hospitalisationList != null){
			    	 for (Hospitalisation hospitalisation : hospitalisationList) {
							noOfDays += hospitalisation.getNoOfDays() != null ? hospitalisation.getNoOfDays().intValue() : 0;
						}
			     }
			     
			     reimbursementDTO.setPreviousRODNoOfDays(noOfDays);
			}
		}
		
		Reimbursement hospitalizationOrPartialROD = reimbursementService.getHospitalizationOrPartialROD(reimbursementObjectByKey.getClaim().getKey());
		
		if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
			
			Integer seqNumber = 0;
			
			if(reimbursementObjectByKey.getRodNumber() != null){
				String[] split = reimbursementObjectByKey.getRodNumber().split("/");
				seqNumber = Integer.valueOf(split[split.length - 1]);
			}
			
			if(hospitalizationOrPartialROD == null && ! seqNumber.equals(1)) {
				reimbursementDTO.setIsDishonoured(true);
				reimbursementDTO.setIsHospitalizationRejected(true);
			}
			
			if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY)){
				reimbursementDTO.setIsByPass(true);
			}
			
		}
		
		Map<String, String> popupMessages = dbCalculationService.getPOPUPMessages(reimbursementDTO.getPolicyKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
		reimbursementDTO.setPopupMap(popupMessages);
		
		if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
				&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
			//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
				Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
				reimbursementDTO.setSuspiciousPopupMap(suspiciousMap);
			//}
		}
		if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
				&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
			//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
				Map<String, String> nonPreferredMap = SHAUtils.getNonPreferredMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
				reimbursementDTO.setNonPreferredPopupMap(nonPreferredMap);
			//}
		}
		
		if(reimbursementObjectByKey.getNatureOfTreatment() != null 
				&& reimbursementObjectByKey.getNatureOfTreatment().getKey().equals(ReferenceTable.NON_ALLOPATHIC_ID) &&
				ReferenceTable.isNonAllopathicApplicableProduct(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			reimbursementDTO.setIsDishonoured(true);
		}
		
		String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
		if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
			String get64vbStatus = PremiaService.getInstance().get64VBStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), reimbursementDTO.getNewIntimationDTO().getIntimationId());
			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
				reimbursementDTO.setIsDishonoured(true);
			}  else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
				reimbursementDTO.setIsPending(true);
			}
		}
		reimbursementDTO = checkFinalEnhancement(reimbursementDTO);
		
		MastersValue networkHospitalType = masterService.getMaster(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNetworkHospitalTypeId());
		reimbursementDTO.setNetworkHospitalType(networkHospitalType.toString());
		
		// Below stuff for Mulitple Room rent or ICU...........
		reimbursementDTO = SHAUtils.roomRentNursingMapping(reimbursementDTO, 8l, 9l, false,false);
		reimbursementDTO = SHAUtils.roomRentNursingMapping(reimbursementDTO, 10l, 11l, true,false);
		reimbursementDTO = SHAUtils.roomRentNursingMapping(reimbursementDTO, 85l, 84l, false,true);
		
		List<BillItemMapping> mappingData = reimbursementService.getMappingData(reimbursementObjectByKey.getKey());
		SHAUtils.fillMappingData(reimbursementDTO, mappingData, false);
		
		try {
			if(reimbursementObjectByKey.getReconsiderationRequest() != null && reimbursementObjectByKey.getReconsiderationRequest().equalsIgnoreCase("Y")) {
//				if(reimbursementObjectByKey.getDocAcknowLedgement().getPaymentCancellationFlag() !=  null && reimbursementObjectByKey.getDocAcknowLedgement().getPaymentCancellationFlag().equalsIgnoreCase("N")) {
					reimbursementDTO.setIsReconsiderationRequest(true);
					if(reimbursementService.isClaimPaymentAvailable(reimbursementObjectByKey.getRodNumber())) {
						Double claimPaymentAmountByRODNumber = reimbursementService.getClaimPaymentAmountByRODNumber(reimbursementObjectByKey.getRodNumber());
						reimbursementDTO.setClaimPaymentAmount(claimPaymentAmountByRODNumber);
					} else {
						reimbursementDTO.setIsReconsiderationRequest(false);
					}
					
//				}
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
			reimbursementDTO.setIsCashlessType(true);
		}
		if(reimbursementDTO.getIsCashlessType() 
				&& reimbursementDTO.getHospitalizaionFlag()
				&& (reimbursementDTO.getPartialHospitalizaionFlag() == null || !reimbursementDTO.getPartialHospitalizaionFlag())
				&& (reimbursementDTO.getStatusKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY) 
						|| reimbursementDTO.getStatusKey().equals(ReferenceTable.PROCESS_CLAIM_FINANCIAL_DISAPPROVE_REJECT_STATUS) 
						|| reimbursementDTO.getStatusKey().equals(ReferenceTable.BILL_ENTRY_STATUS_KEY)
						|| reimbursementDTO.getStatusKey().equals(ReferenceTable.UPLOAD_INVESIGATION_COMPLETED)
						|| reimbursementDTO.getStatusKey().equals(ReferenceTable.FINANCIAL_COORDINATOR_REPLY_RECEIVED_STATUS)
						|| reimbursementDTO.getStatusKey().equals(ReferenceTable.FINANCIAL_SPECIALIST_REPLY_RECEIVED_STATUS)
						|| reimbursementDTO.getStatusKey().equals(ReferenceTable.CLAIM_APPROVAL_SEND_REPLY_FA_STATUS))
						){
			reimbursementDTO.setIsDirectToFinancial(true);
			Preauth latestPreauth = reimbursementService.getLatestPreauthByClaim(reimbursementDTO.getClaimDTO().getKey());
			reimbursementDTO.getClaimDTO().setLatestPreauthKey(latestPreauth.getKey());
		}
		/*Below condition for IMSSUPPOR-27973*/
		if(reimbursementDTO.getIsCashlessType() && reimbursementDTO.getHospitalizaionFlag() && !(reimbursementDTO.getPreHospitalizaionFlag() || reimbursementDTO.getPostHospitalizaionFlag() || reimbursementDTO.getPartialHospitalizaionFlag())
                && (reimbursementDTO.getStatusKey().equals(ReferenceTable.BILL_ENTRY_STATUS_KEY) || reimbursementDTO.getStatusKey().equals(ReferenceTable.CLAIM_APPROVAL_SEND_REPLY_FA_STATUS))){      
        Long diagnosisId = 0l;
        Preauth latestPreauth = reimbursementService.getLatestPreauthByClaim(reimbursementDTO.getClaimDTO().getKey());
        List<PedValidation> findPedValidationByPreauthKey = preauthService
                        .findPedValidationByPreauthKey(latestPreauth.getKey());
        for (PedValidation pedValidation : findPedValidationByPreauthKey) {
                if(pedValidation.getStatus().getKey().equals(latestPreauth.getStatus().getKey())){
                        diagnosisId = pedValidation.getDiagnosisId();
                }
        }
        reimbursementDTO.getClaimDTO().setLatestDiagnosisKey(diagnosisId);
        reimbursementDTO.getClaimDTO().setLatestPreauthKey(latestPreauth.getKey());
        
	}
		reimbursementDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey()));
		reimbursementDTO.setIsPEDInitiatedForBtn(reimbursementDTO.getIsPEDInitiated());
		
		//CR  R1186
		if(reimbursementDTO.getIsPEDInitiated()){
			boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			reimbursementDTO.setInsuredDeleted(isInsuredDeleted);
			
			//CR R1156
			boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			reimbursementDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);	
		}
		
//		if(reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
//				&& reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_INSURED)){
//			Boolean isPedWatchList = pedQueryService.isTaskAvailableInWatchListForIntimation(reimbursementDTO.getNewIntimationDTO().getIntimationId());
//			reimbursementDTO.setIsPedWatchList(isPedWatchList);
//		}
		
		
		if(reimbursementDTO.getIsReconsiderationRequest() != null && !reimbursementDTO.getIsReconsiderationRequest() && reimbursementObjectByKey != null) {
			Boolean paymentAvailable = reimbursementService.isPaymentAvailable(reimbursementObjectByKey.getRodNumber());
			reimbursementDTO.setIsPaymentAvailable(paymentAvailable);
			reimbursementDTO.setIsPaymentAvailableShown(paymentAvailable);
			DocAcknowledgement acknowledgementByKey = reimbursementService.getAcknowledgementByKey(reimbursementObjectByKey.getDocAcknowLedgement().getKey());
			if(acknowledgementByKey != null && acknowledgementByKey.getPaymentCancellationFlag() != null && acknowledgementByKey.getPaymentCancellationFlag().equalsIgnoreCase("Y")) {
				reimbursementDTO.setIsPaymentAvailable(false);
				reimbursementDTO.setIsPaymentAvailableShown(false);
			}
			
		}
		
		
		List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
		List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
		
		reimbursementDTO.setInsuredPedDetails(pedByInsured);
		reimbursementDTO.setApprovedPedDetails(approvedPedByInsured);
		

		try{
	        Double totalBilledAmountForHosp = reimbursementService.getTotalBilledAmountForHosp(documentSummaryKeys);
	        reimbursementDTO.setAmountConsidered(totalBilledAmountForHosp != null ? String
					.valueOf(totalBilledAmountForHosp.intValue()) : "0");
	        
//	        if(reimbursementDTO.getAmountConsCopayPercentage() != null && reimbursementDTO.getAmountConsCopayPercentage().equals(0l)){
	        	reimbursementDTO.setAmountConsidered(reimbursementDTO.getAmountConsidedAfterCoPay() != null ? String
					.valueOf(reimbursementDTO.getAmountConsidedAfterCoPay().intValue()) : "0");
//	        }
	        
		}catch(Exception e){
			e.printStackTrace();
		}
		
		if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
			if(reimbursementDTO.getHospitalizaionFlag()) {
				Reimbursement partialHospitalizationRODWithSettled = getPartialHospitalizationRODWithSettled(claimByKey.getKey());
				ReimbursementCalCulationDetails hosptialization = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(reimbursementDTO.getKey(), ReferenceTable.HOSPITALIZATION);
				if(hosptialization != null) {
					reimbursementDTO.setBillingApprovedAmount(hosptialization.getPayableToHospAftTDS() != null ? hosptialization.getPayableToHospAftTDS().doubleValue() : 0d);
					reimbursementDTO.setPayableToHospAmt(hosptialization.getPayableToHospital() != null ? hosptialization.getPayableToHospital().doubleValue() : 0d);
					reimbursementDTO.setHospDiscountAmount(hosptialization.getHospitalDiscount() != null ? hosptialization.getHospitalDiscount().doubleValue() : 0d);
				}
				if(partialHospitalizationRODWithSettled != null) {
					ReimbursementCalCulationDetails reimbursementCalcObjByRodAndClassificationKey = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(partialHospitalizationRODWithSettled.getKey(), ReferenceTable.HOSPITALIZATION);
					reimbursementDTO.setPayableToInsAmt(reimbursementCalcObjByRodAndClassificationKey.getPayableInsuredAfterPremium() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableInsuredAfterPremium().doubleValue() : 0d);
					reimbursementDTO.setFAApprovedAmount(partialHospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? partialHospitalizationRODWithSettled.getFinancialApprovedAmount() : 0d);
				}
			} else if(reimbursementDTO.getPartialHospitalizaionFlag()) {
				Reimbursement hospitalizationRODWithSettled = getHospitalizationRODWithSettled(claimByKey.getKey());
				
				
				if(hospitalizationRODWithSettled != null) {
					Double totalHospRodFAApprovedAmt = getTotalHospRodFAApprovedAmt(hospitalizationRODWithSettled);
					ReimbursementCalCulationDetails reimbursementCalcObjByRodAndClassificationKey = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(hospitalizationRODWithSettled.getKey(), ReferenceTable.HOSPITALIZATION);
					reimbursementDTO.setPayableToHospAmt(reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital().doubleValue() : 0d);
					reimbursementDTO.setHospDiscountAmount(reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d);
					//Double amount = (reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d) + (hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : 0d);
					Double amount = reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital().doubleValue() : 0d;
					Double amount1 = (reimbursementCalcObjByRodAndClassificationKey.getAmountAlreadyPaidAmt() != null ? reimbursementCalcObjByRodAndClassificationKey.getAmountAlreadyPaidAmt().doubleValue() : 0d) - amount;
					if(amount1 > 0){
						amount += amount1;
					}
					
					reimbursementDTO.setPayableToHospAmt(amount);
					//reimbursementDTO.setFAApprovedAmount(hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : (reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() != null ? reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() : 0d));
					
					Double approvedAmt = hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : (reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() != null ? reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() : 0d);
					Double hospitalDiscnt = reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d;
					reimbursementDTO.setFAApprovedAmount(approvedAmt + hospitalDiscnt + totalHospRodFAApprovedAmt);
					
				}
			}
		}


		Boolean queryReceivedStatusRod = reimbursementQuerySerice.isQueryReceivedStatusRod(reimbursementObjectByKey.getKey());
		 
		 if(queryReceivedStatusRod){
			 reimbursementDTO.setIsQueryReceived(true);   
			 
		 }
		 
		 
		 List<ReimbursementCalCulationDetails> reimbursementCalculationDetails = acknowledgementDocumentsReceivedService.getReimbursementCalculationDetails(reimbursementObjectByKey.getKey());
			

			
			for (ReimbursementCalCulationDetails reimbursementCalCulationDetails2 : reimbursementCalculationDetails) {
				if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
						reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.HOSPITALIZATION)){
					
					HopitalizationCalulationDetailsDTO hospitalizationCalcDTO = getHospitalizationCalculationDTO(reimbursementCalCulationDetails2,reimbursementDTO, false);
					if(reimbursementDTO.getDocumentReceivedFromId() != null && reimbursementDTO.getDocumentReceivedFromId().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
				           hospitalizationCalcDTO.setBalanceToBePaid(0);
					}
					reimbursementDTO.setHospitalizationCalculationDTO(hospitalizationCalcDTO);
					
				}
				else if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
						reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.PRE_HOSPITALIZATION)){
					PreHopitalizationDetailsDTO preHospitalizationCalcDTO = getPreHospitalizationDTO(reimbursementCalCulationDetails2, reimbursementDTO, false);
					reimbursementDTO.setPreHospitalizationCalculationDTO(preHospitalizationCalcDTO);
					
				}else if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
						reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.POST_HOSPITALIZATION)){
					PostHopitalizationDetailsDTO postHospitalizationCalcDTO = getPostHospitalizationDTO(reimbursementCalCulationDetails2, reimbursementDTO, false);
					reimbursementDTO.setPostHospitalizationCalculationDTO(postHospitalizationCalcDTO);
				}
			}
			
			List<Double> copayValues = new ArrayList<Double>();
			
			if(reimbursementObjectByKey.getAmtConsCopayPercentage() != null){
				reimbursementDTO.setCoPayValue(reimbursementObjectByKey.getAmtConsCopayPercentage().doubleValue());
				copayValues.add(reimbursementObjectByKey.getAmtConsCopayPercentage());
			}
			reimbursementDTO.setDoctorNote(reimbursementObjectByKey.getDoctorNote() != null? reimbursementObjectByKey.getDoctorNote() : "" );
		 
			List<DiagnosisDetailsTableDTO> diagnosisTableList = reimbursementDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
			if(diagnosisTableList != null && ! diagnosisTableList.isEmpty()){
				SublimitFunObject sublimitObj = null;
				for (DiagnosisDetailsTableDTO diagnosisDetailsTableDTO : diagnosisTableList) {
					
					/**
					 *  CR R1136 
					 */
					sublimitObj = icdSublimitMapService.getSublimitDetailsBasedOnIcdCode(diagnosisDetailsTableDTO.getIcdCodeKey());
					if(diagnosisDetailsTableDTO.getSublimitApplicable() != null && 
							diagnosisDetailsTableDTO.getSublimitApplicable().getId().equals(ReferenceTable.COMMONMASTER_YES) && 
							sublimitObj != null && 
									diagnosisDetailsTableDTO.getSublimitName() != null &&
							sublimitObj.getName().equalsIgnoreCase(diagnosisDetailsTableDTO.getSublimitName().getName())){
						diagnosisDetailsTableDTO.setSublimitMapAvailable(Boolean.TRUE);
					}
					
					if(diagnosisDetailsTableDTO.getCopayPercentage() != null){
						Double copayPercentage = diagnosisDetailsTableDTO.getCopayPercentage();
						copayValues.add(copayPercentage);
					}
				}
			}
			
			List<ProcedureDTO> procedureDTO = reimbursementDTO.getPreauthMedicalProcessingDetails().getProcedureExclusionCheckTableList();
			if(procedureDTO != null && ! procedureDTO.isEmpty()){
				for (ProcedureDTO procedureDTO2 : procedureDTO) {
					if(procedureDTO2.getCopayPercentage() != null){
						copayValues.add(procedureDTO2.getCopayPercentage());
					}
				}
			}

			if(! copayValues.isEmpty()){
				Double maximumCopay = Collections.max(copayValues);
			    if(maximumCopay != null){
			    	reimbursementDTO.setCoPayValue(maximumCopay);
			    }
			}
			
		 SHAUtils.setConsolidatedAmtDTO(reimbursementDTO, true);
		 Double totalClaimedAmount = reimbursementService.getTotalClaimedAmount(reimbursementObjectByKey);
		 reimbursementDTO.setRodTotalClaimedAmount(totalClaimedAmount);
		 
		 if(reimbursementDTO.getAmountConsidedAfterCoPay() != null && totalBilledAmount != null && !reimbursementDTO.getAmountConsidedAfterCoPay().equals(totalBilledAmount)) {
			 reimbursementDTO.setAmountConsidered(String.valueOf(totalBilledAmount.longValue()));
		 }
		 
		// SHAUtils.setDefaultCopayValue(reimbursementDTO);
		 
		 String previoustAmountForDiagnosisProcedure = SHAUtils.getPrevioustAmountForDiagnosisProcedure(reimbursementDTO.getPreauthDataExtractionDetails().getDiagnosisTableList(), reimbursementDTO
				.getPreauthMedicalProcessingDetails()
				.getProcedureExclusionCheckTableList(), reimbursementDTO.getResidualAmountDTO());
		 
		 Double approvedAmount = SHAUtils.getDoubleValueFromString(previoustAmountForDiagnosisProcedure);
		 reimbursementDTO.setSublimitAndSIAmt(approvedAmount);

		 if(reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)
				 && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
				 && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
		 
				 if(hospitalById != null){
						Boolean hospitalDiscount = SHAUtils.isHospitalDiscount(hospitalById);
						reimbursementDTO.setIsHospitalDiscountApplicable(hospitalDiscount);
				 }
		 }
		 
		 if(reimbursementDTO.getNewIntimationDTO() != null && reimbursementDTO.getNewIntimationDTO().getInsuredPatient() != null &&
				 reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
				Long claimCount = preauthService.getClaimCount(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
				if(claimCount != null){
					reimbursementDTO.setClaimCount(claimCount);
				}
			}
		 
//		 reimbursementObjectByKey.getStatus().setKey(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER);
//		 reimbursementService.setBPMForClaimBilling(reimbursementDTO, false, "MEDICAL", reimbursementObjectByKey);
		 
			Date policyFromDate = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
			
			Date admissionDate = reimbursementDTO.getNewIntimationDTO().getAdmissionDate();
			
		
//			bean.getPolicyDto().getPolicyType();
			Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
			if(diffDays != null && diffDays<90){
				reimbursementDTO.setIs64VBChequeStatusAlert(true);
			}	

			reimbursementDTO.setDbOutArray(tableDTO.getDbOutArray());
			
			if(ReferenceTable.getFHORevisedKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
					|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
						(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
							&& (((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
									|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
									|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
							&& ("G").equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan())))
					|| (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
						{
				 List<OtherBenefitsTableDto> benefitTableValues = reimbursementService.getBenefitTableValues(reimbursementDTO.getNewIntimationDTO(), insuredSumInsured, reimbursementObjectByKey);
				 reimbursementDTO.getPreauthMedicalDecisionDetails().setOtherBenefitTableDtoList(benefitTableValues);
				 
				 if(reimbursementObjectByKey.getInjuryCauseId() != null && reimbursementObjectByKey.getInjuryCauseId().equals(ReferenceTable.CAUSE_OF_INJURY_ACCIDENT_KEY)){
			        	reimbursementDTO.getPreauthDataExtractionDetails().setIsRTAButtonEnable(true);
			       }
				 
				 if(reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
					 Preauth latestPreauth = reimbursementService.getLatestPreauthByClaim(reimbursementDTO.getClaimDTO().getKey());
					 reimbursementDTO.getPreauthMedicalDecisionDetails().setOtherBenefitPreauthApprAmt(latestPreauth.getOtherBenefitApprovedAmt());
					}
			}
			if(ReferenceTable.STAR_SPECIAL_CARE_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				
				 List<OtherBenefitsTableDto> benefitTableValues = reimbursementService.getBenefitTableValues(reimbursementDTO.getNewIntimationDTO(), insuredSumInsured, reimbursementObjectByKey);
				 reimbursementDTO.getPreauthMedicalDecisionDetails().setOtherBenefitTableDtoList(benefitTableValues);
			}
			
			if(ReferenceTable.JET_PRIVILEGE_PRODUCT.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				List<OtherBenefitsTableDto> benefitTableValues = reimbursementService.getBenefitTableValues(reimbursementDTO.getNewIntimationDTO(), insuredSumInsured, reimbursementObjectByKey);
				 reimbursementDTO.getPreauthMedicalDecisionDetails().setOtherBenefitTableDtoList(benefitTableValues);
			}
			
			Boolean isZUAQueryAvailable = masterService.getZUAQueryDetails(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());		
			if(null != isZUAQueryAvailable){
				
				reimbursementDTO.setIsZUAQueryAvailable(isZUAQueryAvailable);
			}
			
			Boolean policyValidation = policyService.getPolicyValidationObject(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			reimbursementDTO.setIsPolicyValidate(policyValidation);
			
			Product product = reimbursementDTO.getNewIntimationDTO().getPolicy()
					.getProduct();
			if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())
					 && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
				List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsDTOForReimbursement = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(reimbursementObjectByKey.getKey());
				
				if(updateOtherClaimDetailsDTOForReimbursement != null){
					
					Integer admissionAmt = 0;
					
					for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsDTOForReimbursement) {
						if(updateOtherClaimDetailDTO.getAdmissibleAmount() != null){
							admissionAmt += updateOtherClaimDetailDTO.getAdmissibleAmount().intValue();
						}
					}
					
					reimbursementDTO.setOtherInsurerAdmissibleAmt(admissionAmt);
					
				}
				
				reimbursementDTO
				.setDeductibleAmount((reimbursementDTO.getNewIntimationDTO()
						.getInsuredPatient() != null && reimbursementDTO
						.getNewIntimationDTO().getInsuredPatient()
						.getDeductibleAmount() != null) ? reimbursementDTO
						.getNewIntimationDTO().getInsuredPatient()
						.getDeductibleAmount() : 0d);
				reimbursementDTO.setIsReverseAllocation(false);
			}
			
			reimbursementDTO.getPreauthMedicalDecisionDetails().setIsFvrIntiated(preauthService.getFVRStatusIdByClaimKey(reimbursementDTO.getClaimKey()));
			
			if(null != reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getHospitalizationClaimedAmount()){
				reimbursementDTO.getPreauthDataExtractionDetails().
				setHospClaimedAmountDocRec(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getHospitalizationClaimedAmount().intValue());
			}
			if(null != reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getPreHospitalizationClaimedAmount()){
				reimbursementDTO.getPreauthDataExtractionDetails().
				setPreHospClaimedAmountDocRec(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getPreHospitalizationClaimedAmount().intValue());
			}
			if(null != reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getPostHospitalizationClaimedAmount()){
				reimbursementDTO.getPreauthDataExtractionDetails().
				setPostHospClaimedAmountDocRec(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getPostHospitalizationClaimedAmount().intValue());
			}
			if(null != reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getOtherBenefitsClaimedAmount()){
				reimbursementDTO.getPreauthDataExtractionDetails().
				setOtherBenefitsAmountDocRec(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getOtherBenefitsClaimedAmount().intValue());
			}
			
			List<BenefitAmountDetails> otherBenefitClaimedAmnt = reimbursementService.getOtherBenefitsClaimedAmountForValidation(reimbursementObjectByKey.getKey());
			Double otherBenefitClaimedAmnt1 = 0d;
			for (BenefitAmountDetails benefitAmountDetails : otherBenefitClaimedAmnt) {
				if(benefitAmountDetails.getBalancePayable() != null)
				otherBenefitClaimedAmnt1 += benefitAmountDetails.getBalancePayable();
			}
			reimbursementDTO.getConsolidatedAmtDTO().setOtherBenefitAmt(otherBenefitClaimedAmnt1.intValue());
			reimbursementDTO.getPreauthDataExtractionDetails().setTotalOtherBenefitsApprovedAmt(otherBenefitClaimedAmnt1);
			reimbursementDTO.setUpdatePaymentDtlsFlag(reimbursementObjectByKey.getUpdatePaymentDtlsFlag());
			
			Boolean popupMessagesForProduct = dbCalculationService.getPOPUPMessagesForProduct(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(), claimByKey.getIntimation().getInsured().getKey(), claimByKey.getIntimation().getPolicy().getProduct().getKey());
			reimbursementDTO.setIsChangeInsumInsuredAlert(popupMessagesForProduct);
			reimbursementDTO.setNonPayableReasonListDto(null);
			
			if(ReferenceTable.getGMCProductList().containsKey(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey()) ||
					ReferenceTable.STAR_GOLD_GROUP_FOR_BANK_CUSTOMERS_KEY.equals(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey())){
				
			      Insured insuredByKey = intimationService.getInsuredByKey(reimbursementObjectByKey.getClaim().getIntimation().getInsured().getKey());
			      Insured MainMemberInsured = null;
			      
			      if(insuredByKey.getDependentRiskId() == null){
			    	  MainMemberInsured = insuredByKey;
			      }else{
			    	  Insured insuredByPolicyAndInsuredId = intimationService.getInsuredByPolicyAndInsuredNameForDefault(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getPolicyNumber(), insuredByKey.getDependentRiskId());
			    	  MainMemberInsured = insuredByPolicyAndInsuredId;
			      }
			      
			      if(MainMemberInsured != null){
			    	  reimbursementDTO.getNewIntimationDTO().setGmcMainMember(MainMemberInsured);
			    	  reimbursementDTO.getNewIntimationDTO().setGmcMainMemberName(MainMemberInsured.getInsuredName());
			    	  reimbursementDTO.getNewIntimationDTO().setEmployeeCode(MainMemberInsured.getInsuredEmployeeId());
			    	  
			    	  /**
			    	   * Part of CR R1186
			    	   */
			    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress1(MainMemberInsured.getAddress1());
			    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress2(MainMemberInsured.getAddress2());
			    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress3(MainMemberInsured.getAddress3());
			    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setCity(MainMemberInsured.getCity());
			    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setInsuredPinCode(MainMemberInsured.getInsuredPinCode());
			    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setInsuredState(MainMemberInsured.getInsuredState());
			    	  
			    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setCertificateNo(MainMemberInsured.getCertificateNo());
			    	  
			      }
				}
			 /** R1139 **/ 		
			
			Investigation investigation = investigationService.getInvestigationByTransactionKey(reimbursementDTO.getKey());
			if(investigation != null){			
			
			   List<AssignedInvestigatiorDetails> assignInvsList = reimbursementService.getInvestigationCountAlert(investigation.getKey());
				 
				if (assignInvsList != null && !assignInvsList.isEmpty()) {
					reimbursementDTO.getPreauthDataExtractionDetails().setIsMultipleInvsAssigned(Boolean.TRUE);
					int invsReplyCount = 0;
					int invesCompletedOrCancelCount = 0;
					Integer investigatorsCount = assignInvsList.size();
					reimbursementDTO.getPreauthDataExtractionDetails().setInvestigatorsCount(investigatorsCount);
					
					for (AssignedInvestigatiorDetails assignedInvestigatiorDetails : assignInvsList) {
						if(null != assignedInvestigatiorDetails.getStatus() && 
								ReferenceTable.UPLOAD_INVESIGATION_COMPLETED.equals(assignedInvestigatiorDetails.getStatus().getKey())||
								ReferenceTable.INVESTIGATION_GRADING.equals(assignedInvestigatiorDetails.getStatus().getKey())){
							
							invsReplyCount++;
						}
						if(null != assignedInvestigatiorDetails.getStatus() && 
								(ReferenceTable.UPLOAD_INVESIGATION_COMPLETED.equals(assignedInvestigatiorDetails.getStatus().getKey())||
								 ReferenceTable.PARALLEL_INVES_CANCELLED.equals(assignedInvestigatiorDetails.getStatus().getKey())) ||
								 ReferenceTable.INVESTIGATION_GRADING.equals(assignedInvestigatiorDetails.getStatus().getKey())){
							invesCompletedOrCancelCount++;
						}
					}
					if(investigatorsCount == invesCompletedOrCancelCount){
						reimbursementDTO.getPreauthDataExtractionDetails().setIsMultipleInvsAssigned(Boolean.FALSE);		
					}
					reimbursementDTO.getPreauthDataExtractionDetails().setInvsReplyReceivedCount(invsReplyCount);
				}
			}
			reimbursementDTO.getPreauthMedicalDecisionDetails().setIsInvsInitiated(preauthService.isInvsInitiated(reimbursementDTO.getClaimDTO().getKey()));
			
			Policy policy = reimbursementDTO.getNewIntimationDTO().getPolicy();
			
			if(ReferenceTable.getGMCProductList().containsKey(policy.getProduct().getKey())){
				List<SelectValue> duplicateInsuredDetails = dbCalculationService.getDuplicateInsuredDetails(policy.getKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				reimbursementDTO.setDuplicateInsuredList(duplicateInsuredDetails);
			}
			if(reimbursementDTO.getPolicyDto() != null && reimbursementDTO.getPolicyDto().getLinkPolicyNumber() != null){
				Insured insuredDetails = insuredService.getInsuredByInsuredKey(reimbursementDTO.getNewIntimationDTO().getInsuredKey());
				Map<String, String> getLinkedPolicyDtls = calcService.getLinkedPolicyDetails(reimbursementDTO.getPolicyDto().getPolicyNumber(), insuredDetails.getLinkEmpNumber());
				reimbursementDTO.getClaimDTO().getNewIntimationDto().setGmcMainMemberName(getLinkedPolicyDtls.get("INSURED_NAME"));
			}
			

			boolean sendToAssignInv = false;
			 
			String invBypassAllowed = dbCalculationService.bypassInvestigationAllowed(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
			sendToAssignInv = (SHAConstants.YES_FLAG).equalsIgnoreCase(invBypassAllowed) ? true : false;
			 
//			sendToAssignInv = true; //For Testing Purpose Need to Be commented  TODO 1227
			 
			reimbursementDTO.setDirectToAssignInv(sendToAssignInv);

			String topAlertFlag = claimService.getTopUpPolicyDetails(reimbursementDTO.getPolicyDto().getPolicyNumber(),reimbursementDTO);
	    	reimbursementDTO.setTopUpPolicyAlertFlag(topAlertFlag);
	    	
	    	/*IMSSUPPOR-28291*/
			 if(reimbursementObjectByKey.getNonAllopathicApprAmt() != null){
				   reimbursementDTO.setOldNonAllopathicApprovedAmt(reimbursementObjectByKey.getNonAllopathicApprAmt());
			}

			 //CR2019202
			 Map<String, String> getFraudAlert = calcService.getFraudAlerts(reimbursementDTO.getNewIntimationDTO().getIntimationId());
			 if(getFraudAlert != null && !getFraudAlert.isEmpty()){
				 reimbursementDTO.setFraudAlertFlag(getFraudAlert.get(SHAConstants.FLAG) != null ? getFraudAlert.get(SHAConstants.FLAG) : "N");
				 reimbursementDTO.setFraudAlertMsg(getFraudAlert.get(SHAConstants.ALERT_MESSAGE) != null ? getFraudAlert.get(SHAConstants.ALERT_MESSAGE) : null);
			 }
			 
			// CR2019214
			 Map<String, String> getApproveFlagDetails = calcService.getApproveFlagDisable(reimbursementDTO.getNewIntimationDTO().getIntimationId(), hospitalById.getHospitalCode());
			 if(getApproveFlagDetails != null && !getApproveFlagDetails.isEmpty()){
				 if(getApproveFlagDetails.get(SHAConstants.FLAG) != null && getApproveFlagDetails.get(SHAConstants.FLAG).equalsIgnoreCase("y")){
					 reimbursementDTO.setApproveBtnFlag(true);
					 reimbursementDTO.setApproveBtnMsg(getApproveFlagDetails.get(SHAConstants.ALERT_MESSAGE) != null ? getApproveFlagDetails.get(SHAConstants.ALERT_MESSAGE) : null);
				 }else if(getApproveFlagDetails.get(SHAConstants.FLAG) != null && getApproveFlagDetails.get(SHAConstants.FLAG).equalsIgnoreCase("N")){
					 reimbursementDTO.setApproveBtnFlag(false);
				 }
				 
			 }
			//CR2019217
			 Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(reimbursementDTO.getNewIntimationDTO().getIntimationId()); 
			 if(icrAgent != null && !icrAgent.isEmpty()) {
					String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
					reimbursementDTO.setIcrAgentValue(agentScorePoint);
					//added for SM Points suggested by Sathish Sir added by Noufel
					String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
					reimbursementDTO.setSmAgentValue(smScorepoint);
				 
			 }
			 
			//CR2019199
	    	String activePopup = calcService.getCoInsuranceCheckValue(policy.getPolicyNumber());
	    	
	    	if(activePopup.equalsIgnoreCase(SHAConstants.YES_FLAG)){
	    		reimbursementDTO.setIsCoInsurance(true);
	    		List<CoInsuranceTableDTO>coInsuranceCheckList = calcService.getCoInsuranceDetails(policy.getPolicyNumber());
	    		reimbursementDTO.setCoInsuranceList(coInsuranceCheckList);
	    	}
			
			 reimbursementDTO.setScreenName(tableDTO.getScreenName());
			 
			 //Dinesh 
			 PCCRequest escalateRemarks = preauthService.findByintimationNo(reimbursementDTO.getNewIntimationDTO().getIntimationId());
			 if(escalateRemarks != null 
					 && escalateRemarks.getPccCoordinatorRemarks() !=null){
				 reimbursementDTO.getPreauthDataExtractionDetails().setEscalatePccRemarksvalue(escalateRemarks.getPccCoordinatorRemarks());
			 }else {
				//added for PCC remarks SupportFix IMSSUPPOR-32499
					PccRemarks  pccRemarks = preauthService.getEscalateRemarks(reimbursementDTO.getNewIntimationDTO().getKey());
					if(pccRemarks != null){
						reimbursementDTO.getPreauthDataExtractionDetails().setEscalatePccRemarksvalue(pccRemarks.getPccRemarks());
					}
			 }
			 reimbursementDTO.setAuditFlag(masterService.getCVCAuditQryFlagByIntimationKey(reimbursementDTO.getNewIntimationDTO().getKey()));
			 
		// added for installment payment process in policy level and product
		// level check
		Map<String, String> getPolicyInstallment = calcService
				.getInstallmentPaymentFlag(policy.getPolicyNumber(), policy.getProduct()
						.getKey());
		if (getPolicyInstallment != null && !getPolicyInstallment.isEmpty()) {
			reimbursementDTO.setPolicyInstalmentFlag(getPolicyInstallment
					.get(SHAConstants.FLAG) != null ? getPolicyInstallment
					.get(SHAConstants.FLAG) : "N");
			reimbursementDTO
					.setPolicyInstalmentMsg(getPolicyInstallment
							.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) != null ? getPolicyInstallment
							.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) : null);
		}
		if (reimbursementDTO.getPolicyInstalmentFlag() != null
				&& reimbursementDTO.getPolicyInstalmentFlag().equals(
						SHAConstants.YES_FLAG)) {
			Integer policyInstallmentAmount = PremiaService.getInstance()
					.getPolicyInstallmentAmount(policy
							.getPolicyNumber());
			reimbursementDTO.setPolicyInstalmentPremiumAmt(policyInstallmentAmount
					.doubleValue());
			
			String policyDueDate = PremiaService.getInstance()
					.getPolicyInstallmentDetails(policy
							.getPolicyNumber());
			//code added if we recevied instalment due amount as zero after pending amount adjusted to premia/bancs  need to set due date as admission date by noufel
 			if((reimbursementDTO.getPolicyInstalmentPremiumAmt() != null && reimbursementDTO.getPolicyInstalmentPremiumAmt() == 0d) && 
 					(policyDueDate == null || policyDueDate.isEmpty())) {
 				
 				reimbursementDTO.setPolicyInstalmentDueDate(reimbursementDTO.getPreauthDataExtractionDetails().getAdmissionDate());	
 			}
 			else{
 			if (reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicySource() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicySource().equalsIgnoreCase(SHAConstants.BANCS_POLICY)) {
 				reimbursementDTO.setPolicyInstalmentDueDate(SHAUtils.formatTimeFromString(policyDueDate.toString()));	
    			}
    			else{
    				reimbursementDTO.setPolicyInstalmentDueDate(SHAUtils.dateformatFromString(policyDueDate.toString()));
    			}
 			}
		}
		
		//Added for Product 076
    	if (("Y").equalsIgnoreCase(reimbursementObjectByKey.getDocAcknowLedgement().getProdHospBenefitFlag())) {

    		// SearchProcessClaimBillingTableDTO tableDTO =
    		// (SearchProcessClaimBillingTableDTO)parameters.getPrimaryParameter();
    		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();

    		Long rodKey = tableDTO.getRodKey();// = 7006l;
    		// Long rodKey = 5155l;
    		Long claimKey = tableDTO.getClaimKey();
    		// Long claimKey = 4042l;
    		// rodDTO.setHumanTask(tableDTO.getHumanTaskListDTO());
    		
    		//CR2019169
    		LegalHeirDTO legalHeirsDTO = new LegalHeirDTO();
    		legalHeirsDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
    		rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirsDTO);
    		
    		List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(tableDTO.getRodKey());	
    		if(displayDto != null && !displayDto.isEmpty()) {
    		List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
    		LegalHeirDTO legalHeirDTODisplay;
    		for (LegalHeir legalHeir : displayDto) {
    			legalHeirDTODisplay = new LegalHeirDTO(legalHeir);
    			
    			/*legalHeirDTODisplay.setHeirName(legalHeir.getLegalHeirName());
    			SelectValue value = new SelectValue();
    			value.setId(legalHeir.getRelationCode());
    			value.setValue(legalHeir.getRelationDesc());
    			legalHeirDTODisplay.setRelationship(value);
    			legalHeirDTODisplay.setSharePercentage(legalHeir.getSharePercentage());
    			legalHeirDTODisplay.setAddress(legalHeir.getAddress());
    			SelectValue accValue = new SelectValue();
    			accValue.setValue(legalHeir.getAccountType());
    			legalHeirDTODisplay.setAccountType(accValue);
    			legalHeirDTODisplay.setBeneficiaryName(legalHeir.getBeneficiaryName());
    			legalHeirDTODisplay.setAccountNo(legalHeir.getAccountNo());
    			legalHeirDTODisplay.setIfscCode(legalHeir.getIfscCode());
    			SelectValue docValue = new SelectValue();
    			docValue.setValue(legalHeir.getAccountType());
    			legalHeirDTODisplay.setDocType(accValue);*/
    			legalHeirDTODisplay.setRelationshipContainer(masterService.getRelationshipContainerValues());
    			
    			list.add(legalHeirDTODisplay);
    			
    		}		
    		rodDTO.getPreauthDTO().setLegalHeirDTOList(list);	
    		}
    		populateDocumentDetails(rodDTO, rodKey,
    				ReferenceTable.CLAIM_BILLING_BENEFITS);

    		Claim claimByKeys = claimService.getClaimByKey(claimKey);
    		

    		NewIntimationDto newIntimationDto = new NewIntimationDto();
    		if (claimByKeys != null) {
    			newIntimationDto = intimationService.getIntimationDto(claimByKeys
    					.getIntimation());

    			ClaimDto claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKeys);
    			
    			if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
    				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
    				 if(latestPreauthByClaim != null){
    					 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
    				 }
    			 }
    			claimDTO.setNewIntimationDto(newIntimationDto);
    			rodDTO.setClaimDTO(claimDTO);
    		}
    		//added for new product
    		Insured insured = policyService.findByClsInsuredKey(newIntimationDto.getInsuredKey());
    		if(insured != null){
    			newIntimationDto.setInsuredPatient(insured);
    		}
    		rodDTO.getUploadDocumentsDTO().setAdmissionDate(rodDTO.getClaimDTO().getNewIntimationDto().getAdmissionDate());
    		Reimbursement objReimbursement = createRodService.getReimbursementObjectByKey(rodKey);
    		if(null != objReimbursement)
    		{
    			rodDTO.getUploadDocumentsDTO().setDischargeDate(objReimbursement.getDateOfDischarge());
    			//MED-PRD-076
    			rodDTO.getDocumentDetails().setDateOfAdmission(objReimbursement.getDateOfAdmission());
    			rodDTO.getDocumentDetails().setDateOfDischarge(objReimbursement.getDateOfDischarge());
    		}

    		List<Double> copaysValue = calcService.getProductCoPay(rodDTO
    				.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
    				.getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
    				.getInsuredPatient().getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
    				.getInsuredPatient().getInsuredId(),rodDTO.getClaimDTO().getNewIntimationDto());
    		rodDTO.setProductCoPay(copaysValue);

    		if(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode() != null && 
    				rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_076) ||
    				rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode() != null && 
    				rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.GROUP_HOSPITAL_CASH_POLICY)){
    			List<AddOnBenefitsDTO> addOnBenefitsDTO = claimRequestBenefitsService
    					.populateAddOnBenefitsTableValuesPhc(rodDTO.getClaimDTO()
    							.getNewIntimationDto(), claimKey, rodKey, copaysValue,null,rodDTO.getDocumentDetails());
    			if (null != addOnBenefitsDTO && !addOnBenefitsDTO.isEmpty()) {
    				rodDTO.setAddOnBenefitsDTO(addOnBenefitsDTO);
    			}

    		}else{
    			List<AddOnBenefitsDTO> addOnBenefitsDTO = claimRequestBenefitsService
    					.populateAddOnBenefitsTableValues(rodDTO.getClaimDTO()
    							.getNewIntimationDto(), claimKey, rodKey, copaysValue,null);
    			if (null != addOnBenefitsDTO && !addOnBenefitsDTO.isEmpty()) {
    				rodDTO.setAddOnBenefitsDTO(addOnBenefitsDTO);
    			}
    		}

    		rodDTO.setProductBenefitMap(calcService.getProductBenefitFlag(
    				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
    						.getProduct().getKey()));
    		rodDTO.setStrUserName(tableDTO.getUsername());
    		rodDTO.setStrPassword(tableDTO.getPassword());
    	//	rodDTO.setHumanTask(tableDTO.getHumanTaskDTO());
    		rodDTO.getDocumentDetails().setRodKey(rodKey);
    		
    		Reimbursement reimbursement = createRodService.getReimbursementObjectByKey(rodKey);
    		if(null != reimbursement)
    		{
    			if(ReferenceTable.PAYMENT_MODE_CHEQUE_DD.equals(reimbursement.getPaymentModeId()))
    			{
    				rodDTO.getDocumentDetails().setPaymentMode(true);
    				
    			}
    			else if(ReferenceTable.PAYMENT_MODE_BANK_TRANSFER.equals(reimbursement.getPaymentModeId()))
    			{
    				rodDTO.getDocumentDetails().setPaymentMode(false);
    				rodDTO.getDocumentDetails().setAccountNo(reimbursement.getAccountNumber());
    				rodDTO.getDocumentDetails().setAccountPreference(reimbursement.getAccountPreference());
    				rodDTO.getDocumentDetails().setAccountType(reimbursement.getAccountType());
    				BankMaster bankDetails = masterService.getBankDetailsByKey(reimbursement.getBankId());
    				if(null != bankDetails)
    				{
    					rodDTO.getDocumentDetails().setIfscCode(bankDetails.getIfscCode());
    					rodDTO.getDocumentDetails().setBankName(bankDetails.getBankName());
    					rodDTO.getDocumentDetails().setCity(bankDetails.getCity());
    					rodDTO.getDocumentDetails().setBranch(bankDetails.getBranchName());	
    				}				
    			}
    			rodDTO.getDocumentDetails().setEmailId(reimbursement.getPayeeEmailId());
    			rodDTO.getDocumentDetails().setPanNo(reimbursement.getPanNumber());
    			rodDTO.getDocumentDetails().setPayableAt(reimbursement.getPayableAt());
    			rodDTO.getDocumentDetails().setReasonForChange(reimbursement.getReasonForChange());
    			rodDTO.getDocumentDetails().setLegalFirstName(reimbursement.getLegalHeirFirstName());
    			rodDTO.getDocumentDetails().setPayModeChangeReason(reimbursement.getPayModeChangeReason());
    		}
    		
    		
    		Reimbursement hospRODs = reimbursementService.getHospitalizationROD(reimbursement.getClaim().getKey());
    		
    		if(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode() != null && 
    				! rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_076) &&
    				rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode() != null && 
    				! rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.GROUP_HOSPITAL_CASH_POLICY)){
    		if(null != reimbursement && null != reimbursement.getClaim() && null != reimbursement.getClaim().getClaimType()  && reimbursement.getClaim().getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)) {
    			if(hospRODs == null) {
//    				reimbursementDTO.setIsDishonoured(true);
    				rodDTO.setIsHospitalizationRejected(true);
    			}
    		}
    		}else{
                // Add for alert showing final sumbt cant move to fa screen only for hos cash flow change produt
                reimbursementDTO.setIsDishonoured(false);
                reimbursementDTO.setIsHospitalizationRejected(false);
	        }
    		String strPremiaFlags = BPMClientContext.PREMIA_FLAG;
    		if(strPremiaFlags != null && ("true").equalsIgnoreCase(strPremiaFlags)) {
    			String get64vbStatus = PremiaService.getInstance().get64VBStatus(claimByKey.getIntimation().getPolicy().getPolicyNumber(), claimByKey.getIntimation().getIntimationId());
    			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
    				rodDTO.setIsDishonoured(true);
    			} 
    		}
	    		
    		Reimbursement hospitalizationOrPartialRODs = reimbursementService.getHospitalizationOrPartialROD(reimbursement.getClaim().getKey());
    		
    		if(null != reimbursement && null != reimbursement.getClaim() && null != reimbursement.getClaim().getClaimType()  && reimbursement.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
    		//if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
    			
    			Integer seqNumber = 0;
    			
    			if(reimbursement.getRodNumber() != null){
    				String[] split = reimbursement.getRodNumber().split("/");
    				seqNumber = Integer.valueOf(split[split.length - 1]);
    			}
    			
    			if(hospitalizationOrPartialRODs == null && ! seqNumber.equals(1)) {
    				rodDTO.setIsDishonoured(true);
    				rodDTO.setIsHospitalizationRejected(true);
    			}
    		}
    		
    		rodDTO.setIsBillingScreen(false);
    		rodDTO.setIsMedicalScreen(false);
    		rodDTO.setDbOutArray(tableDTO.getDbOutArray());
    		reimbursementDTO.setReceiptOfDocumentsDTO(rodDTO);
    		reimbursementDTO.getPreauthDataExtractionDetails().setPatientDayCareDueTo(rodDTO.getDocumentDetails().getPatientDayCareDueTo());
			reimbursementDTO.getPreauthDataExtractionDetails().setPatientDayCare(rodDTO.getDocumentDetails().getPatientDayCare());
			reimbursementDTO.getPreauthDataExtractionDetails().setHospitalCashDueTo(rodDTO.getDocumentDetails().getHospitalCashDueTo());
    	}
				 
			 if(reimbursementObjectByKey.getClaim().getLegalClaim() !=null
					 && reimbursementObjectByKey.getClaim().getLegalClaim().equals("Y")){
				 LegalTaxDeduction taxDeduction = reimbursementService.getTaxDeductionFromRODKey(reimbursementObjectByKey.getKey());
				 if(taxDeduction !=null){
					 LegalTaxDeductionMapper taxDeductionMapper = LegalTaxDeductionMapper.getInstance();
					 LegalBillingDTO billingDTO = taxDeductionMapper.getDTOFromTaxDeduction(taxDeduction);
					 billingDTO = reimbursementService.calculateLegalSettlment(billingDTO);
					 reimbursementDTO.setLegalBillingDTO(billingDTO);
				 }
			 }
			 
			 //Added for GLX2020127
			 Long policyKey = claimByKey.getIntimation().getPolicy().getKey();
			 Long insuredKey = claimByKey.getIntimation().getInsured().getKey();
			 String policyInsuredAgeingFlag = dBCalculationService.getPolicyInsuredAgeingFlag(policyKey,insuredKey);
			 reimbursementDTO.setPolicyInsuredAgeingFlag(policyInsuredAgeingFlag);
			 
			 if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
				{
				Intimation intimation = intimationService
						.getIntimationByKey(claimByKey.getIntimation().getKey());
				reimbursementDTO.setDocRecievedDate(intimation.getAdmissionDate());
				
				}
				else if(claimByKey.getClaimType() != null && claimByKey.getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
				Date docRecievedDate = dBCalculationService.getDocRecievedDate(claimByKey.getKey());
				reimbursementDTO.setDocRecievedDate(docRecievedDate);
				}

			//added for hold claim issue in auto allocation
				if(reimbursementDTO.getStatusKey() != null){
					reimbursementDTO.setOldStatusKey(reimbursementDTO.getStatusKey());
				}
				if(tableDTO.getIsAutoAllocationTrue()){
					reimbursementDTO.setIsPreauthAutoAllocationQ(tableDTO.getIsAutoAllocationTrue());
				}
			 view.setProcessClaimFinancial(FinancialWizard.class, reimbursementDTO);
			 
	}
	
	
	private HopitalizationCalulationDetailsDTO getHospitalizationCalculationDTO(ReimbursementCalCulationDetails reimbursementCalcDetails,PreauthDTO reimbursementDTO, Boolean isBilling){
		
		HopitalizationCalulationDetailsDTO dto = new HopitalizationCalulationDetailsDTO();
		
		dto.setNetPayableAmt(reimbursementCalcDetails.getNetPayableAmount());
		dto.setClaimRestrictionAmt(reimbursementCalcDetails.getClaimRestrictionAmount());
		dto.setPreauthAppAmt(reimbursementCalcDetails.getCashlessApprovedAmount());
		dto.setPayableToHospitalAmt(reimbursementCalcDetails.getPayableToHospital());
		dto.setPayableToInsAmt(reimbursementCalcDetails.getPayableToInsured());
		dto.setHospitalDiscount(reimbursementCalcDetails.getHospitalDiscount());
		dto.setAfterHospitalDiscount(reimbursementCalcDetails.getHospitalDiscountAmtAft());
		dto.setTdsAmt(reimbursementCalcDetails.getTdsAmount());
		dto.setPayableToHospitalAftTDSAmt(reimbursementCalcDetails.getPayableToHospAftTDS());
		dto.setBalancePremiumAmt(reimbursementCalcDetails.getDeductedBalancePremium());
        dto.setPayableToInsuredAftPremiumAmt(reimbursementCalcDetails.getPayableInsuredAfterPremium());
        dto.setAmountAlreadyPaid(reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0);
        if(reimbursementDTO.getHospitalizaionFlag()) {
        	dto.setBalanceToBePaid(((reimbursementCalcDetails.getPayableToHospAftTDS() != null ?reimbursementCalcDetails.getPayableToHospAftTDS() : 0 )));
        } else if(reimbursementDTO.getPartialHospitalizaionFlag() || reimbursementDTO.getIsHospitalizationRepeat()) {
        	dto.setBalanceToBePaid(((reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0 )));
        }
        
        OtherInsHospSettlementDetailsDTO otherInsDTO = new OtherInsHospSettlementDetailsDTO();
        otherInsDTO.setBalanceAmt(reimbursementCalcDetails.getTpaBalanceAmt() != null ? reimbursementCalcDetails.getTpaBalanceAmt() : 0);
        if(reimbursementDTO.getHospitalizaionFlag()) {
        	 otherInsDTO.setHospPayableAmt(reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0);
        } else if(reimbursementDTO.getPartialHospitalizaionFlag() || reimbursementDTO.getIsHospitalizationRepeat()) {
        	otherInsDTO.setHospPayableAmt(reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0);
        }
        otherInsDTO.setNonMedicalAmt(reimbursementCalcDetails.getTpaNonMedicalAmt() != null ? reimbursementCalcDetails.getTpaNonMedicalAmt() : 0);
        otherInsDTO.setTotalClaimedAmt(reimbursementCalcDetails.getTpaClaimedAmt() != null ? reimbursementCalcDetails.getTpaClaimedAmt() : 0);
        otherInsDTO.setTpaSettledAmt(reimbursementCalcDetails.getTpaSettledAmt() != null ? reimbursementCalcDetails.getTpaSettledAmt() : 0);
        otherInsDTO.setPayableToIns(reimbursementCalcDetails.getTpaPayableToInsured() != null ? reimbursementCalcDetails.getTpaPayableToInsured() : 0);
        otherInsDTO.setPayableAmt(reimbursementCalcDetails.getTpaPayableAmt() != null ? reimbursementCalcDetails.getTpaPayableAmt() : 0);
        Integer amt = otherInsDTO.getTotalClaimedAmt() - otherInsDTO.getNonMedicalAmt();
        otherInsDTO.setNetClaimedAmt(amt > 0 ? amt : 0);
        reimbursementDTO.setOtherInsHospSettlementCalcDTO(otherInsDTO);
        Integer alreadyPaidAmt = 0;
        if(reimbursementDTO.getIsReconsiderationRequest()) {
	        if(reimbursementDTO.getPreauthMedicalDecisionDetails().getOtherInsurerApplicableFlag() != null && reimbursementDTO.getPreauthMedicalDecisionDetails().getOtherInsurerApplicableFlag().equalsIgnoreCase("Y")) {
	        	alreadyPaidAmt = reimbursementCalcDetails.getTpaPayableAmt() != null ? reimbursementCalcDetails.getTpaPayableAmt() : 0 - (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0);
	        } else {
	        	if(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement() != null && reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getDocumentReceivedFromId() != null && reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)) {
//	        		alreadyPaidAmt = (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null)  ?  (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0) : (reimbursementCalcDetails.getPayableToHospAftTDS() != null ? reimbursementCalcDetails.getPayableToHospAftTDS() : 0);
	        		if(reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null && reimbursementCalcDetails.getAmountAlreadyPaidAmt() > 0) {
	        			alreadyPaidAmt = reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0;
	        		} else {
	        		alreadyPaidAmt = reimbursementCalcDetails.getPayableToHospAftTDS() != null ? reimbursementCalcDetails.getPayableToHospAftTDS() : 0;
	        		}
	        		if(isBilling && !(reimbursementCalcDetails.getReimbursement().getStatus().getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_BILLING))) {
	        			alreadyPaidAmt = reimbursementCalcDetails.getPayableToHospAftTDS();
	        		}
	        	} else {
	        		alreadyPaidAmt = (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null)  ? (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0) :  (reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0) ;
	        		//IMSSUPPOR- 26185  --> below code was commented
	        		
	        		/*if(isBilling) {
	        			alreadyPaidAmt = reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0;
	        		}*/
	        	}
	        }
	        	reimbursementDTO.setHospAmountAlreadyPaid(alreadyPaidAmt);
        }
        
		return dto;
		
	}
	
	private PreHopitalizationDetailsDTO getPreHospitalizationDTO(ReimbursementCalCulationDetails reimbursementCalcDetails, PreauthDTO reimbursementDTO, Boolean isBilling){
		
		PreHopitalizationDetailsDTO dto = new PreHopitalizationDetailsDTO();
		
		dto.setPayableToInsuredAftPremiumAmt(reimbursementCalcDetails.getPayableInsuredAfterPremium());
		dto.setBalancePremiumAmt(reimbursementCalcDetails.getDeductedBalancePremium());
		dto.setPayableToInsAmt(reimbursementCalcDetails.getPayableToInsured());
		dto.setClaimRestrictionAmt(reimbursementCalcDetails.getClaimRestrictionAmount());
		dto.setNetPayable(reimbursementCalcDetails.getNetEligiblePayableAmount());
		dto.setPayableAmt(reimbursementCalcDetails.getNetPayableAmount());
		dto.setCopayAmt(reimbursementCalcDetails.getCopayAmount());
		dto.setAmountConsidered(reimbursementCalcDetails.getEligibleAmount());
		dto.setAmountAlreadyPaid(reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0);
	    dto.setBalanceToBePaid(reimbursementCalcDetails.getBalanceToBePaidAmt() != null ? reimbursementCalcDetails.getBalanceToBePaidAmt() : 0);
		
		  OtherInsPreHospSettlementDetailsDTO otherInsDTO = new OtherInsPreHospSettlementDetailsDTO();
	        otherInsDTO.setBalanceAmt(reimbursementCalcDetails.getTpaBalanceAmt() != null ? reimbursementCalcDetails.getTpaBalanceAmt() : 0);
	        otherInsDTO.setNonMedicalAmt(reimbursementCalcDetails.getTpaNonMedicalAmt() != null ? reimbursementCalcDetails.getTpaNonMedicalAmt() : 0);
	        otherInsDTO.setTotalClaimedAmt(reimbursementCalcDetails.getTpaClaimedAmt() != null ? reimbursementCalcDetails.getTpaClaimedAmt() : 0);
	        otherInsDTO.setTpaSettledAmt(reimbursementCalcDetails.getTpaSettledAmt() != null ? reimbursementCalcDetails.getTpaSettledAmt() : 0);
	        otherInsDTO.setPayableToIns(reimbursementCalcDetails.getTpaPayableToInsured() != null ? reimbursementCalcDetails.getTpaPayableToInsured() : 0);
	        otherInsDTO.setPayableAmt(reimbursementCalcDetails.getTpaPayableAmt() != null ? reimbursementCalcDetails.getTpaPayableAmt() : 0);
	        otherInsDTO.setHospPayableAmt(reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0);
	        Integer amt = otherInsDTO.getTotalClaimedAmt() - otherInsDTO.getNonMedicalAmt();
	        otherInsDTO.setNetClaimedAmt(amt > 0 ? amt : 0);
	        reimbursementDTO.setOtherInsPreHospSettlementCalcDTO(otherInsDTO);
	        Integer alreadyPaidAmt = 0;
	        if(reimbursementDTO.getIsReconsiderationRequest()) {
		        if(reimbursementDTO.getPreauthMedicalDecisionDetails().getOtherInsurerApplicableFlag() != null && reimbursementDTO.getPreauthMedicalDecisionDetails().getOtherInsurerApplicableFlag().equalsIgnoreCase("Y")) {
		        	alreadyPaidAmt = reimbursementCalcDetails.getTpaPayableAmt() != null ? reimbursementCalcDetails.getTpaPayableAmt() : 0 - (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0);
		        } else {
		        	alreadyPaidAmt = (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null)  ? (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0) :  (reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0) ;
		        	/*if(isBilling) {
	        			alreadyPaidAmt = reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0;
	        		}*/
		        }
		        	reimbursementDTO.setPreHospAmtAlreadyPaid(alreadyPaidAmt);
	        }

		return dto;
	}
	
  private PostHopitalizationDetailsDTO getPostHospitalizationDTO(ReimbursementCalCulationDetails reimbursementCalcDetails, PreauthDTO reimbursementDTO, Boolean isBilling){
		
	 PostHopitalizationDetailsDTO dto = new PostHopitalizationDetailsDTO();
		
        dto.setNetAmount(reimbursementCalcDetails.getEligibleAmount());
        dto.setEligibleAmt(reimbursementCalcDetails.getEligibleAmount());
        dto.setCopayAmt(reimbursementCalcDetails.getCopayAmount());
        dto.setPayableAmt(reimbursementCalcDetails.getNetPayableAmount());
        dto.setNetPayable(reimbursementCalcDetails.getNetEligiblePayableAmount());
        dto.setPayableToInsAmt(reimbursementCalcDetails.getPayableToInsured());
        dto.setClaimRestrictionAmt(reimbursementCalcDetails.getClaimRestrictionAmount());
        dto.setBalancePremiumAmt(reimbursementCalcDetails.getDeductedBalancePremium());
        dto.setPayableToInsuredAftPremiumAmt(reimbursementCalcDetails.getPayableInsuredAfterPremium());
        dto.setMaxPayable(reimbursementCalcDetails.getMaximumPayableAmount());
        dto.setAvaliableSumInsuredAftHosp(reimbursementCalcDetails.getPayableInsuredAfterPremium());
        dto.setAmountAlreadyPaid(reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0);
        dto.setBalanceToBePaid(reimbursementCalcDetails.getBalanceToBePaidAmt() != null ? reimbursementCalcDetails.getBalanceToBePaidAmt() : 0);
        
        OtherInsPostHospSettlementDetailsDTO otherInsDTO = new OtherInsPostHospSettlementDetailsDTO();
        otherInsDTO.setBalanceAmt(reimbursementCalcDetails.getTpaBalanceAmt() != null ? reimbursementCalcDetails.getTpaBalanceAmt() : 0);
        otherInsDTO.setNonMedicalAmt(reimbursementCalcDetails.getTpaNonMedicalAmt() != null ? reimbursementCalcDetails.getTpaNonMedicalAmt() : 0);
       
        otherInsDTO.setTotalClaimedAmt(reimbursementCalcDetails.getTpaClaimedAmt() != null ? reimbursementCalcDetails.getTpaClaimedAmt() : 0);
        otherInsDTO.setTpaSettledAmt(reimbursementCalcDetails.getTpaSettledAmt() != null ? reimbursementCalcDetails.getTpaSettledAmt() : 0);
        otherInsDTO.setPayableToIns(reimbursementCalcDetails.getTpaPayableToInsured() != null ? reimbursementCalcDetails.getTpaPayableToInsured() : 0);
        otherInsDTO.setPayableAmt(reimbursementCalcDetails.getTpaPayableAmt() != null ? reimbursementCalcDetails.getTpaPayableAmt() : 0);
        otherInsDTO.setHospPayableAmt(reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0);
        Integer amt = otherInsDTO.getTotalClaimedAmt() - otherInsDTO.getNonMedicalAmt();
        otherInsDTO.setNetClaimedAmt(amt > 0 ? amt : 0);
        
        Integer alreadyPaidAmt = 0;
        if(reimbursementDTO.getIsReconsiderationRequest()) {
	        if(reimbursementDTO.getPreauthMedicalDecisionDetails().getOtherInsurerApplicableFlag() != null && reimbursementDTO.getPreauthMedicalDecisionDetails().getOtherInsurerApplicableFlag().equalsIgnoreCase("Y")) {
	        	alreadyPaidAmt = reimbursementCalcDetails.getTpaPayableAmt() != null ? reimbursementCalcDetails.getTpaPayableAmt() : 0 - (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0);
	        } else {
	        	alreadyPaidAmt = (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null)  ? (reimbursementCalcDetails.getAmountAlreadyPaidAmt() != null ? reimbursementCalcDetails.getAmountAlreadyPaidAmt() : 0) :  (reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0) ;
	        	/*if(isBilling) {
        			alreadyPaidAmt = reimbursementCalcDetails.getPayableInsuredAfterPremium() != null ? reimbursementCalcDetails.getPayableInsuredAfterPremium() : 0;
        		}*/
	        }
	        	reimbursementDTO.setPostHospAmtAlreadyPaid(alreadyPaidAmt);
        }
        reimbursementDTO.setOtherInsPostHospSettlementCalcDTO(otherInsDTO);


		return dto;
	}

	private PreauthDTO getResiudalAmountToDTO(PreauthDTO mainDTO,
			Long transactionKey) {
		ResidualAmount residualAmount = reimbursementService
				.getResidulaAmount(transactionKey);
		ResidualAmountDTO dto = new ResidualAmountDTO();
		if (residualAmount != null) {
			dto.setKey(residualAmount.getKey());
			dto.setAmountConsideredAmount(residualAmount
					.getAmountConsideredAmount());

			dto.setApprovedAmount(residualAmount.getApprovedAmount());
			dto.setApprovedAmount(residualAmount.getApprovedAmount());
			dto.setNetApprovedAmount(residualAmount
					.getNetApprovedAmount());
			dto.setCopayAmount(residualAmount.getCopayAmount());
			dto.setCopayPercentage(residualAmount.getCopayPercentage());			
			dto.setMinimumAmount(residualAmount.getMinimumAmount());
			dto.setNetAmount(residualAmount.getNetAmount());
			dto.setRemarks(residualAmount.getRemarks());
			dto.setPreauthKey(transactionKey);
			dto.setNetApprovedAmount(residualAmount.getNetApprovedAmount() != null ? residualAmount.getNetApprovedAmount() :0d);
			if (mainDTO.getIsPostHospitalization()
					&& !mainDTO.getHospitalizaionFlag()) {
				dto.setAmountConsideredAmount(0d);
				dto.setNetAmount(0d);
				dto.setApprovedAmount(0d);
				dto.setNetApprovedAmount(0d);
			}
			
			/*
			 * This is for Reverse Allocation . 
			 * if any modifictation between Approved amount or 
			 * Net Approved Amount then we have to set reverse allocation into PreauthDTO.
			 * */
			
			if(!dto.getApprovedAmount().equals(dto.getNetApprovedAmount())) {
				mainDTO.setIsReverseAllocation(true);
			}
			if(null != mainDTO.getNewIntimationDTO().getIsJioPolicy() && mainDTO.getNewIntimationDTO().getIsJioPolicy()){
				if(null != residualAmount.getCoPayTypeId()){	
					
					SelectValue copayValue = new SelectValue();
					copayValue.setValue(residualAmount.getCoPayTypeId().getValue());
					copayValue.setId(residualAmount.getCoPayTypeId().getKey());
					dto.setCoPayTypeId(copayValue);
				}
			}
		}
		mainDTO.setResidualAmountDTO(dto);
		return mainDTO;
	}

	protected void showProcessFinancialWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_PROCESS_FINANCIAL_CLAIM) final ParameterDTO parameters) {

		SearchProcessClaimFinancialsTableDTO tableDTO = (SearchProcessClaimFinancialsTableDTO) parameters
				.getPrimaryParameter();

		Reimbursement reimbursementObjectByKey = rodService
				.getReimbursementObjectByKey(tableDTO.getRodKey());
		List<UploadDocumentDTO> rodSummaryDetails = rodService
				.getRODSummaryDetails(reimbursementObjectByKey.getKey());

		List<Long> documentSummaryKeys = new ArrayList<Long>();
		for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
			
			if(null != reimbursementObjectByKey)
			{
				uploadDocumentDTO.setIntimationNo(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId());
				uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfAdmission()));
				uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfDischarge()));
				uploadDocumentDTO.setInsuredPatientName(reimbursementObjectByKey.getClaim().getIntimation().getInsuredPatientName());
			}
			uploadDocumentDTO.setReimbursementKey(reimbursementObjectByKey.getKey());
			uploadDocumentDTO.setStrUserName(tableDTO.getUsername());
			
			documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
		}
		Double totalBilledAmount = reimbursementService
				.getTotalBilledAmount(documentSummaryKeys);
		ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
//		ZonalMedicalReviewMapper.getAllMapValues();
		PreauthDTO reimbursementDTO = mapper
				.getReimbursementDTO(reimbursementObjectByKey);
		reimbursementDTO.setAmountConsidered(totalBilledAmount != null ? String
				.valueOf(totalBilledAmount.intValue()) : "0");
		reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
		/*reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());

		reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
		reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());*/
		reimbursementDTO.setStrUserName(tableDTO.getUsername());
		reimbursementDTO.setStrPassword(tableDTO.getPassword());

		Claim claimByKey = claimService.getClaimByClaimKey(reimbursementObjectByKey.getClaim().getKey());
		reimbursementDTO
				.setReconsiderationList(getReconsiderRODRequest(claimByKey));

		reimbursementDTO = setReimbursmentTOPreauthDTO(mapper, claimByKey,
				reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.FINANCIAL);
		Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
				.getIntimation().getHospital());
		ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
				.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
		updateHospitalDetails.setHospitalCity(hospitalById.getCity());
		updateHospitalDetails.setHospitalCity(hospitalById.getCity());
		updateHospitalDetails.setHospitalState(hospitalById.getState());
		updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
		UploadDocumentDTO reimbursementBenefitsValue = claimRequestBenefitsService
				.getReimbursementBenefitsValue(reimbursementObjectByKey
						.getKey());
		if (reimbursementBenefitsValue != null) {
			reimbursementDTO.getPreauthDataExtractionDetails()
					.setUploadDocumentDTO(reimbursementBenefitsValue);
		}
		Double sumInsured = calcService.getInsuredSumInsured(
				String.valueOf(reimbursementDTO.getNewIntimationDTO()
						.getInsuredPatient().getInsuredId()), reimbursementDTO
						.getNewIntimationDTO().getPolicy().getKey(),reimbursementDTO.getNewIntimationDTO()
						.getInsuredPatient().getLopFlag());
		List<Object> addOnBenefitsValues = calcService
				.getAddOnBenefitsValues(reimbursementObjectByKey.getKey(),
						reimbursementDTO.getNewIntimationDTO()
								.getInsuredPatient().getKey(), sumInsured,
						reimbursementDTO.getNewIntimationDTO().getPolicy()
								.getProduct().getKey(), "HC");
		if (addOnBenefitsValues != null && !addOnBenefitsValues.isEmpty()) {
			reimbursementDTO
					.getPreauthDataExtractionDetails()
					.getUploadDocumentDTO()
					.setPatientCarePerDayAmt(
							String.valueOf(addOnBenefitsValues.get(3)));
		}
		List<AddOnBenefitsDTO> populateAddOnBenefitsTableValues = claimRequestBenefitsService
				.populateAddOnBenefitsTableValues(
						reimbursementDTO.getNewIntimationDTO(),
						reimbursementObjectByKey.getClaim().getKey(),
						reimbursementObjectByKey.getKey(),
						reimbursementDTO.getProductCopay(),null);
		reimbursementDTO.getPreauthDataExtractionDetails()
				.setAddOnBenefitsDTOList(populateAddOnBenefitsTableValues);
		
		String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
		if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
			String get64vbStatus = PremiaService.getInstance().get64VBStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), reimbursementDTO.getNewIntimationDTO().getIntimationId());
			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
				reimbursementDTO.setIsDishonoured(true);
			}  else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
				reimbursementDTO.setIsPending(true);
			}
		}
		reimbursementDTO.getPreauthMedicalDecisionDetails().setIsFvrIntiated(preauthService.getFVRStatusIdByClaimKey(reimbursementDTO.getClaimKey()));
		Double totalClaimedAmount = reimbursementService.getTotalClaimedAmount(reimbursementObjectByKey);
		 reimbursementDTO.setRodTotalClaimedAmount(totalClaimedAmount);
		 
			Boolean isZUAQueryAvailable = masterService.getZUAQueryDetails(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());		
			if(null != isZUAQueryAvailable){
				
				reimbursementDTO.setIsZUAQueryAvailable(isZUAQueryAvailable);
			}
			
			if(ReferenceTable.getGMCProductList().containsKey(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey()) ||
					ReferenceTable.STAR_GOLD_GROUP_FOR_BANK_CUSTOMERS_KEY.equals(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey())){
				
			   Insured insuredByKey = intimationService.getInsuredByKey(reimbursementObjectByKey.getClaim().getIntimation().getInsured().getKey());
			   Insured MainMemberInsured = null;
			      
			   if(insuredByKey.getDependentRiskId() == null){
			   	  MainMemberInsured = insuredByKey;
			   }else{
				   Insured insuredByPolicyAndInsuredId = intimationService.getInsuredByPolicyAndInsuredNameForDefault(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getPolicyNumber(), insuredByKey.getDependentRiskId());
			       MainMemberInsured = insuredByPolicyAndInsuredId;
			   }
			      
			   if(MainMemberInsured != null){
			   	 reimbursementDTO.getNewIntimationDTO().setGmcMainMemberName(MainMemberInsured.getInsuredName());
			   	 reimbursementDTO.getNewIntimationDTO().setEmployeeCode(MainMemberInsured.getInsuredEmployeeId());
			   	 
		    	  /**
		    	   * Part of CR R1186
		    	   */
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress1(MainMemberInsured.getAddress1());
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress2(MainMemberInsured.getAddress2());
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress3(MainMemberInsured.getAddress3());
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setCity(MainMemberInsured.getCity());
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setInsuredPinCode(MainMemberInsured.getInsuredPinCode());
		    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setInsuredState(MainMemberInsured.getInsuredState());
		    	  
			   }
			}
			reimbursementDTO.getPreauthMedicalDecisionDetails().setIsInvsInitiated(preauthService.isInvsInitiated(reimbursementDTO.getClaimDTO().getKey()));
			
			if(reimbursementObjectByKey.getDocAcknowLedgement() != null
					&& reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
					&& ReferenceTable.RECEIVED_FROM_INSURED.equals(reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey())
					&& reimbursementObjectByKey.getPatientStatus() != null 
					&& reimbursementObjectByKey.getPatientStatus().getKey() != null 
					&& ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(reimbursementObjectByKey.getPatientStatus().getKey())) {
				
				if(reimbursementObjectByKey.getNomineeName() != null) {
					reimbursementDTO.getNewIntimationDTO().setNomineeName(reimbursementObjectByKey.getNomineeName());
				}	
				if(reimbursementObjectByKey.getNomineeAddr() != null) {
					reimbursementDTO.getNewIntimationDTO().setNomineeAddr(reimbursementObjectByKey.getNomineeAddr());
				}
			}
			/*Hospitals hospital = hospitalService.getPNHFlag(tableDTO.getHospitalTypeId()); 
			if(hospital.getPnhFlag() != null && hospital.getPnhFlag().equalsIgnoreCase(SHAConstants.YES_FLAG)) {
				reimbursementDTO.setPnhFlag(SHAConstants.YES_FLAG);
			}*/
			if(reimbursementObjectByKey.getClaim().getLegalClaim() !=null
					&& reimbursementObjectByKey.getClaim().getLegalClaim().equals("Y")){
				LegalTaxDeduction taxDeduction = reimbursementService.getTaxDeductionFromRODKey(reimbursementObjectByKey.getKey());
				LegalTaxDeductionMapper taxDeductionMapper = LegalTaxDeductionMapper.getInstance();
				LegalBillingDTO billingDTO = taxDeductionMapper.getDTOFromTaxDeduction(taxDeduction);
				billingDTO = reimbursementService.calculateLegalSettlment(billingDTO);
				reimbursementDTO.setLegalBillingDTO(billingDTO);
			}

		view.setProcessClaimFinancial(FinancialWizard.class, reimbursementDTO);
	}
	
	@SuppressWarnings("unchecked")
	protected void showOPRegisterClaimWizard(@Observes @CDIEvent(MenuPresenter.SHOW_OP_REGISTER_CLAIM) final ParameterDTO parameters) {
		Policy policy = null;
		PremPolicyDetails premPolicyDetails = (PremPolicyDetails) parameters.getPrimaryParameter();
		policy = populatePolicyFromTmpPolicy(premPolicyDetails);
		LinkedHashMap<String, String> policyValues = (LinkedHashMap<String, String>) parameters.getSecondaryParameters()[0];
		Boolean bancs = (Boolean) parameters.getSecondaryParameters()[1];
		if(bancs){
			policy = policyService.getPolicyByPolicyNubember(premPolicyDetails.getPolicyNo());
			if(policy != null){
				List<Insured> insuredDtls = insuredService.getInsuredListByPolicyNumber(premPolicyDetails.getPolicyNo());
				if(insuredDtls != null){
					policy.setInsured(insuredDtls);
				}
			}
		}
		if(policy != null) {
			OutPatientDTO mainDTO = new OutPatientDTO();
			
			Map<String, Integer> healthCheckupFlag = calcService.getHealthCheckupFlag(policy.getKey());
			PremiaOPAccumulatorDtls premiaAccumulator = (PremiaOPAccumulatorDtls) outpatientService.getPremiaAccumulator(policy.getPolicyNumber());

			if(healthCheckupFlag.get(SHAConstants.OUTPATIENT_FLAG) == 0 /*&& healthCheckupFlag.get(SHAConstants.HEALTH_CHECK_UP_FLAG) == 0*/) {
				HashMap<String, String> buttonsNamewithType = new HashMap<String, String>();
				buttonsNamewithType.put(GalaxyButtonTypesEnum.OK.toString(), "OK");
				GalaxyAlertBox.createErrorBox("This policy does not have an OP benefit", buttonsNamewithType);
//				Notification.show("Outpatient Facility is not applicable for this Policy.");
			} else if(premiaAccumulator != null && (premiaAccumulator.getPremiaLockFlag() == null || premiaAccumulator.getPremiaLockFlag().equalsIgnoreCase("N"))){
				HashMap<String, String> buttonsNamewithType = new HashMap<String, String>();
				buttonsNamewithType.put(GalaxyButtonTypesEnum.OK.toString(), "OK");
				GalaxyAlertBox.createErrorBox("Policy not allowed to register in Galaxy claim.<br>Please check with Premia", buttonsNamewithType);
			} else {
				if(healthCheckupFlag.get(SHAConstants.OUTPATIENT_FLAG) == 1) {
					mainDTO.setOutpatientFlag(true);
				}

				if(healthCheckupFlag.get(SHAConstants.HEALTH_CHECK_UP_FLAG) == 1) {
					mainDTO.setHealthCheckupFlag(true);
				}

				PolicyDto policyDto = new PolicyMapper().getPolicyDto(policy);
				Insured insuredDtls = insuredService.getInsuredByPolicyNo(policyDto.getKey().toString());
				InsuredMapper insuredMapper = new InsuredMapper();
				InsuredDto insuredDto = insuredMapper.getInsuredDto(insuredDtls);
				mainDTO.setPolicyDto(policyDto);
				mainDTO.setInsuredDto(insuredDto);
				String pioName = "";
				if(policy.getHomeOfficeCode() != null) {
					List<OrganaizationUnit> insuredOfficeNameByDivisionCode = policyService.getInsuredOfficeNameByDivisionCode(policy.getHomeOfficeCode());
					if(insuredOfficeNameByDivisionCode != null && !insuredOfficeNameByDivisionCode.isEmpty()) {
						pioName = insuredOfficeNameByDivisionCode.get(0).getOrganizationUnitName();
					}					        
				}
				mainDTO.setPioName(pioName);
				mainDTO.setPolicy(policy);
				if(policy!= null && policy.getProduct().getKey() != null && !policy.getProduct().getKey().equals(601l)){
					mainDTO.getPolicy().setPolicyPlan(policy.getPolicyPlan());
				} else {
					mainDTO.getPolicy().setPolicyPlan(insuredDtls.getPlan());
				}
				
				/*BeanItemContainer<SelectValue> selectValueContainer = masterService.getSelectValueContainer(ReferenceTable.OP_BILL_DETAILS);
				List<SelectValue> masterList = selectValueContainer.getItemIds();
				List<OPBillDetailsDTO> billDetailsDTOList = new ArrayList<OPBillDetailsDTO>();
				OPBillDetailsDTO dto = null;
				for (SelectValue selectValue : masterList) {
					dto = new OPBillDetailsDTO();
					dto.setMasterId(selectValue.getId());
					dto.setDetails(selectValue.getValue());
					billDetailsDTOList.add(dto);
				}
				mainDTO.getOpBillEntryDetails().setBillDetailsDTOList(billDetailsDTOList);

				List<DocumentCheckListDTO> documentCheckListDTOList = new ArrayList<DocumentCheckListDTO>();
				int i = 1;
				DocumentCheckListDTO dto1 = null;
				for (Map.Entry<Long, String> entry : SHAUtils.getDocumentTypeList().entrySet())
				{
					dto1 = new DocumentCheckListDTO();
					dto1.setValue(entry.getValue());
					dto1.setDocTypeId(entry.getKey());
					dto1.setMandatoryDocFlag("Yes");
					dto1.setRequiredDocType("Original");
					dto1.setSerialNumber(i);
					documentCheckListDTOList.add(dto1);
					i++;
				}
//				mainDTO.getDocumentDetails().setDocumentCheckListDTO(documentCheckListDTOList);
				mainDTO.setStrUserName(policyValues.get(BPMClientContext.USERID));
				mainDTO.setStrPassword(policyValues.get(BPMClientContext.PASSWORD));
				mainDTO.getOpBillEntryDetails().setUploadDocumentDTOList(new ArrayList<UploadDocumentDTO>());*/
				view.setOPRegisterClaim(OPRegisterClaimWizard.class, mainDTO);

			}
		}
	}
	
	/*@SuppressWarnings("unchecked")
	protected void showOPAllowExpiredPolicyClaimWizard(@Observes @CDIEvent(MenuPresenter.SHOW_OP_EXPIRED_POLICY_CLAIM) final ParameterDTO parameters) {
		Policy policy = null;
		PremPolicyDetails premPolicyDetails = (PremPolicyDetails) parameters.getPrimaryParameter();
		policy = populatePolicyFromTmpPolicy(premPolicyDetails);
		LinkedHashMap<String, String> policyValues = (LinkedHashMap<String, String>) parameters.getSecondaryParameters()[0];

		if(policy != null) {
			OutPatientDTO mainDTO = new OutPatientDTO();
			
			Map<String, Integer> healthCheckupFlag = calcService.getHealthCheckupFlag(policy.getKey());
			PremiaOPAccumulatorDtls premiaAccumulator = (PremiaOPAccumulatorDtls) outpatientService.getPremiaAccumulator(policy.getPolicyNumber());

			if(healthCheckupFlag.get(SHAConstants.OUTPATIENT_FLAG) == 0 && healthCheckupFlag.get(SHAConstants.HEALTH_CHECK_UP_FLAG) == 0) {
				HashMap<String, String> buttonsNamewithType = new HashMap<String, String>();
				buttonsNamewithType.put(GalaxyButtonTypesEnum.OK.toString(), "OK");
				GalaxyAlertBox.createErrorBox("This policy does not have an OP benefit", buttonsNamewithType);
//				Notification.show("Outpatient Facility is not applicable for this Policy.");
			} else if(premiaAccumulator != null && (premiaAccumulator.getPremiaLockFlag() == null || premiaAccumulator.getPremiaLockFlag().equalsIgnoreCase("N"))){
				HashMap<String, String> buttonsNamewithType = new HashMap<String, String>();
				buttonsNamewithType.put(GalaxyButtonTypesEnum.OK.toString(), "OK");
				GalaxyAlertBox.createErrorBox("Policy not allowed to register in Galaxy claim.<br>Please check with Premia", buttonsNamewithType);
			} else {
				if(healthCheckupFlag.get(SHAConstants.OUTPATIENT_FLAG) == 1) {
					mainDTO.setOutpatientFlag(true);
				}

				if(healthCheckupFlag.get(SHAConstants.HEALTH_CHECK_UP_FLAG) == 1) {
					mainDTO.setHealthCheckupFlag(true);
				}

				PolicyDto policyDto = new PolicyMapper().getPolicyDto(policy);
				Insured insuredDtls = insuredService.getInsuredByPolicyNo(policyDto.getKey().toString());
				InsuredMapper insuredMapper = new InsuredMapper();
				InsuredDto insuredDto = insuredMapper.getInsuredDto(insuredDtls);
				mainDTO.setPolicyDto(policyDto);
				mainDTO.setInsuredDto(insuredDto);
				String pioName = "";
				if(policy.getHomeOfficeCode() != null) {
					List<OrganaizationUnit> insuredOfficeNameByDivisionCode = policyService.getInsuredOfficeNameByDivisionCode(policy.getHomeOfficeCode());
					if(insuredOfficeNameByDivisionCode != null && !insuredOfficeNameByDivisionCode.isEmpty()) {
						pioName = insuredOfficeNameByDivisionCode.get(0).getOrganizationUnitName();
					}					        
				}
				mainDTO.setPioName(pioName);
				mainDTO.setPolicy(policy);
				if(policy!= null && policy.getProduct().getKey() != null && !policy.getProduct().getKey().equals(601l)){
					mainDTO.getPolicy().setPolicyPlan(policy.getPolicyPlan());
				} else {
					mainDTO.getPolicy().setPolicyPlan(insuredDtls.getPlan());
				}
				
				
				view.setOPClaimForPolicyExpired(OPRegisterClaimWizard.class, mainDTO);

			}
		}
	}
	*/
	protected void showOPProcessClaimWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_PROCESS_OP_CLAIM) final ParameterDTO parameters) {

		OutpatientMapper mapper = new OutpatientMapper();
		SearchProcessOPClaimRequestTableDTO tableDTO = (SearchProcessOPClaimRequestTableDTO) parameters.getPrimaryParameter();
		OPClaim claimByKey = claimService.getOPClaimByKey(tableDTO.getClaimKey());
		PolicyDto policyDto = new PolicyMapper().getPolicyDto(claimByKey.getIntimation().getPolicy());
		Insured insuredDtls = insuredService.getInsuredByPolicyNo(policyDto.getKey().toString());
		InsuredMapper insuredMapper = new InsuredMapper();
		InsuredDto insuredDto = insuredMapper.getInsuredDto(insuredDtls);
		

		OPHealthCheckup opHealthByClaimKey = outpatientService.getOpHealthByClaimKey(claimByKey.getKey());
//		List<DiagnosisDetailsOPTableDTO> diagnosisListenerTableList = outpatientService.getDiagnosisList(opHealthByClaimKey.getKey());
		OutPatientDTO mainDTO = mapper.getOutpatientDTO(opHealthByClaimKey);
//		mainDTO.setDiagnosisListenerTableList(diagnosisListenerTableList);
		
		mainDTO.setStrUserName((String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID));
		mainDTO.setStrPassword((String)VaadinSession.getCurrent().getAttribute(BPMClientContext.PASSWORD));
		//mainDTO.setHumanTask(tableDTO.getOpHumanTask());
		Integer opAvailableAmount = 0;
		Map<String, Integer> claimAmt = calcService.getOPAvailableAmount(claimByKey.getIntimation().getInsured().getKey(),claimByKey.getKey(), claimByKey.getClaimType().getKey(),
				claimByKey.getOpcoverSection() != null ? claimByKey.getOpcoverSection() : "SEC-OP-COV-01");
		if(claimAmt != null && !claimAmt.isEmpty()){
			opAvailableAmount = claimAmt.get(SHAConstants.CURRENT_BALANCE_SI);
		}
		mainDTO.setAvailableSI(opAvailableAmount.toString());
		if(opAvailableAmount!= null && opAvailableAmount <= 0){
			mainDTO.setAvailableSiFlag(true);
		}
		Map<String, Integer> healthCheckupFlag = calcService.getHealthCheckupFlag(claimByKey.getIntimation().getPolicy().getKey());
		if(healthCheckupFlag.get(SHAConstants.OUTPATIENT_FLAG) == 1) {
			mainDTO.setOutpatientFlag(true);
		}
		
		if(healthCheckupFlag.get(SHAConstants.HEALTH_CHECK_UP_FLAG) == 1) {
			mainDTO.setHealthCheckupFlag(true);
		}
		NewIntimationDto newIntimationDto = intimationService.getOPIntimationDto(claimByKey.getIntimation());
		// newIntimationDto.getPolicy().getProduct().getAutoRestoration()
		ClaimDto claimDTO =  OPClaimMapper.getInstance().getClaimDto(claimByKey);
		mainDTO.setNewIntimationDTO(newIntimationDto);
		mainDTO.setClaimDTO(claimDTO);
		mainDTO.setPolicy(claimByKey.getIntimation().getPolicy());
		if(mainDTO.getPolicy() != null && mainDTO.getPolicy().getProduct().getKey() != null && !mainDTO.getPolicy().getProduct().getKey().equals(601l)){
			mainDTO.getPolicy().setPolicyPlan(mainDTO.getPolicy().getPolicyPlan());
		} else {
			mainDTO.getPolicy().setPolicyPlan(claimByKey.getIntimation().getInsured().getPlan());
		}
		mainDTO.setClaimKey(claimByKey.getKey());
		mainDTO.setIntimationId(claimByKey.getIntimation().getIntimationId());
		mainDTO.setSelectedHospital(newIntimationDto.getHospitalDto());
		String pioName = "";
		if(claimByKey.getIntimation() != null && claimByKey.getIntimation().getPolicy().getHomeOfficeCode() != null) {
			List<OrganaizationUnit> insuredOfficeNameByDivisionCode = policyService.getInsuredOfficeNameByDivisionCode(claimByKey.getIntimation().getPolicy().getHomeOfficeCode());
			 if(insuredOfficeNameByDivisionCode != null && !insuredOfficeNameByDivisionCode.isEmpty()) {
	    		pioName = insuredOfficeNameByDivisionCode.get(0).getOrganizationUnitName();
	    	  }					        
		}
		Long docReceivedId = ReferenceTable.RECEIVED_FROM_HOSPITAL;
		mainDTO.setPreviousAccntDetailsList(calcService.getOPPreviousAccountDetails(claimByKey.getIntimation().getInsured().getInsuredId(),docReceivedId));
		mainDTO.setPioName(pioName);
		mainDTO.setPolicyDto(policyDto);
		mainDTO.setInsuredDto(insuredDto);
		
		mainDTO.getDocumentDetails().setDocEmailId(claimByKey.getIntimation().getCallerEmail());
		mainDTO.getDocumentDetails().setReasonforConsultation(claimByKey.getIntimation().getAdmissionReason());
		mainDTO.getDocumentDetails().setDocSubmittedContactNo(claimByKey.getDoctorNo());
		mainDTO.getDocumentDetails().setDocSubmittedName(claimByKey.getIntimation().getDoctorName());
		mainDTO.getDocumentDetails().setRemarksForEmergencyAccident(claimByKey.getRemarksForEmergencyAccident());
		mainDTO.getDocumentDetails().setEmergencyFlag(claimByKey.getEmergencyFlag());
		mainDTO.getDocumentDetails().setAccidentFlag(claimByKey.getAccidentFlag());
		
		if(claimByKey != null && claimByKey.getConsulationTypeId() != null){
			MasOpClaimSection opSec = outpatientService.getSectionDtlsByKey(claimByKey.getConsulationTypeId());
			if(opSec != null){
				SelectValue secVal = new SelectValue();
				secVal.setId(opSec.getKey());
				secVal.setValue(opSec.getOpDescription());
				secVal.setCommonValue(opSec.getSectionCode());
				mainDTO.getDocumentDetails().setConsultationType(secVal);
			}
		}
		List<UploadDocumentDTO> billDetailsDTOList = new ArrayList<UploadDocumentDTO>();
		if(opHealthByClaimKey != null && opHealthByClaimKey.getKey() != null){
			
			List<OPDocumentBillEntry> opBillDetails = outpatientService.getOpBillEntryDetails(opHealthByClaimKey.getKey());
			if(opBillDetails != null && !opBillDetails.isEmpty()){
				for (OPDocumentBillEntry opDocumentBillEntry : opBillDetails) {
					UploadDocumentDTO uploadedDocs = new UploadDocumentDTO();
					SelectValue fileTypeId = new SelectValue();
					MastersValue fileType = new MastersValue();
					if(opDocumentBillEntry.getBillTypeId() != null){
						fileType = masterService.getMaster(opDocumentBillEntry.getBillTypeId());
						if(fileType != null){
							fileTypeId.setId(fileType.getKey());
							fileTypeId.setValue(fileType.getValue());
						}
					}
					uploadedDocs.setFileType(fileTypeId);
					uploadedDocs.setFileTypeValue(fileType.getValue());
					uploadedDocs.setFileName(opDocumentBillEntry.getFileName());
					uploadedDocs.setBillDate(opDocumentBillEntry.getBillDate());
					uploadedDocs.setBillNo(opDocumentBillEntry.getBillNumber());
					uploadedDocs.setBillAmt(opDocumentBillEntry.getClaimedAmount());
					uploadedDocs.setDeductibleAmt(opDocumentBillEntry.getDeductibleAmt());
					uploadedDocs.setNonPaybleAmt(opDocumentBillEntry.getNonPayableAmount());
					uploadedDocs.setPaybleAmt(opDocumentBillEntry.getPayableAmt());
					uploadedDocs.setBillingRemarks(opDocumentBillEntry.getBillEntryRemarks());
					uploadedDocs.setDmsDocToken(opDocumentBillEntry.getDocumentToken());
					if(opDocumentBillEntry.getKey() != null){
						uploadedDocs.setOpkey(opDocumentBillEntry.getKey());
					}
					uploadedDocs.setIsPhysicalDoc(Boolean.TRUE);
					billDetailsDTOList.add(uploadedDocs);
				}
			}
		}
		if(billDetailsDTOList != null && !billDetailsDTOList.isEmpty()){
			mainDTO.setUploadedDocsTableList(billDetailsDTOList);
		}
		
		List<OPHCHospitalDetails> opHospitalDtlsByKey = outpatientService.getHospitalDetailsByHCKey(opHealthByClaimKey.getKey());
		if(opHospitalDtlsByKey != null && !opHospitalDtlsByKey.isEmpty()){
			for (OPHCHospitalDetails ophcHospitalDetails : opHospitalDtlsByKey) {
				if(ophcHospitalDetails.getBenefitAvailedId().equalsIgnoreCase("Consultation")){
					mainDTO.getBenefitsAvailedDto().setConsulationHcKey(ophcHospitalDetails.getKey());
					mainDTO.getBenefitsAvailedDto().setState(ophcHospitalDetails.getState());
					mainDTO.getBenefitsAvailedDto().setCity(ophcHospitalDetails.getCity());
					mainDTO.getBenefitsAvailedDto().setHospitalName(ophcHospitalDetails.getHospitalName());
					mainDTO.getBenefitsAvailedDto().setHospitalConsulationName(ophcHospitalDetails.getHospitalConsulationName());
					mainDTO.getBenefitsAvailedDto().setHospitalAddress(ophcHospitalDetails.getHospitalAddress());
					mainDTO.getBenefitsAvailedDto().setHospitalContactNumber(ophcHospitalDetails.getHospitalContactNo());
					mainDTO.getBenefitsAvailedDto().setHospitalFaxNo(ophcHospitalDetails.getHospitalFaxNo());
					mainDTO.getBenefitsAvailedDto().setHospitalDoctorName(ophcHospitalDetails.getHospitalDoctorsName());
					if(ophcHospitalDetails.getHospitalType() != null 
							&& ophcHospitalDetails.getHospitalType().equals(ReferenceTable.NETWORK_HOSPITAL_TYPE_ID)){
						mainDTO.getBenefitsAvailedDto().setConsulationProvider(Boolean.TRUE);
					} else if(ophcHospitalDetails.getHospitalType() != null 
							&& ophcHospitalDetails.getHospitalType().equals(ReferenceTable.NON_NETWORK_HOSPITAL_TYPE_ID)){
						mainDTO.getBenefitsAvailedDto().setConsulationProvider(Boolean.FALSE);
					}
					if(ophcHospitalDetails.getClinicFlag() != null){
						mainDTO.getBenefitsAvailedDto().setClinic(ophcHospitalDetails.getClinicFlag().equalsIgnoreCase("Y") ? true : false);
					}
					mainDTO.setConsulation(false);
				} else if(ophcHospitalDetails.getBenefitAvailedId().equalsIgnoreCase("Diagnostics")){
					mainDTO.setDiagnosis(true);
					mainDTO.getBenefitsAvailedDto().setDiagnosisHcKey(ophcHospitalDetails.getKey());
					mainDTO.getBenefitsAvailedDto().setProviderState(ophcHospitalDetails.getState());
					mainDTO.getBenefitsAvailedDto().setProviderCity(ophcHospitalDetails.getCity());
					mainDTO.getBenefitsAvailedDto().setProviderName(ophcHospitalDetails.getHospitalName());
					mainDTO.getBenefitsAvailedDto().setProviderAddress(ophcHospitalDetails.getHospitalAddress());
					mainDTO.getBenefitsAvailedDto().setProviderContactNo(ophcHospitalDetails.getHospitalContactNo());
					if(ophcHospitalDetails.getHospitalType() != null 
							&& ophcHospitalDetails.getHospitalType().equals(ReferenceTable.NETWORK_HOSPITAL_TYPE_ID)){
						mainDTO.getBenefitsAvailedDto().setDiagnosisProvider(Boolean.TRUE);
					} else if(ophcHospitalDetails.getHospitalType() != null 
							&& ophcHospitalDetails.getHospitalType().equals(ReferenceTable.NON_NETWORK_HOSPITAL_TYPE_ID)){
						mainDTO.getBenefitsAvailedDto().setDiagnosisProvider(Boolean.FALSE);
					} 
				} else if(ophcHospitalDetails.getBenefitAvailedId().equalsIgnoreCase("Physiotherapy")){
					mainDTO.setPhysiotherapy(true);
					mainDTO.getBenefitsAvailedDto().setPhysioThearapyHcKey(ophcHospitalDetails.getKey());
					mainDTO.getBenefitsAvailedDto().setPhysiotherapistName(ophcHospitalDetails.getHospitalName());
					mainDTO.getBenefitsAvailedDto().setClinicAddress(ophcHospitalDetails.getHospitalAddress());
					mainDTO.getBenefitsAvailedDto().setPhysiotherapistContactNo(ophcHospitalDetails.getHospitalContactNo());
					mainDTO.getBenefitsAvailedDto().setEmailId(ophcHospitalDetails.getEmailId());
				} else if(ophcHospitalDetails.getBenefitAvailedId().equalsIgnoreCase("Medicine")){
					mainDTO.setMedicine(true);
					mainDTO.getBenefitsAvailedDto().setMedicineHcKey(ophcHospitalDetails.getKey());
					mainDTO.getBenefitsAvailedDto().setPharmacytName(ophcHospitalDetails.getHospitalName());
					mainDTO.getBenefitsAvailedDto().setPharmacyContactNo(ophcHospitalDetails.getHospitalContactNo());
					mainDTO.getBenefitsAvailedDto().setPharmacyAddress(ophcHospitalDetails.getHospitalAddress());
					mainDTO.getBenefitsAvailedDto().setPharmacyemailId(ophcHospitalDetails.getEmailId());

				} 
			}
		}
		
		if(mainDTO.getBenefitsAvailedDto().getHospitalName() != null && mainDTO.getBenefitsAvailedDto().getProviderName() != null
				&& mainDTO.getBenefitsAvailedDto().getHospitalName().equalsIgnoreCase(mainDTO.getBenefitsAvailedDto().getProviderName())){
			mainDTO.getBenefitsAvailedDto().setSameasConsultation(Boolean.TRUE);
		} else {
			mainDTO.getBenefitsAvailedDto().setSameasConsultation(Boolean.FALSE);
		}
		
		if(mainDTO.getBenefitsAvailedDto().getHospitalName() != null && mainDTO.getBenefitsAvailedDto().getPhysiotherapistName() != null
				&& mainDTO.getBenefitsAvailedDto().getHospitalName().equalsIgnoreCase(mainDTO.getBenefitsAvailedDto().getPhysiotherapistName())){
			mainDTO.getBenefitsAvailedDto().setSameasPhysioConsultation(Boolean.TRUE);
		} else {
			mainDTO.getBenefitsAvailedDto().setSameasPhysioConsultation(Boolean.FALSE);
		}
		
		if(mainDTO.getBenefitsAvailedDto().getHospitalName() != null && mainDTO.getBenefitsAvailedDto().getPharmacytName() != null
				&& mainDTO.getBenefitsAvailedDto().getHospitalName().equalsIgnoreCase(mainDTO.getBenefitsAvailedDto().getPharmacytName())){
			mainDTO.getBenefitsAvailedDto().setSameasMedicalConsultation(Boolean.TRUE);
		} else {
			mainDTO.getBenefitsAvailedDto().setSameasMedicalConsultation(Boolean.FALSE);
		}
		
		List<InsuredPedDetails> insuredPedDetailsList = policyService
				.getPEDByInsured(claimByKey.getIntimation().getInsured().getInsuredId());
		for (InsuredPedDetails insuredPedDetails : insuredPedDetailsList) {
			mainDTO.setPolicyPed(insuredPedDetails.getPedDescription());
		}
		
		/*BeanItemContainer<SelectValue> selectValueContainer = masterService.getSelectValueContainer(ReferenceTable.OP_BILL_DETAILS);
		
		List<OPHCDetails> opHCDetails = outpatientService.getOpHCDetails(mainDTO.getKey());
		List<InsuredDetailsDTO> opInsuredDetailsList = mapper.getOPInsuredDetailsList(opHCDetails);
		for (InsuredDetailsDTO insuredDetailsDTO : opInsuredDetailsList) {
			for (OPHCDetails ophcDetailsDTO : opHCDetails) {
				if(ophcDetailsDTO.getKey().equals(insuredDetailsDTO.getKey())) {
					insuredDetailsDTO.setInsuredPatientName(ophcDetailsDTO.getInsured());
				}
			}
		}
//		mainDTO.getDocumentDetails().setInsuredDetailsList(opInsuredDetailsList);
		
		List<OPBillDetailsDTO> billDetailsDTOList = new ArrayList<OPBillDetailsDTO>();
		List<OPDocumentBillEntry> opBillEntryDetails = outpatientService.getOpBillEntryDetails(mainDTO.getKey());
		for (OPDocumentBillEntry opDocumentBillEntry : opBillEntryDetails) {
			billDetailsDTOList.add( mapper.getOPBillEntryDTO(opDocumentBillEntry));
		}
		
		for (OPBillDetailsDTO billEntryDTO : billDetailsDTOList) {
			Integer amt =  SHAUtils.getIntegerFromString(billEntryDTO.getClaimedAmount())  -  SHAUtils.getIntegerFromString(billEntryDTO.getNonPayableAmt()) ;
			billEntryDTO.setPayableAmt(String.valueOf(amt));
		}
		
		List<SelectValue> masterList = selectValueContainer.getItemIds();
		for (SelectValue selectValue : masterList) {
			for (OPBillDetailsDTO billDetailsDTO : billDetailsDTOList) {
				if(selectValue.getId().equals(billDetailsDTO.getMasterId())) {
					billDetailsDTO.setDetails(selectValue.getValue());
				}
			}
		}
		mainDTO.getOpBillEntryDetails().setBillDetailsDTOList(billDetailsDTOList);
		SelectValue value = new SelectValue();
		if(claimByKey.getClaimType() != null) {
			value.setId(claimByKey.getClaimType().getKey());
			value.setValue(claimByKey.getClaimType().getValue());
		}
		mainDTO.getDocumentDetails().setClaimType(value);
		mainDTO.getDocumentDetails().setAmountClaimed(String.valueOf(claimByKey.getClaimedAmount() != null ? claimByKey.getClaimedAmount().intValue() : "0"));
		mainDTO.getDocumentDetails().setProvisionAmt(String.valueOf(claimByKey.getProvisionAmount() != null ? claimByKey.getProvisionAmount().intValue() : "0"));
		mainDTO.getDocumentDetails().setInsuredPatientName(claimByKey.getIntimation().getInsured());
		
<<<<<<< HEAD
		Integer opAvailableAmount = calcService.getOPAvailableAmount(claimByKey.getIntimation().getInsured().getKey(), claimByKey.getClaimType().getKey());
		mainDTO.getDocumentDetails().setBalanceSI(opAvailableAmount.longValue());
		view.setProcessClaimOP(
				ProcessOPClaimWizard.class, mainDTO);
=======
		Integer opAvailableAmount = dbCalculationService.getOPAvailableAmount(claimByKey.getIntimation().getInsured().getKey(), claimByKey.getClaimType().getKey());*/
		
//		mainDTO.getDocumentDetails().setBalanceSI(opAvailableAmount.longValue());
		view.setProcessClaimOP(ProcessOPClaimWizard.class, mainDTO);
	}
	
	protected void showOPDirectProcessClaimWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_DIRECT_PROCESS_OP_CLAIM) final ParameterDTO parameters) {

		OutpatientMapper mapper = new OutpatientMapper();
		OutPatientDTO dto = (OutPatientDTO) parameters.getPrimaryParameter();
//		SearchProcessOPClaimRequestTableDTO tableDTO = (SearchProcessOPClaimRequestTableDTO) parameters.getPrimaryParameter();
//		OPClaim claimByKey = claimService.getOPClaimByKey(tableDTO.getClaimKey());
		OPClaim claimByKey = claimService.getOPClaimforIntimation(dto.getIntimationKey());
		PolicyDto policyDto = new PolicyMapper().getPolicyDto(claimByKey.getIntimation().getPolicy());
		Insured insuredDtls = insuredService.getInsuredByPolicyNo(policyDto.getKey().toString());
		InsuredMapper insuredMapper = new InsuredMapper();
		InsuredDto insuredDto = insuredMapper.getInsuredDto(insuredDtls);

		OPHealthCheckup opHealthByClaimKey = outpatientService.getOpHealthByClaimKey(claimByKey.getKey());
//		List<DiagnosisDetailsOPTableDTO> diagnosisListenerTableList = outpatientService.getDiagnosisList(opHealthByClaimKey.getKey());
		OutPatientDTO mainDTO = mapper.getOutpatientDTO(opHealthByClaimKey);
		
		mainDTO.setDocumentDetails(dto.getDocumentDetails());
//		mainDTO.setDiagnosisListenerTableList(diagnosisListenerTableList);
		mainDTO.setStrUserName((String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID));
		mainDTO.setStrPassword((String)VaadinSession.getCurrent().getAttribute(BPMClientContext.PASSWORD));
		//mainDTO.setHumanTask(tableDTO.getOpHumanTask());
		Integer opAvailableAmount = 0;
		Map<String, Integer> claimAmt = calcService.getOPAvailableAmount(claimByKey.getIntimation().getInsured().getKey(),claimByKey.getKey(), claimByKey.getClaimType().getKey(),
				claimByKey.getOpcoverSection() != null ? claimByKey.getOpcoverSection() : "0");
		if(claimAmt != null && !claimAmt.isEmpty()){
			opAvailableAmount = claimAmt.get(SHAConstants.CURRENT_BALANCE_SI);
		}
		mainDTO.setAvailableSI(opAvailableAmount.toString());
		if(opAvailableAmount!= null && opAvailableAmount <= 0){
			mainDTO.setAvailableSiFlag(true);
		}
		Map<String, Integer> healthCheckupFlag = calcService.getHealthCheckupFlag(claimByKey.getIntimation().getPolicy().getKey());
		if(healthCheckupFlag.get(SHAConstants.OUTPATIENT_FLAG) == 1) {
			mainDTO.setOutpatientFlag(true);
		}
		
		if(healthCheckupFlag.get(SHAConstants.HEALTH_CHECK_UP_FLAG) == 1) {
			mainDTO.setHealthCheckupFlag(true);
		}
		NewIntimationDto newIntimationDto = intimationService.getOPIntimationDto(claimByKey.getIntimation());
		ClaimDto claimDTO =  OPClaimMapper.getInstance().getClaimDto(claimByKey);
		mainDTO.setNewIntimationDTO(newIntimationDto);
		mainDTO.setClaimDTO(claimDTO);
		mainDTO.setPolicy(claimByKey.getIntimation().getPolicy());
		if(mainDTO.getPolicy() != null && mainDTO.getPolicy().getProduct().getKey() != null && !mainDTO.getPolicy().getProduct().getKey().equals(601l)){
			mainDTO.getPolicy().setPolicyPlan(mainDTO.getPolicy().getPolicyPlan());
		} else {
			mainDTO.getPolicy().setPolicyPlan(claimByKey.getIntimation().getInsured().getPlan());
		}
		mainDTO.setClaimKey(claimByKey.getKey());
		mainDTO.setIntimationId(claimByKey.getIntimation().getIntimationId());
		mainDTO.setSelectedHospital(newIntimationDto.getHospitalDto());
		String pioName = "";
		if(claimByKey.getIntimation() != null && claimByKey.getIntimation().getPolicy().getHomeOfficeCode() != null) {
			List<OrganaizationUnit> insuredOfficeNameByDivisionCode = policyService.getInsuredOfficeNameByDivisionCode(claimByKey.getIntimation().getPolicy().getHomeOfficeCode());
			 if(insuredOfficeNameByDivisionCode != null && !insuredOfficeNameByDivisionCode.isEmpty()) {
	    		pioName = insuredOfficeNameByDivisionCode.get(0).getOrganizationUnitName();
	    	  }					        
		}
		Long docReceivedId = ReferenceTable.RECEIVED_FROM_HOSPITAL;
		mainDTO.setPreviousAccntDetailsList(calcService.getOPPreviousAccountDetails(claimByKey.getIntimation().getInsured().getInsuredId(),docReceivedId));
		mainDTO.setPioName(pioName);
		mainDTO.setPolicyDto(policyDto);
		mainDTO.setInsuredDto(insuredDto);
		BenefitsAvailedDTO benefitDtls = new BenefitsAvailedDTO();
		mainDTO.setBenefitsAvailedDto(benefitDtls);
		mainDTO.getDocumentDetails().setDocEmailId(claimByKey.getIntimation().getCallerEmail());
		mainDTO.getDocumentDetails().setReasonforConsultation(claimByKey.getIntimation().getAdmissionReason());
		mainDTO.getDocumentDetails().setDocSubmittedContactNo(claimByKey.getDoctorNo());
		mainDTO.getDocumentDetails().setDocSubmittedName(claimByKey.getIntimation().getDoctorName());
		mainDTO.getDocumentDetails().setRemarksForEmergencyAccident(claimByKey.getRemarksForEmergencyAccident());
		mainDTO.getDocumentDetails().setEmergencyFlag(claimByKey.getEmergencyFlag());
		mainDTO.getDocumentDetails().setAccidentFlag(claimByKey.getAccidentFlag());
		if(claimByKey != null && claimByKey.getConsulationTypeId() != null){
			MasOpClaimSection opSec = outpatientService.getSectionDtlsByKey(claimByKey.getConsulationTypeId());
			if(opSec != null){
				SelectValue secVal = new SelectValue();
				secVal.setId(opSec.getKey());
				secVal.setValue(opSec.getOpDescription());
				secVal.setCommonValue(opSec.getSectionCode());
				mainDTO.getDocumentDetails().setConsultationType(secVal);
			}
		}
		List<InsuredPedDetails> insuredPedDetailsList = policyService
				.getPEDByInsured(claimByKey.getIntimation().getInsured().getInsuredId());
		for (InsuredPedDetails insuredPedDetails : insuredPedDetailsList) {
			mainDTO.setPolicyPed(insuredPedDetails.getPedDescription());
		}
		view.setProcessClaimOP(ProcessOPClaimWizard.class, mainDTO);
	}
	
	
//	protected void showRevisedPolicySearchForOP(@Observes @CDIEvent(MenuPresenter.OP_REGISTER_CLAIM) final ParameterDTO parameters) {
//
//	}
	
	protected void comparewithPreviousRod(PreauthDTO bean) {
		//Reimbursement previousLatestROD = getFilteredPreviousLatestROD(bean.getClaimKey(), bean.getKey());
		//if(previousLatestROD != null) {
			//String comparisonResult = "";
			//List<PedValidation> findPedValidationByPreauthKey = preauthService.findPedValidationByPreauthKey(previousLatestROD.getKey());
			//List<Procedure> findProcedureByPreauthKey = preauthService.findProcedureByPreauthKey(previousLatestROD.getKey());
//			if(!previousLatestROD.getDocAcknowLedgement().getHospitalisationFlag().equalsIgnoreCase(docAckknowledgement.getHospitalisationFlag())) {
//				
//			} else if(!previousLatestROD.getDocAcknowLedgement().getPreHospitalisationFlag().equalsIgnoreCase(docAckknowledgement.getPreHospitalisationFlag())) {
//				
//			} else if(!previousLatestROD.getDocAcknowLedgement().getPostHospitalisationFlag().equalsIgnoreCase(docAckknowledgement.getPostHospitalisationFlag())) {
//				
//			} else if(!previousLatestROD.getDocAcknowLedgement().getPartialHospitalisationFlag().equalsIgnoreCase(docAckknowledgement.getPartialHospitalisationFlag())) {
//				
//			}
			
			/*if(previousLatestROD.getDateOfAdmission() != null && bean.getPreauthDataExtractionDetails().getAdmissionDate() != null && !previousLatestROD.getDateOfAdmission().equals(bean.getPreauthDataExtractionDetails().getAdmissionDate())) {
				comparisonResult += "Previous DOA : " + SHAUtils.formatDate(previousLatestROD.getDateOfAdmission()) + " Current DOA : " + SHAUtils.formatDate(bean.getPreauthDataExtractionDetails().getAdmissionDate()) + "</br>";
			}*/
			
			/*if(previousLatestROD.getDateOfDischarge() != null && bean.getPreauthDataExtractionDetails().getDischargeDate() != null && !previousLatestROD.getDateOfDischarge().equals(bean.getPreauthDataExtractionDetails().getDischargeDate())) {
				comparisonResult += "Previous DOD : " + SHAUtils.formatDate(previousLatestROD.getDateOfDischarge()) + " Current DOD : " + SHAUtils.formatDate(bean.getPreauthDataExtractionDetails().getDischargeDate());
			}*/
			
			/*if(previousLatestROD.getTreatmentType() != null && bean.getPreauthDataExtractionDetails().getTreatmentType() != null && !previousLatestROD.getTreatmentType().getKey().equals(bean.getPreauthDataExtractionDetails().getTreatmentType().getId())) {
				comparisonResult += "Previous Treatment Type : " + (previousLatestROD.getTreatmentType().getKey().equals(ReferenceTable.SURGICAL_CODE) ? "Surgical" : "Medical") + " Current Treatment Type : " + (bean.getPreauthDataExtractionDetails().getTreatmentType().getId().equals(ReferenceTable.SURGICAL_CODE) ? "Surgical" : "Medical");
			}*/
			//List<ProcedureDTO> procedureExclusionCheckTableList = bean.getPreauthMedicalProcessingDetails().getProcedureExclusionCheckTableList();
			//List<DiagnosisDetailsTableDTO> diagnosisTableList = bean.getPreauthDataExtractionDetails().getDiagnosisTableList();
			//String procedureVariation = "";
			//String diagnosisVariation = "";
			/*for (Procedure procedure : findProcedureByPreauthKey) {
				Boolean isExisting = false;
				for (ProcedureDTO procedureDTO : procedureExclusionCheckTableList) {
					if(procedure.getNewProcedureFlag().equals(procedureDTO.getNewProcedureFlag()) && procedureDTO.getProcedureName() != null && procedureDTO.getProcedureName().getId().equals(procedure.getProcedureID())) {
						isExisting = true;
						break;
					} 
				}
				if(!isExisting) {
					procedureVariation += procedure.getProcedureName() + " ,";
				}
			}*/
			
			/*for (PedValidation pedValidation : findPedValidationByPreauthKey) {
				Boolean isExisting = false;
				for (DiagnosisDetailsTableDTO diagnosisDTO : diagnosisTableList) {
					if(diagnosisDTO.getDiagnosisId() != null && diagnosisDTO.getDiagnosisId().equals(pedValidation.getDiagnosisId())) {
						isExisting = true;
						break;
					} 
				}
				if(!isExisting) {
					String diagnosisByKey = preauthService.getDiagnosisByKey(pedValidation.getDiagnosisId());
					diagnosisVariation += diagnosisByKey + " ,";
				}
			}*/
			
			//comparisonResult += diagnosisVariation + "</br>";
			//comparisonResult += procedureVariation + "</br>";
			
			/*if(previousLatestROD.getPayeeName() != null && bean.getPayeeName() != null && !previousLatestROD.getPayeeName().equals(bean.getPayeeName())) {
				comparisonResult += "Previous Insured Patient Name : " + (previousLatestROD.getPayeeName()) + " Current Insured Patient Name : " + (bean.getPayeeName());
			}*/
			
		//}
	}
	
/*	private void getAckHospCommunicationTasks() {
		
		for(int i = 0; i < 2; i++) {
			PayloadBOType payloadBO = new PayloadBOType();
			ClaimRequestType req = new ClaimRequestType();
			req.setCpuCode(i==0 ? "950004" : "950005");
			payloadBO.setClaimRequest(req);
			com.shaic.ims.bpm.claim.servicev2.hms.search.AckHospitalCommunicationTask  processConvTask = BPMClientContext.getAckHospitalCommunicationTask(BPMClientContext.BPMN_TASK_USER,BPMClientContext.BPMN_PASSWORD);
			com.shaic.ims.bpm.claim.corev2.PagedTaskList tasks =  processConvTask.getTasks(BPMClientContext.BPMN_TASK_USER, null, payloadBO);
			List<HumanTask> humanTasks = tasks.getHumanTasks();
			StringBuilder builder = new StringBuilder();
			for (HumanTask item: humanTasks)
		    {
				PayloadBOType payload = item.getPayloadCashless();
				if(null != payload) {
					PreAuthReqType preauthReqType = payload.getPreAuthReq();
					IntimationType intimation = payload.getIntimation();
					ClaimRequestType claimRequest = payload.getClaimRequest();
					if(null != preauthReqType) {
						Long keyValue = preauthReqType.getKey();
						builder.append(intimation.getIntimationNumber()).append(",").append(claimRequest.getCpuCode()).append(System.getProperty("line.separator"));
					}
				}
		    }
			System.out.println(builder.toString());
		}
	
	}*/
	
	/*private void getTaskManuallyFromBPMNForProcessPreauth() {
		
		
		//com.shaic.ims.bpm.claim.servicev2.preauth.search.PreAuthTask preAuthTask = BPMClientContext.getProcessPreAuthTask(BPMClientContext.BPMN_TASK_USER,BPMClientContext.BPMN_PASSWORD);
	//	com.shaic.ims.bpm.claim.servicev2.preauth.search.PreAuthEnhTask preAuthEnhTask = BPMClientContext.getProcessEnhancementTask(BPMClientContext.BPMN_TASK_USER,BPMClientContext.BPMN_PASSWORD);
		ReceivePreAuthTask receivePreauthTask = BPMClientContext.getPreAuthReceived(BPMClientContext.BPMN_TASK_USER, BPMClientContext.BPMN_PASSWORD);

		//PagedTaskList tasks =  preAuthTask.getTasks("zma1", BPMClientContext.USER_PASSWORD, pageable, preAuthQF);
		//PagedTaskList tasks =  preAuthTask.getTasks(userName,passWord, pageable, preAuthQF);  //userName="zma1"
		com.shaic.ims.bpm.claim.corev2.PagedTaskList tasks = receivePreauthTask.getTasks(BPMClientContext.BPMN_TASK_USER, null, null);
		StringBuilder nameBuilder = new StringBuilder();
		List<HumanTask> humanTasks = tasks.getHumanTasks();
		System.out.println("PREENHANCEMENT TASK------------------------>" + humanTasks.size());
		List<String> arr = new ArrayList<String>();
		for (HumanTask humanTask : humanTasks) {
			PayloadBOType payloadCashless = humanTask.getPayloadCashless();
			if(payloadCashless != null && payloadCashless.getIntimation() != null && payloadCashless.getIntimation().getIntimationNumber() != null) {
				arr.add(payloadCashless.getIntimation().getIntimationNumber());
				 System.out.println(payloadCashless.getIntimation().getIntimationNumber());
				 nameBuilder.append(payloadCashless.getIntimation().getIntimationNumber()).append(",").append(payloadCashless.getClaim().getKey()).append(",").append(payloadCashless.getClaimRequest().getCpuCode()).append(System.getProperty("line.separator"));
			}
		}
		try
		{
		
			//ExportToExcel.exportData("D:\\Vijay\\obsidianLibs\\ExportPreauth.xlsx","receivePreAuth",arr);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		 System.out.println(nameBuilder.toString());
	}*/
	
	/*private void getTestTransaction()
	{
		starFaxService.testTransaction();
	}*/
	
	public List<DMSDocumentDetailsDTO> getClaimsDMSList(String intimationNo) {

		/*DMSDocumentDTO dmsDTO = new DMSDocumentDTO();
		dmsDTO.setIntimationNo(intimationNo);
		Claim claim = claimService.getClaimsByIntimationNumber(intimationNo);
		dmsDTO.setClaimNo(claim.getClaimId());*/
		List<DMSDocumentDetailsDTO> dmsDocumentDetailsDTO = billDetailsService
				.getDocumentDetailsData(intimationNo, 0);
		if (null != dmsDocumentDetailsDTO && !dmsDocumentDetailsDTO.isEmpty()) {
			return dmsDocumentDetailsDTO;
		}
		return null;

	}
	
	/*protected void savePaymentDetails(
			@Observes @CDIEvent(MenuPresenter.CREATE_LOT_SAVE_PAYMENT_INFO) final ParameterDTO parameters) {
	
		CreateAndSearchLotTableDTO tableDTO = (CreateAndSearchLotTableDTO) parameters.getPrimaryParameter();
		Boolean isSuccess = searchService.savePaymentDetails(tableDTO);
		//Map<String, Object> lotCreationMap = searchService.updateLotNumberForPaymentProcessing(tableDTOList);
		//view.buildSuccessLayout(lotCreationMap);
		editPaymentDetailsView.buildPaymentDetailsSuccessLayout(isSuccess);
		
		
	}*/
	
//	 public void fvrDocuments(String IntimationNumber){
//		 List<DocUploadToPremia> fetchRecFromPremiaDocUploadTblWithFVR = starFaxFVRRevisedService.fetchRecFromPremiaDocUploadTblWithFVRIntimation(IntimationNumber);
//			starFaxFVRRevisedService.startProcessForFVRRevised(fetchRecFromPremiaDocUploadTblWithFVR);
//	 }
	
	
//	protected void savePaymentDetails(
//	@Observes @CDIEvent(MenuPresenter.SHOW_CLEAR_CASHLESS) final ParameterDTO parameters) {
//
//		SearchClearCashlessDTO tableDTO = (SearchClearCashlessDTO) parameters.getPrimaryParameter();
//		view.setClearCashlessScreen(ClearCashlessView.class, tableDTO);
//	} 
	
	
	protected void showSearchScreenValidationPopup(
			@Observes @CDIEvent(MenuPresenter.SHOW_SEARCH_SCREEN_VALIDATION_MESSAGE) final ParameterDTO parameters) {/*
		final Window popup = new Window();
		//String intimationId = (String)parameters.getPrimaryParameter();
		AbstractSearchDTO searchDTO = (AbstractSearchDTO) parameters.getPrimaryParameter();
		String intimationId = searchDTO.getSearchId();
		*//**
		 * The ebelow method as an impact with close claim migration.
		 * Hence this wont work till that close claim migration is completed.
		 * *//*
		//Map<String,String> rodUserListMap = createRodService.getAcquiredUserId(intimationId);
		String message = null;
		
		Intimation intimationObj = createRodService.getIntimationByNo(intimationId);
		if(null == intimationObj)
		{
			message = "Intimation Number is not present in galaxy";
		}
		else
		{
			
			List<Map<String, Object>> taskProcedure = null ;
			List<SearchScreenValidationTableDTO> reimbList = createRodService.getReimbursementByIntimationKey(intimationObj.getIntimationId());
			
			taskProcedure = calcService.getTaskProcedureUnlock(intimationId);
			if(null != reimbList && !reimbList.isEmpty())
			{
				for (SearchScreenValidationTableDTO searchScreenValidationTableDTO : reimbList) {
					//if(null != rodUserListMap)
					if(null != taskProcedure && ! taskProcedure.isEmpty()){
						//searchScreenValidationTableDTO.setLockedUserId(rodUserListMap.get(searchScreenValidationTableDTO.getRodNo()));
						searchScreenValidationTableDTO.setLockedUserId((String)taskProcedure.get(0).get(SHAConstants.LOCK_USER));
					}
				}
				if(null != validationTable)
				{
					validationTable.init("Stage of the Intimation",  false, false);
					validationTable.setTableList(reimbList);
				}
			}
			else
			{
				message = "No records found";
			}
			
		}
				
		VerticalLayout vLayout = new VerticalLayout();
		//Label successLabel = new Label("<b style = 'color: black;'>"+message+"</b>", ContentMode.HTML);	
		if(null != message)
		{
			Label successLabel = new Label("<b style = 'color: black;'>"+message+"</b>", ContentMode.HTML);	
			vLayout.addComponent(successLabel);
		}
		else 
		{
			vLayout.addComponent(validationTable);
		}
		
		Button homeButton = new Button("OK");
		homeButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
		vLayout.addComponent(homeButton);
		vLayout.setComponentAlignment(homeButton, Alignment.MIDDLE_CENTER);
		vLayout.setSpacing(true);
		vLayout.setMargin(true);
		HorizontalLayout hLayout = new HorizontalLayout(vLayout);
		hLayout.setMargin(true);
		hLayout.setStyleName("borderLayout");
		
		homeButton.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 7396240433865727954L;

			@Override
			public void buttonClick(ClickEvent event) {
				popup.close();
			}
		});
		
		
//		popup.setCaption("Validation message");
//		popup.setWidth("50%");
//		popup.setHeight("50%");
		popup.setContent(hLayout);
		popup.setClosable(true);
		popup.setModal(true);
		popup.center();
		popup.setResizable(false);
		UI.getCurrent().addWindow(popup);
			

	*/

		AbstractSearchDTO searchDTO = (AbstractSearchDTO) parameters.getPrimaryParameter();
		String intimationId = searchDTO.getSearchId();
		String message = null;
		
		Intimation intimationObj = createRodService.getIntimationByNo(intimationId);
		if(null == intimationObj)
		{
			message = "Intimation Number is not present in galaxy";
		}
		else
		{
			
			List<Map<String, Object>> taskProcedure = null ;
			List<SearchScreenValidationTableDTO> reimbList = createRodService.getReimbursementByIntimationKey(intimationObj.getIntimationId());
			
			taskProcedure = calcService.getTaskProcedureUnlock(intimationId);
			if(null != reimbList && !reimbList.isEmpty())
			{
				for (SearchScreenValidationTableDTO searchScreenValidationTableDTO : reimbList) {
					//if(null != rodUserListMap)
					if(null != taskProcedure && ! taskProcedure.isEmpty()){
						//searchScreenValidationTableDTO.setLockedUserId(rodUserListMap.get(searchScreenValidationTableDTO.getRodNo()));
						searchScreenValidationTableDTO.setLockedUserId((String)taskProcedure.get(0).get(SHAConstants.LOCK_USER));
					}
				}
				if(null != validationTable)
				{
					validationTable.init("Stage of the Intimation",  false, false);
					validationTable.setTableList(reimbList);
				}
			}
			else
			{
				message = "No records found";
			}
			
		}
				
		VerticalLayout vLayout = new VerticalLayout();
		//Label successLabel = new Label("<b style = 'color: black;'>"+message+"</b>", ContentMode.HTML);	
		if(null != message)
		{
			Label successLabel = new Label("<b>"+message+"</b>", ContentMode.HTML);	
			vLayout.addComponent(successLabel);
		}
		else 
		{
			vLayout.addComponent(validationTable);
		}

		final MessageBox msgBox = MessageBox
			    .createInfo()
			    .withCaptionCust("Information")
			    .withMessage(vLayout)
			    .withOkButton(ButtonOption.caption(ButtonType.OK.name()))
			    .open();
		Button homeButton = msgBox.getButton(ButtonType.OK);
		
		homeButton.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 7396240433865727954L;

			@Override
			public void buttonClick(ClickEvent event) {
				msgBox.close();
			}
		});

			

		
	}
	
	protected void showSearchScreenValidationPopupForCashless(
			@Observes @CDIEvent(MenuPresenter.SHOW_SEARCH_SCREEN_VALIDATION_MESSAGE_CASHLESS) final ParameterDTO parameters) {/*
		final Window popup = new Window();
		//String intimationId = (String)parameters.getPrimaryParameter();
		AbstractSearchDTO searchDTO = (AbstractSearchDTO) parameters.getPrimaryParameter();
		String intimationId = searchDTO.getSearchId();
//		Map<String,String> cashlessUserListMap = createRodService.getAcquiredUserIdCashless(intimationId);
		List<Map<String, Object>> taskProcedure = null ;
		
		DBCalculationService dbCalculationService = new DBCalculationService();
		taskProcedure = dbCalculationService.getTaskProcedureUnlock(intimationId);
		
		String message = null;
		
		Intimation intimationObj = createRodService.getIntimationByNo(intimationId);
		if(null == intimationObj)
		{
			message = "Intimation Number is not present in galaxy";
		}
		else
		{
			List<SearchScreenValidationTableDTO> cashlessList = createRodService.getCashlessByIntimationNo(intimationObj.getIntimationId());
			if(null != cashlessList && !cashlessList.isEmpty())
			{
				for (SearchScreenValidationTableDTO searchScreenValidationTableDTO : cashlessList) {
					if(null != taskProcedure && ! taskProcedure.isEmpty()){
						
						searchScreenValidationTableDTO.setLockedUserId((String)taskProcedure.get(0).get(SHAConstants.LOCK_USER));
					}
				}
				if(null != cashlessValidationTable)
				{
					cashlessValidationTable.init("Stage of the Intimation",  false, false);
					cashlessValidationTable.setTableList(cashlessList);
				} 
			}
			else
			{
				message = "No records found";
			}
			
		}
				
		VerticalLayout vLayout = new VerticalLayout();
		//Label successLabel = new Label("<b style = 'color: black;'>"+message+"</b>", ContentMode.HTML);	
		if(null != message)
		{
			Label successLabel = new Label("<b style = 'color: black;'>"+message+"</b>", ContentMode.HTML);	
			vLayout.addComponent(successLabel);
		}
		else 
		{
			vLayout.addComponent(cashlessValidationTable);
		}
		
		Button homeButton = new Button("OK");
		homeButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
		vLayout.addComponent(homeButton);
		vLayout.setComponentAlignment(homeButton, Alignment.MIDDLE_CENTER);
		vLayout.setSpacing(true);
		vLayout.setMargin(true);
		HorizontalLayout hLayout = new HorizontalLayout(vLayout);
		hLayout.setMargin(true);
		hLayout.setStyleName("borderLayout");
		
		homeButton.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 7396240433865727954L;

			@Override
			public void buttonClick(ClickEvent event) {
				popup.close();
			}
		});
		
		
//		popup.setCaption("Validation message");
//		popup.setWidth("50%");
//		popup.setHeight("50%");
		popup.setContent(hLayout);
		popup.setClosable(true);
		popup.setModal(true);
		popup.center();
		popup.setResizable(false);
		UI.getCurrent().addWindow(popup);
			

	*/

		AbstractSearchDTO searchDTO = (AbstractSearchDTO) parameters.getPrimaryParameter();
		String intimationId = searchDTO.getSearchId();
		List<Map<String, Object>> taskProcedure = null ;
		
		DBCalculationService dbCalculationService = new DBCalculationService();
		taskProcedure = dbCalculationService.getTaskProcedureUnlock(intimationId);
		
		String message = null;
		
		Intimation intimationObj = createRodService.getIntimationByNo(intimationId);
		if(null == intimationObj)
		{
			message = "Intimation Number is not present in galaxy";
		}
		else
		{
			List<SearchScreenValidationTableDTO> cashlessList = createRodService.getCashlessByIntimationNo(intimationObj.getIntimationId());
			if(null != cashlessList && !cashlessList.isEmpty())
			{
				for (SearchScreenValidationTableDTO searchScreenValidationTableDTO : cashlessList) {
					if(null != taskProcedure && ! taskProcedure.isEmpty()){
						
						searchScreenValidationTableDTO.setLockedUserId((String)taskProcedure.get(0).get(SHAConstants.LOCK_USER));
					}
				}
				if(null != cashlessValidationTable)
				{
					cashlessValidationTable.init("Stage of the Intimation",  false, false);
					cashlessValidationTable.setTableList(cashlessList);
				} 
			}
			else  if((cashlessList == null || cashlessList.isEmpty()) && null != taskProcedure && ! taskProcedure.isEmpty()){
				List<SearchScreenValidationTableDTO> searchScreenValidationTableDTOList = new ArrayList<SearchScreenValidationTableDTO>();
				SearchScreenValidationTableDTO SearchScreenValidationTableDTO1 = new SearchScreenValidationTableDTO();
				SearchScreenValidationTableDTO1.setLockedUserId((String)taskProcedure.get(0).get(SHAConstants.LOCK_USER));
				searchScreenValidationTableDTOList.add(SearchScreenValidationTableDTO1);
				if(null != cashlessValidationTable)
				{
					cashlessValidationTable.init("Stage of the Intimation",  false, false);
					cashlessValidationTable.setTableList(searchScreenValidationTableDTOList);
				} 
			}
			else
			{
				message = "No records found";
			}
			
		}
				
		VerticalLayout vLayout = new VerticalLayout();
		//Label successLabel = new Label("<b style = 'color: black;'>"+message+"</b>", ContentMode.HTML);	
		if(null != message)
		{
			Label successLabel = new Label("<b>"+message+"</b>", ContentMode.HTML);	
			vLayout.addComponent(successLabel);
		}
		else 
		{
			vLayout.addComponent(cashlessValidationTable);
		}
		final MessageBox showInfo = MessageBox
			    .createInfo()
			    .withCaptionCust("Information")
			    .withMessage(vLayout)
			    .withOkButton(ButtonOption.caption("Pre Auth Home"))
			    .open();
		Button homeButton = showInfo.getButton(ButtonType.OK);
		
		homeButton.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 7396240433865727954L;

			@Override
			public void buttonClick(ClickEvent event) {
				showInfo.close();
			}
		});

			

		
	}
	



protected void showInitiateRRCRequest(
			@Observes @CDIEvent(MenuItemBean.INITIATE_RRC_REQUEST) final ParameterDTO parameters) {
		
		view.setInitiateRequestRRCSearch(InitiateRRCRequestView.class);
	}
	
	
	protected void showInitiateRRCRequestWizard(
			@Observes @CDIEvent(MenuItemBean.INITIATE_RRC_REQUEST_WIZARD) final ParameterDTO parameters) {
		InitiateRRCRequestTableDTO rrcDto = (InitiateRRCRequestTableDTO) parameters
				.getPrimaryParameter();
		
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
		Long claimKey = rrcDto.getClaimKey();
		Claim claimByKey = claimService.getClaimByKey(claimKey);	
		ClaimDto claimDTO = null;
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			 claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			 if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
				 if(latestPreauthByClaim != null){
					 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
				 }
				 String diagnosisForPreauthByKey = "";
					if(latestPreauthByClaim != null ) {
						diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(latestPreauthByClaim.getKey());
						
					}
					rodDTO.setDiagnosis(diagnosisForPreauthByKey);
			 }
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
		}
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(rrcDto.getUsername());
		Double insuredSumInsured = 0d;
		
		if(ReferenceTable.getGMCProductList().containsKey(rrcDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
			 insuredSumInsured = calcService.getInsuredSumInsuredForGMC(rrcDTO.getNewIntimationDTO().getPolicy().getKey(),
					rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey(),rrcDTO.getNewIntimationDTO().getPolicy().getSectionCode());
		} else {
				 insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		}
		
		
		loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.INITIATE_RRC_REQUEST);
		
		
		
		rodDTO.setRrcDTO(rrcDTO);
		

		view.setinitiateRRCRequestWizard(InitiateRRCRequestWizardView.class, rodDTO);
	}
	
	protected void showInitiateTALKTALKTALK(
			@Observes @CDIEvent(MenuItemBean.INITIATE_TALK_TALK_TALK) final ParameterDTO parameters) {
		
		view.setInitiateRequestTALKTALKTALKSearch(InitiateTalkTalkTalkView.class);
	}
	
	protected void showInitiateTalkTalkTalkRequestWizard(
			@Observes @CDIEvent(MenuItemBean.INITIATE_TALK_TALK_TALK_WIZARD) final ParameterDTO parameters) {
		InitiateTalkTalkTalkTableDTO rrcDto = (InitiateTalkTalkTalkTableDTO) parameters
				.getPrimaryParameter();
		
		/*String userName = (String) getUI().getSession().getAttribute(
				BPMClientContext.USERID);*/
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
		Long claimKey = rrcDto.getClaimKey();
		String intimationNumber =  rrcDto.getIntimationNo();
		Long intimationkey = rrcDto.getIntimationKey();
		Intimation intimation = intimationService.getIntimationByNo(intimationNumber);
		Claim claimByKey = claimService.getClaimByKey(claimKey);	
		OPClaim opClaimByKey =  claimService.getOPClaimByKey(claimKey);
		OMPClaim ompClaimByKey = ompClaimService.getOMPClaimByKey(claimKey);
		
		ClaimDto claimDTO = null;
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(intimation);
			 claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
		/*	 if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
				 if(latestPreauthByClaim != null){
					 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
				 }
				 String diagnosisForPreauthByKey = "";
					if(latestPreauthByClaim != null ) {
						diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(latestPreauthByClaim.getKey());
						
					}
					rodDTO.setDiagnosis(diagnosisForPreauthByKey);
			 }*/
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
		}
		
		if(opClaimByKey !=null){
			newIntimationDto = intimationService.getOPIntimationDto(opClaimByKey.getIntimation());
			claimDTO =  OPClaimMapper.getInstance().getClaimDto(opClaimByKey);
			 //if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {}
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
		}
		
		if(ompClaimByKey !=null){
			newIntimationDto = ompintimationService.getIntimationDto(ompClaimByKey.getIntimation());
			claimDTO =  OMPClaimMapper.getInstance().getClaimDto(ompClaimByKey);
			 //if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {}
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
		}
		//InitiateTalkTalkTalkDTO initiateTalkTalkTalkDTO = new InitiateTalkTalkTalkDTO();
		/*Long claimKeytoclaimOpOmp =0L;
		if(claimByKey!=null){
			claimKeytoclaimOpOmp=claimByKey.getKey();
		}
		else if(opClaimByKey!=null){
			claimKeytoclaimOpOmp = opClaimByKey.getKey();
		}else if(ompClaimByKey !=null){
			claimKeytoclaimOpOmp =ompClaimByKey.getKey();
		}
		else{
			System.out.println("NO Claim from Claim,OPclaim,OMP claim");
		}
		*/
		rodDTO.getPreauthDTO().setIntimationKey(intimationkey);
		rodDTO.getPreauthDTO().setIntimationNumber(intimationNumber);
		List<TalkTalkTalk> talkTalkTalkDetialslist = talkService.getTalkTalkTalkDetailsByIntimationKeyList(intimationkey);
		List<InitiateTalkTalkTalkDTO> talkTalkTalkDTOList = new ArrayList<InitiateTalkTalkTalkDTO>();
		
		if(talkTalkTalkDetialslist !=null && !talkTalkTalkDetialslist.isEmpty()){
			for (TalkTalkTalk talkTalkTalk : talkTalkTalkDetialslist){
				
				InitiateTalkTalkTalkDTO initiateTalkTalkTalkDTO = new InitiateTalkTalkTalkDTO();
				
				initiateTalkTalkTalkDTO.setKey(talkTalkTalk.getTalkKey());
				if(talkTalkTalk.getTypeOfCommunication() !=null){
					MastersValue masterValue = talkTalkTalk.getTypeOfCommunication();
					 SelectValue typeOfComm=new SelectValue();
					 typeOfComm.setValue(masterValue.getValue());
					 typeOfComm.setId(masterValue.getKey());
					 initiateTalkTalkTalkDTO.setTypeOfCommunication(typeOfComm);
					
				}
				if(talkTalkTalk.getDateAndTimeofCall() !=null){
					initiateTalkTalkTalkDTO.setTalkSpokenDate(talkTalkTalk.getDateAndTimeofCall());
				}
				
				if(talkTalkTalk.getContactNumber() !=null){
					initiateTalkTalkTalkDTO.setTalkMobto(talkTalkTalk.getContactNumber().toString());
				}
				if(talkTalkTalk.getSpokenTo() !=null){
					initiateTalkTalkTalkDTO.setTalkSpokento(talkTalkTalk.getSpokenTo());
				}
				if(talkTalkTalk.getRemarks() !=null){
					initiateTalkTalkTalkDTO.setRemarks(talkTalkTalk.getRemarks());
				}
				if(talkTalkTalk.getProcessingUserName() !=null){
					initiateTalkTalkTalkDTO.setProcessingUserName(talkTalkTalk.getProcessingUserName());
				}
				
				if(talkTalkTalk.getIntimationKey() !=null){
					initiateTalkTalkTalkDTO.setIntimationKey(talkTalkTalk.getIntimationKey());
					
				}
				if(talkTalkTalk.getIntimationNumber() !=null){
					initiateTalkTalkTalkDTO.setIntimationNumber(talkTalkTalk.getIntimationNumber());
					
				}
				
				/*initiateTalkTalkTalkDTO.setClaimDto(claimDTO);
				initiateTalkTalkTalkDTO.setNewIntimationDTO(newIntimationDto);*/
				initiateTalkTalkTalkDTO.setStrUserName(userId);
				
				
				TmpEmployee tmpEmployee = reimbursementService.getEmployeeDetails(initiateTalkTalkTalkDTO.getStrUserName());
				initiateTalkTalkTalkDTO.setEmployeeName(tmpEmployee.getEmpFirstName());
				initiateTalkTalkTalkDTO.setEmployeeID(tmpEmployee.getEmpId());
				
				talkTalkTalkDTOList.add(initiateTalkTalkTalkDTO);
				
				
				rodDTO.setInitiateTalkTalkTalkDTO(initiateTalkTalkTalkDTO);
				rodDTO.getPreauthDTO().setInitiateTalkTalkTalkDTO(initiateTalkTalkTalkDTO);
			}
			
		}
		
		
		
		rodDTO.getPreauthDTO().setInitiateTalkTalkTalkDTOList(talkTalkTalkDTOList);
	

		view.setinitiateTalkTalkTalkWizard(InitiateTalkTalkTalkWizardView.class, rodDTO);
	}
	
	protected void showSettlementPullBackView(
			@Observes @CDIEvent(MenuItemBean.SETTLEMENT_PULL_BACK) final ParameterDTO parameters) {
		view.setViewG(SearchSettlementPullBackView.class, true);
	}
	
	
	protected void showSettlementPullBakcScreen(
			@Observes @CDIEvent(MenuPresenter.SHOW_SETTLEMENT_PULL_BACK) final ParameterDTO parameters) {
			SearchSettlementPullBackDTO tableDTO = (SearchSettlementPullBackDTO) parameters.getPrimaryParameter();
			view.setSettlementPullBackScreen(SettlementPullBackView.class, tableDTO);
	} 
	
	protected void showPaymentBatchReport(
			@Observes @CDIEvent(MenuItemBean.PAYMENT_BATCH_REPORT) final ParameterDTO parameters) {
		BeanItemContainer<SelectValue> selectValueContainerForDateType = masterService
				.getTmpCpuCodeList();
		view.setViewPaymentBatchReport(PaymentBatchReportView.class, true,
				selectValueContainerForDateType);
	}
	

	
	 private List<List<PreviousAccountDetailsDTO>> populatePreviousAccountDetails(String intimationNo,String docReceivedFrom)
	    {
		 	List<List<PreviousAccountDetailsDTO>> listOfPreviousClaims = new ArrayList<List<PreviousAccountDetailsDTO>>();
	    	ViewTmpIntimation viewTmpIntimation = intimationService.searchbyIntimationNoFromViewIntimation(intimationNo);
	    	if(null != viewTmpIntimation)
	    	{
	    		List<String> claimNoList = getClaimByPolicyWiseForPaymentDetails(viewTmpIntimation);
	    		if(null != claimNoList)
	    		{
	    			for (String claimNo : claimNoList) {
	    				List<PreviousAccountDetailsDTO> previousClaimsDTOList = createRodService.getPaymentDetailsForPreviousClaim(claimNo,docReceivedFrom);
	    				if(null !=  previousClaimsDTOList && !previousClaimsDTOList.isEmpty())
	    					listOfPreviousClaims.add(previousClaimsDTOList);
					}
	    			
	    		}
	    	}
	    	return listOfPreviousClaims ;
	    }
	
	 
	 /**
		 * Added for R0333 enhancement- populate previous account details.
		 * 
		 **/
		private List<String> getClaimByPolicyWiseForPaymentDetails(final ViewTmpIntimation intimation) {

			
			List<String> claimNoList = new ArrayList<String>();
			//List<ViewTmpClaim> currentClaim = claimService.getTmpClaimByIntimation(intimation.getKey());
			
			String policyNumber =intimation.getPolicyNumber();
			List<ViewTmpClaim> previousclaimsList = new ArrayList<ViewTmpClaim>();
			List<ViewTmpClaim> claimsByPolicyNumber = claimService
					.getViewTmpClaimsByPolicyNumber(policyNumber);
			
			Policy byPolicyNumber = policyService.getByPolicyNumber(policyNumber);
			previousclaimsList.addAll(claimsByPolicyNumber);
			
			previousclaimsList = getPreviousClaimForPreviousPolicy(byPolicyNumber.getRenewalPolicyNumber(), previousclaimsList);
			
			
			if(null != previousclaimsList && !previousclaimsList.isEmpty())
			{
				for (ViewTmpClaim viewTmpClaim : previousclaimsList) {
					claimNoList.add(viewTmpClaim.getClaimId());
				}
				
			}
			
			return claimNoList;

		}
		

		/*protected void showInvestigationGradingWizard(
				@Observes @CDIEvent(MenuPresenter.INVESTIGATION_GRADING_WIZARD) final ParameterDTO parameters) {
			
			SearchProcessInvestigationInitiatedTableDTO investigationDTO = (SearchProcessInvestigationInitiatedTableDTO) parameters
					.getPrimaryParameter();
			
			Long investigationKey = (Long) investigationDTO.getKey();
			Investigation investigation = investigationService
					.getByInvestigationKey(investigationKey);
			
			investigationDTO.setRequestedBy(investigation.getCreatedBy());
			
			if(investigation.getCreatedBy() != null){
				TmpEmployee employeeName = masterService.getEmployeeName(investigation.getCreatedBy().toLowerCase());
				if(employeeName != null){
					investigationDTO.setRequestedBy(investigation.getCreatedBy() +"-"+ employeeName.getEmpFirstName());
				}
			}
			
			Claim claimByKey = investigation.getClaim();
			
			Preauth preauth =preauthService.getLatestPreauthByClaim(claimByKey.getKey());
			
			String diagnosisForPreauthByKey = "";
			if(preauth != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
				
			}
			investigationDTO.setDiagnosis(diagnosisForPreauthByKey);
			
			ClaimDto claimDTO = null;
			
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			if (claimByKey != null) {
				newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				claimDTO.setNewIntimationDto(newIntimationDto);
				
			}
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(investigationDTO.getUsername());
			Double insuredSumInsured = dbCalculationService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_INVESTIGATION_INTIATED);
			
			investigationDTO.setRrcDTO(rrcDTO);
			
			
			
			view.setViewInvestigationGrading(InvestigationGradingView.class,
					true, investigationDTO);
		}*/
		
		protected void showInvestigationGradingSearch(
				@Observes @CDIEvent(MenuItemBean.SEARCH_INVESTIGATION_GRADING) final ParameterDTO parameters) {
			BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
					.getTmpCpuCodes();
			
			BeanItemContainer<SelectValue> claimTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
			
			BeanItemContainer<SelectValue> claimTypeListContainer = masterService.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
			List<SelectValue> itemIds = claimTypeListContainer.getItemIds();
			for (SelectValue selectValue : itemIds) {
				if(selectValue.getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY) || selectValue.getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
					claimTypeContainer.addBean(selectValue);
				}
			}
			
			BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
			
			Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
			Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);
			Stage stageByKey4 = preauthService.getStageByKey(ReferenceTable.PREAUTH_STAGE);
			Stage stageByKey5 = preauthService.getStageByKey(ReferenceTable.ENHANCEMENT_STAGE);

			SelectValue selectValue1 = new SelectValue();
			selectValue1.setId(stageByKey2.getKey());
			selectValue1.setValue(stageByKey2.getStageName());
			
			SelectValue selectValue2 = new SelectValue();
			selectValue2.setId(stageByKey3.getKey());
			selectValue2.setValue(stageByKey3.getStageName());
			
			SelectValue selectValue3 = new SelectValue();
			selectValue3.setId(stageByKey4.getKey());
			selectValue3.setValue(stageByKey4.getStageName());
			
			SelectValue selectValue4 = new SelectValue();
			selectValue4.setId(stageByKey5.getKey());
			selectValue4.setValue(stageByKey5.getStageName());
			
			BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
			statusByStage.addBean(selectValue1);
			statusByStage.addBean(selectValue2);
			statusByStage.addBean(selectValue3);
			statusByStage.addBean(selectValue4);
			
			view.setViewInvestigationGrading(
					SearchInvestigationGradingView.class, true,
					selectValueContainerForCPUCode,claimTypeContainer,selectValueForPriority,statusByStage);
		}

		protected void showInvestigationGradingWizard(
				@Observes @CDIEvent(MenuPresenter.INVESTIGATION_GRADING_WIZARD) final ParameterDTO parameters) {
			 AssignInvestigatorDto assignInvestigatorDto = new AssignInvestigatorDto();
			List<Investigation> investigationList = null;
			SearchAssignInvestigationTableDTO tableDto = (SearchAssignInvestigationTableDTO) parameters
					.getPrimaryParameter();
			Long investigationKey = tableDto.getInvestigationKey();
				
			Investigation investigationobj = investigationService
					.getByInvestigationKey(investigationKey);
			
			assignInvestigatorDto.setAssignedKey(tableDto.getInvestigationAssignedKey());
			AssignedInvestigatiorDetails assignObj = investigationService.getAssignedInvestigByKey(tableDto.getInvestigationAssignedKey());	
			
			Boolean isValidClaimForMA = true;
			if(null != investigationobj)
			{
				Claim claimByKey = (investigationobj.getClaim());
				if(null != claimByKey)
				{
					if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
					{
						isValidClaimForMA = false;
						view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
					}
				}
			}
			if(isValidClaimForMA)
			{
			
			if(assignObj != null){
				assignInvestigatorDto.setInvestigatorName(assignObj.getInvestigatorName());
				assignInvestigatorDto.setInvestigatorCode(assignObj.getInvestigatorCode());
				
				TmpInvestigation masInvestig = investigationService.getTmpInvestigationByInvestigatorCode(assignObj.getInvestigatorCode());
				if(masInvestig != null){
					assignInvestigatorDto.setInvestigatorTelNo(masInvestig.getPhoneNumber() != null ? String.valueOf(masInvestig.getPhoneNumber()) : "");
					assignInvestigatorDto.setInvestigatorMobileNo(masInvestig.getMobileNumber() != null ? String.valueOf(masInvestig.getMobileNumber()) : "");
				}
				
			}
									
			String diagnosisForPreauthByKey = "";
			if(investigationobj.getTransactionFlag() != null && investigationobj.getTransactionKey() != null) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(investigationobj.getTransactionKey());
				
			}
			
			assignInvestigatorDto.setDiagnosisName(diagnosisForPreauthByKey);
			
			
			Claim claimByKey = investigationobj.getClaim();
			ClaimDto claimDTO = null;
			
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			if (claimByKey != null) {
				
				newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				claimDTO.setNewIntimationDto(newIntimationDto);
			
			}
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDto.getUsername());
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ASSIGN_INVESTIGATION_INTIATED);
			
			tableDto.setRrcDTO(rrcDTO);
			
			// R1045
			assignInvestigatorDto.setPreauthDTO(new PreauthDTO());
			assignInvestigatorDto.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
			assignInvestigatorDto.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
			assignInvestigatorDto.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			assignInvestigatorDto.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			
			assignInvestigatorDto.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
			assignInvestigatorDto.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
			//CR2019112
			Long hospital = claimByKey.getIntimation().getHospital();
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				assignInvestigatorDto.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					assignInvestigatorDto.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}
			
			
			
			// investigationKey = 108l;
			List<SelectValue> stateContainer = new ArrayList<SelectValue>();
			BeanItemContainer<SelectValue> allocationToContainer = new BeanItemContainer<SelectValue>(
					SelectValue.class);
			BeanItemContainer<SelectValue> gradingCategoryContainer = new BeanItemContainer<SelectValue>(
					SelectValue.class);

			List<State> stateList = masterService.getStateList();
			if (!stateList.isEmpty()) {
				SelectValue stateSelectValue  = null;
				for (State state : stateList) {
					stateSelectValue = new SelectValue();
					stateSelectValue.setId(state.getKey());
					stateSelectValue.setValue(state.getValue());
					stateContainer.add(stateSelectValue);
				}
			}		
		
			
			allocationToContainer = masterService
					.getSelectValueContainer(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
			List<SelectValue> allocationToList = allocationToContainer.getItemIds();
			
			gradingCategoryContainer = masterService
					.getSelectValueContainer(ReferenceTable.INVESTIGATION_GRADING_CATEGORY);
			List<SelectValue> gradingCategoryList = gradingCategoryContainer.getItemIds();
			
			List<TmpInvestigation> investigatorList = masterService
					.getInvestigation().getItemIds();			

			Investigation investigation = investigationService
					.getByInvestigationKey(investigationKey);
			if (investigation != null) {
				investigationList = investigationService
						.getByInvestigation(investigation.getIntimation().getKey());
			}
			if (investigation != null) {
				ClaimDto claimDto = claimService.claimToClaimDTO(investigation
						.getClaim());
				
				insuredSumInsured = calcService.getInsuredSumInsured(String.valueOf(claimDto.getNewIntimationDto().getInsuredPatient().getInsuredId()), claimDTO.getNewIntimationDto().getPolicy().getKey(),claimDto.getNewIntimationDto().getInsuredPatient().getLopFlag());	
				claimDto.getNewIntimationDto().getInsuredPatient().setInsuredSumInsured(insuredSumInsured);
				
				List<Reimbursement> reimbObjList = reimbursementService.getReimbursementByClaimKey(claimByKey.getKey());
				if(reimbObjList != null && !reimbObjList.isEmpty()){
					Reimbursement reimbObj = reimbObjList.get(0);
					Double claimedAmt = 0d;
					claimedAmt += reimbObj.getDocAcknowLedgement().getPreHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getPreHospitalizationClaimedAmount() :0d;
					claimedAmt += reimbObj.getDocAcknowLedgement().getHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getHospitalizationClaimedAmount() : 0d;
					claimedAmt += reimbObj.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d;
					claimDto.setClaimedAmount(claimedAmt);
				}	
				
				Long rodKey = tableDto.getRodKey();
				if(rodKey != null){
					
					Reimbursement reimbursment = reimbursementService.getReimbursementByKey(rodKey);
					if(null != reimbursment)
					{
					assignInvestigatorDto.setDischargeDate(reimbursment.getDateOfDischarge());
					}
				    List<PedValidation> search = diagnosisService.search(rodKey);
				    String diagnosis = masterService.getDiagnosis(search);
				    assignInvestigatorDto.setDiagnosisName(diagnosis);
				}

				assignInvestigatorDto.setUserName(tableDto.getUsername());
				assignInvestigatorDto.setPassWord(tableDto.getPassword());
			
				assignInvestigatorDto.setKey(investigation.getKey());
				assignInvestigatorDto.setIsCashless(tableDto.getIsCashlessTask());
				assignInvestigatorDto.setClaimDto(claimDto);
				assignInvestigatorDto.setRodKey(tableDto.getRodKey());
				SelectValue allocationTo = new SelectValue();
				allocationTo.setId(investigation.getAllocationTo().getKey());
				allocationTo.setValue(investigation.getAllocationTo().getValue());
				assignInvestigatorDto.setAllocationToValue(investigation
						.getAllocationTo().getValue());
				BeanItemContainer<SelectValue> allocationContainer = masterService
				.getSelectValueContainer(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
				
				//Reason for Initiate Inv
				SelectValue selectValueforInInv = new SelectValue();
				if(investigation.getReasonForInitiatingInv() !=null){
				selectValueforInInv.setId(investigation.getReasonForInitiatingInv().getKey());
				selectValueforInInv.setValue(investigation.getReasonForInitiatingInv().getValue());
				assignInvestigatorDto.setReasonForIniInvestValue(investigation.getReasonForInitiatingInv().getValue());
				assignInvestigatorDto.setReasonForInitiatingInvestSelectValue(selectValueforInInv);
				assignInvestigatorDto.setReasonForIniInvestId(investigation.getReasonForInitiatingInv().getKey());
				}
				BeanItemContainer<SelectValue> reasonforIniInvContainer = masterService.getSelectValueContainer(ReferenceTable.REASON_FOR_INITIATE_INVESTIGATION);
				List<SelectValue> reasonforIniInvList = reasonforIniInvContainer.getItemIds();
				
				
				assignInvestigatorDto.setReasonForInitiatingInvestSelectValueList(reasonforIniInvContainer.getItemIds());
				assignInvestigatorDto.setReasonForInitiatingInvestIdList(reasonforIniInvList);
				
				BeanItemContainer<SelectValue> representativeName = investigationService.getRepresentativeListWithoutFilter();
				
				assignInvestigatorDto.setAllocationToSelectValueList(allocationContainer.getItemIds());
				assignInvestigatorDto.setAllocationToSelectValue(allocationTo);
				assignInvestigatorDto.setAllocationToValueForState(investigation
						.getAllocationTo().getValue());
				assignInvestigatorDto.setAllocationToId(investigation
						.getAllocationTo().getKey());
				assignInvestigatorDto.setInvestiationApprovedRemarks(investigation
						.getRemarks());
				assignInvestigatorDto.setReasonForRefering(investigation
						.getReasonForReferring());
				assignInvestigatorDto.setTriggerPointsForFocus(investigation
						.getTriggerPoints());
				assignInvestigatorDto.setRequestingRole(investigation
						.getCreatedBy());
				assignInvestigatorDto.setRequestroIdOrName(investigation
						.getCreatedBy());
				assignInvestigatorDto.setDateOfInvestigation(investigation.getCreatedDate());
				assignInvestigatorDto.setClaimBackgroundDetails(investigation.getClaimBackgroundDetails());
				assignInvestigatorDto.setInvestigationType(investigation.getStage().getStageName());
				assignInvestigatorDto.setFactsOfCase(investigation.getFactsOfCase());
				
				
				if(investigation.getCreatedBy() != null){
					TmpEmployee employeeName = masterService.getEmployeeName(investigation.getCreatedBy().toLowerCase());
					if(employeeName != null){
					assignInvestigatorDto.setRequestroIdOrName(investigation.getCreatedBy() +"-"+ employeeName.getEmpFirstName());
					}
				}
				assignInvestigatorDto.setStateList(stateContainer);
				//assignInvestigatorDto.setInvestigatorNameContainer(representativeName);
				assignInvestigatorDto.setInvestigatorNameContainerList(representativeName.getItemIds());
				assignInvestigatorDto.setAllocationToIdList(allocationToList);
				assignInvestigatorDto.setInvestigatorNameList(investigatorList);
				assignInvestigatorDto.setGradingCategoryList(gradingCategoryList);
				
				if (investigationList != null) {
					assignInvestigatorDto.setInvestigationNo(String
							.valueOf(investigationList.size()));
				} else {
					assignInvestigatorDto.setInvestigationNo("0");
				}
				String investigationRole = null;
				if (tableDto.getInvestigationRole() != null) {
					if (tableDto.getInvestigationRole().equalsIgnoreCase(
							SHAConstants.RMA6)) {
						investigationRole = SHAConstants.RMA6;
					} else if (tableDto.getInvestigationRole().equalsIgnoreCase(
							SHAConstants.RMA5)) {
						investigationRole = SHAConstants.RMA5;
					} else if (tableDto.getInvestigationRole().equalsIgnoreCase(
							SHAConstants.RMA4)) {
						investigationRole = SHAConstants.RMA4;
					}
					else if (tableDto.getInvestigationRole().equalsIgnoreCase(
							SHAConstants.RMA3)) {
						investigationRole = SHAConstants.RMA3;
					}
					else if (tableDto.getInvestigationRole().equalsIgnoreCase(
							SHAConstants.RMA2)) {
						investigationRole = SHAConstants.RMA2;
					}
					else if (tableDto.getInvestigationRole().equalsIgnoreCase(
							SHAConstants.RMA1)) {
						investigationRole = SHAConstants.RMA1;
					}else {
						investigationRole = "RMA6";
					}
				}
				assignInvestigatorDto.setRequestingRole(investigationRole);
//				assignInvestigatorDto.setRequestroIdOrName(tableDto.getUsername());
				assignInvestigatorDto.setTaskNumber(tableDto.getTaskNumber());
				assignInvestigatorDto.setRrcDTO(rrcDTO);
				List<DraftTriggerPointsToFocusDetailsTableDto> investigationDetailsBasedOnInvestigationKey = investigationService.getInvestigationDetailsBasedOnInvestigationKey(investigationKey);
				assignInvestigatorDto.setInvestigatorTriggerPointsList(investigationDetailsBasedOnInvestigationKey);
				assignInvestigatorDto.setDbOutArray(tableDto.getDbOutArray());
				
				if(assignInvestigatorDto.getClaimDto().getNewIntimationDto() != null && assignInvestigatorDto.getClaimDto().getNewIntimationDto().getInsuredPatient() != null &&
						assignInvestigatorDto.getClaimDto().getNewIntimationDto().getInsuredPatient().getKey() != null){
						Long claimCount = preauthService.getClaimCount(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getKey());
						if(claimCount != null){
							assignInvestigatorDto.setClaimCount(claimCount);
						}
					}
				
				assignInvestigatorDto.setIsPEDInitiated(pedQueryService.isPEDInitiated(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getKey()));
				
				if(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto() != null && assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousFlag() != null
						&& assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
					//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
						Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousRemarks() != null ? assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousRemarks(): SHAConstants.SUSPICIOUS_HOSP);
						assignInvestigatorDto.setSuspiciousPopupMap(suspiciousMap);
					//}
				}
				
				if(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto() != null && assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredFlag() != null
									&& assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
								//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
									Map<String, String> nonPreferredsMap = SHAUtils.getNonPreferredMap(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredRemarks() != null ? assignInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
									assignInvestigatorDto.setNonPreferredPopupMap(nonPreferredsMap);
								//}
							}
				
				Date policyFromDate = assignInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getPolicyFromDate();
				
				Date admissionDate = assignInvestigatorDto.getClaimDto().getNewIntimationDto().getAdmissionDate();
				
			
//				bean.getPolicyDto().getPolicyType();
				Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
				if(diffDays != null && diffDays<90){
					assignInvestigatorDto.setIs64VBChequeStatusAlert(true);
				}
				
				Date date28 = new Date();
				Map<String, String> popupMessages = calcService.getPOPUPMessages(assignInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getKey(), assignInvestigatorDto.getClaimDto().getNewIntimationDto().getInsuredPatient().getKey(),assignInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getProduct().getKey());
							log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY POPUP MESSAGE PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));
							assignInvestigatorDto.setPopupMap(popupMessages);
				
				//R1152
		    	if(newIntimationDto.getHospitalDto() != null && newIntimationDto.getHospitalDto().getCpuId() != null && newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getHomeOfficeCode() != null){
					TmpCPUCode cpu = rodService.getCpuDetails(newIntimationDto.getHospitalDto().getCpuId());
					OrganaizationUnit branch = rodService.getBranchCode(newIntimationDto.getPolicy().getHomeOfficeCode());
					if(cpu != null && branch != null && branch.getCpuCode() != null){
						if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
							assignInvestigatorDto.setIsGeoSame(Boolean.FALSE);
						}
					}
				}
		    	
		    	newIntimationDto.setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
				
				view.setViewInvestigationGradingDetail(InvestigationGradingWizardView.class, true,
						assignInvestigatorDto);
			}
		}
}
		protected void showDraftInvestigationWizard(
				@Observes @CDIEvent(MenuPresenter.DRAFT_INVESTIGATION) final ParameterDTO parameters) {

			draftInvestigatorDto = new DraftInvestigatorDto();
			List<Investigation> investigationList = null;
			DraftInvestigatorDto draftInvestigatorDto = new DraftInvestigatorDto();
			SearchDraftInvestigationTableDTO tableDto = (SearchDraftInvestigationTableDTO) parameters
					.getPrimaryParameter();
			Long investigationKey = tableDto.getInvestigationKey();
			
			Investigation investigationobj = investigationService
					.getByInvestigationKey(investigationKey);
			
			Boolean isValidClaimForMA = true;
			if(null != investigationobj)
			{
				Claim claimByKey = (investigationobj.getClaim());
				if(null != claimByKey)
				{
					if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
					{
						isValidClaimForMA = false;
						view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
					}
				}
			}
			if(isValidClaimForMA)
			{
			
			String diagnosisForPreauthByKey = "";
			if(investigationobj.getTransactionFlag() != null && investigationobj.getTransactionKey() != null) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(investigationobj.getTransactionKey());
				
			}
			
			
			
			draftInvestigatorDto.setDiagnosisName(diagnosisForPreauthByKey);
			
			Claim claimByKey = investigationobj.getClaim();
			ClaimDto claimDTO = null;
			
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			if (claimByKey != null) {
				
				newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				claimDTO.setNewIntimationDto(newIntimationDto);
				draftInvestigatorDto.setClaimDto(claimDTO);
			}
			
			
			
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDto.getUsername());
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.DRAFT_INVESTIGATION_INTIATED);
			
			tableDto.setRrcDTO(rrcDTO);
			
			
			
			// investigationKey = 108l;
			BeanItemContainer<SelectValue> allocationToContainer = new BeanItemContainer<SelectValue>(
					SelectValue.class);

			allocationToContainer = masterService
					.getSelectValueContainer(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
			List<SelectValue> allocationToList = allocationToContainer.getItemIds();
			
			Investigation investigation = investigationService
					.getByInvestigationKey(investigationKey);
			if (investigation != null) {
				investigationList = investigationService
						.getByInvestigation(investigation.getIntimation().getKey());
			}
			if (investigation != null) {
//				ClaimDto claimDto = claimService.claimToClaimDTO(investigation
//						.getClaim());
				
				insuredSumInsured = calcService.getInsuredSumInsured(String.valueOf(claimDTO.getNewIntimationDto().getInsuredPatient().getInsuredId()), claimDTO.getNewIntimationDto().getPolicy().getKey(),claimDTO.getNewIntimationDto().getInsuredPatient().getLopFlag());	
				claimDTO.getNewIntimationDto().getInsuredPatient().setInsuredSumInsured(insuredSumInsured);
				
				List<Reimbursement> reimbObjList = reimbursementService.getRembursementDetails(claimByKey.getKey());
				if(reimbObjList != null && !reimbObjList.isEmpty()){
					Reimbursement reimbObj = reimbObjList.get(reimbObjList.size()-1);
					Double claimedAmt = 0d;
					claimedAmt += reimbObj.getDocAcknowLedgement().getPreHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getPreHospitalizationClaimedAmount() :0d;
					claimedAmt += reimbObj.getDocAcknowLedgement().getHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getHospitalizationClaimedAmount() : 0d;
					claimedAmt += reimbObj.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbObj.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d;
					claimDTO.setClaimedAmount(claimedAmt);
				}	
				
				Long rodKey = tableDto.getRodKey();
				if(rodKey != null){
					Reimbursement reimbursment = reimbursementService.getReimbursementByKey(rodKey);
					if(null != reimbursment)
					{
					draftInvestigatorDto.setDischargeDate(reimbursment.getDateOfDischarge());
					}
				    List<PedValidation> search = diagnosisService.search(rodKey);
				    String diagnosis = masterService.getDiagnosis(search);
				    draftInvestigatorDto.setDiagnosisName(diagnosis);
				}

				Long transacKey = 0l;
				if(investigation.getTransactionKey() != null){
					transacKey = investigation.getTransactionKey();
				}
				else{
					transacKey = investigation.getClaim().getKey();
				}
				
				String benefitSelected = ackDocReceivedService.getBenefitSelectedForTransaction(transacKey);
				if(SHAConstants.DEATH.equalsIgnoreCase(benefitSelected)){
					claimDTO.setAccDeathBenefitflag(SHAConstants.DEATH_FLAG);
				}
				else{
					claimDTO.setAccDeathBenefitflag(SHAConstants.ACCIDENT_FLAG);
				}
				
				draftInvestigatorDto.setUserName(tableDto.getUsername());
				draftInvestigatorDto.setPassWord(tableDto.getPassword());
				draftInvestigatorDto.setKey(investigation.getKey());
				draftInvestigatorDto.setIsCashless(tableDto.getIsCashlessTask());
				draftInvestigatorDto.setReimbReqBy(tableDto.getReimbReqBy());
				draftInvestigatorDto.setClaimDto(claimDTO);
				draftInvestigatorDto.setRodKey(tableDto.getRodKey());
				SelectValue allocationTo = new SelectValue();
				allocationTo.setId(investigation.getAllocationTo().getKey());
				allocationTo.setValue(investigation.getAllocationTo().getValue());
				draftInvestigatorDto.setAllocationToValue(investigation
						.getAllocationTo().getValue());
				BeanItemContainer<SelectValue> allocationContainer = masterService
				.getSelectValueContainer(ReferenceTable.ALLOCATION_TO_INVESTIGATION);
				
				//Reason for Initiate Inv
				SelectValue selectValueforInInv = new SelectValue();
				if(investigation.getReasonForInitiatingInv() !=null){
				selectValueforInInv.setId(investigation.getReasonForInitiatingInv().getKey());
				selectValueforInInv.setValue(investigation.getReasonForInitiatingInv().getValue());
				draftInvestigatorDto.setReasonForIniInvestValue(investigation.getReasonForInitiatingInv().getValue());
				draftInvestigatorDto.setReasonForInitiatingInvestSelectValue(selectValueforInInv);
				draftInvestigatorDto.setReasonForIniInvestId(investigation.getReasonForInitiatingInv().getKey());
				}
				BeanItemContainer<SelectValue> reasonforIniInvContainer = masterService.getSelectValueContainer(ReferenceTable.REASON_FOR_INITIATE_INVESTIGATION);
				List<SelectValue> reasonforIniInvList = reasonforIniInvContainer.getItemIds();
				
				
				draftInvestigatorDto.setReasonForInitiatingInvestSelectValueList(reasonforIniInvContainer.getItemIds());
				draftInvestigatorDto.setReasonForInitiatingInvestIdList(reasonforIniInvList);
				
				draftInvestigatorDto.setAllocationToSelectValueList(allocationContainer.getItemIds());
				draftInvestigatorDto.setAllocationToSelectValue(allocationTo);
				draftInvestigatorDto.setAllocationToValueForState(investigation
						.getAllocationTo().getValue());
				draftInvestigatorDto.setAllocationToId(investigation
						.getAllocationTo().getKey());
				draftInvestigatorDto.setInvestiationApprovedRemarks(investigation
						.getRemarks());
				draftInvestigatorDto.setReasonForRefering(investigation
						.getReasonForReferring());
				draftInvestigatorDto.setTriggerPointsForFocus(investigation
						.getTriggerPoints());
				draftInvestigatorDto.setRequestingRole(investigation
						.getCreatedBy());
				draftInvestigatorDto.setRequestroIdOrName(investigation
						.getCreatedBy());
				if(investigation.getCreatedBy() != null){
					TmpEmployee employeeName = masterService.getEmployeeName(investigation.getCreatedBy().toLowerCase());
					if(employeeName != null){
						draftInvestigatorDto.setRequestroIdOrName(investigation.getCreatedBy() +"-"+ employeeName.getEmpFirstName());
					}
				}
				
				
				draftInvestigatorDto.setAllocationToIdList(allocationToList);
				
				if (investigationList != null) {
					draftInvestigatorDto.setInvestigationNo(String
							.valueOf(investigationList.size()));
				} else {
					draftInvestigatorDto.setInvestigationNo("0");
				}
				String investigationRole = "";
//				if (tableDto.getInvestigationRole() != null) {
//					if (tableDto.getInvestigationRole().equalsIgnoreCase(
//							SHAConstants.RMA6)) {
//						investigationRole = SHAConstants.RMA6;
//					} else if (tableDto.getInvestigationRole().equalsIgnoreCase(
//							SHAConstants.RMA5)) {
//						investigationRole = SHAConstants.RMA5;
//					} else if (tableDto.getInvestigationRole().equalsIgnoreCase(
//							SHAConstants.RMA4)) {
//						investigationRole = SHAConstants.RMA4;
//					}
//					else if (tableDto.getInvestigationRole().equalsIgnoreCase(
//							SHAConstants.RMA3)) {
//						investigationRole = SHAConstants.RMA3;
//					}
//					else if (tableDto.getInvestigationRole().equalsIgnoreCase(
//							SHAConstants.RMA2)) {
//						investigationRole = SHAConstants.RMA2;
//					}
//					else if (tableDto.getInvestigationRole().equalsIgnoreCase(
//							SHAConstants.RMA1)) {
//						investigationRole = SHAConstants.RMA1;
//					}else {
//						investigationRole = "RMA6";
//					}
//				}
				draftInvestigatorDto.setRequestingRole(investigationRole);
//				assignInvestigatorDto.setRequestroIdOrName(tableDto.getUsername());
				draftInvestigatorDto.setTaskNumber(tableDto.getTaskNumber());
				draftInvestigatorDto.setRrcDTO(rrcDTO);
				draftInvestigatorDto.setDbOutArray(tableDto.getDbOutArray());
				
				// R1045
				draftInvestigatorDto.setPreauthDTO(new PreauthDTO());
				draftInvestigatorDto.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
				draftInvestigatorDto.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
				draftInvestigatorDto.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
				draftInvestigatorDto.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
				
				draftInvestigatorDto.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
				draftInvestigatorDto.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
				
				Long hospital = claimByKey.getIntimation().getHospital();
				Hospitals hospitalById = hospitalService.getHospitalById(hospital);
				
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					draftInvestigatorDto.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
						draftInvestigatorDto.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
					}
				}
				
				if(draftInvestigatorDto.getClaimDto().getNewIntimationDto() != null && draftInvestigatorDto.getClaimDto().getNewIntimationDto().getInsuredPatient() != null &&
						draftInvestigatorDto.getClaimDto().getNewIntimationDto().getInsuredPatient().getKey() != null){
						Long claimCount = preauthService.getClaimCount(draftInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getKey());
						if(claimCount != null){
							draftInvestigatorDto.setClaimCount(claimCount);
						}
					}
				
				draftInvestigatorDto.setIsPEDInitiated(pedQueryService.isPEDInitiated(draftInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getKey()));

				if(draftInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto() != null && draftInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousFlag() != null
						&& draftInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
						Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(draftInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousRemarks() != null ? draftInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getSuspiciousRemarks(): SHAConstants.SUSPICIOUS_HOSP);
						draftInvestigatorDto.setSuspiciousPopupMap(suspiciousMap);
				}
				
				if(draftInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto() != null && draftInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredFlag() != null
									&& draftInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
								//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
									Map<String, String> nonPreferredsMap = SHAUtils.getNonPreferredMap(draftInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredRemarks() != null ? draftInvestigatorDto.getClaimDto().getNewIntimationDto().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
									draftInvestigatorDto.setNonPreferredPopupMap(nonPreferredsMap);
								//}
							}
							
				
				Date policyFromDate = draftInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getPolicyFromDate();
				
				Date admissionDate = draftInvestigatorDto.getClaimDto().getNewIntimationDto().getAdmissionDate();
				
			
//				bean.getPolicyDto().getPolicyType();
				Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
				if(diffDays != null && diffDays<90){
					draftInvestigatorDto.setIs64VBChequeStatusAlert(true);
				}
				
				Date date28 = new Date();
				Map<String, String> popupMessages = calcService.getPOPUPMessages(draftInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getKey(), draftInvestigatorDto.getClaimDto().getNewIntimationDto().getInsuredPatient().getKey(),draftInvestigatorDto.getClaimDto().getNewIntimationDto().getPolicy().getProduct().getKey());
							log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY POPUP MESSAGE PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));
							draftInvestigatorDto.setPopupMap(popupMessages);
				
				//R1152
		    	if(newIntimationDto.getHospitalDto() != null && newIntimationDto.getHospitalDto().getCpuId() != null && newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getHomeOfficeCode() != null){
					TmpCPUCode cpu = rodService.getCpuDetails(newIntimationDto.getHospitalDto().getCpuId());
					OrganaizationUnit branch = rodService.getBranchCode(newIntimationDto.getPolicy().getHomeOfficeCode());
					if(cpu != null && branch != null && branch.getCpuCode() != null){
						if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
							draftInvestigatorDto.setIsGeoSame(Boolean.FALSE);
						}
					}
				}

		    	Map<String,Object> icrAgent  = dBCalculationService.getAgentAndBranchName(draftInvestigatorDto.getPreauthDTO().getNewIntimationDTO().getIntimationId()); 
				 if(icrAgent != null && !icrAgent.isEmpty()) {
						String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
						draftInvestigatorDto.getPreauthDTO().setIcrAgentValue(agentScorePoint);
						String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
						draftInvestigatorDto.getPreauthDTO().setSmAgentValue(smScorepoint);
				 }
		    	
		    	newIntimationDto.setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
				
				view.setDraftInvestigation(DraftInvestigationWizard.class, true,
						draftInvestigatorDto);
			}
		}
			
		}
		
		protected void showDraftInvestigationSearch(
				@Observes @CDIEvent(MenuItemBean.SHOW_DRAFT_INVESTIGATION) final ParameterDTO parameters) {
			BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
					.getTmpCpuCodes();
			
			BeanItemContainer<SelectValue> claimTypeContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
			
			BeanItemContainer<SelectValue> claimTypeListContainer = masterService.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
			List<SelectValue> itemIds = claimTypeListContainer.getItemIds();
			for (SelectValue selectValue : itemIds) {
				if(selectValue.getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY) || selectValue.getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
					claimTypeContainer.addBean(selectValue);
				}
			}
			
			BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
			
			Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.CLAIM_REQUEST_STAGE);
			Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);

			SelectValue selectValue1 = new SelectValue();
			selectValue1.setId(stageByKey2.getKey());
			selectValue1.setValue(stageByKey2.getStageName());
			
			SelectValue selectValue2 = new SelectValue();
			selectValue2.setId(stageByKey3.getKey());
			selectValue2.setValue(stageByKey3.getStageName());
			
			BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
			statusByStage.addBean(selectValue1);
			statusByStage.addBean(selectValue2);
			
			view.setViewDraftInvestigation(SearchDraftInvestigationView.class,
					true, selectValueContainerForCPUCode,claimTypeContainer,selectValueForPriority,statusByStage);
		}
		
//		protected void showMedicalApprovalProcessClaimRequest_old(
//				@Observes @CDIEvent(MenuPresenter.SHOW_MEDICAL_APPROVAL_PROCESS_CLAIM_REQUEST) final ParameterDTO parameters) {
			/*
		}
			Date startDate = new Date();
			System.out.println("---Start time of MA Menupresenter---"+System.currentTimeMillis());


			SearchProcessClaimRequestTableDTO tableDTO = (SearchProcessClaimRequestTableDTO) parameters
					.getPrimaryParameter();

			Reimbursement reimbursementObjectByKey = rodService
			.getReimbursementObjectByKey(tableDTO.getRodKey());
			
			Date date1 = new Date();
			//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> BEFORE INVOKING ROD SUMMARY DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date1);
			
			List<UploadDocumentDTO> rodSummaryDetails = rodService
					.getRODSummaryDetails(reimbursementObjectByKey.getKey());
			Date date2 = new Date();

			//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> AFTER INVOKING ROD SUMMARY DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date2);
			
			//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL DURATION FOR RODSUMMARY DETAILS METHOD %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date1, date2));
			
			Boolean isValidClaimForMA = true;
			
			
			 * List<Long> documentSummaryKeys = new ArrayList<Long>(); for
			 * (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
			 * documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
			 * uploadDocumentDTO.setStatus(true); List<RODBillDetails>
			 * billEntryDetails = rodService
			 * .getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
			 * List<BillEntryDetailsDTO> dtoList = new
			 * ArrayList<BillEntryDetailsDTO>(); if (billEntryDetails != null &&
			 * !billEntryDetails.isEmpty()) { for (RODBillDetails billEntryDetailsDO
			 * : billEntryDetails) {
			 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
			 * uploadDocumentDTO)); } }
			 * uploadDocumentDTO.setBillEntryDetailList(dtoList); }
			 
			
			 * Double totalBilledAmount = reimbursementService
			 * .getTotalBilledAmount(documentSummaryKeys);
			 
			Date date3 = new Date();
		//	log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> BEFORE INVOKING ZONAL  MEDICAL REVIEW MAPPER  GET REIMBURSEMENT DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date3);
			ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
//			ZonalMedicalReviewMapper.getAllMapValues();
			PreauthDTO reimbursementDTO = mapper
					.getReimbursementDTO(reimbursementObjectByKey);
			Date date4 = new Date();
			//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> AFTER INVOKING ZONAL  MEDICAL REVIEW MAPPER  GET REIMBURSEMENT DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date4);
			//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL DURATION FOR GET REIMBURSEMENT DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date3, date4));


			if(null != reimbursementObjectByKey)
			{
				Claim claimByKey = (reimbursementObjectByKey.getClaim());
				if(null != claimByKey)
				{
					if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
					{
						isValidClaimForMA = false;
						view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
					}
				}
			}
			if(isValidClaimForMA)
			{
				
				if(("Y").equalsIgnoreCase(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getReconsiderationRequest()))
				{
					reimbursementDTO.setReconsiderRodRequestList(getReconsiderRODRequestForBillEntry(tableDTO.getRodKey()));
				}
				
				
				 * reimbursementDTO.setAmountConsidered(totalBilledAmount != null ?
				 * String .valueOf(totalBilledAmount.intValue()) : "0");
				 * reimbursementDTO .setInitialAmountConsidered(totalBilledAmount !=
				 * null ? String .valueOf(totalBilledAmount.intValue()) : "0");
				 * reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
				 * reimbursementDTO.setHumanTask(tableDTO.getHumanTask());
				 
		
			//	Date date5 = new Date();
				//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> BEFORE INVOKING FVR GRADING SERVICE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date5);

				List<FVRGradingMaster> fvrGrading = reimbursementService
						.getFVRGrading();
				Date date6 = new Date();
				//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> AFTER INVOKING FVR GRADING SERVICE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date6);

				//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> BEFORE INVOKING FVR GRADING SERVICE BY FVR CLAIM KEY %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date6);

				List<FieldVisitRequest> fvrByClaimKey = reimbursementService
						.getFVRByClaimKey(reimbursementObjectByKey.getClaim().getKey());
				
				Date date7 = new Date();
				//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> AFTER INVOKING FVR GRADING SERVICE BY FVR CLAIM KEY %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date7);

				
				List<FvrGradingDetailsDTO> dto = new ArrayList<FvrGradingDetailsDTO>();
				Map<Integer, FieldVisitRequest> valueMap = new HashMap<Integer, FieldVisitRequest>();
				for (int i = 0; i < fvrByClaimKey.size(); i++) {
					FieldVisitRequest fieldVisitRequest = fvrByClaimKey.get(i);
					if(fieldVisitRequest.getStatus() != null && fieldVisitRequest.getStatus().getKey().equals(ReferenceTable.FVR_REPLY_RECEIVED)){
						FvrGradingDetailsDTO fvrDto = new FvrGradingDetailsDTO();
						fvrDto.setKey(fieldVisitRequest.getKey());
						fvrDto.setRepresentativeName(fieldVisitRequest
								.getRepresentativeName());
						fvrDto.setRepresentiveCode(fieldVisitRequest
								.getRepresentativeCode());
						List<FVRGradingDTO> FVRTableDTO = new ArrayList<FVRGradingDTO>();
						for (FVRGradingMaster masterFVR : fvrGrading) {
							FVRGradingDTO eachFVRDTO = new FVRGradingDTO();
							eachFVRDTO.setKey(masterFVR.getKey());
							eachFVRDTO.setCategory(masterFVR.getGradingType());
							eachFVRDTO.setApplicability(masterFVR.getApplicability());
							switch (Integer.valueOf(String.valueOf(masterFVR.getKey()))) {
							case 8 : 
								if(fieldVisitRequest.getPatientVerified() != null){
									eachFVRDTO.setStatusFlag(fieldVisitRequest.getPatientVerified());
								}
							 	break;
							case 9: 
								if(fieldVisitRequest.getDiagnosisVerfied() != null){
									eachFVRDTO.setStatusFlag(fieldVisitRequest.getDiagnosisVerfied());
								}
							 	break;
							case 10: 
								if(fieldVisitRequest.getRoomCategoryVerfied() != null){
									eachFVRDTO.setStatusFlag(fieldVisitRequest.getRoomCategoryVerfied());
								}
							 	break;
							case 11: 
								if(fieldVisitRequest.getTriggerPointsFocused() != null){
									eachFVRDTO.setStatusFlag(fieldVisitRequest.getTriggerPointsFocused());
								}
							 	break;
							case 12: 
								if(fieldVisitRequest.getPedVerified() != null){
									eachFVRDTO.setStatusFlag(fieldVisitRequest.getPedVerified());
								}
							 	break;
							case 13:
								if(fieldVisitRequest.getPatientDischarged() != null){
									eachFVRDTO.setStatusFlag(fieldVisitRequest.getPatientDischarged());
								}
							 	break;
							case 14:
								if(fieldVisitRequest.getPatientNotAdmitted() != null){
									eachFVRDTO.setStatusFlag(fieldVisitRequest.getPatientNotAdmitted());
								}
							 	break;
							case 15: 
								if(fieldVisitRequest.getOutstandingFvr() != null){
									eachFVRDTO.setStatusFlag(fieldVisitRequest.getOutstandingFvr());
								}
							 	break;
							default:
								break;
							}
							FVRTableDTO.add(eachFVRDTO);
						}
						fvrDto.setFvrGradingDTO(FVRTableDTO);
						dto.add(fvrDto);
					}
				}
		
				reimbursementDTO.getPreauthMedicalDecisionDetails().setFvrGradingDTO(
						dto);
		
				//reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
				reimbursementDTO.setStrUserName(tableDTO.getUsername());
				reimbursementDTO.setStrPassword(tableDTO.getPassword());
				//reimbursementDTO.setTaskNumber(tableDTO.getTaskNumber());
				
				
				reimbursementDTO.setUserRole(tableDTO.getUserRole());
				reimbursementDTO.setRodNumber(reimbursementObjectByKey.getRodNumber());
				Claim claimByKey = reimbursementObjectByKey.getClaim();
				Date date8 = new Date();
				reimbursementDTO
						.setReconsiderationList(getReconsiderRODRequest(claimByKey));
				Date date9 = new Date();
			//	log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY GET RECONSIDER ROD REQUEST %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date8,  date9));
				
				BeanItemContainer<SelectValue> medicalContainer = masterService
						.getSelectValueContainer(ReferenceTable.MEDICAL_VERIFICATION);
				BeanItemContainer<SelectValue> treatmentContainer = masterService
						.getSelectValueContainer(ReferenceTable.TREATMENT_QUALITY_VERIFICATION);
		
				// setHospitalDetailsToDTO(hospitalById, reimbursementDTO);
				Date date10 = new Date();
				//setReimbursmentTOPreauthDTO(mapper, claimByKey,
					//	reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.CLAIM_REQUEST);
				setReimbursmentTOPreauthDTOForMA(mapper, claimByKey,
							reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.CLAIM_REQUEST);
				
				if (claimByKey != null) {
					setClaimValuesToDTO(reimbursementDTO, claimByKey);
					NewIntimationDto newIntimationDto = intimationService
							.getIntimationDto(claimByKey.getIntimation());
					ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
					if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
						 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
						 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
					 }
					
					Date admissionDate = newIntimationDto.getAdmissionDate();
					try{
//						String duration = dbCalculationService.getPolicyAgeing(admissionDate, newIntimationDto.getPolicy().getPolicyNumber());
						String duration = newIntimationDto.getPolicyYear();
						newIntimationDto.setPolicyAgeing(duration);
					}catch(Exception e){
						
					}
					reimbursementDTO.setNewIntimationDTO(newIntimationDto);
					reimbursementDTO.setClaimDTO(claimDTO);
					reimbursementDTO.getClaimDTO().setNewIntimationDto(newIntimationDto);
					
					
					
				}
				
				
				Date date11 = new Date();
			//	log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY SET REIMBURSEMENT TO PREAUTH DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date10,  date11));

				
				
				String[] hospSplit = reimbursementObjectByKey.getRodNumber().split("/");
				String hsopSplitNo = hospSplit[hospSplit.length - 1];
				Integer hospNo = Integer.valueOf(hsopSplitNo);
				if(reimbursementObjectByKey.getStatus() != null && !reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.BILLING_REFER_TO_MEDICALA_APPROVER) &&  !reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER) && hospNo.equals(1) && reimbursementObjectByKey.getClaim().getClaimType() != null && reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
					Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(reimbursementObjectByKey.getClaim().getKey());
					reimbursementDTO.setPreviousPreauthKey(latestPreauthByClaim.getKey());
					List<PedValidation> findPedValidationByPreauthKey = preauthService.findPedValidationByPreauthKey(latestPreauthByClaim.getKey());
					List<Procedure> findProcedureByPreauthKey = preauthService.findProcedureByPreauthKey(latestPreauthByClaim.getKey());
					List<DiagnosisDetailsTableDTO> diagnosisTableList = reimbursementDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
					List<ProcedureDTO> procedureExclusionCheckTableList = reimbursementDTO.getPreauthMedicalProcessingDetails().getProcedureExclusionCheckTableList();
					for (ProcedureDTO procedureDTO : procedureExclusionCheckTableList) {
						for (Procedure procedure : findProcedureByPreauthKey) {
							if(procedure.getProcedureID().equals(procedureDTO.getProcedureName().getId())) {
								procedureDTO.setOldApprovedAmount(procedure.getNetApprovedAmount());
							}
						}
					}
					
					for (DiagnosisDetailsTableDTO diagnosisDTO : diagnosisTableList) {
						for (PedValidation pedValidation : findPedValidationByPreauthKey) {
							if(pedValidation.getDiagnosisId().equals(diagnosisDTO.getDiagnosisId())) {
								diagnosisDTO.setOldApprovedAmount(pedValidation.getNetApprovedAmount());
							}
						}
					}
				}
		
				DBCalculationService dbCalculationService = new DBCalculationService();
				Date date12 = new Date();
				Double insuredSumInsured = dbCalculationService.getInsuredSumInsured(
						reimbursementDTO.getNewIntimationDTO().getInsuredPatient()
								.getInsuredId().toString(), reimbursementDTO
								.getPolicyDto().getKey());
				Date date13 = new Date();
				//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY INSURED SUM INSURED PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date12,  date13));

				Map<Integer, Object> detailsMap = new HashMap<Integer, Object>();
				
//				if(null != reimbursementDTO && null != reimbursementDTO.getNewIntimationDTO() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto() 
//						&& null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType()
//						&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType().getKey().equals(ReferenceTable.NON_NETWORK_HOSPITAL_TYPE_ID))
//				{
//					String cityClass = createRodService.getHospitalCityClass(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
//					reimbursementDTO.getNewIntimationDTO().getHospitalDto()
//					.getRegistedHospitals().setCityClass(cityClass);
//					
//				}
		
				if(reimbursementObjectByKey.getSectionCategory() != null){
					
					Date date14 = new Date();
					detailsMap = dbCalculationService
							.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
					Date date15 = new Date();
				//	log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY HOSPITALIZATION DETAILS PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date14,  date15));

				}else{
					
					Long sectionCategory = 0l;
					if(reimbursementDTO.getPolicyDto()
										.getProduct().getKey().equals(ReferenceTable.STAR_CARDIAC_CARE_POLICY) || reimbursementDTO.getPolicyDto()
										.getProduct().getKey().equals(ReferenceTable.DIABETES_INDIVIDUAL_POLICY) || reimbursementDTO.getPolicyDto()
										.getProduct().getKey().equals(ReferenceTable.DIABETES_FLOATER_POLICY))
					{
						sectionCategory = 1l;
					}
					
					Date date14 = new Date();
					detailsMap = dbCalculationService
							.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,"0");
					Date date15 = new Date();
					
					//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY HOSPITALIZATION DETAILS PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date14,  date15));

				}
				
				if(detailsMap != null && detailsMap.get(15) != null){
//					reimbursementDTO.setAmbulanceLimitAmount((Double)detailsMap.get(15));
				}

				reimbursementDTO = getProrataFlagFromProduct(reimbursementDTO);
				
				if(reimbursementObjectByKey.getProrataDeductionFlag() != null) {
					reimbursementDTO.setProrataDeductionFlag(reimbursementObjectByKey.getProrataDeductionFlag());
				}
				
				*//**
				 * product based variable is added to enable or disable the component in page level.
				 * This would be static. -- starts
				 * *//*
				//reimbursementDTO.setProductBasedProRata(reimbursementObjectByKey.getProrataDeductionFlag());
				//reimbursementDTO.setProductBasedPackage(reimbursementObjectByKey.getPackageAvailableFlag());
				//ends.
				reimbursementDTO.setPackageAvailableFlag(reimbursementObjectByKey.getPackageAvailableFlag());
				
				
		
				List<Long> documentSummaryKeys = new ArrayList<Long>();
				
				*//**
				 * Fix for implemeting claims dms in bill entry screen.. -- starts
				 * **//*
				if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
				{
					for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
						if(null != claimByKey)
						{
							uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
							uploadDocumentDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
						}
					}
				}
				
				*//**
				 * Added for enabling view documents in preauth screen while raising query -- fix starts.
				 * *//*
				if(null != claimByKey)
				{
					Date date17 = new Date();
					reimbursementDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
					Date date18 = new Date();
				//	log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY CLAIMS DMS LIST FETCH %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date17,  date18));

				}
				*//**
				 * Added for enabling view documents in preauth screen while raising query -- fix ends
				 * *//*
				
		
				for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
							if(null != reimbursementObjectByKey)
							{
								uploadDocumentDTO.setIntimationNo(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId());
								uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfAdmission()));
								uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfDischarge()));
								uploadDocumentDTO.setInsuredPatientName(reimbursementObjectByKey.getClaim().getIntimation().getInsuredPatientName());
							}
					documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
					uploadDocumentDTO.setStatus(true);
					Date date19 = new Date();
					List<RODBillDetails> billEntryDetails = rodService
							.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
					Date date20 = new Date();
				//	log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY BILL ENTRY DETAILS LIST %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date19,  date20));

					List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
					if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
						for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
							
							 * <<<<<<< HEAD
							 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
							 * uploadDocumentDTO)); =======
							 
							dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
									uploadDocumentDTO));
							// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
						}
					}
					
					 * uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
					 * .get(8));
					 
					uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
							.get(8));
					uploadDocumentDTO
							.setProductBasedICURent((Double) detailsMap.get(9));
					uploadDocumentDTO.setProductBasedAmbulanceAmt((Double) detailsMap
							.get(15));
					uploadDocumentDTO.setProductBasedAmbulanceAmt(getProductBasedAmbulanceAmt(tableDTO.getRodKey()));
					uploadDocumentDTO.setStatus(false);
					uploadDocumentDTO.setBillEntryDetailList(dtoList);
					uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
					uploadDocumentDTO.setRodKey(reimbursementObjectByKey.getKey());
					uploadDocumentDTO.setStrUserName(tableDTO.getUsername());
					
				}
				
				List<UploadDocumentDTO> rodBillSummaryDetails = rodService
						.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);
				if(rodBillSummaryDetails != null){
					for (UploadDocumentDTO uploadDocumentDTO : rodBillSummaryDetails) {
						uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
					}
				}
				
				reimbursementDTO.getUploadDocDTO().setBillingWorkSheetUploadDocumentList(rodBillSummaryDetails);
				Double totalBilledAmount = reimbursementService
						.getTotalBilledAmount(documentSummaryKeys);
		
				reimbursementDTO.setAmountConsidered(totalBilledAmount != null ? String
						.valueOf(totalBilledAmount.intValue()) : "0");
				reimbursementDTO
						.setInitialAmountConsidered(totalBilledAmount != null ? String
								.valueOf(totalBilledAmount.intValue()) : "0");
				reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
				//reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
			//	reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
		
				Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
						.getIntimation().getHospital());
				ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
						.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
				if(hospitalById != null){
					
					updateHospitalDetails.setHospitalCity(hospitalById.getCity());
					updateHospitalDetails.setHospitalCity(hospitalById.getCity());
					updateHospitalDetails.setHospitalState(hospitalById.getState());
					updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
					updateHospitalDetails.setPanNumber(hospitalById.getPanNumber());
					updateHospitalDetails.setHospitalTypeId(hospitalById.getHospitalType().getKey());
					//updateHospitalDetails.setInpatientBeds(hospitalById.getInpatientBeds() != null ? String.valueOf(hospitalById.getInpatientBeds()) : "0");
					updateHospitalDetails.setHospitalName(hospitalById.getName());
					updateHospitalDetails.setHospitalPhoneNo(hospitalById.getPhoneNumber());
					updateHospitalDetails.setHopitalRegNumber(hospitalById.getRegistrationNumber());
					updateHospitalDetails.setHospitalPincode(hospitalById.getPincode());
					updateHospitalDetails.setOtFacilityFlag(hospitalById.getOtFacilityFlag());
					updateHospitalDetails.setIcuFacilityFlag(hospitalById.getIcuFacilityFlag());
					updateHospitalDetails.setHospitalAddress1(hospitalById.getAddress());
		
				}
				
				List<MedicalVerificationDTO> medicalDTO = new ArrayList<MedicalVerificationDTO>();
				List<TreatmentQualityVerificationDTO> treatmentDTO = new ArrayList<TreatmentQualityVerificationDTO>();
				List<ClaimVerification> claimVerificationByReimbKey = reimbursementService
						.getClaimVerificationByReimbKey(reimbursementObjectByKey
								.getKey());
				if (claimVerificationByReimbKey != null) {
		
					for (ClaimVerification claimVerification : claimVerificationByReimbKey) {
						if (claimVerification.getVerificationType() != null
								&& claimVerification.getVerificationType()
										.toLowerCase().equalsIgnoreCase("medical")) {
		
							MedicalVerificationDTO medicalVerifyDTO = new MedicalVerificationDTO();
							List<SelectValue> itemIds = medicalContainer.getItemIds();
							if (itemIds != null && !itemIds.isEmpty()) {
								for (SelectValue selectValue : itemIds) {
									if (claimVerification.getVerificationTypeId()
											.equals(selectValue.getId())) {
										medicalVerifyDTO.setDescriptionId(selectValue
												.getId());
										medicalVerifyDTO.setDescription(selectValue
												.getValue());
									}
								}
							}
							medicalVerifyDTO.setKey(claimVerification.getKey());
							medicalVerifyDTO.setRemarks(claimVerification
									.getMedicalRemarks());
							medicalVerifyDTO.setVerifiedFlag(claimVerification
									.getVerifiedFlag());
		
							medicalDTO.add(medicalVerifyDTO);
						} else if (claimVerification.getVerificationType() != null
								&& claimVerification.getVerificationType()
										.toLowerCase().equalsIgnoreCase("treatment")) {
		
							TreatmentQualityVerificationDTO treatmentVerifyDTO = new TreatmentQualityVerificationDTO();
							List<SelectValue> itemIds = treatmentContainer.getItemIds();
							if (itemIds != null && !itemIds.isEmpty()) {
								for (SelectValue selectValue : itemIds) {
									if (claimVerification.getVerificationTypeId()
											.equals(selectValue.getId())) {
										treatmentVerifyDTO.setDescriptionId(selectValue
												.getId());
										treatmentVerifyDTO.setDescription(selectValue
												.getValue());
									}
								}
							}
							treatmentVerifyDTO.setKey(claimVerification.getKey());
							treatmentVerifyDTO.setRemarks(claimVerification
									.getMedicalRemarks());
							treatmentVerifyDTO.setVerifiedFlag(claimVerification
									.getVerifiedFlag());
		
							treatmentDTO.add(treatmentVerifyDTO);
						}
					}
				}
				if (claimByKey.getClaimType() != null
						&& claimByKey.getClaimType().getKey() != null
						&& claimByKey.getClaimType().getKey()
								.equals(ReferenceTable.CLAIM_TYPE_CASHLESS_ID)) {
					
					
					reimbursementDTO.setIsCashlessType(true);
					
		            Preauth previousPreauth = getPreviousPreauth(claimByKey.getKey());
		            reimbursementDTO
					.setTreatmentRemarksList(getTreatmentRemarksHistory(claimByKey.getKey()));
					
					if(previousPreauth != null) {
						reimbursementDTO.setPreauthKey(previousPreauth.getKey());
					}
				}
				
				reimbursementDTO.getPreauthMedicalDecisionDetails()
						.setMedicalVerificationTableDTO(medicalDTO);
				reimbursementDTO.getPreauthMedicalDecisionDetails()
						.setTreatmentVerificationDTO(treatmentDTO);
				reimbursementDTO.getPreauthDataExtractionDetails()
						.setReasonForAdmission(
								claimByKey.getIntimation().getAdmissionReason());
				reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
						reimbursementObjectByKey.getKey());
		
				if (reimbursementObjectByKey.getStatus().getKey()
						.equals(ReferenceTable.BILLING_REFER_TO_MEDICALA_APPROVER)
						|| reimbursementObjectByKey
								.getStatus()
								.getKey()
								.equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER)) {
					Long medicalApproverKey = reimbursementService
							.getLatestMedicalApproverKey(reimbursementObjectByKey.getKey());
					MedicalApprover medicalApprover = reimbursementService.getMedicalApproverByKey(medicalApproverKey);
					if (medicalApprover != null) {
						reimbursementDTO.setPreviousRemarks(medicalApprover
								.getReferringRemarks());
						reimbursementDTO.setPreviousReasonForReferring(medicalApprover
								.getReasonForReferring());
						
						if(medicalApprover.getReferringRemarks() == null){
							reimbursementDTO.setPreviousRemarks(medicalApprover.getApproverReply());
						}
						reimbursementDTO.setMedicalApproverKey(medicalApproverKey);
					}
					
					if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER)){
						reimbursementDTO.setIsReplyToFA(true);
					}
					
					reimbursementDTO.setIsReferToMedicalApprover(true);
				}
				
				if(reimbursementObjectByKey.getStatus().getKey()
						.equals(ReferenceTable.CLAIM_REQUEST_ESCALATION_STATUS)) {
					PreauthEscalate preauthEscalate = reimbursementService.getEscalateByClaimKey(reimbursementObjectByKey.getClaim().getKey());
					reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEscalateRemarks());
					reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEscalateRemarks());
					reimbursementDTO.getPreauthMedicalDecisionDetails().setEscalateRemarks(preauthEscalate.getEscalateRemarks());
					reimbursementDTO.setIsEscalateReplyEnabled(true);
				}else if(reimbursementObjectByKey.getStatus().getKey()
						.equals(ReferenceTable.CLAIM_REQUEST_ESCALATION_REPLY_STATUS)) {
					PreauthEscalate preauthEscalate = reimbursementService.getEscalateByClaimKey(reimbursementObjectByKey.getClaim().getKey());
					reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEsclateReplyRemarks());
					reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEsclateReplyRemarks());
					reimbursementDTO.getPreauthMedicalDecisionDetails().setEscalateReply(preauthEscalate.getEsclateReplyRemarks());
					reimbursementDTO.setIsEscalateReplyEnabled(false);
				}
				else if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.PROCESS_CLAIM_REQUEST_DISAPPROVE_REJECT_STATUS)){
					ReimbursementRejectionDto reimbursementRejectionByKey = reimbursementRejectionService.getReimbursementRejectionByKey(reimbursementObjectByKey.getKey());
					if(reimbursementRejectionByKey != null){
					    reimbursementDTO.getPreauthMedicalDecisionDetails().setRejectionRemarks(reimbursementRejectionByKey.getDisapprovedRemarks());
					}
				}else if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.PROCESS_CLAIM_REQUEST_QUERY_REJECT_STATUS)){
					ReimbursementQuery reimbursementyQueryByRodKey = reimbursementQuerySerice.getReimbursementyQueryByRodKey(reimbursementObjectByKey.getKey());
					
					if(reimbursementyQueryByRodKey != null){
						reimbursementDTO.getPreauthMedicalDecisionDetails().setQueryRemarks(reimbursementyQueryByRodKey.getRejectionRemarks());
					}
				}else if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.UPLOAD_INVESIGATION_COMPLETED)
						|| reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.INITIATE_INVESTIGATION_DIS_APPROVED)){
					reimbursementDTO.getPreauthMedicalDecisionDetails().setApprovalRemarks("-");
					Investigation investigation = investigationService.getInvestigationByTransactionKey(reimbursementObjectByKey.getKey());
					if(investigation != null){
						reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(investigation.getRemarks());
					}
				}
		
				
				setCategoryFlag(reimbursementObjectByKey, reimbursementDTO);
		
				if (!reimbursementDTO.getHospitalizaionFlag()) {
					reimbursementDTO = setHospitalizationAmount(reimbursementDTO);
				}
		
				setPreAndPostHopitalizationAmount(reimbursementDTO);
		
				if (reimbursementObjectByKey.getStatus().getKey() != null
						&& reimbursementObjectByKey.getStatus().getKey()
								.equals(ReferenceTable.ZONAL_REVIEW_REJECTION_STATUS)) {
					reimbursementDTO.getPreauthMedicalProcessingDetails()
							.setApprovalRemarks(
									reimbursementObjectByKey.getRejectionRemarks());
				} else if (reimbursementObjectByKey.getStatus().getKey() != null
						&& reimbursementObjectByKey.getStatus().getKey()
								.equals(ReferenceTable.ZONAL_REVIEW_QUERY_STATUS)) {
					ReimbursementQuery reimbursementQueryByReimbursmentKey = reimbursementService
							.getReimbursementQueryByReimbursmentKey(reimbursementObjectByKey
									.getKey());
					reimbursementDTO.setIsZonalReviewQuery(true);
					// reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(reimbursementQueryByReimbursmentKey
					// != null ? reimbursementQueryByReimbursmentKey.getQueryRemarks() :
					// "");
				} else if (reimbursementObjectByKey.getStatus().getKey() != null
						&& reimbursementObjectByKey.getStatus().getKey()
								.equals(ReferenceTable.ZONAL_REVIEW_APPROVE_STATUS)) {
					reimbursementDTO.getPreauthMedicalProcessingDetails()
							.setApprovalRemarks(
									reimbursementObjectByKey.getApprovalRemarks());
				}
				if(claimByKey.getStatus() != null) {
					if(claimByKey.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS) ||  claimByKey.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS)) {
						reimbursementDTO.setIsWithDrawn(true);
					}
				}
				Boolean rejectionExistOrNot = acknowledgementDocumentsReceivedService.isRejectionExistOrNot(reimbursementObjectByKey.getKey());
		        reimbursementDTO.setIsRejectionROD(rejectionExistOrNot);
				reimbursementDTO.setFvrCount(intimationService.getFVRCount(reimbursementDTO.getNewIntimationDTO().getKey())); 
				
				Date date21 = new Date();
				loadRRCRequestValues(reimbursementDTO,insuredSumInsured,SHAConstants.CLAIM_REQUEST);
				Date date22 = new Date();
				//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY LOAD RRC REQUEST VALUES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date21,  date22));

				
				if(reimbursementDTO.getPreauthMedicalDecisionDetails().getInvestigatorCode() != null){
					TmpInvestigation tmpInvestigationByInvestigatorCode = investigationService.getTmpInvestigationByInvestigatorCode(reimbursementDTO.getPreauthMedicalDecisionDetails().getInvestigatorCode());
					reimbursementDTO.getPreauthMedicalDecisionDetails().setInvestigatorName(tmpInvestigationByInvestigatorCode);
					reimbursementDTO.getPreauthMedicalDecisionDetails().setInvestigationReviewRemarks(reimbursementObjectByKey.getInvestigatorRemarks());
					reimbursementDTO.getPreauthMedicalDecisionDetails().setInvestigationReportReviewed(true);
				}
		
				String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
				if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
					String get64vbStatus = PremiaService.getInstance().get64VBStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
					if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
						reimbursementDTO.setIsDishonoured(true);
					}  else if(get64vbStatus != null && SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus)) {
						reimbursementDTO.setIsPending(true);
					}
				}
				Date date23 = new Date();
				reimbursementDTO.setSittingsAmount(dbCalculationService.getDialysisAmount(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
				Date date24 = new Date();
				//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY GET DIALYSIS AMOUT PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date23,  date24));

				if(reimbursementObjectByKey.getStatus() != null && !(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.BILLING_REFER_TO_MEDICALA_APPROVER) || reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER))) {
					if(reimbursementDTO.getIsReverseAllocation()) {
						reimbursementDTO.setIsReverseAllocation(false);
					}
				}
		
				 maternity flag
				 * from db
				 
				Date date27 = new Date();
				String maternityFlag=dbCalculationService.getMaternityFlagForProduct(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
				//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY MATERNITY FLAG  PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date27, new Date()));

//				if(maternityFlag.equalsIgnoreCase("Y")){
//					reimbursementDTO.setMaternityFlag(true);
//				}
				
				Date date28 = new Date();
				 Boolean queryReceivedStatusRod = reimbursementQuerySerice.isQueryReceivedStatusRod(reimbursementObjectByKey.getKey());
				 
					log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY QUERY RECEIVED ROD %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));

				 
				 if(queryReceivedStatusRod){
					 reimbursementDTO.setIsQueryReceived(true);
				 }
				
				reimbursementDTO.setIsReverseAllocation(false);
				Date date29 = new Date();
				Map<String, String> popupMessages = dbCalculationService.getPOPUPMessages(reimbursementDTO.getPolicyKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				//log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY POPUP MESSAGE PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));
				reimbursementDTO.setPopupMap(popupMessages);
				
				if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
						&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
					if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
						Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks());
						reimbursementDTO.setSuspiciousPopupMap(suspiciousMap);
					}
				}
				
			    try{
			    	ImsUser imsUser = tableDTO.getImsUser();
			    	
			    	
			    	if(imsUser != null){
			    		String[] userRoleList = imsUser.getUserRoleList();
			    		
			    		WeakHashMap<String, Object> escalateValidation = SHAUtils.getEscalateValidation(userRoleList);
			    		
						if((Boolean)escalateValidation.get(SHAConstants.RMA6)){
							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA6(true);
						}else if((Boolean)escalateValidation.get(SHAConstants.RMA5)){
							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA5(true);
						}
						else if((Boolean) escalateValidation.get(SHAConstants.RMA4)){
							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA4(true);
						}else if((Boolean) escalateValidation.get(SHAConstants.RMA3)){
							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA3(true);
						}else if((Boolean) escalateValidation.get(SHAConstants.RMA2)){
							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA2(true);
						}else if((Boolean) escalateValidation.get(SHAConstants.RMA1)){
							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA1(true);
						} 
			    		
			    	}
			    	
			    }catch(Exception e){
			    	e.printStackTrace();
			    }
				

	//<<<<<<< HEAD
//				reimbursementDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(reimbursementDTO.getNewIntimationDTO().getAdmissionDate(), reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
				Date date15  = new Date();
	//=======

//				reimbursementDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(reimbursementDTO.getNewIntimationDTO().getAdmissionDate(), reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
			    String policyYear = reimbursementDTO.getNewIntimationDTO().getPolicyYear();
			    if(policyYear != null){
			    	String intValue = policyYear.replaceAll("[^0-9]", "");
			    	Integer policyAgeing = SHAUtils.getIntegerFromStringWithComma(intValue);
			    	reimbursementDTO.setAdmissionDatePopup(policyAgeing != null ? policyAgeing.equals(0) ? true : false :false);
			    }
			    
			    

				reimbursementDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey()));
			//	log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY PEQ QUERY SERVICE PED INTIATED %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date15,  new Date()));
				
				reimbursementDTO.setIsPEDInitiatedForBtn(reimbursementDTO.getIsPEDInitiated());
				
				if(reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
						&& reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_INSURED)){
					Date date17 = new Date();
//					Boolean isPedWatchList = pedQueryService.isTaskAvailableInWatchListForIntimation(reimbursementDTO.getNewIntimationDTO().getIntimationId());
					Boolean isPedWatchList = preauthService.getDBTaskForPreauth(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId(), SHAConstants.PED_WATCHLIST_CURRENT_QUEUE);
			//		log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY PEQ WATCH LIST BPMN %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date17,  new Date()));
					reimbursementDTO.setIsPedWatchList(isPedWatchList);
				}
				
				if(reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest() != null && reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest().equalsIgnoreCase("Y")) {
						reimbursementDTO.setIsReconsiderationRequest(true);
				}
				
				List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
				
				reimbursementDTO.setInsuredPedDetails(pedByInsured);
				reimbursementDTO.setSearchFormDTO(tableDTO.getSearchDTO());
				SHAUtils.setDefaultCopayValue(reimbursementDTO);

				if(reimbursementObjectByKey != null && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag().equalsIgnoreCase("Y")) {
					 reimbursementDTO.setRodTotalClaimedAmount(reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d);
				 }

				
				if(reimbursementObjectByKey != null && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag().equalsIgnoreCase("Y")) {
					 reimbursementDTO.setRodTotalClaimedAmount(reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d);
				 }
				
				 if(reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)
						 && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
						 && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
				 
						 if(hospitalById != null){
								Boolean hospitalDiscount = SHAUtils.isHospitalDiscount(hospitalById);
								reimbursementDTO.setIsHospitalDiscountApplicable(hospitalDiscount);
						 }
				 }
				 
				 if(reimbursementDTO.getNewIntimationDTO() != null && reimbursementDTO.getNewIntimationDTO().getInsuredPatient() != null &&
						 reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
						Long claimCount = preauthService.getClaimCount(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
						if(claimCount != null){
							reimbursementDTO.setClaimCount(claimCount);
						}
					}
				 
					Date policyFromDate = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
					
					Date admissionDate = reimbursementDTO.getNewIntimationDTO().getAdmissionDate();
					
				
//					bean.getPolicyDto().getPolicyType();
					Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
					if(diffDays != null && diffDays<90){
						reimbursementDTO.setIs64VBChequeStatusAlert(true);
					}
					reimbursementDTO.setDbOutArray(tableDTO.getDbOutArray());
				view.setProcessClaimRequest(ClaimRequestWizard.class, reimbursementDTO);
			//	log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> SHOW MEDICAL APPROVAL CLAIM REQUEST METHOD ENDED %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(startDate, new Date()));
				System.out.println("---End time of MA Menupresenter---"+System.currentTimeMillis());

<<<<<<< HEAD
			SelectValue selectValue1 = new SelectValue();
			selectValue1.setId(stageByKey2.getKey());
			selectValue1.setValue(stageByKey2.getStageName());
			
			SelectValue selectValue2 = new SelectValue();
			selectValue2.setId(stageByKey3.getKey());
			selectValue2.setValue(stageByKey3.getStageName());
			
			BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
			statusByStage.addBean(selectValue1);
			statusByStage.addBean(selectValue2);
			
			view.setViewDraftInvestigation(SearchDraftInvestigationView.class,
					true, selectValueContainerForCPUCode,claimTypeContainer,selectValueForPriority,statusByStage);
		}
		
		protected void showProcess64VBCompliance(
				@Observes @CDIEvent(MenuItemBean.PROCESS_64_VB_COMPLIANCE) final ParameterDTO parameters) {
			
			/*       >>>>>>>>>>>>>>>>>>>>>For Manual BPMN call<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
					String [] intmationNumber={""};	
					manualBPMNCall(intmationNumber);
				*/
					// System.out.println("Preauth !!!!!!!!!!!!!");
		
//		Commented the below Cashless Screen
//		protected void showProcess64VBCompliance(
//					@Observes @CDIEvent(MenuItemBean.PROCESS_64_VB_COMPLIANCE) final ParameterDTO parameters) {
//					
//					BeanItemContainer<SelectValue> selectValueContainerForIntimationSource = masterService
//							.getSelectValueContainer(ReferenceTable.INTIMATION_SOURCE);
////					BeanItemContainer<SelectValue> selectValueContainerForNetworkHospType = masterService
////							.getSelectValueContainer(ReferenceTable.NETWORK_HOSPITAL_TYPE);
//					BeanItemContainer<SelectValue> selectValueContainerForNetworkHospType = masterService
//							.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
//					BeanItemContainer<SelectValue> selectValueContainerForTreatmentType = masterService
//							.getSelectValueContainer(ReferenceTable.TREATMENT_MANAGEMENT);
//					BeanItemContainer<SelectValue> specialityContainer = preauthService.getSpecialistTypeList();
////					BeanItemContainer<SelectValue> selectValueContainerForType = masterService
////							.getType(ReferenceTable.PROCESS_PREAUTH);
//					
//					BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getStageList();
//
//					BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
//							.getTmpCpuCodes();
//					
//					view.setViewG(SearchProcessVBView.class, true,
//							selectValueContainerForIntimationSource,
//							selectValueContainerForNetworkHospType,
//							selectValueContainerForTreatmentType,
//							selectValueContainerForType,specialityContainer,selectValueContainerForCPUCode, SHAConstants.PROCESS_64VB);
//					// view.setView(SearchProcessVBView.class, true);
//				}
		
		protected void showProcess64Wizard(
				@Observes @CDIEvent(MenuPresenter.SHOW_PROCESS_64_WIZARD) final ParameterDTO parameters) {

			SearchPreauthTableDTO dto = (SearchPreauthTableDTO) parameters.getPrimaryParameter();
			
			Long claimByKey = dto.getClaimKey();
			Claim claimByClaimKey = claimService.getClaimByClaimKey(claimByKey);
			
			VB64ApprovalRequest approvalRequest = preauthService.getProcess64ById(dto.getKey());
			
			if(approvalRequest.getRequestedBy()!=null){
				TmpEmployee employeeName = masterService.getEmployeeName(approvalRequest.getRequestedBy());
				if(employeeName!=null){
					dto.setProcessVBrequestedBy(approvalRequest.getRequestedBy()+ " - " + employeeName.getEmpFirstName());
				}
			}
			if(approvalRequest.getPaymentStatus()!=null){
				dto.setProcessVBpayment(approvalRequest.getPaymentStatus());
			}
			
			if(approvalRequest.getProcessType()!=null){
				dto.setProcessVBtype(approvalRequest.getProcessType());
			}
			
			if(approvalRequest.getRequestorRemarks()!=null){
				dto.setProcessVBRemarksComplaince(approvalRequest.getRequestorRemarks());
			}
			
			if (claimByKey != null) {
				//setClaimValuesToDTO(preauthDTO, claimByKey);
				NewIntimationDto newIntimationDto = intimationService
						.getIntimationDto(claimByClaimKey.getIntimation());

				ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByClaimKey);

				dto.setNewIntimationDTO(newIntimationDto);
				dto.setClaimDto(claimDTO);
			}
			view.setProcess64Wizard(Process64VBview.class, dto);
		}
		
		protected void showProductivityReport(
				@Observes @CDIEvent(MenuItemBean.PRODUCTIVITY_REPORT) final ParameterDTO parameters) {
		
			view.setViewProductivityReport(ProductivityReportView.class, true);
		}
		
		protected void showAutomationDashboard(
				@Observes @CDIEvent(MenuItemBean.AUTOMATION_DASHBOARD) final ParameterDTO parameters) {
		
			view.setViewAutomationDashboard(AutomationDashboardView.class, true);
		}
		
		protected void showPaymentPendingDashboard(
				@Observes @CDIEvent(MenuItemBean.PAYMENT_PENDING_DASHBOARD) final ParameterDTO parameters) {
		
			view.setViewPaymentPendingDashboard(PaymentPendingDashboardView.class, true);
		}
		
		protected void showSearchPinCodeClassMappiing(
				@Observes @CDIEvent(MenuItemBean.PINCODE_CLASS_MAPPING) final ParameterDTO parameters) {
			view.setViewG(SearchPinCodeView.class, true);
	}	
		protected void showUpdatePanCard(
				@Observes @CDIEvent(MenuItemBean.UPDATE_PAN_CARD) final ParameterDTO parameters) {
			view.setViewPanCard(SearchUploadPanCardView.class, true);
		}
		
		//Additional method for CR 023
		protected void showHospitalScoringDetails(
				@Observes @CDIEvent(MenuItemBean.HOSPITAL_SCORING_DETAILS) final ParameterDTO parameters) {
			view.setViewG(HospitalScoringDetailsView.class, true);
		}
		protected void showUploadPanCardDetails(
				@Observes @CDIEvent(MenuPresenter.UPLOAD_PAN_CARD) final ParameterDTO parameters) {
			SearchUploadPanCardTableDTO tableDto = (SearchUploadPanCardTableDTO) parameters
					.getPrimaryParameter();
			
			String intimationNo = tableDto.getIntimationNo();

			if (intimationNo != null) {
				Intimation intimationByNo = intimationService.getIntimationByNo(intimationNo);
				NewIntimationDto newIntimationDto = intimationService.getIntimationDto(intimationByNo);
				tableDto.setNewIntimationDto(newIntimationDto);
				
			}
			view.setUpdatePancardDetails(UpdatePanCardReportView.class,
					true, tableDto);
		}
		
		protected void showUpdateAadharDetails(
				@Observes @CDIEvent(MenuItemBean.UPDATE_AADHAR_DETAILS) final ParameterDTO parameters) {
			view.setUpdateAadhar(SearchUpdateAadharView.class, true);
		}
		
		protected void showUploadBedPhoto(@Observes @CDIEvent(MenuItemBean.UPLOAD_BED_PHOTO) final ParameterDTO parameters){
			view.setUploadBedPhoto(SearchBedPhoto.class,true);
		}
		
		protected void showUpdateAadharDetailsWizard(
				@Observes @CDIEvent(MenuPresenter.UPDATE_AADHAR_DETAILS_WIZARD) final ParameterDTO parameters){
			SearchUpdateAadharTableDTO tableDTO = (SearchUpdateAadharTableDTO) parameters.getPrimaryParameter();
			String intimationNo = tableDTO.getIntimationNo();
			if(intimationNo != null){
				Intimation intimationByNo = intimationService.getIntimationByNo(intimationNo);
				NewIntimationDto newIntimationDto = intimationService.getIntimationDto(intimationByNo);
				tableDTO.setNewIntimationDto(newIntimationDto);
			}
			view.setUpdateAadharDetailsWizard(UpdateAadharDetailsView.class,true,tableDTO);
		}
		
		protected void showProcessConsumerForum(
				@Observes @CDIEvent(MenuItemBean.CONSUMER_FORUM) final ParameterDTO parameters) {
			
			BeanItemContainer<SelectValue> repudiationMasterValueByCode = masterService.getMasterValueByCode(SHAConstants.LEGAL_REPUDIATION);
			BeanItemContainer<SelectValue> tmpZoneList = masterService.getTmpCpuCodeList();
			BeanItemContainer<SelectValue> tmpStateList = masterService.getStateListSelectValue();
			BeanItemContainer<SelectValue> orderMasterValueByCode = masterService.getMasterValueByCode(SHAConstants.LEGAL_ORDER);
			BeanItemContainer<SelectValue> order1MasterValueByCode = masterService.getMasterValueByCode(SHAConstants.LEGAL_ORDER1);
			BeanItemContainer<SelectValue> awardReasonMasterValueByCode = masterService.getMasterValueByCode(SHAConstants.LEGAL_AWARD_REASON);
			BeanItemContainer<SelectValue> depAmtMasterValueByCode = masterService.getMasterValueByCode(SHAConstants.LEGAL_DEP_AMT_SMS);
			BeanItemContainer<SelectValue> caseUpdateMasterValueByCode = masterService.getMasterValueByCode(SHAConstants.LEGAL_CASE_UPDATE);
			BeanItemContainer<SelectValue> recievedFrom = masterService.getMasterValueByCodeAndExcludeKey(SHAConstants.LEGAL_LG_AD,7020L);
			BeanItemContainer<SelectValue> movedTO = masterService.getMasterValueByCodeAndExcludeKey(SHAConstants.LEGAL_LG_AD,7020L);
			BeanItemContainer<SelectValue> statusCase = masterService.getMasterValueByCode(SHAConstants.LEGAL_LG_CASE_STATUS);
			
			view.setViewsProcessConsumerForum(SearchProcessConsumerForumView.class,repudiationMasterValueByCode,tmpZoneList,tmpStateList,
					orderMasterValueByCode,order1MasterValueByCode,awardReasonMasterValueByCode,depAmtMasterValueByCode,caseUpdateMasterValueByCode,
					recievedFrom,movedTO,statusCase);
			/*view.setViewsPAProcessClaimBilling(PASearchProcessClaimBillingView.class,
					true, selectValueContainerForCPUCode, productNameCode,selectValueContainerForType,selectValueForPriority,statusByStage,selectValueContainerForBenefits);*/
		}
//>>>>>>> legal
		
		protected void showProcessAdvocateNotice(
				@Observes @CDIEvent(MenuItemBean.ADVOCATE_NOTICE) final ParameterDTO parameters) {
			BeanItemContainer<SelectValue> repudiationMasterValueByCode = masterService.getMasterValueByCode(SHAConstants.LEGAL_REPUDIATION);
			BeanItemContainer<SelectValue> moveToMasterValueByCode = masterService.getMasterValueByCodeAndExcludeKey(SHAConstants.LEGAL_LG_AD,7022L);
			BeanItemContainer<SelectValue> pendingMasterValueByCode = masterService.getMasterValueByCode(SHAConstants.LEGAL_ADV_PENDING_LEVEL);
			BeanItemContainer<SelectValue> recievedFrom = masterService.getMasterValueByCodeAndExcludeKey(SHAConstants.LEGAL_LG_AD,7022L);
			view.setViewsProcessAdvocateNotice(SearchProcessAdvocateNoticeView.class,repudiationMasterValueByCode,moveToMasterValueByCode,pendingMasterValueByCode,recievedFrom);
			/*view.setViewsPAProcessClaimBilling(PASearchProcessClaimBillingView.class,
					true, selectValueContainerForCPUCode, productNameCode,selectValueContainerForType,selectValueForPriority,statusByStage,selectValueContainerForBenefits);*/
		}
		
		
		protected void showProcessAdvocateFee(
				@Observes @CDIEvent(MenuItemBean.ADVOCATE_FEE) final ParameterDTO parameters) {
			BeanItemContainer<SelectValue> repudiationMasterValueByCode = masterService.getMasterValueByCode(SHAConstants.LEGAL_REPUDIATION);
			BeanItemContainer<SelectValue> tmpZoneList = masterService.getTmpCpuCodeList();
			view.setViewsProcessAdvocateFee(SearchProcessAdvocateFeeView.class,repudiationMasterValueByCode,tmpZoneList);
			/*view.setViewsPAProcessClaimBilling(PASearchProcessClaimBillingView.class,
					true, selectValueContainerForCPUCode, productNameCode,selectValueContainerForType,selectValueForPriority,statusByStage,selectValueContainerForBenefits);*/
		}
		
		protected void showProcessOmbudsman(
				@Observes @CDIEvent(MenuItemBean.OMBUDSMAN) final ParameterDTO parameters) {
			
			BeanItemContainer<SelectValue> repudiationMasterValueByCode = masterService.getMasterValueByCode(SHAConstants.LEGAL_REPUDIATION);
			BeanItemContainer<SelectValue> statusoftheCase =  masterService.getMasterValueByCode(SHAConstants.LEGAL_CASE_STATUS);
			BeanItemContainer<SelectValue> ombudsmanDetailsByDesc = masterService.getOmbudsmanDetailsByDesc();
			BeanItemContainer<SelectValue> hearingStatus = masterService.getMasterValueByCode(SHAConstants.LEGAL_HEARING);
			BeanItemContainer<SelectValue> awardStatus = masterService.getMasterValueByCode(SHAConstants.LEGAL_AWARD_STATUS);
			BeanItemContainer<SelectValue> compromiseStatus = masterService.getMasterValueByCode(SHAConstants.LEGAL_COMPROMISE);
			BeanItemContainer<SelectValue> addDays = masterService.getMasterValueByCode(SHAConstants.LEGAL_ADD_DAYS);
			BeanItemContainer<SelectValue> pendingLevel = masterService.getMasterValueByCode(SHAConstants.LEGAL_PENDING_LEVEL);
			BeanItemContainer<SelectValue> decision = masterService.getMasterValueByCode(SHAConstants.LEGAL_DECISION);
			BeanItemContainer<SelectValue> recievedFrom = masterService.getMasterValueByCodeAndExcludeKey(SHAConstants.LEGAL_LG_AD,7019L);
			BeanItemContainer<SelectValue> movedTO = masterService.getMasterValueByCodeAndExcludeKey(SHAConstants.LEGAL_LG_AD,7019L);
			BeanItemContainer<SelectValue> grievanceOutcome = masterService.getMasterValueByCode(SHAConstants.LEGAL_LG_OBG);
			
			view.setViewsProcessOmbudsman(SearchProcessOmbudsmanView.class,repudiationMasterValueByCode,statusoftheCase,
					ombudsmanDetailsByDesc,addDays,pendingLevel,hearingStatus,awardStatus,compromiseStatus,decision,recievedFrom,movedTO,grievanceOutcome);

			/*view.setViewsPAProcessClaimBilling(PASearchProcessClaimBillingView.class,
					true, selectValueContainerForCPUCode, productNameCode,selectValueContainerForType,selectValueForPriority,statusByStage,selectValueContainerForBenefits);*/
		}
		protected void showSearchFileStorage(
				@Observes @CDIEvent(MenuItemBean.WAR_HOUSE) final ParameterDTO parameters) {

			view.setFileStorageSearch(SearchDataEntryView.class, true);
		}
		
		
		protected void showDataEntryDetailsPage(
			@Observes @CDIEvent(MenuPresenter.SHOW_DATA_ENTRY_DETAILS) final ParameterDTO parameters) {

		SearchDataEntryTableDTO tableDTO = (SearchDataEntryTableDTO) parameters
				.getPrimaryParameter();
		String addFlag = parameters.getSecondaryParameter(1, String.class);

		if (addFlag != null
				&& addFlag.equalsIgnoreCase(SHAConstants.ADD_DATA_ENTRY)) {
			tableDTO.setAddFlag(true);
		} else {
			tableDTO.setAddFlag(false);
		}

		if (!tableDTO.getAddFlag()) {
			if (tableDTO.getKey()!= null) {
				List<ChequeDetails> chequeList = dataEntryService
						.getChequeDetails(tableDTO.getKey());
				if (chequeList != null && !chequeList.isEmpty()) {
					tableDTO.setChequeList(SearchDataEntryMapper.getInstance()
							.getChequeList(chequeList));
				}
			}
		}
		MasClient client = dataEntryService.getClient();
		if(client != null){
			tableDTO.setClient(client.getClientDesc());	
		}
		
		/*if (tableDTO.getLocation() != null && !tableDTO.getLocation().isEmpty()) {
			MasStorageLocation loc = dataEntryService
					.getStorageLocationByDesc(tableDTO.getLocation());
			if (loc != null) {
				SelectValue location = new SelectValue();
				location.setId(loc.getKey());
				location.setValue(loc.getStorageDesc());

				tableDTO.setSelectLocation(location);

			}
		}
		
		if (tableDTO.getShelfNo() != null && !tableDTO.getShelfNo().isEmpty()) {
			MasShelf shelf = dataEntryService
					.getAdditionalShelf(tableDTO.getShelfNo());
			if (shelf != null) {
				SelectValue shelfValue = new SelectValue();
				shelfValue.setId(shelf.getKey());
				shelfValue.setValue(shelf.getShelfDesc());

				tableDTO.setSelectShelf(shelfValue);

			}
		}
		
		if (tableDTO.getRackNo() != null && !tableDTO.getRackNo().isEmpty()) {
			MasRack rack = dataEntryService
					.getRackByDesc(tableDTO.getRackNo());
			if (rack != null) {
				SelectValue rackValue = new SelectValue();
				rackValue.setId(rack.getKey());
				rackValue.setValue(rack.getRackDesc());

				tableDTO.setSelectRack(rackValue);

			}
		}
		*/
		
		

		Map<String, Object> containerMap = new HashMap<String, Object>();
		
		
		if(tableDTO.getUsername() != null){
			List<Long> cpuList = usertoCPUMapService.getUserCpuList(tableDTO.getUsername());
			if(cpuList != null && !cpuList.isEmpty()){
					containerMap.put(SHAConstants.DATA_ENTRY_LOCATION_CONTAINER,
							masterService.getStorageLocationList(cpuList));
				}
			}
		List<Long> storageKeyList = new ArrayList<Long>();
		if(containerMap.get(SHAConstants.DATA_ENTRY_LOCATION_CONTAINER) != null){
			BeanItemContainer<SelectValue> mastersValueContainer = (BeanItemContainer<SelectValue>)containerMap.get(SHAConstants.DATA_ENTRY_LOCATION_CONTAINER);
			if(mastersValueContainer != null){
				if(mastersValueContainer.getItemIds() != null){
					List<SelectValue> selectValuesList = mastersValueContainer.getItemIds();
					if(selectValuesList != null){
						
						for (SelectValue selectValue : selectValuesList) {
							storageKeyList.add(selectValue.getId());
							
						}
					}
				}
					
			}
		}
		
		
		/*if(tableDTO.getSelectLocation() == null){
			if(storageKeyList != null && !storageKeyList.isEmpty()){
				containerMap.put(SHAConstants.DATA_ENTRY_RACK_CONTAINER,
						masterService.getRackList(storageKeyList));	
			}
		}else*/if(tableDTO.getSelectLocation() != null){
			containerMap.put(SHAConstants.DATA_ENTRY_RACK_CONTAINER,
					masterService.getRackListByLocation(tableDTO.getSelectLocation().getId()));
		}
		
		List<Long> rackKeyList = new ArrayList<Long>();
		if(containerMap.get(SHAConstants.DATA_ENTRY_RACK_CONTAINER) != null){
			BeanItemContainer<SelectValue> mastersValueContainer1 = (BeanItemContainer<SelectValue>)containerMap.get(SHAConstants.DATA_ENTRY_RACK_CONTAINER);
			if(mastersValueContainer1 != null){
				if(mastersValueContainer1.getItemIds() != null){
					List<SelectValue> selectValuesList1 = mastersValueContainer1.getItemIds();
					if(selectValuesList1 != null){
						
						for (SelectValue selectValue : selectValuesList1) {
							rackKeyList.add(selectValue.getId());
							
						}
					}
				}
					
			}
		}
		
		
		/*if(tableDTO.getSelectRack() == null){
			if(rackKeyList != null && !rackKeyList.isEmpty()){
				containerMap.put(SHAConstants.DATA_ENTRY_SHELF_CONTAINER,
						masterService.getShelfList(rackKeyList));	
			}
			
		}else*/if(tableDTO.getSelectRack() != null){
			containerMap.put(SHAConstants.DATA_ENTRY_SHELF_CONTAINER,
					masterService.getShelfListByRack(tableDTO.getSelectRack().getId()));
		}
		
		
		

		tableDTO.setDataSourcesMap(containerMap);

		if (tableDTO.getRejectStatus() != null) {
			if (tableDTO.getRejectStatus().equalsIgnoreCase(
					SHAConstants.YES_FLAG))
				tableDTO.setIsRejectStatus(true);
			else if (tableDTO.getRejectStatus().equalsIgnoreCase(
					SHAConstants.N_FLAG))
				tableDTO.setIsRejectStatus(false);
		}
		if (tableDTO.getCheckInOutStatus() != null) {
			if (tableDTO.getCheckInOutStatus().equalsIgnoreCase(
					SHAConstants.YES_FLAG))
				tableDTO.setIsCheckInOutStatus(true);
			else if (tableDTO.getCheckInOutStatus().equalsIgnoreCase(
					SHAConstants.N_FLAG))
				tableDTO.setIsCheckInOutStatus(false);
		}
		
		if(tableDTO.getClaimNo() != null){
			String sequence = tableDTO.getClaimNo();
			tableDTO.setClaimSeqNo(sequence);
			/*if(sequence.length() == 6){
				tableDTO.setClaimSeqNo(sequence);
			}else if(sequence.length() > 6){
				tableDTO.setClaimSeqNo(sequence.substring(sequence.length() - 6));
			}*/
			
		}

		view.setProcessDataEntryWizard(ProcessDataEntryWizardViewImpl.class,
				tableDTO);
	}
		
	protected void showFileDetailsReport(
			@Observes @CDIEvent(MenuItemBean.FILE_DETAILS_REPORT) final ParameterDTO parameters) {

		view.setViewFileDetailsReport(FileDetailsReportView.class, true);

	}

		
		/*protected void showPANonHospFinancialClaimBillingWizard(
				@Observes @CDIEvent(MenuPresenter.SHOW_PA_NON_HOSP_FINANCIAL_APPROVAL_CLAIM_BILLING_SCREEN) final ParameterDTO parameters) {

			SearchProcessClaimFinancialsTableDTO tableDTO = (SearchProcessClaimFinancialsTableDTO) parameters
					.getPrimaryParameter();

			Long ackDocKey = createRodService
					.getLatestDocAcknowledgementKey(tableDTO.getRodKey());
			
<<<<<<< HEAD
			DocAcknowledgement docAcknowledgment = createRodService
					.getDocAcknowledgementBasedOnKey(ackDocKey);
			
			showPANonHospFinancialProcessClaimBillingWizard(tableDTO);
		}*/
		
		protected void showPANonHospFinancialProcessClaimBillingWizard(
				SearchProcessClaimFinancialsTableDTO tableDTO) {/*

			Reimbursement reimbursementObjectByKey = rodService
					.getReimbursementObjectByKey(tableDTO.getRodKey());
			List<UploadDocumentDTO> rodSummaryDetails = rodService
					.getRODSummaryDetails(reimbursementObjectByKey.getKey());

			
			
			
			
			ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
//			ZonalMedicalReviewMapper.getAllMapValues();
			PreauthDTO reimbursementDTO = mapper
					.getReimbursementDTO(reimbursementObjectByKey);
			
			
			if(("Y").equalsIgnoreCase(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getReconsiderationRequest()))
			{
				List<ReconsiderRODRequestTableDTO> reconsiderDTOList = getReconsiderRODRequestForBillEntry(tableDTO.getRodKey());
				if(null != reconsiderDTOList && !reconsiderDTOList.isEmpty())
				{
					for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderDTOList) {
						if(null != reconsiderRODRequestTableDTO.getIsRejectReconsidered() && reconsiderRODRequestTableDTO.getIsRejectReconsidered())
						{
							reimbursementDTO.setIsRejectReconsidered(true);
						}
						else
						{
							reimbursementDTO.setIsRejectReconsidered(false);
						}
					}
				}
				reimbursementDTO.setReconsiderRodRequestList(getReconsiderRODRequestForBillEntry(tableDTO.getRodKey()));
			}
			

			Claim claimByKey = reimbursementObjectByKey.getClaim();
			
			if(null != claimByKey)
			{
				if(null != reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId())
				{
					String  docReceivedFrom = reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getValue();
					reimbursementDTO.setPreviousAccountDetailsList(populatePreviousAccountDetails(claimByKey.getIntimation().getIntimationId(),docReceivedFrom));
				}
			}
			
			reimbursementDTO
					.setReconsiderationList(getReconsiderRODRequest(claimByKey));

			setCategoryFlag(reimbursementObjectByKey, reimbursementDTO);
			

			if (!reimbursementDTO.getHospitalizaionFlag()) {
				reimbursementDTO = setHospitalizationAmount(reimbursementDTO);
			}

			reimbursementDTO = setReimbursmentTOPreauthDTO(mapper, claimByKey,
					reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.FINANCIAL);
			reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
					reimbursementObjectByKey.getKey());
			
			reimbursementDTO.setBillingApprovedDate(reimbursementObjectByKey.getBillingCompletedDate());

			// Added for amount claimed table enhancement --- stops
			DBCalculationService dbCalculationService = new DBCalculationService();
			Double insuredSumInsured = dbCalculationService.getInsuredSumInsured(
					reimbursementDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), reimbursementDTO
							.getPolicyDto().getKey());

			Map<Integer, Object> detailsMap = new HashMap<Integer, Object>();
			

			if(reimbursementObjectByKey.getSectionCategory() != null){
				
				
				detailsMap = dbCalculationService
						.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
								.getProduct().getKey(), insuredSumInsured,
								reimbursementDTO.getNewIntimationDTO().getHospitalDto()
										.getRegistedHospitals().getCityClass(),
								reimbursementDTO.getNewIntimationDTO()
										.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
			}else{
				
				Long sectionCategory = 0l;
				if(reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.STAR_CARDIAC_CARE_POLICY) || reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.DIABETES_INDIVIDUAL_POLICY) || reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.DIABETES_FLOATER_POLICY))
				{
					sectionCategory = 1l;
				}
				
				detailsMap = dbCalculationService
						.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
								.getProduct().getKey(), insuredSumInsured,
								reimbursementDTO.getNewIntimationDTO().getHospitalDto()
										.getRegistedHospitals().getCityClass(),
								reimbursementDTO.getNewIntimationDTO()
										.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,"0");
			}
			
			
//			if(detailsMap != null && detailsMap.get(15) != null){
//				reimbursementDTO.setAmbulanceLimitAmount((Double)detailsMap.get(15));
//			}
			
			List<Double> copayValue = dbCalculationService.getProductCoPay(reimbursementDTO
					.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
					.getKey(), reimbursementDTO.getClaimDTO().getNewIntimationDto()
					.getInsuredPatient().getKey(),reimbursementDTO.getClaimDTO().getNewIntimationDto()
					.getInsuredPatient().getInsuredId());
			reimbursementDTO.setProductCopay(copayValue);

			List<Long> documentSummaryKeys = new ArrayList<Long>();
			
			*//**
			 * Fix for implemeting claims dms in bill entry screen.. -- starts
			 * **//*
			if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
			{
				for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
					if(null != claimByKey)
					{
						uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
						uploadDocumentDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
					}
				}
			}
			
			*//**
			 * Added for enabling view documents in preauth screen while raising query -- fix starts.
			 * *//*
			if(null != claimByKey)
			{
				reimbursementDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
			}
			*//**
			 * Added for enabling view documents in preauth screen while raising query -- fix ends
			 * *//*

			for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
				
				if(null != reimbursementObjectByKey)
				{
					uploadDocumentDTO.setIntimationNo(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId());
					uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfAdmission()));
					uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfDischarge()));
					uploadDocumentDTO.setInsuredPatientName(reimbursementObjectByKey.getClaim().getIntimation().getInsuredPatientName());
				}
				
				documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
				uploadDocumentDTO.setStatus(true);
				List<RODBillDetails> billEntryDetails = rodService
						.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
				List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
				if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
					for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
						
						 * <<<<<<< HEAD
						 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
						 * uploadDocumentDTO)); =======
						 
						dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
								uploadDocumentDTO));
						// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
					}
				}
				
				 * uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
				 * .get(8));
				 
				uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
						.get(8));
				uploadDocumentDTO
						.setProductBasedICURent((Double) detailsMap.get(9));
				uploadDocumentDTO.setProductBasedAmbulanceAmt((Double) detailsMap
						.get(15));
				uploadDocumentDTO.setProductBasedAmbulanceAmt(getProductBasedAmbulanceAmt(tableDTO.getRodKey()));
				uploadDocumentDTO.setStatus(false);
				uploadDocumentDTO.setBillEntryDetailList(dtoList);
				uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
				uploadDocumentDTO.setRodKey(reimbursementObjectByKey.getKey());

				uploadDocumentDTO.setStrUserName(tableDTO.getUsername());
			}
			List<UploadDocumentDTO> rodBillSummaryDetails = rodService
					.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);
			if(rodBillSummaryDetails != null){
			for (UploadDocumentDTO uploadDocumentDTO : rodBillSummaryDetails) {
				uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
			}
			}
			reimbursementDTO.getUploadDocDTO().setBillingWorkSheetUploadDocumentList(rodBillSummaryDetails);

			Double totalBilledAmount = reimbursementService
					.getTotalBilledAmount(documentSummaryKeys);
			reimbursementDTO.setAmountConsidered(totalBilledAmount != null ? String
					.valueOf(totalBilledAmount.intValue()) : "0");
			reimbursementDTO
					.setInitialAmountConsidered(totalBilledAmount != null ? String
							.valueOf(totalBilledAmount.intValue()) : "0");
			reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
			reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
			reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
			reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
			reimbursementDTO.setStrUserName(tableDTO.getUsername());
			reimbursementDTO.setStrPassword(tableDTO.getPassword());
			reimbursementDTO.setTaskNumber(tableDTO.getTaskNumber());
			// Added for amount claimed table enhancement --- stops

			Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
					.getIntimation().getHospital());
			ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
					.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
			if(hospitalById != null){
				
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalState(hospitalById.getState());
				updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
				updateHospitalDetails.setHospitalName(hospitalById.getName());
				updateHospitalDetails.setPanNumber(hospitalById.getPanNumber());
				updateHospitalDetails.setHospitalAddress1(hospitalById.getAddress());
				updateHospitalDetails.setHopitalRegNumber(hospitalById.getRegistrationNumber());
				updateHospitalDetails.setHospitalPhoneNo(hospitalById.getPhoneNumber());
				updateHospitalDetails.setHospitalTypeId(hospitalById.getHospitalType().getKey());
				updateHospitalDetails.setInpatientBeds(hospitalById.getInpatientBeds() != null ? hospitalById
						.getInpatientBeds().toString() : "");
				
			}
			
			UploadDocumentDTO reimbursementBenefitsValue = claimRequestBenefitsService
					.getReimbursementBenefitsValue(reimbursementObjectByKey
							.getKey());

			setReimbursementValues(reimbursementObjectByKey, reimbursementDTO);
			
			
			paymentDetailsForfinancial(reimbursementObjectByKey, reimbursementDTO,
					hospitalById);
	        
			if (reimbursementBenefitsValue != null) {
				reimbursementDTO.getPreauthDataExtractionDetails()
						.setUploadDocumentDTO(reimbursementBenefitsValue);
			}
			if (null != reimbursementBenefitsValue
					&& reimbursementBenefitsValue.getPatientCareBenefitFlag() != null
					&& reimbursementBenefitsValue.getPatientCareBenefitFlag()
							.equalsIgnoreCase("PC")) {
				List<ReimbursementBenefitsDetails> patientCareTableByBenefitKey = reimbursementService
						.getPatientCareTableByBenefitKey(reimbursementBenefitsValue
								.getPatientBenefitKey());
				List<PatientCareDTO> patientCareDTOList = new ArrayList<PatientCareDTO>();
				if (patientCareTableByBenefitKey != null
						&& !patientCareTableByBenefitKey.isEmpty()) {
					for (ReimbursementBenefitsDetails patientCareDetails : patientCareTableByBenefitKey) {
						PatientCareDTO dto = new PatientCareDTO();
						dto.setEngagedFrom(patientCareDetails.getEngagedFrom());
						dto.setEngagedTo(patientCareDetails.getEngagedTo());
						dto.setKey(patientCareDetails.getKey());
						patientCareDTOList.add(dto);
					}
				}
				reimbursementDTO.getPreauthDataExtractionDetails()
						.getUploadDocumentDTO()
						.setPatientCareDTO(patientCareDTOList);
			}

			List<AddOnBenefitsDTO> populateAddOnBenefitsTableValues = claimRequestBenefitsService
					.populateAddOnBenefitsTableValues(
							reimbursementDTO.getNewIntimationDTO(),
							reimbursementObjectByKey.getClaim().getKey(),
							reimbursementObjectByKey.getKey(),
							reimbursementDTO.getProductCopay(),null);

			reimbursementDTO.getPreauthDataExtractionDetails()
					.setAddOnBenefitsDTOList(populateAddOnBenefitsTableValues);

			List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
					.search(reimbursementObjectByKey.getClaim().getKey(),false);

			List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
			for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {

				previousPreAuthTableDTO.setRequestedAmt(preauthService
						.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
								previousPreAuthTableDTO.getClaimKey()));
				newList.add(previousPreAuthTableDTO);
			}

			reimbursementDTO.setPreviousPreauthTableDTO(newList);

			reimbursementDTO.setBillingApprovedAmount(reimbursementObjectByKey
					.getBillingApprovedAmount());

			Reimbursement hospitalizationROD = getHospitalizationROD(
					reimbursementObjectByKey.getClaim().getKey(),
					reimbursementObjectByKey);
			Reimbursement partialHospitalizationROD = getPartialHospitalizationROD(
					reimbursementObjectByKey.getClaim().getKey(),
					reimbursementObjectByKey);

			DocAcknowledgement docAcknowledgement = reimbursementObjectByKey
					.getDocAcknowLedgement();
			String hospitalFlag = null;
			String partialHospitalFlag = null;
			if (docAcknowledgement != null
					&& docAcknowledgement.getHospitalisationFlag() != null) {
				hospitalFlag = docAcknowledgement.getHospitalisationFlag();
				partialHospitalFlag = docAcknowledgement.getPartialHospitalisationFlag();
			}
			if (hospitalFlag != null && !hospitalFlag.equalsIgnoreCase("Y") && partialHospitalFlag != null && !partialHospitalFlag.equalsIgnoreCase("Y")) {
				if ((hospitalizationROD != null
						&& hospitalizationROD.getStatus() != null
						&& !ReferenceTable.FINANCIAL_APPROVE_STATUS
								.equals(hospitalizationROD.getStatus().getKey()) && !ReferenceTable.getPaymentStatus().containsKey(hospitalizationROD.getStatus().getKey())) ) {
					reimbursementDTO.setIsHospitalizationRODApproved(false);
				}
				
				if(partialHospitalizationROD != null
						&& partialHospitalizationROD.getStatus() != null
						&& ReferenceTable.FINANCIAL_APPROVE_STATUS
								.equals(partialHospitalizationROD.getStatus().getKey()) && ReferenceTable.getPaymentStatus().containsKey(partialHospitalizationROD.getStatus().getKey())) {
					reimbursementDTO.setIsHospitalizationRODApproved(true);
				}
			}
			

			if (reimbursementObjectByKey.getDocAcknowLedgement()
					.getHospitalizationRepeatFlag() != null
					&& reimbursementObjectByKey.getDocAcknowLedgement()
							.getHospitalizationRepeatFlag().toLowerCase()
							.equalsIgnoreCase("y")) {
				reimbursementDTO.setIsHospitalizationRepeat(true);
			}
			
			
			reimbursementDTO.getPreauthDataExtractionDetails()
					.setDocAckknowledgement(
							reimbursementObjectByKey.getDocAcknowLedgement());
			reimbursementDTO.getPreauthMedicalDecisionDetails().setApprovalRemarks(
					"");

			String specialityName = claimService
					.getSpecialityName(reimbursementObjectByKey.getClaim().getKey());

			reimbursementDTO.setSpecialityName(specialityName);
	        
			String remedicalRemarks = null;
			String rebillingRemarks = null;
			Long latestMedicalApproverKey = reimbursementService.getLatestMedicalApproverKey(reimbursementObjectByKey.getKey());
			if(latestMedicalApproverKey != null){
				MedicalApprover medicalApproverByKey = reimbursementService.getMedicalApproverByKey(latestMedicalApproverKey);
				if(medicalApproverByKey != null){
					reimbursementDTO.setIsReMedical(true);
					remedicalRemarks = medicalApproverByKey.getApproverReply();
				}
			}
			Long latestApproverKey = reimbursementService.getLatestMedicalApproverForRebilling(reimbursementObjectByKey.getKey());
			if(latestApproverKey != null){
				MedicalApprover medicalApproverByKey = reimbursementService.getMedicalApproverByKey(latestApproverKey);
				if(medicalApproverByKey != null){
					reimbursementDTO.setIsReBilling(true);
					rebillingRemarks = medicalApproverByKey.getApproverReply();
				}
			}
			
			reimbursementDTO.getPreauthDataExtractionDetails().setBillingRemarks(rebillingRemarks);
			reimbursementDTO.getPreauthDataExtractionDetails().setMedicalRemarks(remedicalRemarks);
			reimbursementDTO.setFvrCount(intimationService.getFVRCount(reimbursementDTO.getNewIntimationDTO().getKey())); 
			
			if (claimByKey.getClaimType() != null
					&& claimByKey.getClaimType().getKey()
							.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {

				
				Preauth previousPreauth = getPreviousPreauth(claimByKey.getKey());
				
				reimbursementDTO.setIsCashlessType(true);
				
				if(previousPreauth != null) {
					reimbursementDTO.setPreauthKey(previousPreauth.getKey());
				}
			}
			
			reimbursementDTO = getProrataFlagFromProduct(reimbursementDTO);
			reimbursementDTO.setProrataDeductionFlag(reimbursementObjectByKey.getProrataDeductionFlag());
			*//**
			 * product based variable is added to enable or disable the component in page level.
			 * This would be static. -- starts
			 * *//*
			reimbursementDTO.setPackageAvailableFlag(reimbursementObjectByKey.getPackageAvailableFlag());

			loadRRCRequestValues(reimbursementDTO,insuredSumInsured,SHAConstants.RRC_FINANCIAL);
			
			

			if (reimbursementDTO.getClaimKey() != null) {
				List<Investigation> investigationList = investigationService
						.getByInvestigationByClaimKey(reimbursementDTO.getClaimKey());
				if (investigationList != null && investigationList.size() >= 0) {
					reimbursementDTO.setInvestigationSize(investigationList.size());
				} else {
					reimbursementDTO.setInvestigationSize(0);
				}
			}

			reimbursementDTO.setSittingsAmount(dbCalculationService.getDialysisAmount(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
			Map<String, Integer> productBenefitFlag = dbCalculationService.getProductBenefitFlag(reimbursementObjectByKey.getClaim().getKey(), reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey());
//				
			if(productBenefitFlag.get(SHAConstants.PRE_HOSP_FLAG).equals(0)) {
				reimbursementDTO.setIsPreHospApplicable(false);
			}
			
			if(productBenefitFlag.get(SHAConstants.POST_HOSP_FLAG).equals(0)) {
				reimbursementDTO.setIsPostHospApplicable(false);
			}
			
			if(productBenefitFlag.get(SHAConstants.LUMP_SUM_FLAG).equals(1)) {
				reimbursementDTO.setIsLumpsumApplicable(true);
			}
			
			if(productBenefitFlag.get(SHAConstants.HOSPITALCASH_FLAG).equals(1)) {
				reimbursementDTO.setIsHospitalCashApplicable(true);
			}
			
			if(productBenefitFlag.get(SHAConstants.PATIENTCARE_FLAG).equals(1)) {
				reimbursementDTO.setIsPatientCareApplicable(true);
			}
			
			
				if((!reimbursementDTO.getHospitalizaionFlag() && !reimbursementDTO.getPartialHospitalizaionFlag()) && ! reimbursementDTO.getPostHospitalizaionFlag() && reimbursementDTO.getPreHospitalizaionFlag()
						&& productBenefitFlag.get(SHAConstants.PRE_HOSP_FLAG).equals(0)) {
					reimbursementDTO.setIsDishonoured(true);
				} else if((!reimbursementDTO.getHospitalizaionFlag() && !reimbursementDTO.getPartialHospitalizaionFlag()) && ! reimbursementDTO.getPreHospitalizaionFlag() && reimbursementDTO.getPostHospitalizaionFlag()
						&& productBenefitFlag.get(SHAConstants.POST_HOSP_FLAG).equals(0)) {
					reimbursementDTO.setIsDishonoured(true);
				}

			
			if((!reimbursementDTO.getHospitalizaionFlag() && !reimbursementDTO.getPartialHospitalizaionFlag()) &&
					! reimbursementDTO.getIsPreHospApplicable() && ! reimbursementDTO.getIsPostHospApplicable()){
				reimbursementDTO.setIsDishonoured(true);
			}
			
			// If hospitalization is not processed then remaining ROD should be rejected.
			Reimbursement hospROD = reimbursementService.getHospitalizationROD(reimbursementObjectByKey.getClaim().getKey());
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)) {
				if(hospROD == null) {
//					reimbursementDTO.setIsDishonoured(true);
					reimbursementDTO.setIsHospitalizationRejected(true);
				}
			}
			
			Reimbursement hospitalizationOrPartialROD = reimbursementService.getHospitalizationOrPartialROD(reimbursementObjectByKey.getClaim().getKey());
			
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				
				Integer seqNumber = 0;
				
				if(reimbursementObjectByKey.getRodNumber() != null){
					String[] split = reimbursementObjectByKey.getRodNumber().split("/");
					seqNumber = Integer.valueOf(split[split.length - 1]);
				}
				
				if(hospitalizationOrPartialROD == null && ! seqNumber.equals(1)) {
					reimbursementDTO.setIsDishonoured(true);
					reimbursementDTO.setIsHospitalizationRejected(true);
				}
				
				if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY)){
					reimbursementDTO.setIsByPass(true);
				}
				
			}
			
			Map<String, String> popupMessages = dbCalculationService.getPOPUPMessages(reimbursementDTO.getPolicyKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			reimbursementDTO.setPopupMap(popupMessages);
			
			if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
					&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
				if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
					Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks());
					reimbursementDTO.setSuspiciousPopupMap(suspiciousMap);
				}
			}
			
			if(reimbursementObjectByKey.getNatureOfTreatment() != null 
					&& reimbursementObjectByKey.getNatureOfTreatment().getKey().equals(ReferenceTable.NON_ALLOPATHIC_ID) &&
					ReferenceTable.isNonAllopathicApplicableProduct(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				reimbursementDTO.setIsDishonoured(true);
			}
			
			String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
			if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
				String get64vbStatus = PremiaService.getInstance().get64VBStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
				if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
					reimbursementDTO.setIsDishonoured(true);
				}  else if(get64vbStatus != null && SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus)) {
					reimbursementDTO.setIsPending(true);
				}
			}
			reimbursementDTO = checkFinalEnhancement(reimbursementDTO);
			
			MastersValue networkHospitalType = masterService.getMaster(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNetworkHospitalTypeId());
			reimbursementDTO.setNetworkHospitalType(networkHospitalType.toString());
			
			// Below stuff for Mulitple Room rent or ICU...........
			reimbursementDTO = SHAUtils.roomRentNursingMapping(reimbursementDTO, 8l, 9l, false);
			reimbursementDTO = SHAUtils.roomRentNursingMapping(reimbursementDTO, 10l, 11l, true);
			
			List<BillItemMapping> mappingData = reimbursementService.getMappingData(reimbursementObjectByKey.getKey());
			SHAUtils.fillMappingData(reimbursementDTO, mappingData, false);
			
			try {
				if(reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest() != null && reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest().equalsIgnoreCase("Y")) {
					if(reimbursementObjectByKey.getDocAcknowLedgement().getPaymentCancellationFlag() !=  null && reimbursementObjectByKey.getDocAcknowLedgement().getPaymentCancellationFlag().equalsIgnoreCase("N")) {
						reimbursementDTO.setIsReconsiderationRequest(true);
						if(reimbursementService.isClaimPaymentAvailable(reimbursementObjectByKey.getRodNumber())) {
							Double claimPaymentAmountByRODNumber = reimbursementService.getClaimPaymentAmountByRODNumber(reimbursementObjectByKey.getRodNumber());
							reimbursementDTO.setClaimPaymentAmount(claimPaymentAmountByRODNumber);
						} else {
							reimbursementDTO.setIsReconsiderationRequest(false);
						}
						
					}
				}
			} catch(Exception e) {
				e.printStackTrace();
			}
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				reimbursementDTO.setIsCashlessType(true);
			}
			if(reimbursementDTO.getIsCashlessType() && reimbursementDTO.getHospitalizaionFlag() && (reimbursementDTO.getStatusKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY)|| reimbursementDTO.getStatusKey().equals(ReferenceTable.PROCESS_CLAIM_FINANCIAL_DISAPPROVE_REJECT_STATUS))){
				reimbursementDTO.setIsDirectToFinancial(true);
				Preauth latestPreauth = reimbursementService.getLatestPreauthByClaim(reimbursementDTO.getClaimDTO().getKey());
				reimbursementDTO.getClaimDTO().setLatestPreauthKey(latestPreauth.getKey());
			}
			reimbursementDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey()));
			reimbursementDTO.setIsPEDInitiatedForBtn(reimbursementDTO.getIsPEDInitiated());
			
			
			
			if(reimbursementDTO.getIsReconsiderationRequest() != null && !reimbursementDTO.getIsReconsiderationRequest() && reimbursementObjectByKey != null) {
				Boolean paymentAvailable = reimbursementService.isPaymentAvailable(reimbursementObjectByKey.getRodNumber());
				reimbursementDTO.setIsPaymentAvailable(paymentAvailable);
				reimbursementDTO.setIsPaymentAvailableShown(paymentAvailable);
				DocAcknowledgement acknowledgementByKey = reimbursementService.getAcknowledgementByKey(reimbursementObjectByKey.getDocAcknowLedgement().getKey());
				if(acknowledgementByKey != null && acknowledgementByKey.getPaymentCancellationFlag() != null && acknowledgementByKey.getPaymentCancellationFlag().equalsIgnoreCase("Y")) {
					reimbursementDTO.setIsPaymentAvailable(false);
					reimbursementDTO.setIsPaymentAvailableShown(false);
				}
				
			}
			
			
			List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
			
			reimbursementDTO.setInsuredPedDetails(pedByInsured);
			

			try{
		        Double totalBilledAmountForHosp = reimbursementService.getTotalBilledAmountForHosp(documentSummaryKeys);
		        reimbursementDTO.setAmountConsidered(totalBilledAmountForHosp != null ? String
						.valueOf(totalBilledAmountForHosp.intValue()) : "0");
		        
//		        if(reimbursementDTO.getAmountConsCopayPercentage() != null && reimbursementDTO.getAmountConsCopayPercentage().equals(0l)){
		        	reimbursementDTO.setAmountConsidered(reimbursementDTO.getAmountConsidedAfterCoPay() != null ? String
						.valueOf(reimbursementDTO.getAmountConsidedAfterCoPay().intValue()) : "0");
//		        }
		        
			}catch(Exception e){
				e.printStackTrace();
			}
			
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				if(reimbursementDTO.getHospitalizaionFlag()) {
					Reimbursement partialHospitalizationRODWithSettled = getPartialHospitalizationRODWithSettled(claimByKey.getKey());
					ReimbursementCalCulationDetails hosptialization = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(reimbursementDTO.getKey(), ReferenceTable.HOSPITALIZATION);
					if(hosptialization != null) {
						reimbursementDTO.setBillingApprovedAmount(hosptialization.getPayableToHospAftTDS() != null ? hosptialization.getPayableToHospAftTDS().doubleValue() : 0d);
						reimbursementDTO.setPayableToHospAmt(hosptialization.getPayableToHospital() != null ? hosptialization.getPayableToHospital().doubleValue() : 0d);
						reimbursementDTO.setHospDiscountAmount(hosptialization.getHospitalDiscount() != null ? hosptialization.getHospitalDiscount().doubleValue() : 0d);
					}
					if(partialHospitalizationRODWithSettled != null) {
						ReimbursementCalCulationDetails reimbursementCalcObjByRodAndClassificationKey = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(partialHospitalizationRODWithSettled.getKey(), ReferenceTable.HOSPITALIZATION);
						reimbursementDTO.setPayableToInsAmt(reimbursementCalcObjByRodAndClassificationKey.getPayableInsuredAfterPremium() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableInsuredAfterPremium().doubleValue() : 0d);
						reimbursementDTO.setFAApprovedAmount(partialHospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? partialHospitalizationRODWithSettled.getFinancialApprovedAmount() : 0d);
					}
				} else if(reimbursementDTO.getPartialHospitalizaionFlag()) {
					Reimbursement hospitalizationRODWithSettled = getHospitalizationRODWithSettled(claimByKey.getKey());
					if(hospitalizationRODWithSettled != null) {
						ReimbursementCalCulationDetails reimbursementCalcObjByRodAndClassificationKey = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(hospitalizationRODWithSettled.getKey(), ReferenceTable.HOSPITALIZATION);
						reimbursementDTO.setPayableToHospAmt(reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital().doubleValue() : 0d);
						reimbursementDTO.setHospDiscountAmount(reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d);
						Double amount = (reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d) + (hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : 0d);
						reimbursementDTO.setFAApprovedAmount(amount);
					}
				}
			}


			Boolean queryReceivedStatusRod = reimbursementQuerySerice.isQueryReceivedStatusRod(reimbursementObjectByKey.getKey());
			 
			 if(queryReceivedStatusRod){
				 reimbursementDTO.setIsQueryReceived(true);   
				 
			 }
			 
			 
			 List<ReimbursementCalCulationDetails> reimbursementCalculationDetails = acknowledgementDocumentsReceivedService.getReimbursementCalculationDetails(reimbursementObjectByKey.getKey());
				

				
				for (ReimbursementCalCulationDetails reimbursementCalCulationDetails2 : reimbursementCalculationDetails) {
					if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
							reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.HOSPITALIZATION)){
						
						HopitalizationCalulationDetailsDTO hospitalizationCalcDTO = getHospitalizationCalculationDTO(reimbursementCalCulationDetails2,reimbursementDTO, false);
						if(reimbursementDTO.getDocumentReceivedFromId() != null && reimbursementDTO.getDocumentReceivedFromId().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
					           hospitalizationCalcDTO.setBalanceToBePaid(0);
						}
						reimbursementDTO.setHospitalizationCalculationDTO(hospitalizationCalcDTO);
						
					}
					else if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
							reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.PRE_HOSPITALIZATION)){
						PreHopitalizationDetailsDTO preHospitalizationCalcDTO = getPreHospitalizationDTO(reimbursementCalCulationDetails2, reimbursementDTO, false);
						reimbursementDTO.setPreHospitalizationCalculationDTO(preHospitalizationCalcDTO);
						
					}else if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
							reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.POST_HOSPITALIZATION)){
						PostHopitalizationDetailsDTO postHospitalizationCalcDTO = getPostHospitalizationDTO(reimbursementCalCulationDetails2, reimbursementDTO, false);
						reimbursementDTO.setPostHospitalizationCalculationDTO(postHospitalizationCalcDTO);
					}
				}
				
				List<Long> copayValues = new ArrayList<Long>();
				
				if(reimbursementObjectByKey.getAmtConsCopayPercentage() != null){
					reimbursementDTO.setCoPayValue(reimbursementObjectByKey.getAmtConsCopayPercentage().intValue());
					copayValues.add(reimbursementObjectByKey.getAmtConsCopayPercentage().longValue());
				}
			 
			 reimbursementDTO.setDoctorNote(reimbursementObjectByKey.getDoctorNote() != null? reimbursementObjectByKey.getDoctorNote() : "" );
			
				List<DiagnosisDetailsTableDTO> diagnosisTableList = reimbursementDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
				if(diagnosisTableList != null && ! diagnosisTableList.isEmpty()){
					for (DiagnosisDetailsTableDTO diagnosisDetailsTableDTO : diagnosisTableList) {
						if(diagnosisDetailsTableDTO.getCopayPercentage() != null){
							Double copayPercentage = diagnosisDetailsTableDTO.getCopayPercentage();
							copayValues.add(copayPercentage.longValue());
						}
					}
				}
				
				List<ProcedureDTO> procedureDTO = reimbursementDTO.getPreauthMedicalProcessingDetails().getProcedureExclusionCheckTableList();
				if(procedureDTO != null && ! procedureDTO.isEmpty()){
					for (ProcedureDTO procedureDTO2 : procedureDTO) {
						if(procedureDTO2.getCopayPercentage() != null){
							copayValues.add(procedureDTO2.getCopayPercentage().longValue());
						}
					}
				}

				if(! copayValues.isEmpty()){
				    Long maximumCopay = Collections.max(copayValues);
				    if(maximumCopay != null){
				    	reimbursementDTO.setCoPayValue(maximumCopay.intValue());
				    }
				}
				
			 SHAUtils.setConsolidatedAmtDTO(reimbursementDTO, true);
			 Double totalClaimedAmount = reimbursementService.getTotalClaimedAmount(reimbursementObjectByKey);
			 reimbursementDTO.setRodTotalClaimedAmount(totalClaimedAmount);
			 
			 if(reimbursementDTO.getAmountConsidedAfterCoPay() != null && totalBilledAmount != null && !reimbursementDTO.getAmountConsidedAfterCoPay().equals(totalBilledAmount)) {
				 reimbursementDTO.setAmountConsidered(String.valueOf(totalBilledAmount.longValue()));
			 }
			 
			 SHAUtils.setDefaultCopayValue(reimbursementDTO);
			 
			 String previoustAmountForDiagnosisProcedure = SHAUtils.getPrevioustAmountForDiagnosisProcedure(reimbursementDTO.getPreauthDataExtractionDetails().getDiagnosisTableList(), reimbursementDTO
					.getPreauthMedicalProcessingDetails()
					.getProcedureExclusionCheckTableList(), reimbursementDTO.getResidualAmountDTO());
			 
			 Double approvedAmount = SHAUtils.getDoubleValueFromString(previoustAmountForDiagnosisProcedure);
			 reimbursementDTO.setSublimitAndSIAmt(approvedAmount);

			 if(reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)
					 && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
					 && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
			 
					 if(hospitalById != null){
							Boolean hospitalDiscount = SHAUtils.isHospitalDiscount(hospitalById);
							reimbursementDTO.setIsHospitalDiscountApplicable(hospitalDiscount);
					 }
			 }
			 


			view.setPaNonHospProcessClaimFinancial(PANonHospFinancialWizard.class, reimbursementDTO);
		*/}
		
		private void populatePADocumentDetails(ReceiptOfDocumentsDTO rodDTO,
				Long key, String strPresenterString) {
			DocAcknowledgement docAcknowledgment = null;
			if ((ReferenceTable.ROD_CREATION).equalsIgnoreCase(strPresenterString)) {
				docAcknowledgment = createRodService
						.getDocAcknowledgementBasedOnKey(key);
				if (null != docAcknowledgment)
				{
					rodDTO.getDocumentDetails().setDocumentCheckList(
							getCheckListValidationTableValues(key,
									docAcknowledgment));
					rodDTO.setUploadDocsList(getUploadedDocumentTableDataForBillEntry(docAcknowledgment.getRodKey()));

				}
				
			}
			// Bill entry in place of key , rod key will be passed.
			else if ((ReferenceTable.BILL_ENTRY)
					.equalsIgnoreCase(strPresenterString)) {
				Long ackDocKey = createRodService
						.getLatestDocAcknowledgementKey(key);
				docAcknowledgment = createRodService
						.getDocAcknowledgementBasedOnKey(ackDocKey);
				rodDTO.getDocumentDetails().setDocAcknowledgementKey(ackDocKey);
				rodDTO.getDocumentDetails().setRodKey(key);
				if (null != docAcknowledgment)
					rodDTO.getDocumentDetails().setDocumentCheckList(
							getCheckListValidationTableValues(ackDocKey,
									docAcknowledgment));
				rodDTO.setUploadDocsList(getUploadedDocumentTableDataForBillEntry(key));
				Reimbursement reimb = createRodService.getReimbursementByRODKey(key);
				if(null != reimb)
					rodDTO.getDocumentDetails().setReferToBillEntryBillingRemarks(reimb.getBillEntryRemarks());
				
				UploadDocumentDTO uploadDocumentDTO = claimRequestBenefitsService
						.getReimbursementBenefitsValue(key);
				/*
				 * if((ReferenceTable.BENEFITS_HOSPITAL_CASH).equalsIgnoreCase(
				 * uploadDocumentDTO.getHospitalBenefitFlag())) {
				 * rodDTO.getAddOnBenefitsDTO
				 * ().setAdmittedNoOfDays(uploadDocumentDTO
				 * .getHospitalCashNoofDays()) }
				 */
				if (uploadDocumentDTO != null) {
					if ((ReferenceTable.BENEFITS_PATIENT_CARE)
							.equalsIgnoreCase(uploadDocumentDTO
									.getPatientCareBenefitFlag())) {
						List<PatientCareDTO> patientCareList = claimRequestBenefitsService
								.getPatientCareDetails(uploadDocumentDTO
										.getPatientBenefitKey());
						if (null != patientCareList && !patientCareList.isEmpty()) {
							uploadDocumentDTO.setPatientCareDTO(patientCareList);
						}
						// rodDTO.getAddOnBenefitsDTO().setAdmittedNoOfDays(uploadDocumentDTO.getPatientCareNoofDays());
					}
					rodDTO.setUploadDocumentsDTO(uploadDocumentDTO);
				}
				
			} else if ((ReferenceTable.CLAIM_BILLING_BENEFITS)
					.equalsIgnoreCase(strPresenterString)) {
				Reimbursement reimb = createRodService
						.getReimbursementObjectByKey(key);
				rodDTO.setStatusKey(reimb.getStatus().getKey());
				Long ackDocKey = createRodService
						.getLatestDocAcknowledgementKey(key);
				docAcknowledgment = createRodService
						.getDocAcknowledgementBasedOnKey(ackDocKey);
				rodDTO.getDocumentDetails().setDocAcknowledgementKey(ackDocKey);
				rodDTO.getDocumentDetails().setRodKey(key);
				// List<UploadDocumentDTO> uploadDocumentDTOList =
				// claimRequestBenefitsService.getReimbursementBenefitsValue(key);
				UploadDocumentDTO uploadDocumentDTO = claimRequestBenefitsService
						.getReimbursementBenefitsValue(key);
				/*
				 * if((ReferenceTable.BENEFITS_HOSPITAL_CASH).equalsIgnoreCase(
				 * uploadDocumentDTO.getHospitalBenefitFlag())) {
				 * rodDTO.getAddOnBenefitsDTO
				 * ().setAdmittedNoOfDays(uploadDocumentDTO
				 * .getHospitalCashNoofDays()) }
				 */
				if (uploadDocumentDTO != null) {
					if ((ReferenceTable.BENEFITS_PATIENT_CARE)
							.equalsIgnoreCase(uploadDocumentDTO
									.getPatientCareBenefitFlag())) {
						List<PatientCareDTO> patientCareList = claimRequestBenefitsService
								.getPatientCareDetails(uploadDocumentDTO
										.getPatientBenefitKey());
						if (null != patientCareList && !patientCareList.isEmpty()) {
							uploadDocumentDTO.setPatientCareDTO(patientCareList);
						}
						// rodDTO.getAddOnBenefitsDTO().setAdmittedNoOfDays(uploadDocumentDTO.getPatientCareNoofDays());
					}
					rodDTO.setUploadDocumentsDTO(uploadDocumentDTO);
				} else {
					Notification
							.show("Before processing the claim benefits , please first make sure you had entered the benefits details at bill entry level...");
				}

			}
			if (null != docAcknowledgment) {
				rodDTO.getDocumentDetails().setAdditionalRemarks(
						docAcknowledgment.getAdditionalRemarks());
				rodDTO.getDocumentDetails().setDocumentsReceivedDate(
						docAcknowledgment.getDocumentReceivedDate());
				rodDTO.getDocumentDetails().setDocumentReceivedFromValue(
						docAcknowledgment.getDocumentReceivedFromId().getValue());
				rodDTO.getDocumentDetails().setModeOfReceiptValue(
						docAcknowledgment.getModeOfReceiptId().getValue());
				
				if(null != docAcknowledgment.getReconsiderationReasonId())
				{
					rodDTO.getDocumentDetails().setReasonForReconsiderationRequestValue(docAcknowledgment.getReconsiderationReasonId().getValue());
				}
				
				/***
				 * Fix for ticket 4287 --- starts 
				 */
				rodDTO.getDocumentDetails().setEmailId(docAcknowledgment.getInsuredEmailId());
				rodDTO.setEmailIdForPaymentMode(docAcknowledgment.getInsuredEmailId());
				/***
				 * Fix for ticket 4287 --- ends 
				 */
				
				if(null != docAcknowledgment.getReconsiderationReasonId())
				{
					rodDTO.getDocumentDetails().setReasonForReconsiderationRequestValue(docAcknowledgment.getReconsiderationReasonId().getValue());
				}
				if(null != docAcknowledgment.getPaymentCancellationFlag())
				{
					if(("Y").equalsIgnoreCase(docAcknowledgment.getPaymentCancellationFlag()))
					{
						rodDTO.getDocumentDetails().setPaymentCancellationNeeded(true);
						rodDTO.getDocumentDetails().setPaymentCancellationNeededFlag("Y");
					}
					else
					{
						rodDTO.getDocumentDetails().setPaymentCancellationNeeded(false);
						rodDTO.getDocumentDetails().setPaymentCancellationNeededFlag("N");
					}
				}
				
				if (("Y").equals(docAcknowledgment.getReconsiderationRequest()))
				{
					rodDTO.getDocumentDetails().setReconsiderationRequestValue(
							"Yes");
					Map<String , Long> reconsiderationMap = new HashMap<String,Long>();
					reconsiderationMap.put("ackKey",docAcknowledgment.getKey());
					reconsiderationMap.put("rodKey", docAcknowledgment.getRodKey());
					rodDTO.setReconsiderationMap(reconsiderationMap);
				}
				else if (("N")
						.equals(docAcknowledgment.getReconsiderationRequest()))
					rodDTO.getDocumentDetails()
							.setReconsiderationRequestValue("No");
				if (null != docAcknowledgment.getHospitalizationClaimedAmount()) {
					rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(
							String.valueOf(docAcknowledgment
									.getHospitalizationClaimedAmount().intValue()));
				} else {
					rodDTO.getDocumentDetails().setHospitalizationClaimedAmount("");
				}
				if (null != docAcknowledgment.getPreHospitalizationClaimedAmount()) {
					rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(
							String.valueOf(docAcknowledgment
									.getPreHospitalizationClaimedAmount().intValue()));
				} else {
					rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(
							"");
				}
				if (null != docAcknowledgment.getPostHospitalizationClaimedAmount()) {
					rodDTO.getDocumentDetails()
							.setPostHospitalizationClaimedAmount(
									String.valueOf(docAcknowledgment
											.getPostHospitalizationClaimedAmount().intValue()));
				} else {
					rodDTO.getDocumentDetails()
							.setPostHospitalizationClaimedAmount("");
				}
				
				if(docAcknowledgment.getHospitalizationClaimedAmount() != null){
					rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(String.valueOf(docAcknowledgment.getHospitalizationClaimedAmount().intValue()));
				}
				if(docAcknowledgment.getPreHospitalizationClaimedAmount() != null){
					rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(String.valueOf(docAcknowledgment.getPreHospitalizationClaimedAmount().intValue()));	
				}
				if(docAcknowledgment.getPostHospitalizationClaimedAmount() != null){
					rodDTO.getDocumentDetails().setPostHospitalizationClaimedAmount(String.valueOf(docAcknowledgment.getPostHospitalizationClaimedAmount().intValue()));	
				}
				
				rodDTO.getDocumentDetails().setHospitalizationFlag(
						docAcknowledgment.getHospitalisationFlag());
				rodDTO.getDocumentDetails().setPreHospitalizationFlag(
						docAcknowledgment.getPreHospitalisationFlag());
				rodDTO.getDocumentDetails().setPostHospitalizationFlag(
						docAcknowledgment.getPostHospitalisationFlag());
				rodDTO.getDocumentDetails().setPartialHospitalizationFlag(
						docAcknowledgment.getPartialHospitalisationFlag());
				rodDTO.getDocumentDetails().setLumpSumAmountFlag(
						docAcknowledgment.getLumpsumAmountFlag());
				rodDTO.getDocumentDetails().setAddOnBenefitsHospitalCashFlag(
						docAcknowledgment.getHospitalCashFlag());
				rodDTO.getDocumentDetails().setAddOnBenefitsPatientCareFlag(
						docAcknowledgment.getPatientCareFlag());
				rodDTO.getDocumentDetails().setHospitalizationRepeatFlag(
						docAcknowledgment.getHospitalizationRepeatFlag());
				rodDTO.setCreatedBy(docAcknowledgment.getCreatedBy());
				rodDTO.setModifiedBy(docAcknowledgment.getModifiedBy());

			}
		}
		
//		protected void showPAMedicalApprovalProcessClaimRequest(
//				@Observes @CDIEvent(MenuPresenter.PA_SHOW_MEDICAL_APPROVAL_SCREEN) final ParameterDTO parameters) {
//			Date startDate = new Date();
//			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> SHOW MEDICAL APPROVAL CLAIM REQUEST METHOD STARTED %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ startDate);
//
//
//			SearchProcessClaimRequestTableDTO tableDTO = (SearchProcessClaimRequestTableDTO) parameters
//					.getPrimaryParameter();
//
//			Reimbursement reimbursementObjectByKey = rodService
//			.getReimbursementObjectByKey(tableDTO.getRodKey());
//			
//			Date date1 = new Date();
//			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> BEFORE INVOKING ROD SUMMARY DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date1);
//			
//			List<UploadDocumentDTO> rodSummaryDetails = rodService
//					.getRODSummaryDetails(reimbursementObjectByKey.getKey());
//			Date date2 = new Date();
//
//			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> AFTER INVOKING ROD SUMMARY DETAILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date2);
//			
//			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL DURATION FOR RODSUMMARY DETAILS METHOD %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date1, date2));
//			
//			Boolean isValidClaimForMA = true;
//			
//			/*
//			 * List<Long> documentSummaryKeys = new ArrayList<Long>(); for
//			 * (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
//			 * documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
//			 * uploadDocumentDTO.setStatus(true); List<RODBillDetails>
//			 * billEntryDetails = rodService
//			 * .getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
//			 * List<BillEntryDetailsDTO> dtoList = new
//			 * ArrayList<BillEntryDetailsDTO>(); if (billEntryDetails != null &&
//			 * !billEntryDetails.isEmpty()) { for (RODBillDetails billEntryDetailsDO
//			 * : billEntryDetails) {
//			 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
//			 * uploadDocumentDTO)); } }
//			 * uploadDocumentDTO.setBillEntryDetailList(dtoList); }
//			 */
//			/*
//			 * Double totalBilledAmount = reimbursementService
//			 * .getTotalBilledAmount(documentSummaryKeys);
//			 */
//			Date date3 = new Date();
//			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> BEFORE INVOKING ZONAL  MEDICAL REVIEW MAPPER  GET REIMBURSEMENT DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date3);
//			ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
////			ZonalMedicalReviewMapper.getAllMapValues();
//			PreauthDTO reimbursementDTO = mapper
//					.getReimbursementDTO(reimbursementObjectByKey);
//			Date date4 = new Date();
//			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> AFTER INVOKING ZONAL  MEDICAL REVIEW MAPPER  GET REIMBURSEMENT DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date4);
//			log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL DURATION FOR GET REIMBURSEMENT DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date3, date4));
//
//
//			if(null != reimbursementObjectByKey)
//			{
//				/*Claim claimByKey = (reimbursementObjectByKey.getClaim());
//				if(null != claimByKey)
//				{
//					if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
//					{
//						isValidClaimForMA = false;
//						view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
//					}
//				}*/
//			}
//			/*if(isValidClaimForMA)
//			{*/
//				
//				if(("Y").equalsIgnoreCase(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getReconsiderationRequest()))
//				{
//					reimbursementDTO.setReconsiderRodRequestList(getReconsiderRODRequestForBillEntry(tableDTO.getRodKey()));
//				}
//				
//				/*
//				 * reimbursementDTO.setAmountConsidered(totalBilledAmount != null ?
//				 * String .valueOf(totalBilledAmount.intValue()) : "0");
//				 * reimbursementDTO .setInitialAmountConsidered(totalBilledAmount !=
//				 * null ? String .valueOf(totalBilledAmount.intValue()) : "0");
//				 * reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
//				 * reimbursementDTO.setHumanTask(tableDTO.getHumanTask());
//				 */
//		
//				Date date5 = new Date();
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> BEFORE INVOKING FVR GRADING SERVICE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date5);
//
//				List<FVRGradingMaster> fvrGrading = reimbursementService
//						.getFVRGrading();
//				Date date6 = new Date();
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> AFTER INVOKING FVR GRADING SERVICE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date6);
//
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> BEFORE INVOKING FVR GRADING SERVICE BY FVR CLAIM KEY %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date6);
//
//				List<FieldVisitRequest> fvrByClaimKey = reimbursementService
//						.getFVRByClaimKey(reimbursementObjectByKey.getClaim().getKey());
//				
//				Date date7 = new Date();
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> AFTER INVOKING FVR GRADING SERVICE BY FVR CLAIM KEY %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ date7);
//
//				
//				List<FvrGradingDetailsDTO> dto = new ArrayList<FvrGradingDetailsDTO>();
//				Map<Integer, FieldVisitRequest> valueMap = new HashMap<Integer, FieldVisitRequest>();
//				for (int i = 0; i < fvrByClaimKey.size(); i++) {
//					FieldVisitRequest fieldVisitRequest = fvrByClaimKey.get(i);
//					if(fieldVisitRequest.getStatus() != null && fieldVisitRequest.getStatus().getKey().equals(ReferenceTable.FVR_REPLY_RECEIVED)){
//						FvrGradingDetailsDTO fvrDto = new FvrGradingDetailsDTO();
//						fvrDto.setKey(fieldVisitRequest.getKey());
//						fvrDto.setRepresentativeName(fieldVisitRequest
//								.getRepresentativeName());
//						fvrDto.setRepresentiveCode(fieldVisitRequest
//								.getRepresentativeCode());
//						List<FVRGradingDTO> FVRTableDTO = new ArrayList<FVRGradingDTO>();
//						for (FVRGradingMaster masterFVR : fvrGrading) {
//							FVRGradingDTO eachFVRDTO = new FVRGradingDTO();
//							eachFVRDTO.setKey(masterFVR.getKey());
//							eachFVRDTO.setCategory(masterFVR.getGradingType());
//							eachFVRDTO.setApplicability(masterFVR.getApplicability());
//							switch (Integer.valueOf(String.valueOf(masterFVR.getKey()))) {
//							case 8 : 
//								if(fieldVisitRequest.getPatientVerified() != null){
//									eachFVRDTO.setStatusFlag(fieldVisitRequest.getPatientVerified());
//								}
//							 	break;
//							case 9: 
//								if(fieldVisitRequest.getDiagnosisVerfied() != null){
//									eachFVRDTO.setStatusFlag(fieldVisitRequest.getDiagnosisVerfied());
//								}
//							 	break;
//							case 10: 
//								if(fieldVisitRequest.getRoomCategoryVerfied() != null){
//									eachFVRDTO.setStatusFlag(fieldVisitRequest.getRoomCategoryVerfied());
//								}
//							 	break;
//							case 11: 
//								if(fieldVisitRequest.getTriggerPointsFocused() != null){
//									eachFVRDTO.setStatusFlag(fieldVisitRequest.getTriggerPointsFocused());
//								}
//							 	break;
//							case 12: 
//								if(fieldVisitRequest.getPedVerified() != null){
//									eachFVRDTO.setStatusFlag(fieldVisitRequest.getPedVerified());
//								}
//							 	break;
//							case 13:
//								if(fieldVisitRequest.getPatientDischarged() != null){
//									eachFVRDTO.setStatusFlag(fieldVisitRequest.getPatientDischarged());
//								}
//							 	break;
//							case 14:
//								if(fieldVisitRequest.getPatientNotAdmitted() != null){
//									eachFVRDTO.setStatusFlag(fieldVisitRequest.getPatientNotAdmitted());
//								}
//							 	break;
//							case 15: 
//								if(fieldVisitRequest.getOutstandingFvr() != null){
//									eachFVRDTO.setStatusFlag(fieldVisitRequest.getOutstandingFvr());
//								}
//							 	break;
//							default:
//								break;
//							}
//							FVRTableDTO.add(eachFVRDTO);
//						}
//						fvrDto.setFvrGradingDTO(FVRTableDTO);
//						dto.add(fvrDto);
//					}
//				}
//		
//				reimbursementDTO.getPreauthMedicalDecisionDetails().setFvrGradingDTO(
//						dto);
//		
//				reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
//				reimbursementDTO.setStrUserName(tableDTO.getUsername());
//				reimbursementDTO.setStrPassword(tableDTO.getPassword());
//				reimbursementDTO.setTaskNumber(tableDTO.getTaskNumber());
//				
//				
//				reimbursementDTO.setUserRole(tableDTO.getUserRole());
//				reimbursementDTO.setRodNumber(reimbursementObjectByKey.getRodNumber());
//				Claim claimByKey = reimbursementObjectByKey.getClaim();
//				Date date8 = new Date();
//				reimbursementDTO
//						.setReconsiderationList(getReconsiderRODRequest(claimByKey));
//				Date date9 = new Date();
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY GET RECONSIDER ROD REQUEST %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date8,  date9));
//				
//				BeanItemContainer<SelectValue> medicalContainer = masterService
//						.getSelectValueContainer(ReferenceTable.MEDICAL_VERIFICATION);
//				BeanItemContainer<SelectValue> treatmentContainer = masterService
//						.getSelectValueContainer(ReferenceTable.TREATMENT_QUALITY_VERIFICATION);
//		
//				// setHospitalDetailsToDTO(hospitalById, reimbursementDTO);
//				Date date10 = new Date();
//				setReimbursmentTOPreauthDTO(mapper, claimByKey,
//						reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.CLAIM_REQUEST);
//				Date date11 = new Date();
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY SET REIMBURSEMENT TO PREAUTH DTO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date10,  date11));
//
//				
//				
//				String[] hospSplit = reimbursementObjectByKey.getRodNumber().split("/");
//				String hsopSplitNo = hospSplit[hospSplit.length - 1];
//				Integer hospNo = Integer.valueOf(hsopSplitNo);
//				if(reimbursementObjectByKey.getStatus() != null && !reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.BILLING_REFER_TO_MEDICALA_APPROVER) &&  !reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER) && hospNo.equals(1) && reimbursementObjectByKey.getClaim().getClaimType() != null && reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
//					Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(reimbursementObjectByKey.getClaim().getKey());
//					reimbursementDTO.setPreviousPreauthKey(latestPreauthByClaim.getKey());
//					List<PedValidation> findPedValidationByPreauthKey = preauthService.findPedValidationByPreauthKey(latestPreauthByClaim.getKey());
//					List<Procedure> findProcedureByPreauthKey = preauthService.findProcedureByPreauthKey(latestPreauthByClaim.getKey());
//					List<DiagnosisDetailsTableDTO> diagnosisTableList = reimbursementDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
//					List<ProcedureDTO> procedureExclusionCheckTableList = reimbursementDTO.getPreauthMedicalProcessingDetails().getProcedureExclusionCheckTableList();
//					for (ProcedureDTO procedureDTO : procedureExclusionCheckTableList) {
//						for (Procedure procedure : findProcedureByPreauthKey) {
//							if(procedure.getProcedureID().equals(procedureDTO.getProcedureName().getId())) {
//								procedureDTO.setOldApprovedAmount(procedure.getNetApprovedAmount());
//							}
//						}
//					}
//					
//					for (DiagnosisDetailsTableDTO diagnosisDTO : diagnosisTableList) {
//						for (PedValidation pedValidation : findPedValidationByPreauthKey) {
//							if(pedValidation.getDiagnosisId().equals(diagnosisDTO.getDiagnosisId())) {
//								diagnosisDTO.setOldApprovedAmount(pedValidation.getNetApprovedAmount());
//							}
//						}
//					}
//				}
//		
//				DBCalculationService dbCalculationService = new DBCalculationService();
//				Date date12 = new Date();
//				Double insuredSumInsured = dbCalculationService.getInsuredSumInsured(
//						reimbursementDTO.getNewIntimationDTO().getInsuredPatient()
//								.getInsuredId().toString(), reimbursementDTO
//								.getPolicyDto().getKey());
//				Date date13 = new Date();
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY INSURED SUM INSURED PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date12,  date13));
//
//				Map<Integer, Object> detailsMap = new HashMap<Integer, Object>();
//				
////				if(null != reimbursementDTO && null != reimbursementDTO.getNewIntimationDTO() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto() 
////						&& null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals() && null != reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType()
////						&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getRegistedHospitals().getHospitalType().getKey().equals(ReferenceTable.NON_NETWORK_HOSPITAL_TYPE_ID))
////				{
////					String cityClass = createRodService.getHospitalCityClass(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
////					reimbursementDTO.getNewIntimationDTO().getHospitalDto()
////					.getRegistedHospitals().setCityClass(cityClass);
////					
////				}
//		
//				if(reimbursementObjectByKey.getSectionCategory() != null){
//					
//					Date date14 = new Date();
//					detailsMap = dbCalculationService
//							.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
//									.getProduct().getKey(), insuredSumInsured,
//									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
//											.getRegistedHospitals().getCityClass(),
//									reimbursementDTO.getNewIntimationDTO()
//											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
//					Date date15 = new Date();
//					log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY HOSPITALIZATION DETAILS PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date14,  date15));
//
//				}else{
//					
//					Long sectionCategory = 0l;
//					if(reimbursementDTO.getPolicyDto()
//										.getProduct().getKey().equals(ReferenceTable.STAR_CARDIAC_CARE_POLICY) || reimbursementDTO.getPolicyDto()
//										.getProduct().getKey().equals(ReferenceTable.DIABETES_INDIVIDUAL_POLICY) || reimbursementDTO.getPolicyDto()
//										.getProduct().getKey().equals(ReferenceTable.DIABETES_FLOATER_POLICY))
//					{
//						sectionCategory = 1l;
//					}
//					
//					Date date14 = new Date();
//					detailsMap = dbCalculationService
//							.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
//									.getProduct().getKey(), insuredSumInsured,
//									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
//											.getRegistedHospitals().getCityClass(),
//									reimbursementDTO.getNewIntimationDTO()
//											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,"0");
//					Date date15 = new Date();
//					
//					log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY HOSPITALIZATION DETAILS PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date14,  date15));
//
//				}
//				
//				if(detailsMap != null && detailsMap.get(15) != null){
////					reimbursementDTO.setAmbulanceLimitAmount((Double)detailsMap.get(15));
//				}
//
//				reimbursementDTO = getProrataFlagFromProduct(reimbursementDTO);
//				
//				if(reimbursementObjectByKey.getProrataDeductionFlag() != null) {
//					reimbursementDTO.setProrataDeductionFlag(reimbursementObjectByKey.getProrataDeductionFlag());
//				}
//				
//				/**
//				 * product based variable is added to enable or disable the component in page level.
//				 * This would be static. -- starts
//				 * */
//				//reimbursementDTO.setProductBasedProRata(reimbursementObjectByKey.getProrataDeductionFlag());
//				//reimbursementDTO.setProductBasedPackage(reimbursementObjectByKey.getPackageAvailableFlag());
//				//ends.
//				reimbursementDTO.setPackageAvailableFlag(reimbursementObjectByKey.getPackageAvailableFlag());
//				
//				
//		
//				List<Long> documentSummaryKeys = new ArrayList<Long>();
//				
//				/**
//				 * Fix for implemeting claims dms in bill entry screen.. -- starts
//				 * **/
//				if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
//				{
//					for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
//						if(null != claimByKey)
//						{
//							uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
//							uploadDocumentDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
//						}
//					}
//				}
//				
//				/**
//				 * Added for enabling view documents in preauth screen while raising query -- fix starts.
//				 * */
//				if(null != claimByKey)
//				{
//					Date date17 = new Date();
//					reimbursementDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
//					Date date18 = new Date();
//					log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY CLAIMS DMS LIST FETCH %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date17,  date18));
//
//				}
//				/**
//				 * Added for enabling view documents in preauth screen while raising query -- fix ends
//				 * */
//				
//		
//				for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
//							/*if(null != reimbursementObjectByKey)
//							{
//								uploadDocumentDTO.setIntimationNo(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId());
//								uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfAdmission()));
//								uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfDischarge()));
//								uploadDocumentDTO.setInsuredPatientName(reimbursementObjectByKey.getClaim().getIntimation().getInsuredPatientName());
//							}*/
//					documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
//					uploadDocumentDTO.setStatus(true);
//					Date date19 = new Date();
//					List<RODBillDetails> billEntryDetails = rodService
//							.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
//					Date date20 = new Date();
//					log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY BILL ENTRY DETAILS LIST %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date19,  date20));
//
//					List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
//					if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
//						for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
//							/*
//							 * <<<<<<< HEAD
//							 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
//							 * uploadDocumentDTO)); =======
//							 */
//							dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
//									uploadDocumentDTO));
//							// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
//						}
//					}
//					/*
//					 * uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
//					 * .get(8));
//					 */
//					uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
//							.get(8));
//					uploadDocumentDTO
//							.setProductBasedICURent((Double) detailsMap.get(9));
//					/*uploadDocumentDTO.setProductBasedAmbulanceAmt((Double) detailsMap
//							.get(15));*/
//					uploadDocumentDTO.setProductBasedAmbulanceAmt(getProductBasedAmbulanceAmt(tableDTO.getRodKey()));
//					uploadDocumentDTO.setStatus(false);
//					uploadDocumentDTO.setBillEntryDetailList(dtoList);
//					uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
//					uploadDocumentDTO.setRodKey(reimbursementObjectByKey.getKey());
//					uploadDocumentDTO.setStrUserName(tableDTO.getUsername());
//					
//				}
//				
//				List<UploadDocumentDTO> rodBillSummaryDetails = rodService
//						.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);
//				if(rodBillSummaryDetails != null){
//					for (UploadDocumentDTO uploadDocumentDTO : rodBillSummaryDetails) {
//						uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
//					}
//				}
//				
//				reimbursementDTO.getUploadDocDTO().setBillingWorkSheetUploadDocumentList(rodBillSummaryDetails);
//				Double totalBilledAmount = reimbursementService
//						.getTotalBilledAmount(documentSummaryKeys);
//		
//				reimbursementDTO.setAmountConsidered(totalBilledAmount != null ? String
//						.valueOf(totalBilledAmount.intValue()) : "0");
//				reimbursementDTO
//						.setInitialAmountConsidered(totalBilledAmount != null ? String
//								.valueOf(totalBilledAmount.intValue()) : "0");
//				reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
//				//reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
//				reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
//		
//				Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
//						.getIntimation().getHospital());
//				ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
//						.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
//				if(hospitalById != null){
//					
//					updateHospitalDetails.setHospitalCity(hospitalById.getCity());
//					updateHospitalDetails.setHospitalCity(hospitalById.getCity());
//					updateHospitalDetails.setHospitalState(hospitalById.getState());
//					updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
//					updateHospitalDetails.setPanNumber(hospitalById.getPanNumber());
//					updateHospitalDetails.setHospitalTypeId(hospitalById.getHospitalType().getKey());
//					updateHospitalDetails.setInpatientBeds(hospitalById.getInpatientBeds() != null ? String.valueOf(hospitalById.getInpatientBeds()) : "0");
//					updateHospitalDetails.setHospitalName(hospitalById.getName());
//					updateHospitalDetails.setHospitalPhoneNo(hospitalById.getPhoneNumber());
//					updateHospitalDetails.setHopitalRegNumber(hospitalById.getRegistrationNumber());
//					updateHospitalDetails.setHospitalPincode(hospitalById.getPincode());
//					updateHospitalDetails.setOtFacilityFlag(hospitalById.getOtFacilityFlag());
//					updateHospitalDetails.setIcuFacilityFlag(hospitalById.getIcuFacilityFlag());
//					updateHospitalDetails.setHospitalAddress1(hospitalById.getAddress());
//		
//				}
//				
//				List<MedicalVerificationDTO> medicalDTO = new ArrayList<MedicalVerificationDTO>();
//				List<TreatmentQualityVerificationDTO> treatmentDTO = new ArrayList<TreatmentQualityVerificationDTO>();
//				List<ClaimVerification> claimVerificationByReimbKey = reimbursementService
//						.getClaimVerificationByReimbKey(reimbursementObjectByKey
//								.getKey());
//				if (claimVerificationByReimbKey != null) {
//		
//					for (ClaimVerification claimVerification : claimVerificationByReimbKey) {
//						if (claimVerification.getVerificationType() != null
//								&& claimVerification.getVerificationType()
//										.toLowerCase().equalsIgnoreCase("medical")) {
//		
//							MedicalVerificationDTO medicalVerifyDTO = new MedicalVerificationDTO();
//							List<SelectValue> itemIds = medicalContainer.getItemIds();
//							if (itemIds != null && !itemIds.isEmpty()) {
//								for (SelectValue selectValue : itemIds) {
//									if (claimVerification.getVerificationTypeId()
//											.equals(selectValue.getId())) {
//										medicalVerifyDTO.setDescriptionId(selectValue
//												.getId());
//										medicalVerifyDTO.setDescription(selectValue
//												.getValue());
//									}
//								}
//							}
//							medicalVerifyDTO.setKey(claimVerification.getKey());
//							medicalVerifyDTO.setRemarks(claimVerification
//									.getMedicalRemarks());
//							medicalVerifyDTO.setVerifiedFlag(claimVerification
//									.getVerifiedFlag());
//		
//							medicalDTO.add(medicalVerifyDTO);
//						} else if (claimVerification.getVerificationType() != null
//								&& claimVerification.getVerificationType()
//										.toLowerCase().equalsIgnoreCase("treatment")) {
//		
//							TreatmentQualityVerificationDTO treatmentVerifyDTO = new TreatmentQualityVerificationDTO();
//							List<SelectValue> itemIds = treatmentContainer.getItemIds();
//							if (itemIds != null && !itemIds.isEmpty()) {
//								for (SelectValue selectValue : itemIds) {
//									if (claimVerification.getVerificationTypeId()
//											.equals(selectValue.getId())) {
//										treatmentVerifyDTO.setDescriptionId(selectValue
//												.getId());
//										treatmentVerifyDTO.setDescription(selectValue
//												.getValue());
//									}
//								}
//							}
//							treatmentVerifyDTO.setKey(claimVerification.getKey());
//							treatmentVerifyDTO.setRemarks(claimVerification
//									.getMedicalRemarks());
//							treatmentVerifyDTO.setVerifiedFlag(claimVerification
//									.getVerifiedFlag());
//		
//							treatmentDTO.add(treatmentVerifyDTO);
//						}
//					}
//				}
//				if (claimByKey.getClaimType() != null
//						&& claimByKey.getClaimType().getKey() != null
//						&& claimByKey.getClaimType().getKey()
//								.equals(ReferenceTable.CLAIM_TYPE_CASHLESS_ID)) {
//					
//					
//					reimbursementDTO.setIsCashlessType(true);
//					
//		            Preauth previousPreauth = getPreviousPreauth(claimByKey.getKey());
//		            reimbursementDTO
//					.setTreatmentRemarksList(getTreatmentRemarksHistory(claimByKey.getKey()));
//					
//					if(previousPreauth != null) {
//						reimbursementDTO.setPreauthKey(previousPreauth.getKey());
//					}
//				}
//				
//				reimbursementDTO.getPreauthMedicalDecisionDetails()
//						.setMedicalVerificationTableDTO(medicalDTO);
//				reimbursementDTO.getPreauthMedicalDecisionDetails()
//						.setTreatmentVerificationDTO(treatmentDTO);
//				reimbursementDTO.getPreauthDataExtractionDetails()
//						.setReasonForAdmission(
//								claimByKey.getIntimation().getAdmissionReason());
//				reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
//						reimbursementObjectByKey.getKey());
//		
//				if (reimbursementObjectByKey.getStatus().getKey()
//						.equals(ReferenceTable.BILLING_REFER_TO_MEDICALA_APPROVER)
//						|| reimbursementObjectByKey
//								.getStatus()
//								.getKey()
//								.equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER)) {
//					Long medicalApproverKey = reimbursementService
//							.getLatestMedicalApproverKey(reimbursementObjectByKey.getKey());
//					MedicalApprover medicalApprover = reimbursementService.getMedicalApproverByKey(medicalApproverKey);
//					if (medicalApprover != null) {
//						reimbursementDTO.setPreviousRemarks(medicalApprover
//								.getReferringRemarks());
//						reimbursementDTO.setPreviousReasonForReferring(medicalApprover
//								.getReasonForReferring());
//						
//						if(medicalApprover.getReferringRemarks() == null){
//							reimbursementDTO.setPreviousRemarks(medicalApprover.getApproverReply());
//						}
//						reimbursementDTO.setMedicalApproverKey(medicalApproverKey);
//					}
//					
//					if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER)){
//						reimbursementDTO.setIsReplyToFA(true);
//					}
//					
//					reimbursementDTO.setIsReferToMedicalApprover(true);
//				}
//				
//				if(reimbursementObjectByKey.getStatus().getKey()
//						.equals(ReferenceTable.CLAIM_REQUEST_ESCALATION_STATUS)) {
//					PreauthEscalate preauthEscalate = reimbursementService.getEscalateByClaimKey(reimbursementObjectByKey.getClaim().getKey());
//					reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEscalateRemarks());
//					reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEscalateRemarks());
//					reimbursementDTO.getPreauthMedicalDecisionDetails().setEscalateRemarks(preauthEscalate.getEscalateRemarks());
//					reimbursementDTO.setIsEscalateReplyEnabled(true);
//				}else if(reimbursementObjectByKey.getStatus().getKey()
//						.equals(ReferenceTable.CLAIM_REQUEST_ESCALATION_REPLY_STATUS)) {
//					PreauthEscalate preauthEscalate = reimbursementService.getEscalateByClaimKey(reimbursementObjectByKey.getClaim().getKey());
//					reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEsclateReplyRemarks());
//					reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(preauthEscalate.getEsclateReplyRemarks());
//					reimbursementDTO.getPreauthMedicalDecisionDetails().setEscalateReply(preauthEscalate.getEsclateReplyRemarks());
//					reimbursementDTO.setIsEscalateReplyEnabled(false);
//				}
//				else if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.PROCESS_CLAIM_REQUEST_DISAPPROVE_REJECT_STATUS)){
//					ReimbursementRejectionDto reimbursementRejectionByKey = reimbursementRejectionService.getReimbursementRejectionByKey(reimbursementObjectByKey.getKey());
//					if(reimbursementRejectionByKey != null){
//					    reimbursementDTO.getPreauthMedicalDecisionDetails().setRejectionRemarks(reimbursementRejectionByKey.getDisapprovedRemarks());
//					}
//				}else if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.PROCESS_CLAIM_REQUEST_QUERY_REJECT_STATUS)){
//					ReimbursementQuery reimbursementyQueryByRodKey = reimbursementQuerySerice.getReimbursementyQueryByRodKey(reimbursementObjectByKey.getKey());
//					
//					if(reimbursementyQueryByRodKey != null){
//						reimbursementDTO.getPreauthMedicalDecisionDetails().setQueryRemarks(reimbursementyQueryByRodKey.getRejectionRemarks());
//					}
//				}else if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.UPLOAD_INVESIGATION_COMPLETED)
//						|| reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.INITIATE_INVESTIGATION_DIS_APPROVED)){
//					reimbursementDTO.getPreauthMedicalDecisionDetails().setApprovalRemarks("-");
//					Investigation investigation = investigationService.getInvestigationByTransactionKey(reimbursementObjectByKey.getKey());
//					if(investigation != null){
//						reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(investigation.getRemarks());
//					}
//				}
//		
//				
//				setCategoryFlag(reimbursementObjectByKey, reimbursementDTO);
//		
//				if (!reimbursementDTO.getHospitalizaionFlag()) {
//					reimbursementDTO = setHospitalizationAmount(reimbursementDTO);
//				}
//		
//				setPreAndPostHopitalizationAmount(reimbursementDTO);
//		
//				if (reimbursementObjectByKey.getStatus().getKey() != null
//						&& reimbursementObjectByKey.getStatus().getKey()
//								.equals(ReferenceTable.ZONAL_REVIEW_REJECTION_STATUS)) {
//					reimbursementDTO.getPreauthMedicalProcessingDetails()
//							.setApprovalRemarks(
//									reimbursementObjectByKey.getRejectionRemarks());
//				} else if (reimbursementObjectByKey.getStatus().getKey() != null
//						&& reimbursementObjectByKey.getStatus().getKey()
//								.equals(ReferenceTable.ZONAL_REVIEW_QUERY_STATUS)) {
//					ReimbursementQuery reimbursementQueryByReimbursmentKey = reimbursementService
//							.getReimbursementQueryByReimbursmentKey(reimbursementObjectByKey
//									.getKey());
//					reimbursementDTO.setIsZonalReviewQuery(true);
//					// reimbursementDTO.getPreauthMedicalProcessingDetails().setApprovalRemarks(reimbursementQueryByReimbursmentKey
//					// != null ? reimbursementQueryByReimbursmentKey.getQueryRemarks() :
//					// "");
//				} else if (reimbursementObjectByKey.getStatus().getKey() != null
//						&& reimbursementObjectByKey.getStatus().getKey()
//								.equals(ReferenceTable.ZONAL_REVIEW_APPROVE_STATUS)) {
//					reimbursementDTO.getPreauthMedicalProcessingDetails()
//							.setApprovalRemarks(
//									reimbursementObjectByKey.getApprovalRemarks());
//				}
//				if(claimByKey.getStatus() != null) {
//					if(claimByKey.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS) ||  claimByKey.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS)) {
//						reimbursementDTO.setIsWithDrawn(true);
//					}
//				}
//				Boolean rejectionExistOrNot = acknowledgementDocumentsReceivedService.isRejectionExistOrNot(reimbursementObjectByKey.getKey());
//		        reimbursementDTO.setIsRejectionROD(rejectionExistOrNot);
//				reimbursementDTO.setFvrCount(intimationService.getFVRCount(reimbursementDTO.getNewIntimationDTO().getKey())); 
//				
//				Date date21 = new Date();
//				loadRRCRequestValues(reimbursementDTO,insuredSumInsured,SHAConstants.CLAIM_REQUEST);
//				Date date22 = new Date();
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY LOAD RRC REQUEST VALUES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date21,  date22));
//
//				
//				if(reimbursementDTO.getPreauthMedicalDecisionDetails().getInvestigatorCode() != null){
//					TmpInvestigation tmpInvestigationByInvestigatorCode = investigationService.getTmpInvestigationByInvestigatorCode(reimbursementDTO.getPreauthMedicalDecisionDetails().getInvestigatorCode());
//					reimbursementDTO.getPreauthMedicalDecisionDetails().setInvestigatorName(tmpInvestigationByInvestigatorCode);
//					reimbursementDTO.getPreauthMedicalDecisionDetails().setInvestigationReviewRemarks(reimbursementObjectByKey.getInvestigatorRemarks());
//					reimbursementDTO.getPreauthMedicalDecisionDetails().setInvestigationReportReviewed(true);
//				}
//		
//				String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
//				if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
//					String get64vbStatus = PremiaService.getInstance().get64VBStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
//					if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
//						reimbursementDTO.setIsDishonoured(true);
//					}  else if(get64vbStatus != null && SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus)) {
//						reimbursementDTO.setIsPending(true);
//					}
//				}
//				Date date23 = new Date();
//				reimbursementDTO.setSittingsAmount(dbCalculationService.getDialysisAmount(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
//				Date date24 = new Date();
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY GET DIALYSIS AMOUT PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date23,  date24));
//
//				if(reimbursementObjectByKey.getStatus() != null && !(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.BILLING_REFER_TO_MEDICALA_APPROVER) || reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER))) {
//					if(reimbursementDTO.getIsReverseAllocation()) {
//						reimbursementDTO.setIsReverseAllocation(false);
//					}
//				}
//		
//				/* maternity flag
//				 * from db
//				 */
//				Date date27 = new Date();
//				String maternityFlag=dbCalculationService.getMaternityFlagForProduct(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY MATERNITY FLAG  PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date27, new Date()));
//
////				if(maternityFlag.equalsIgnoreCase("Y")){
////					reimbursementDTO.setMaternityFlag(true);
////				}
//				
//				Date date28 = new Date();
//				 Boolean queryReceivedStatusRod = reimbursementQuerySerice.isQueryReceivedStatusRod(reimbursementObjectByKey.getKey());
//				 
//					log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY QUERY RECEIVED ROD %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));
//
//				 
//				 if(queryReceivedStatusRod){
//					 reimbursementDTO.setIsQueryReceived(true);
//				 }
//				
//				reimbursementDTO.setIsReverseAllocation(false);
//				Date date29 = new Date();
//				Map<String, String> popupMessages = dbCalculationService.getPOPUPMessages(reimbursementDTO.getPolicyKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY POPUP MESSAGE PROCEDURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date28,  new Date()));
//				reimbursementDTO.setPopupMap(popupMessages);
//				
//				if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
//						&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
//					if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
//						Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks());
//						reimbursementDTO.setSuspiciousPopupMap(suspiciousMap);
//					}
//				}
//				
//			    try{
//			    	ImsUser imsUser = tableDTO.getImsUser();
//			    	
//			    	
//			    	if(imsUser != null){
//			    		String[] userRoleList = imsUser.getUserRoleList();
//			    		
//			    		WeakHashMap<String, Object> escalateValidation = SHAUtils.getEscalateValidation(userRoleList);
//			    		
//						if((Boolean)escalateValidation.get(SHAConstants.RMA6)){
//							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA6(true);
//						}else if((Boolean)escalateValidation.get(SHAConstants.RMA5)){
//							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA5(true);
//						}
//						else if((Boolean) escalateValidation.get(SHAConstants.RMA4)){
//							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA4(true);
//						}else if((Boolean) escalateValidation.get(SHAConstants.RMA3)){
//							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA3(true);
//						}else if((Boolean) escalateValidation.get(SHAConstants.RMA2)){
//							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA2(true);
//						}else if((Boolean) escalateValidation.get(SHAConstants.RMA1)){
//							reimbursementDTO.getPreauthMedicalDecisionDetails().setRMA1(true);
//						} 
//			    		
//			    	}
//			    	
//			    }catch(Exception e){
//			    	e.printStackTrace();
//			    }
//				
//				reimbursementDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(reimbursementDTO.getNewIntimationDTO().getAdmissionDate(), reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
//				Date date15  = new Date();
//				reimbursementDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey()));
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY PEQ QUERY SERVICE PED INTIATED %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date15,  new Date()));
//				
//				reimbursementDTO.setIsPEDInitiatedForBtn(reimbursementDTO.getIsPEDInitiated());
//				
//				if(reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
//						&& reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_INSURED)){
//					Date date17 = new Date();
//					Boolean isPedWatchList = pedQueryService.isTaskAvailableInWatchListForIntimation(reimbursementDTO.getNewIntimationDTO().getIntimationId());
//					log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> TOTAL TIME CONSUMED BY PEQ WATCH LIST BPMN %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(date17,  new Date()));
//					reimbursementDTO.setIsPedWatchList(isPedWatchList);
//				}
//				
//				if(reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest() != null && reimbursementObjectByKey.getDocAcknowLedgement().getReconsiderationRequest().equalsIgnoreCase("Y")) {
//						reimbursementDTO.setIsReconsiderationRequest(true);
//				}
//				
//				List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
//				
//				reimbursementDTO.setInsuredPedDetails(pedByInsured);
//				reimbursementDTO.setSearchFormDTO(tableDTO.getSearchDTO());
//				SHAUtils.setDefaultCopayValue(reimbursementDTO);
//
//				if(reimbursementObjectByKey != null && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag().equalsIgnoreCase("Y")) {
//					 reimbursementDTO.setRodTotalClaimedAmount(reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d);
//				 }
//
//				
//				if(reimbursementObjectByKey != null && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag() != null && reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalisationFlag().equalsIgnoreCase("Y")) {
//					 reimbursementDTO.setRodTotalClaimedAmount(reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() != null ? reimbursementObjectByKey.getDocAcknowLedgement().getPostHospitalizationClaimedAmount() : 0d);
//				 }
//				
//				 if(reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)
//						 && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
//						 && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
//				 
//						 if(hospitalById != null){
//								Boolean hospitalDiscount = SHAUtils.isHospitalDiscount(hospitalById);
//								reimbursementDTO.setIsHospitalDiscountApplicable(hospitalDiscount);
//						 }
//				 }
//				 
//				 if(reimbursementDTO.getNewIntimationDTO() != null && reimbursementDTO.getNewIntimationDTO().getInsuredPatient() != null &&
//						 reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
//						Long claimCount = preauthService.getClaimCount(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
//						if(claimCount != null){
//							reimbursementDTO.setClaimCount(claimCount);
//						}
//					}
//				
////				view.setPAProcessClaimRequest(PAClaimRequestWizard.class, reimbursementDTO);
//				log.info("%%%%%%%%%%%%%%%%%%% MENU PRESENTER ----> SHOW MEDICAL APPROVAL CLAIM REQUEST METHOD ENDED %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+ SHAUtils.getDurationFromTwoDate(startDate, new Date()));
//
//				
//			//}
//		}
		
		/*protected void showPAHospCoverClaimBillingWizard(
				@Observes @CDIEvent(MenuPresenter.SHOW_PA_HOSP_COVER_MEDICAL_APPROVAL_CLAIM_BILLING_SCREEN) final ParameterDTO parameters) {

			SearchProcessClaimBillingTableDTO tableDTO = (SearchProcessClaimBillingTableDTO) parameters
					.getPrimaryParameter();

			Long ackDocKey = createRodService
					.getLatestDocAcknowledgementKey(tableDTO.getRodKey());
		
					showPAHospCoverProcessClaimBillingWizard(tableDTO);
				

		}*/
		
		protected void showPAHospCoverProcessClaimBillingWizard(
				SearchProcessClaimBillingTableDTO tableDTO) {

			Reimbursement reimbursementObjectByKey = rodService
					.getReimbursementObjectByKey(tableDTO.getRodKey());
			ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
			PreauthDTO reimbursementDTO = mapper
					.getReimbursementDTO(reimbursementObjectByKey);
			
			if(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag() != null && ("Y").equalsIgnoreCase(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag()))
			{
				List<ReconsiderRODRequestTableDTO> reconsiderDTOList = getReconsiderRODRequestForBillEntry(tableDTO.getRodKey());
				if(null != reconsiderDTOList && !reconsiderDTOList.isEmpty())
				{
					for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderDTOList) {
						if(null != reconsiderRODRequestTableDTO.getIsRejectReconsidered() && reconsiderRODRequestTableDTO.getIsRejectReconsidered())
						{
							reimbursementDTO.setIsRejectReconsidered(true);
						}
						else
						{
							reimbursementDTO.setIsRejectReconsidered(false);
						}
					}
				}
				reimbursementDTO.setReconsiderRodRequestList(getReconsiderRODRequestForBillEntry(tableDTO.getRodKey()));
			}

			Claim claimByKey = claimService.getClaimByClaimKey(reimbursementObjectByKey.getClaim().getKey());
			if(null != claimByKey)
			{
				if(null != reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId())
				{
					String  docReceivedFrom = reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getValue();
					reimbursementDTO.setPreviousAccountDetailsList(populatePreviousAccountDetails(claimByKey.getIntimation().getIntimationId(),docReceivedFrom));
				}
			}
			Long reimbursementKey = tableDTO.getRodKey();
			// Reimbursement previousLatestROD =
			// getPreviousLatestROD(claimByKey.getKey(), reimbursementObjectByKey);
			if (false) {
				// reimbursementKey = previousLatestROD.getKey();
				// reimbursementDTO = mapper.getReimbursementDTO(previousLatestROD);
				// reimbursementDTO.setIsPostHospitalization(true);
				// setReimbursmentTOPreauthDTO(mapper, claimByKey,
				// previousLatestROD, reimbursementDTO, true );
				// Hospitals hospitalById =
				// hospitalService.getHospitalById(claimByKey.getIntimation().getHospital());
				// ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails =
				// reimbursementDTO.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
				// updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				// updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				// updateHospitalDetails.setHospitalState(hospitalById.getState());
				// updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
				// reimbursementDTO.setReconsiderationList(getReconsiderRODRequest(claimByKey));
				// reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
				// previousLatestROD.getKey());
				//
				// reimbursementDTO.setIsPreviousROD(true);
				// // reimbursementDTO.setPreviousROD(previousLatestROD);

			} else {
				reimbursementDTO
						.setReconsiderationList(getReconsiderRODRequest(claimByKey));

				reimbursementDTO = setReimbursmentTOPreauthDTO(mapper, claimByKey,
						reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.BILLING);
				reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
						reimbursementObjectByKey.getKey());
			}

			UploadDocumentDTO reimbursementBenefitsValue = claimRequestBenefitsService
					.getReimbursementBenefitsValue(reimbursementObjectByKey
							.getKey());
			if (reimbursementBenefitsValue != null) {
				reimbursementDTO.getPreauthDataExtractionDetails()
						.setUploadDocumentDTO(reimbursementBenefitsValue);
			}
			if (null != reimbursementBenefitsValue
					&& reimbursementBenefitsValue.getPatientCareBenefitFlag() != null
					&& reimbursementBenefitsValue.getPatientCareBenefitFlag()
							.equalsIgnoreCase("PC")) {
				List<ReimbursementBenefitsDetails> patientCareTableByBenefitKey = reimbursementService
						.getPatientCareTableByBenefitKey(reimbursementBenefitsValue
								.getPatientBenefitKey());
				List<PatientCareDTO> patientCareDTOList = new ArrayList<PatientCareDTO>();
				if (patientCareTableByBenefitKey != null
						&& !patientCareTableByBenefitKey.isEmpty()) {
					for (ReimbursementBenefitsDetails patientCareDetails : patientCareTableByBenefitKey) {
						PatientCareDTO dto = new PatientCareDTO();
						dto.setEngagedFrom(patientCareDetails.getEngagedFrom());
						dto.setEngagedTo(patientCareDetails.getEngagedTo());
						dto.setKey(patientCareDetails.getKey());
						patientCareDTOList.add(dto);
					}
				}
				reimbursementDTO.getPreauthDataExtractionDetails()
						.getUploadDocumentDTO()
						.setPatientCareDTO(patientCareDTOList);
			}

			/**
			 * Added for amount claimed table enhancement---- starts
			 * */
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					reimbursementDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), reimbursementDTO
							.getPolicyDto().getKey(),reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());

			Map<Integer, Object> detailsMap = new HashMap<Integer, Object>();
			

			if(reimbursementObjectByKey.getSectionCategory() != null){
				
				
				detailsMap = calcService
						.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
								.getProduct().getKey(), insuredSumInsured,
								reimbursementDTO.getNewIntimationDTO().getHospitalDto()
										.getRegistedHospitals().getCityClass(),
								reimbursementDTO.getNewIntimationDTO()
										.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
			}else{
				
			Long sectionCategory = 0l;
			if(reimbursementDTO.getPolicyDto()
								.getProduct().getKey().equals(ReferenceTable.STAR_CARDIAC_CARE_POLICY) || reimbursementDTO.getPolicyDto()
								.getProduct().getKey().equals(ReferenceTable.DIABETES_INDIVIDUAL_POLICY) || reimbursementDTO.getPolicyDto()
								.getProduct().getKey().equals(ReferenceTable.DIABETES_FLOATER_POLICY))
			{
				sectionCategory = 1l;
			}
				
				detailsMap = calcService
						.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
								.getProduct().getKey(), insuredSumInsured,
								reimbursementDTO.getNewIntimationDTO().getHospitalDto()
										.getRegistedHospitals().getCityClass(),
								reimbursementDTO.getNewIntimationDTO()
								.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan());
								/**
								 * The below code is commented as per sathish sir suggestion for ticket 2355 (production tracker).
								 * By default, the section category would be 1 for three products 
								 * MED-PRD-033 , MED-PRD-032 , MED-PRD-030
								 * 
								 * */
								
				
										//.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),0l,"0");
			}
			
			List<Double> copayValue = calcService.getProductCoPay(reimbursementDTO
					.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
					.getKey(), reimbursementDTO.getClaimDTO().getNewIntimationDto()
					.getInsuredPatient().getKey(), reimbursementDTO.getClaimDTO().getNewIntimationDto()
					.getInsuredPatient().getInsuredId(),reimbursementDTO.getNewIntimationDTO());
			reimbursementDTO.setProductCopay(copayValue);

			/**
			 * Added for amount claimed table enhancement---- ends
			 * */

			List<UploadDocumentDTO> rodSummaryDetails = rodService
					.getRODSummaryDetails(reimbursementObjectByKey.getKey());
			
			/**
			 * Fix for implemeting claims dms in bill entry screen.. -- starts
			 * **/
			if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
			{
				for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
					if(null != claimByKey)
					{
						uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
						uploadDocumentDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
					}
				}
			}
			
			reimbursementDTO = getProrataFlagFromProduct(reimbursementDTO);
			
			reimbursementDTO.setProrataDeductionFlag(reimbursementObjectByKey.getProrataDeductionFlag());
			/**
			 * product based variable is added to enable or disable the component in page level.
			 * This would be static. -- starts
			 * */
			reimbursementDTO.setPackageAvailableFlag(reimbursementObjectByKey.getPackageAvailableFlag());


			List<Long> documentSummaryKeys = new ArrayList<Long>();
			for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
				
				documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
				uploadDocumentDTO.setStatus(true);
				List<RODBillDetails> billEntryDetails = rodService
						.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
				List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
				if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
					for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
						/*
						 * <<<<<<< HEAD
						 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
						 * uploadDocumentDTO)); =======
						 */
						dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
								uploadDocumentDTO));
						// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
					}
				}
				uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
						.get(8));
				uploadDocumentDTO
						.setProductBasedICURent((Double) detailsMap.get(9));
				/*uploadDocumentDTO.setProductBasedAmbulanceAmt((Double) detailsMap
						.get(15));*/
				uploadDocumentDTO.setProductBasedAmbulanceAmt(getProductBasedAmbulanceAmt(tableDTO.getRodKey()));
				uploadDocumentDTO.setStatus(false);
				uploadDocumentDTO.setBillEntryDetailList(dtoList);
				uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
				uploadDocumentDTO.setRodKey(reimbursementObjectByKey.getKey());

				uploadDocumentDTO.setStrUserName(tableDTO.getUsername());

				if (uploadDocumentDTO != null) {
					if ((ReferenceTable.BENEFITS_PATIENT_CARE)
							.equalsIgnoreCase(uploadDocumentDTO
									.getPatientCareBenefitFlag())) {
						List<PatientCareDTO> patientCareList = claimRequestBenefitsService
								.getPatientCareDetails(uploadDocumentDTO
										.getPatientBenefitKey());
						if (null != patientCareList && !patientCareList.isEmpty()) {
							uploadDocumentDTO.setPatientCareDTO(patientCareList);
						}
						// rodDTO.getAddOnBenefitsDTO().setAdmittedNoOfDays(uploadDocumentDTO.getPatientCareNoofDays());
					}
				}
			}
			List<UploadDocumentDTO> rodBillSummaryDetails = rodService
					.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);
			
			if(rodBillSummaryDetails != null){
				for (UploadDocumentDTO uploadDocumentDTO2 : rodBillSummaryDetails) {
					uploadDocumentDTO2.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
				}
			}
			
			reimbursementDTO.getUploadDocDTO().setBillingWorkSheetUploadDocumentList(rodBillSummaryDetails);

			Double totalBilledAmount = reimbursementService
					.getTotalBilledAmount(documentSummaryKeys);

			reimbursementDTO.setAmountConsidered(totalBilledAmount != null ? String
					.valueOf(totalBilledAmount.intValue()) : "0");
			reimbursementDTO
					.setInitialAmountConsidered(totalBilledAmount != null ? String
							.valueOf(totalBilledAmount.intValue()) : "0");
			reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
//			reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
			reimbursementDTO.setKey(reimbursementObjectByKey.getKey());
			reimbursementDTO.setRodNumber(reimbursementObjectByKey.getRodNumber());

			setCategoryFlag(reimbursementObjectByKey, reimbursementDTO);
			
			if (!reimbursementDTO.getHospitalizaionFlag()) {
				reimbursementDTO = setHospitalizationAmount(reimbursementDTO);
			}


			List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
					.search(reimbursementObjectByKey.getClaim().getKey(),false);

			List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
			for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {

				previousPreAuthTableDTO.setRequestedAmt(preauthService
						.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
								previousPreAuthTableDTO.getClaimKey()));
				newList.add(previousPreAuthTableDTO);

			}
			
			

			reimbursementDTO.setPreviousPreauthTableDTO(newList);

//			reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());
			reimbursementDTO.setStrUserName(tableDTO.getUsername());
			reimbursementDTO.setStrPassword(tableDTO.getPassword());
	        reimbursementDTO.setTaskNumber(tableDTO.getTaskNumber());
			
			
			reimbursementDTO.getPreauthMedicalDecisionDetails().setBillingRemarks(
					"");
			
			
			List<AddOnBenefitsDTO> populateAddOnBenefitsTableValues = claimRequestBenefitsService
					.populateAddOnBenefitsTableValues(
							reimbursementDTO.getNewIntimationDTO(),
							reimbursementObjectByKey.getClaim().getKey(),
							reimbursementObjectByKey.getKey(),
							reimbursementDTO.getProductCopay(),null);
			reimbursementDTO.getPreauthDataExtractionDetails()
					.setAddOnBenefitsDTOList(populateAddOnBenefitsTableValues);
			reimbursementDTO = roomRentNursingMapping(reimbursementDTO, 8l, 9l, false);
			reimbursementDTO = roomRentNursingMapping(reimbursementDTO, 10l, 11l, true);
			reimbursementDTO.getPreauthDataExtractionDetails()
					.setDocAckknowledgement(
							reimbursementObjectByKey.getDocAcknowLedgement());

			if (reimbursementObjectByKey.getDocAcknowLedgement()
					.getHospitalizationRepeatFlag() != null
					&& reimbursementObjectByKey.getDocAcknowLedgement()
							.getHospitalizationRepeatFlag().toLowerCase()
							.equalsIgnoreCase("y")) {
				reimbursementDTO.setIsHospitalizationRepeat(true);
			}
			
			if (reimbursementObjectByKey.getStatus().getKey()
					.equals(ReferenceTable.FINANCIAL_REFER_TO_BILLING)) {
				MedicalApprover medicalApprover = reimbursementService
						.getMedicalApprover(reimbursementObjectByKey.getKey());
				if (medicalApprover != null) {
					reimbursementDTO.setPreviousRemarks(medicalApprover
							.getApproverReply());
					reimbursementDTO.setPreviousReasonForReferring(medicalApprover
							.getReasonForReferring());
				}
				reimbursementDTO.setIsReferToBilling(true);
			}
			
			if (claimByKey.getClaimType() != null
					&& claimByKey.getClaimType().getKey()
							.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {

//				PreMedicalMapper premedicalMapper = new PreMedicalMapper();
				Preauth previousPreauth = getPreviousPreauth(claimByKey.getKey());
				
				if(previousPreauth != null) {
					reimbursementDTO.setPreauthKey(previousPreauth.getKey());
				}
			}
			
			if(claimByKey.getStatus() != null) {
				if(claimByKey.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS) ||  claimByKey.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS)) {
					reimbursementDTO.setIsWithDrawn(true);
				}
			}
			
			loadRRCRequestValues(reimbursementDTO,insuredSumInsured,SHAConstants.BILLING);
			
			String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
			if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
				String get64vbStatus = PremiaService.getInstance().get64VBStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), reimbursementDTO.getNewIntimationDTO().getIntimationId());
				if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
					reimbursementDTO.setIsDishonoured(true);
				}  else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
					reimbursementDTO.setIsPending(true);
				}
			}
			reimbursementDTO.setSittingsAmount(calcService.getDialysisAmount(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
			Map<String, String> popupMessages = calcService.getPOPUPMessages(reimbursementDTO.getPolicyKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
			reimbursementDTO.setPopupMap(popupMessages);
			
			
			if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
					&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
				if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
					Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks());
					reimbursementDTO.setSuspiciousPopupMap(suspiciousMap);
				}
			}
			// If hospitalization is not processed then remaining ROD should be rejected.
			Reimbursement hospROD = reimbursementService.getHospitalizationROD(reimbursementObjectByKey.getClaim().getKey());
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)) {
				if(hospROD == null) {
					reimbursementDTO.setIsHospitalizationRejected(true);
				}
			}
			
			Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
					.getIntimation().getHospital());
			
			paymentDetailsForfinancial(reimbursementObjectByKey, reimbursementDTO,
					hospitalById);
			
			setReimbursementValues(reimbursementObjectByKey, reimbursementDTO);
			
	       Reimbursement hospitalizationOrPartialROD = reimbursementService.getHospitalizationOrPartialROD(reimbursementObjectByKey.getClaim().getKey());
			
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				
				
				Integer seqNumber = 0;
				
				if(reimbursementObjectByKey.getRodNumber() != null){
					String[] split = reimbursementObjectByKey.getRodNumber().split("/");
					seqNumber = Integer.valueOf(split[split.length - 1]);
				}
				
				if(hospitalizationOrPartialROD == null && ! seqNumber.equals(1)) {
//					reimbursementDTO.setIsDishonoured(true);
					reimbursementDTO.setIsHospitalizationRejected(true);
				}
			}
			
			Map<String, Integer> productBenefitFlag = calcService.getProductBenefitFlag(reimbursementObjectByKey.getClaim().getKey(), reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey());
			
			if(productBenefitFlag.get(SHAConstants.PRE_HOSP_FLAG).equals(0)) {
				reimbursementDTO.setIsPreHospApplicable(false);
			}
			
			if(productBenefitFlag.get(SHAConstants.POST_HOSP_FLAG).equals(0)) {
				reimbursementDTO.setIsPostHospApplicable(false);
			}
			
			if(productBenefitFlag.get(SHAConstants.LUMP_SUM_FLAG).equals(1)) {
				reimbursementDTO.setIsLumpsumApplicable(true);
			}
			
			if(productBenefitFlag.get(SHAConstants.HOSPITALCASH_FLAG).equals(1)) {
				reimbursementDTO.setIsHospitalCashApplicable(true);
			}
			
			if(productBenefitFlag.get(SHAConstants.PATIENTCARE_FLAG).equals(1)) {
				reimbursementDTO.setIsPatientCareApplicable(true);
			}
			
			
			MastersValue networkHospitalType = masterService.getMaster(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNetworkHospitalTypeId());
			reimbursementDTO.setNetworkHospitalType(networkHospitalType.toString());
			
			reimbursementDTO = checkFinalEnhancement(reimbursementDTO);

			
			try {
				if(reimbursementObjectByKey.getReconsiderationRequest() != null && reimbursementObjectByKey.getReconsiderationRequest().equalsIgnoreCase("Y")) {
					//if(reimbursementObjectByKey.getDocAcknowLedgement().getPaymentCancellationFlag() !=  null && reimbursementObjectByKey.getDocAcknowLedgement().getPaymentCancellationFlag().equalsIgnoreCase("N")) {
						reimbursementDTO.setIsReconsiderationRequest(true);
						if(reimbursementService.isClaimPaymentAvailable(reimbursementObjectByKey.getRodNumber())) {
							Double claimPaymentAmountByRODNumber = reimbursementService.getClaimPaymentAmountByRODNumber(reimbursementObjectByKey.getRodNumber());
							reimbursementDTO.setClaimPaymentAmount(claimPaymentAmountByRODNumber);
						} else {
							reimbursementDTO.setIsReconsiderationRequest(false);
						}
//						Double claimPaymentAmountByRODNumber = reimbursementService.getClaimPaymentAmountByRODNumber(reimbursementObjectByKey.getRodNumber());
//						reimbursementDTO.setClaimPaymentAmount(claimPaymentAmountByRODNumber);
//					}
					
				}
			} catch(Exception e) {
				e.printStackTrace();
			}
			
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				reimbursementDTO.setIsCashlessType(true);
			}
			if(reimbursementDTO.getIsCashlessType() && reimbursementDTO.getHospitalizaionFlag() && (reimbursementDTO.getStatusKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY))){
				reimbursementDTO.setIsDirectToBilling(true);
				Preauth latestPreauth = reimbursementService.getLatestPreauthByClaim(reimbursementDTO.getClaimDTO().getKey());
				reimbursementDTO.getClaimDTO().setLatestPreauthKey(latestPreauth.getKey());
			}
			reimbursementDTO.setAdmissionDatePopup(calcService.getPolicyAgeingForPopup(reimbursementDTO.getNewIntimationDTO().getAdmissionDate(), reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
			reimbursementDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey()));
			reimbursementDTO.setIsPEDInitiatedForBtn(reimbursementDTO.getIsPEDInitiated());
						
			List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
			
			reimbursementDTO.setInsuredPedDetails(pedByInsured);
			
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				if(reimbursementDTO.getHospitalizaionFlag()) {
					Reimbursement partialHospitalizationRODWithSettled = getPartialHospitalizationRODWithSettled(claimByKey.getKey());
					ReimbursementCalCulationDetails hosptialization = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(reimbursementDTO.getKey(), ReferenceTable.HOSPITALIZATION);
					if(hosptialization != null) {
						reimbursementDTO.setBillingApprovedAmount(hosptialization.getPayableToHospAftTDS() != null ? hosptialization.getPayableToHospAftTDS().doubleValue() : 0d);
						reimbursementDTO.setPayableToHospAmt(hosptialization.getPayableToHospital() != null ? hosptialization.getPayableToHospital().doubleValue() : 0d);
						reimbursementDTO.setHospDiscountAmount(hosptialization.getHospitalDiscount() != null ? hosptialization.getHospitalDiscount().doubleValue() : 0d);
					}
					if(partialHospitalizationRODWithSettled != null) {
						ReimbursementCalCulationDetails reimbursementCalcObjByRodAndClassificationKey = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(partialHospitalizationRODWithSettled.getKey(), ReferenceTable.HOSPITALIZATION);
						reimbursementDTO.setPayableToInsAmt(reimbursementCalcObjByRodAndClassificationKey.getPayableInsuredAfterPremium() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableInsuredAfterPremium().doubleValue() : 0d);
						reimbursementDTO.setFAApprovedAmount(partialHospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? partialHospitalizationRODWithSettled.getFinancialApprovedAmount() : 0d);
					}
				} else if(reimbursementDTO.getPartialHospitalizaionFlag()) {
					Reimbursement hospitalizationRODWithSettled = getHospitalizationRODWithSettled(claimByKey.getKey());
					if(hospitalizationRODWithSettled != null) {
						ReimbursementCalCulationDetails reimbursementCalcObjByRodAndClassificationKey = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(hospitalizationRODWithSettled.getKey(), ReferenceTable.HOSPITALIZATION);
						reimbursementDTO.setPayableToHospAmt(reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital().doubleValue() : 0d);
						reimbursementDTO.setHospDiscountAmount(reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d);
						Double amount = (reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d) + (hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : 0d);
						reimbursementDTO.setFAApprovedAmount(amount);
					}
				}
			}
			
			Boolean queryReceivedStatusRod = reimbursementQuerySerice.isQueryReceivedStatusRod(reimbursementObjectByKey.getKey());
			 
			 if(queryReceivedStatusRod){
				 reimbursementDTO.setIsQueryReceived(true);
			 }
			 
			 
				List<ReimbursementCalCulationDetails> reimbursementCalculationDetails = acknowledgementDocumentsReceivedService.getReimbursementCalculationDetails(reimbursementObjectByKey.getKey());
				if(reimbursementCalculationDetails != null && !reimbursementCalculationDetails.isEmpty()) {
					for (ReimbursementCalCulationDetails reimbursementCalCulationDetails2 : reimbursementCalculationDetails) {
						if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
								reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.HOSPITALIZATION)){
							
							HopitalizationCalulationDetailsDTO hospitalizationCalcDTO = getHospitalizationCalculationDTO(reimbursementCalCulationDetails2,reimbursementDTO, reimbursementObjectByKey.getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_BILLING) ? false : true);
							if(reimbursementDTO.getDocumentReceivedFromId() != null && reimbursementDTO.getDocumentReceivedFromId().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
						           hospitalizationCalcDTO.setBalanceToBePaid(0);
							}
							reimbursementDTO.setHospitalizationCalculationDTO(hospitalizationCalcDTO);
							
						}
						else if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
								reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.PRE_HOSPITALIZATION)){
							PreHopitalizationDetailsDTO preHospitalizationCalcDTO = getPreHospitalizationDTO(reimbursementCalCulationDetails2, reimbursementDTO, reimbursementObjectByKey.getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_BILLING) ? false : true);
							reimbursementDTO.setPreHospitalizationCalculationDTO(preHospitalizationCalcDTO);
							
						}else if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
								reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.POST_HOSPITALIZATION)){
							PostHopitalizationDetailsDTO postHospitalizationCalcDTO = getPostHospitalizationDTO(reimbursementCalCulationDetails2, reimbursementDTO, reimbursementObjectByKey.getKey().equals(ReferenceTable.FINANCIAL_REFER_TO_BILLING) ? false : true);
							reimbursementDTO.setPostHospitalizationCalculationDTO(postHospitalizationCalcDTO);
						}
					}
				}
			
				reimbursementDTO.setAmountConsidered(reimbursementDTO.getAmountConsidedAfterCoPay() != null ? String
						.valueOf(reimbursementDTO.getAmountConsidedAfterCoPay().intValue()) : "0");
			 
//			 reimbursementService.setBPMForClaimBilling(reimbursementDTO, false, "MEDICAL", reimbursementObjectByKey);
				Double totalClaimedAmount = reimbursementService.getTotalClaimedAmount(reimbursementObjectByKey);
				 reimbursementDTO.setRodTotalClaimedAmount(totalClaimedAmount);
				 
				 if(reimbursementDTO.getAmountConsidedAfterCoPay() != null && totalBilledAmount != null && !reimbursementDTO.getAmountConsidedAfterCoPay().equals(totalBilledAmount)) {
					 reimbursementDTO.setAmountConsidered(String.valueOf(totalBilledAmount.longValue()));
				 }

				// SHAUtils.setDefaultCopayValue(reimbursementDTO);

				 if(reimbursementDTO.getIsReconsiderationRequest() != null && reimbursementDTO.getIsReconsiderationRequest()){
					 reimbursementDTO.setIsReverseAllocation(false);
				 }

				 if(reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)
						 && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
						 && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
				 
						 if(hospitalById != null){
								Boolean hospitalDiscount = SHAUtils.isHospitalDiscount(hospitalById);
								reimbursementDTO.setIsHospitalDiscountApplicable(hospitalDiscount);
						 }
				 }
				 
//				 if(reimbursementDTO.getNewIntimationDTO() != null && reimbursementDTO.getNewIntimationDTO().getInsuredPatient() != null &&
//						 reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
//						Long claimCount = preauthService.getClaimCount(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
//						if(claimCount != null){
//							reimbursementDTO.setClaimCount(claimCount);
//						}
//					}


			view.setPAHospCoverProcessClaimBilling(PAHospCoverBillingWizard.class, reimbursementDTO);
			
			
		}


		
		protected void showLegalHome(
				@Observes @CDIEvent(MenuItemBean.LEGAL_HOME) final ParameterDTO parameters) {
			
			view.setViewsLegalHome(SearchLegalHomeView.class);
			/*view.setViewsPAProcessClaimBilling(PASearchProcessClaimBillingView.class,
					true, selectValueContainerForCPUCode, productNameCode,selectValueContainerForType,selectValueForPriority,statusByStage,selectValueContainerForBenefits);*/
		}
		
		
		protected void showAddAditionalDocumentsWizard(
				@Observes @CDIEvent(MenuPresenter.SHOW_ADDITIONAL_DOCUMENTS) final ParameterDTO parameters) {

			SearchAddAdditionalDocumentTableDTO tableDTO = (SearchAddAdditionalDocumentTableDTO) parameters
					.getPrimaryParameter();
			ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
			//SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO = new SelectRODtoAddAdditionalDocumentsDTO();

			Long claimKey = tableDTO.getClaimKey();
			Claim claim = claimService.getClaimByKey(claimKey);

			List<Reimbursement> reimbursementList = reimbursementService
					.getReimbursementByClaimKey(claimKey);
			
			//List<Reimbursement> reimbursementList = new ArrayList<Reimbursement>();
			Map<Long, Long> rejectMap = ReferenceTable.REJECT_ROD_KEYS;
			/*if(null != reimbursementListObj && !reimbursementListObj.isEmpty())
			{
				for (Reimbursement reimbursement : reimbursementListObj) {
					if(null != rejectMap && !rejectMap.isEmpty() && null == rejectMap.get(reimbursement.getStatus().getKey()))
					{
						reimbursementList.add(reimbursement);
					}
				}
			}
			
	*/
			/*Boolean isValidClaimForAck = true;
			if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.BILLING_CURRENT_QUEUE)))
			{
				isValidClaimForAck = false;
				view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
			}
			if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.FA_CURRENT_QUEUE)))
			{
				isValidClaimForAck = false;
				view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
			}*/
			
			if (tableDTO.getKey() != null) {
				Reimbursement reimbursement = reimbursementService
						.getReimbursementbyRod(tableDTO.getKey());
				
				/*Boolean isValidClaimForAck = true;
				if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.BILLING_CURRENT_QUEUE)))
				{
					
					isValidClaimForAck = false;
					view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
				}
				if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.FA_CURRENT_QUEUE)))
				{
					isValidClaimForAck = false;
					view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
				}*/
			
				if(null != reimbursement)
				{
					rodDTO.getDocumentDetails().setDocAcknowledgementKey(
							reimbursement.getDocAcknowLedgement().getKey());
					rodDTO.getDocumentDetails().setDateOfDischarge(reimbursement.getDateOfDischarge());
					rodDTO.getDocumentDetails().setRodKey(reimbursement.getKey());
				}
				
				
				String diagnosisForPreauthByKey = "";
				if(reimbursement != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
					
				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);
				
			}

			DocAcknowledgement docAcknowlegement = acknowledgementDocumentsReceivedService
					.getDocAcknowledgment(rodDTO.getDocumentDetails()
							.getDocAcknowledgementKey());

			rodDTO.getDocumentDetails().setAcknowledgementNumber(
					docAcknowlegement.getAcknowledgeNumber());
			rodDTO.getDocumentDetails().setRodKey(tableDTO.getKey());
			
			if(null != docAcknowlegement.getModeOfReceiptId())
			{
				rodDTO.getDocumentDetails().setModeOfReceiptValue(docAcknowlegement.getModeOfReceiptId().getValue());
			}
			
			rodDTO.getDocumentDetails().setAdditionalRemarks(docAcknowlegement.getAdditionalRemarks());

			rodDTO.getDocumentDetails().setAcknowledgmentContactNumber(docAcknowlegement.getInsuredContactNumber());
			rodDTO.getDocumentDetails().setEmailId(docAcknowlegement.getInsuredEmailId());
			rodDTO.getDocumentDetails().setDocumentsReceivedDate(docAcknowlegement.getDocumentReceivedDate());
			/*if(null != docAcknowlegement.getSourceOfDocument())
				{
					if(SHAConstants.SOURCE_DOC_INSURED.equalsIgnoreCase(docAcknowlegement.getSourceOfDocument())){
				rodDTO.getDocumentDetails().setSourceOfDocument(Boolean.TRUE);
			}
			else if(SHAConstants.SOURCE_DOC_INTERNAL.equalsIgnoreCase(docAcknowlegement.getSourceOfDocument())){
				rodDTO.getDocumentDetails().setSourceOfDocument(Boolean.FALSE);
			}
				}*/
			rodDTO.getDocumentDetails().setHospitalizationFlag(
					docAcknowlegement.getHospitalisationFlag());
			rodDTO.getDocumentDetails().setPreHospitalizationFlag(
					docAcknowlegement.getPreHospitalisationFlag());
			rodDTO.getDocumentDetails().setPostHospitalizationFlag(
					docAcknowlegement.getPostHospitalisationFlag());
			rodDTO.getDocumentDetails().setPartialHospitalizationFlag(
					docAcknowlegement.getPartialHospitalisationFlag());
			
			if(docAcknowlegement.getHospitalizationRepeatFlag() != null){
				rodDTO.getDocumentDetails().setHospitalizationRepeatFlag(docAcknowlegement.getHospitalizationRepeatFlag());	
			}
			
			rodDTO.getDocumentDetails().setHospitalCashFlag(docAcknowlegement.getProdHospBenefitFlag());
			
			rodDTO.getDocumentDetails().setLumpSumAmountFlag(
					docAcknowlegement.getLumpsumAmountFlag());
			if (docAcknowlegement.getHospitalizationClaimedAmount() != null) {
				rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(
						docAcknowlegement.getHospitalizationClaimedAmount()
								.toString());
			}

			SelectRODtoAddAdditionalDocumentsMapper selectRODtoAddAdditionalDocumentsMapper = new SelectRODtoAddAdditionalDocumentsMapper();
			List<SelectRODtoAddAdditionalDocumentsDTO> selectRODtoAddAdditionalDocumentsDTOList = selectRODtoAddAdditionalDocumentsMapper
					.getReimbursementDto(reimbursementList);
			
			for (SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO2 : selectRODtoAddAdditionalDocumentsDTOList) {
				if(selectRODtoAddAdditionalDocumentsDTO2 != null && selectRODtoAddAdditionalDocumentsDTO2.getStatusKey() != null){
				if(selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.ACKNOWLEDGE_STATUS_KEY) || selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY)
				|| selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.BILL_ENTRY_STATUS_KEY)){
					
					selectRODtoAddAdditionalDocumentsDTO2.setApprovedAmt(null);
					
					}
				}
				
			}

			Long count = getAckNoCountByClaimKey(claimKey,
					ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED);
			rodDTO.setAcknowledgementNumber(count);
			ClaimDto claimDTO  = null;
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			if (claim != null) {
				newIntimationDto = intimationService.getIntimationDto(claim
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claim);
				claimDTO.setNewIntimationDto(newIntimationDto);
				rodDTO.setClaimDTO(claimDTO);

			}
			generateAcknowledgeNo(rodDTO);

			/*
			 * rodDTO.getDocumentDetails().setDocumentCheckList(
			 * getDocumentCheckList(claimByKey));
			 */

			rodDTO.setProductBenefitMap(calcService.getProductBenefitFlag(
					claim.getKey(), claim.getIntimation().getPolicy().getProduct()
							.getKey()));
			rodDTO.getDocumentDetails().setDocumentCheckList(
					setDocumentCheckListTableValues());

			rodDTO.setReconsiderRodRequestList(getReconsiderRODRequest(claim));
			rodDTO.setRodQueryDetailsList(getRODQueryDetailsValues(claim));

//			List<Reimbursement> reimbursementByStageId = reimbursementService
//					.getReimbursementByClaimKeyAndStageId(claimKey);
			/*List<Reimbursement> reimbursementByStageId = reimbursementService
				.getReimbursementByClaimKey(claimKey);*/
			List<Reimbursement> reimbursementByStageId = new ArrayList<Reimbursement>();
			List<Reimbursement> reimbursementListObj = reimbursementService
			.getReimbursementByClaimKey(claimKey);
			
			if(null != reimbursementListObj && !reimbursementListObj.isEmpty())
			{
				for (Reimbursement reimbursement : reimbursementListObj) {
					if(null != rejectMap && !rejectMap.isEmpty() && null == rejectMap.get(reimbursement.getStatus().getKey()))
					{
						reimbursementByStageId.add(reimbursement);
					}
				}
			}

			selectRODtoAddAdditionalDocumentsDTOList = selectRODtoAddAdditionalDocumentsMapper
					.getReimbursementDto(reimbursementByStageId);

			for (int index = 0; index < selectRODtoAddAdditionalDocumentsDTOList
					.size(); index++) {
				if (reimbursementByStageId.get(index).getStatus().getKey()
						.equals(ReferenceTable.BILLING_SEND_TO_FINANCIAL_APPROVER)) {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementByStageId.get(index)
											.getBillingApprovedAmount() != null ? reimbursementByStageId
											.get(index).getBillingApprovedAmount()
											.toString()
											: "");
				} else if (reimbursementByStageId.get(index).getStatus().getKey()
						.equals(ReferenceTable.FINANCIAL_APPROVE_STATUS)) {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementByStageId.get(index)
											.getFinancialApprovedAmount() != null ? reimbursementByStageId
											.get(index)
											.getFinancialApprovedAmount()
											.toString()
											: "");
				} else {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementByStageId.get(index)
											.getCurrentProvisionAmt() != null ? reimbursementByStageId
											.get(index).getCurrentProvisionAmt()
											.toString()
											: "");
				}
			}

			for (int index = 0; index < reimbursementByStageId.size(); index++) {
				StringBuffer billClassificaiton = new StringBuffer();
				Double claimedAmt = 0d;
				if (reimbursementByStageId.get(index) != null
						&& reimbursementByStageId.get(index)
								.getDocAcknowLedgement() != null) {
					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getHospitalisationFlag()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospitalisation, ");
						}

					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPreHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPreHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton .append("Pre - Hospitalisation, ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPostHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPostHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Post - Hospitalisation,  ");
						}

					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPartialHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPartialHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Partial - Hospitalisation,  ");
						}

					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getLumpsumAmountFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getLumpsumAmountFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Lumpsum - Amount,  ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getHospitalCashFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getHospitalCashFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospital - Cash,  ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getHospitalizationRepeatFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getHospitalizationRepeatFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospitalisation - Repeat,  ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPatientCareFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPatientCareFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Patient - Care,  ");
						}
					}
					
					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getCompassionateTravel() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getCompassionateTravel().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Compassionate Travel,  ");
						}
					}
					
					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getRepatriationOfMortalRemain() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getRepatriationOfMortalRemain().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Repatriation Of Mortal Remains,  ");
						}
					}
					
					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPreferredNetworkHospita() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPreferredNetworkHospita().toString()
								.equalsIgnoreCase("y")) {
							
							if(reimbursementByStageId.get(index).getDocAcknowLedgement().getClaim() != null && 
									reimbursementByStageId.get(index).getDocAcknowLedgement().getClaim().getIntimation() != null &&
									reimbursementByStageId.get(index).getDocAcknowLedgement().getClaim().getIntimation().getPolicy() != null &&
									(ReferenceTable.FHO_REVISED_PRODUCT_2021_KEY.equals(reimbursementByStageId.get(index).getDocAcknowLedgement().getClaim().getIntimation().getPolicy().getProduct().getKey())
											|| ReferenceTable.getValuableServiceProviderForFHO().containsKey(reimbursementByStageId.get(index).getDocAcknowLedgement().getClaim().getIntimation().getPolicy().getProduct().getKey()))){
								billClassificaiton.append("Valuable Service Provider (Hospital),  ");
							}else{
								billClassificaiton.append("Preferred Network Hospital,  ");
							}
						}
					}
					
					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getSharedAccomodation() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getSharedAccomodation().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Shared Accomodation,  ");
						}
					}
					
					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getEmergencyMedicalEvaluation() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getEmergencyMedicalEvaluation().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Emergency Medical Evacuation,  ");
						}
					}
					
					
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getHospitalizationClaimedAmount();
//					}
	//
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getPreHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getPreHospitalizationClaimedAmount();
//					}
	//
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getPostHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getPostHospitalizationClaimedAmount();
//					}
				}
				if (billClassificaiton.length() > 0) {
					/*billClassificaiton = billClassificaiton.toString().substring(0,
							billClassificaiton.length() - 2);*/
					String billClassificationStr = billClassificaiton.toString().substring(0, billClassificaiton.length() - 2);
					selectRODtoAddAdditionalDocumentsDTOList.get(index)
							.setBillClassification(billClassificationStr);

				}
				claimedAmt = createRodService.getClaimedAmount(selectRODtoAddAdditionalDocumentsDTOList.get(index).getKey());
				if(claimedAmt != null){
				selectRODtoAddAdditionalDocumentsDTOList.get(index).setClaimedAmt(
						claimedAmt.toString());
				}
			}

			Integer index = 1;

			for (SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO1 : selectRODtoAddAdditionalDocumentsDTOList) {
				selectRODtoAddAdditionalDocumentsDTO1.setsNo(index.toString());
				index++;
			}
			/*List<UploadDocumentDTO> rodSummaryDetails = rodService
					.getRODSummaryDetails(tableDTO.getKey());
			
			if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
			{
				List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
			//	List<UploadDocumentDTO> uploadDocsList = rodDTO.getUploadDocsList();
				for (UploadDocumentDTO uploadDocDTO : rodSummaryDetails) {
					//sss
					uploadDocDTO.setIsBillSaved(true);
					List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
					List<RODBillDetails> billEntryDetails = rodService
							.getBillEntryDetails(uploadDocDTO.getDocSummaryKey());
					if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
						for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
							
							 * <<<<<<< HEAD
							 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
							 * uploadDocumentDTO)); =======
							 
							dtoList.add(getBillDetailsDTOForBillEntry(billEntryDetailsDO));
							
							// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
						}
						uploadDocDTO.setBillEntryDetailList(dtoList);
					}
				}
			//	rodDTO.getUploadDocumentsDTO().setBillEntryDetailList(dtoList);
				rodDTO.setUploadDocsList(rodSummaryDetails);
				
			}*/

			rodDTO.setSelectRODtoAddAdditionalDocumentsDTO(selectRODtoAddAdditionalDocumentsDTOList);

			rodDTO.setStrUserName(tableDTO.getUsername());
			
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDTO.getUsername());

			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ADD_ADDITIONAL_DOCUMENTS);
			
			//loadRRCRequestValuesForProcessing(rrcDTO,insuredSumInsured,SHAConstants.ACKNOWLEDGE_DOC_RECEIVED);
			
			rodDTO.setRrcDTO(rrcDTO);

			
			
			
			/*
			 * rodDTO.setStrUserName("oprofficeclaimscoordinator");
			 * rodDTO.setStrPassword("welcome1");
			 */
	        //if(isValidClaimForAck){
	        	view.setAddAditionalDocumentsWizard(AddAditionalDocumentsView.class,
	    				rodDTO);
	        //}
			

		}

		
		
		protected void showReceivedPhysicalDocumentsWizard(
				@Observes @CDIEvent(MenuPresenter.SHOW_PHYSICAL_DOCUMENT) final ParameterDTO parameters) {

			PhysicalDocumentReceivedMakerTableDTO tableDTO = (PhysicalDocumentReceivedMakerTableDTO) parameters
					.getPrimaryParameter();
			ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
			//SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO = new SelectRODtoAddAdditionalDocumentsDTO();

			Long claimKey = tableDTO.getClaimKey();
			Claim claim = claimService.getClaimByKey(claimKey);

			List<Reimbursement> reimbursementList = reimbursementService
					.getReimbursementByClaimKeForPhysicalDoc(claimKey);
			
			//List<Reimbursement> reimbursementList = new ArrayList<Reimbursement>();
			Map<Long, Long> rejectMap = ReferenceTable.REJECT_ROD_KEYS;
			/*if(null != reimbursementListObj && !reimbursementListObj.isEmpty())
			{
				for (Reimbursement reimbursement : reimbursementListObj) {
					if(null != rejectMap && !rejectMap.isEmpty() && null == rejectMap.get(reimbursement.getStatus().getKey()))
					{
						reimbursementList.add(reimbursement);
					}
				}
			}
			
	*/
			/*Boolean isValidClaimForAck = true;
			if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.BILLING_CURRENT_QUEUE)))
			{
				isValidClaimForAck = false;
				view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
			}
			if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.FA_CURRENT_QUEUE)))
			{
				isValidClaimForAck = false;
				view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
			}*/
			
			if (tableDTO.getKey() != null) {
				Reimbursement reimbursement = reimbursementService
						.getReimbursementbyRod(tableDTO.getKey());
				
				/*Boolean isValidClaimForAck = true;
				if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.BILLING_CURRENT_QUEUE)))
				{
					
					isValidClaimForAck = false;
					view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
				}
				if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.FA_CURRENT_QUEUE)))
				{
					isValidClaimForAck = false;
					view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
				}*/
			
				if(null != reimbursement)
				{
					rodDTO.getDocumentDetails().setDocAcknowledgementKey(
							reimbursement.getDocAcknowLedgement().getKey());
					rodDTO.getDocumentDetails().setDateOfDischarge(reimbursement.getDateOfDischarge());
					rodDTO.getDocumentDetails().setRodKey(reimbursement.getKey());
				}
				
				
				String diagnosisForPreauthByKey = "";
				if(reimbursement != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
					
				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);
				
			}

			DocAcknowledgement docAcknowlegement = acknowledgementDocumentsReceivedService
					.getDocAcknowledgment(rodDTO.getDocumentDetails()
							.getDocAcknowledgementKey());

			rodDTO.getDocumentDetails().setAcknowledgementNumber(
					docAcknowlegement.getAcknowledgeNumber());
			rodDTO.getDocumentDetails().setRodKey(tableDTO.getKey());
			
			if(null != docAcknowlegement.getModeOfReceiptId())
			{
				rodDTO.getDocumentDetails().setModeOfReceiptValue(docAcknowlegement.getModeOfReceiptId().getValue());
			}
			
			rodDTO.getDocumentDetails().setAdditionalRemarks(docAcknowlegement.getAdditionalRemarks());

			rodDTO.getDocumentDetails().setAcknowledgmentContactNumber(docAcknowlegement.getInsuredContactNumber());
			rodDTO.getDocumentDetails().setEmailId(docAcknowlegement.getInsuredEmailId());
			
			rodDTO.getDocumentDetails().setHospitalizationFlag(
					docAcknowlegement.getHospitalisationFlag());
			rodDTO.getDocumentDetails().setPreHospitalizationFlag(
					docAcknowlegement.getPreHospitalisationFlag());
			rodDTO.getDocumentDetails().setPostHospitalizationFlag(
					docAcknowlegement.getPostHospitalisationFlag());
			rodDTO.getDocumentDetails().setPartialHospitalizationFlag(
					docAcknowlegement.getPartialHospitalisationFlag());
			
			if(docAcknowlegement.getHospitalizationRepeatFlag() != null){
				rodDTO.getDocumentDetails().setHospitalizationRepeatFlag(docAcknowlegement.getHospitalizationRepeatFlag());	
			}
			
			rodDTO.getDocumentDetails().setLumpSumAmountFlag(
					docAcknowlegement.getLumpsumAmountFlag());
			if (docAcknowlegement.getHospitalizationClaimedAmount() != null) {
				rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(
						docAcknowlegement.getHospitalizationClaimedAmount()
								.toString());
			}

			SelectRODtoAddAdditionalDocumentsMapper selectRODtoAddAdditionalDocumentsMapper = new SelectRODtoAddAdditionalDocumentsMapper();
			List<SelectRODtoAddAdditionalDocumentsDTO> selectRODtoAddAdditionalDocumentsDTOList = selectRODtoAddAdditionalDocumentsMapper
					.getReimbursementDto(reimbursementList);
			
			for (SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO2 : selectRODtoAddAdditionalDocumentsDTOList) {
				if(selectRODtoAddAdditionalDocumentsDTO2 != null && selectRODtoAddAdditionalDocumentsDTO2.getStatusKey() != null){
				if(selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.ACKNOWLEDGE_STATUS_KEY) || selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY)
				|| selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.BILL_ENTRY_STATUS_KEY)){
					
					selectRODtoAddAdditionalDocumentsDTO2.setApprovedAmt(null);
					
					}
				selectRODtoAddAdditionalDocumentsDTO2.setScreenName(tableDTO.getScreenName());
				}
				
			}
			
			if(tableDTO.getScreenName() != null){
				rodDTO.setScreenName(tableDTO.getScreenName());
			}

			Long count = getAckNoCountByClaimKey(claimKey,
					ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED);
			rodDTO.setAcknowledgementNumber(count);
			ClaimDto claimDTO  = null;
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			if (claim != null) {
				newIntimationDto = intimationService.getIntimationDto(claim
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claim);
				claimDTO.setNewIntimationDto(newIntimationDto);
				rodDTO.setClaimDTO(claimDTO);

			}
			generateAcknowledgeNo(rodDTO);

			/*
			 * rodDTO.getDocumentDetails().setDocumentCheckList(
			 * getDocumentCheckList(claimByKey));
			 */

			rodDTO.setProductBenefitMap(calcService.getProductBenefitFlag(
					claim.getKey(), claim.getIntimation().getPolicy().getProduct()
							.getKey()));
			rodDTO.getDocumentDetails().setDocumentCheckList(
					setDocumentCheckListTableValues());

			rodDTO.setReconsiderRodRequestList(getReconsiderRODRequest(claim));
			rodDTO.setRodQueryDetailsList(getRODQueryDetailsValues(claim));

//			List<Reimbursement> reimbursementByStageId = reimbursementService
//					.getReimbursementByClaimKeyAndStageId(claimKey);
			/*List<Reimbursement> reimbursementByStageId = reimbursementService
				.getReimbursementByClaimKey(claimKey);*/
			List<Reimbursement> reimbursementByStageId = new ArrayList<Reimbursement>();
			List<Reimbursement> reimbursementListObj = reimbursementService
			.getReimbursementByClaimKeForPhysicalDoc(claimKey);
			
			if(null != reimbursementListObj && !reimbursementListObj.isEmpty())
			{
				for (Reimbursement reimbursement : reimbursementListObj) {
					if(null != rejectMap && !rejectMap.isEmpty() && null == rejectMap.get(reimbursement.getStatus().getKey()))
					{
						reimbursementByStageId.add(reimbursement);
					}
				}
			}

			selectRODtoAddAdditionalDocumentsDTOList = selectRODtoAddAdditionalDocumentsMapper
					.getReimbursementDto(reimbursementByStageId);

			for (int index = 0; index < selectRODtoAddAdditionalDocumentsDTOList
					.size(); index++) {
				if (reimbursementByStageId.get(index).getStatus().getKey()
						.equals(ReferenceTable.BILLING_SEND_TO_FINANCIAL_APPROVER)) {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementByStageId.get(index)
											.getBillingApprovedAmount() != null ? reimbursementByStageId
											.get(index).getBillingApprovedAmount()
											.toString()
											: "");
				} else if (reimbursementByStageId.get(index).getStatus().getKey()
						.equals(ReferenceTable.FINANCIAL_APPROVE_STATUS)) {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementByStageId.get(index)
											.getFinancialApprovedAmount() != null ? reimbursementByStageId
											.get(index)
											.getFinancialApprovedAmount()
											.toString()
											: "");
				} else {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementByStageId.get(index)
											.getCurrentProvisionAmt() != null ? reimbursementByStageId
											.get(index).getCurrentProvisionAmt()
											.toString()
											: "");
				}
			}

			for (int index = 0; index < reimbursementByStageId.size(); index++) {
				StringBuffer billClassificaiton = new StringBuffer();
				Double claimedAmt = 0d;
				if (reimbursementByStageId.get(index) != null
						&& reimbursementByStageId.get(index)
								.getDocAcknowLedgement() != null) {
					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getHospitalisationFlag()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospitalisation, ");
						}

					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPreHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPreHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton .append("Pre - Hospitalisation, ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPostHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPostHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Post - Hospitalisation,  ");
						}

					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPartialHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPartialHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Partial - Hospitalisation,  ");
						}

					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getLumpsumAmountFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getLumpsumAmountFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Lumpsum - Amount,  ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getHospitalCashFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getHospitalCashFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospital - Cash,  ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getHospitalizationRepeatFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getHospitalizationRepeatFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospitalisation - Repeat,  ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPatientCareFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPatientCareFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Patient - Care,  ");
						}
					}
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getHospitalizationClaimedAmount();
//					}
	//
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getPreHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getPreHospitalizationClaimedAmount();
//					}
	//
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getPostHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getPostHospitalizationClaimedAmount();
//					}
				}
				if (billClassificaiton.length() > 0) {
					/*billClassificaiton = billClassificaiton.toString().substring(0,
							billClassificaiton.length() - 2);*/
					String billClassificationStr = billClassificaiton.toString().substring(0, billClassificaiton.length() - 2);
					selectRODtoAddAdditionalDocumentsDTOList.get(index)
							.setBillClassification(billClassificationStr);

				}
				claimedAmt = createRodService.getClaimedAmount(selectRODtoAddAdditionalDocumentsDTOList.get(index).getKey());
				if(claimedAmt != null){
				selectRODtoAddAdditionalDocumentsDTOList.get(index).setClaimedAmt(
						claimedAmt.toString());
				}
			}

			Integer index = 1;

			for (SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO1 : selectRODtoAddAdditionalDocumentsDTOList) {
				selectRODtoAddAdditionalDocumentsDTO1.setsNo(index.toString());
				index++;
			}
			List<UploadDocumentDTO> rodSummaryDetails = rodService
					.getRODSummaryDetails(tableDTO.getKey());
			
			if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
			{
				List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
			//	List<UploadDocumentDTO> uploadDocsList = rodDTO.getUploadDocsList();
				for (UploadDocumentDTO uploadDocDTO : rodSummaryDetails) {
					//sss
					uploadDocDTO.setIsBillSaved(true);
//					List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
					List<RODBillDetails> billEntryDetails = rodService
							.getBillEntryDetails(uploadDocDTO.getDocSummaryKey());
				PhysicalDocumentVerificationDetails physicalVerificationDtls = rodService.getPhysicalVerificationDtlsBySummaryKey(uploadDocDTO.getDocSummaryKey());
					if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
						for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
							
//							 dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
//									 uploadDocDTO)); 
							 
							dtoList.add(getBillDetailsDTOForBillEntry(billEntryDetailsDO));
							
							// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
						}
						uploadDocDTO.setBillEntryDetailList(dtoList);
					}
					if(physicalVerificationDtls != null){
						if(physicalVerificationDtls.getDocumentVerificationFlag() != null && physicalVerificationDtls.getDocumentVerificationFlag().equalsIgnoreCase("R")){
						uploadDocDTO.setIsReceived(true);
					}else if(physicalVerificationDtls.getDocumentVerificationFlag() != null && physicalVerificationDtls.getDocumentVerificationFlag().equalsIgnoreCase("I")){
						uploadDocDTO.setIsIgnored(true);
					}
						if(physicalVerificationDtls.getPhysicalDocRecDate() != null){
						uploadDocDTO.setDocReceivedDate(physicalVerificationDtls.getPhysicalDocRecDate());
						}
						
						SelectValue doctype = new SelectValue();
						if(physicalVerificationDtls.getPhysicalDocKey() != null){
							MastersValue phyDocType = masterService.getMaster(physicalVerificationDtls.getPhyDocRecType());
							if(phyDocType != null ){
								doctype.setId(phyDocType.getKey());
								doctype.setValue(phyDocType.getValue());
								uploadDocDTO.setDocumentType(doctype);
							}
						}
					}
//					rodSummaryDetails.add(uploadDocDTO);
				}
				
			//	rodDTO.getUploadDocumentsDTO().setBillEntryDetailList(dtoList);
				rodDTO.setUploadDocsList(rodSummaryDetails);
				
			}

			rodDTO.setSelectRODtoAddAdditionalDocumentsDTO(selectRODtoAddAdditionalDocumentsDTOList);

			rodDTO.setStrUserName(tableDTO.getUsername());
			
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDTO.getUsername());

			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ADD_ADDITIONAL_DOCUMENTS);
			
			//loadRRCRequestValuesForProcessing(rrcDTO,insuredSumInsured,SHAConstants.ACKNOWLEDGE_DOC_RECEIVED);
			
			rodDTO.setRrcDTO(rrcDTO);

			List<DocumentDetails> selectedPhysicalDocuments = createRodService.getDocumentDetailsByRodNumber(rodDTO.getDocumentDetails().getRodNumber());
			if(null != selectedPhysicalDocuments && !selectedPhysicalDocuments.isEmpty()){
				rodDTO.setSelectedPhysicalDocuments(selectedPhysicalDocuments);
				
			}
			
			
			/*
			 * rodDTO.setStrUserName("oprofficeclaimscoordinator");
			 * rodDTO.setStrPassword("welcome1");
			 */
	        //if(isValidClaimForAck){
	        	view.setReceivedPhysicaldocumentsWizard(ReceivedPhysicalDocumentsWizard.class,
	    				rodDTO);

		}
		
		
		protected void showSearchCpuAutoAllocation(
				@Observes @CDIEvent(MenuItemBean.CPU_AUTO_ALLOCATION) final ParameterDTO parameters) {
			view.setViewG(SearchCpuAutoAllocationView.class, true);
		}

		/*protected void showUpdatePaymentDetail(
				@Observes @CDIEvent(MenuItemBean.UPDATE_PAYMENT_DETAILS) final ParameterDTO parameters) {
			
			
			BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodeList();
			BeanItemContainer<SelectValue> selectValueContainerForNonKeralaCPUCode = masterService.getNonKeralaTmpCpuCodeList();
			BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getTypeContainer(ReferenceTable.UPDATE_PAYMENT_TYPE);	
			BeanItemContainer<SelectValue> selectValueContainerForClaimant = masterService.getSelectValueContainer(ReferenceTable.ACK_DOC_RECEIVED_FROM);	
			BeanItemContainer<SelectValue> selectValueContainerForClaimType = masterService.getClaimTypeContainer(ReferenceTable.CLAIM_TYPE);	
			BeanItemContainer<SelectValue> selectValueContainerForPaymentStatus = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);	
			BeanItemContainer<SelectValue> selectValueContainerForBatchType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
			BeanItemContainer<SelectValue> selectValueContainerForZoneType = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
			BeanItemContainer<SpecialSelectValue> selectValueContainerForProduct = masterService.getContainerForProduct();
			
			UpdatePaymentDetailTableDTO  createAndSearchLotTableDTO= new UpdatePaymentDetailTableDTO();
			
			MastersValue penalIntrestRate = masterService.getPenalIntrestRate(ReferenceTable.PENAL_INTREST);
			if(null != penalIntrestRate)
			{
				Double doublePenalIntrest = null != penalIntrestRate.getValue() ? Double.valueOf(penalIntrestRate.getValue()) : 0d;
			//createAndSearchLotTableDTO.setIntrestRate(doublePenalIntrest);
			//createAndSearchLotTableDTO.setInterestRateForCalculation(doublePenalIntrest);
			}
			
			view.setViewUpdatePaymentDetail(UpdatePaymentDetailView.class, selectValueContainerForCPUCode,selectValueContainerForType,selectValueContainerForClaimant,selectValueContainerForClaimType,
					selectValueContainerForPaymentStatus,selectValueContainerForNonKeralaCPUCode,
					selectValueContainerForBatchType,selectValueContainerForZoneType,selectValueContainerForProduct,createAndSearchLotTableDTO,true);
			
			
		}*/

		protected void showFVRGrading(
				@Observes @CDIEvent(MenuItemBean.FVR_GRADING) final ParameterDTO parameters) {
			BeanItemContainer<SelectValue> selectValueContainer = masterService
					.getTmpCpuCodes();
			
			BeanItemContainer<SelectValue> claimType = masterService
					.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
			
			view.setFVRGradingViewG(SearchFvrReportGradingView.class, true, selectValueContainer, claimType);
		}
		
		
		protected void showFVRGradingPage(
				@Observes @CDIEvent(MenuPresenter.SHOW_FIELD_VISIT_REPORT_GRADING) final ParameterDTO parameters) {
			
			SearchFvrReportGradingTableDto tableDTO = (SearchFvrReportGradingTableDto) parameters
					.getPrimaryParameter();
			
			FvrReportGradingPageDto fvrDTO = new FvrReportGradingPageDto();
			
			Reimbursement reimbursementObjectByKey = rodService
					.getReimbursementObjectByKey(tableDTO.getRodKey());
					
					
			List<FieldVisitRequest> fvrByClaimKey = reimbursementService
								.getFVRByClaimKey(reimbursementObjectByKey.getClaim().getKey());
								
			NewIntimationDto intimationDto = intimationService
					.getIntimationDto(reimbursementObjectByKey.getClaim().getIntimation());					
								
			List<FVRGradingMaster> fvrGradingSegB = reimbursementService
								.getFVRGradingBySegment(SHAConstants.FVR_GRADING_SEGMENT_B);
						
						List<FVRGradingMaster> fvrGradingSegC = reimbursementService
								.getFVRGradingBySegment(SHAConstants.FVR_GRADING_SEGMENT_C);
						
						List<FvrGradingDetailsDTO> dto = new ArrayList<FvrGradingDetailsDTO>();
						//Map<Integer, FieldVisitRequest> valueMap = new HashMap<Integer, FieldVisitRequest>();
						FvrGradingDetailsDTO fvrDto  = null;
						List<NewFVRGradingDTO> FVRTableDTO =  null;
						for (int i = 0; i < fvrByClaimKey.size(); i++) {
							FieldVisitRequest fieldVisitRequest = fvrByClaimKey.get(i);
							if(fieldVisitRequest.getStatus() != null && (fieldVisitRequest.getStatus().getKey().equals(ReferenceTable.FVR_REPLY_RECEIVED))){
								fvrDto = new FvrGradingDetailsDTO();
								fvrDto.setKey(fieldVisitRequest.getKey());
								fvrDto.setRepresentativeName(fieldVisitRequest
										.getRepresentativeName());
								fvrDto.setRepresentiveCode(fieldVisitRequest
										.getRepresentativeCode());
								
								if(fieldVisitRequest.getStatus() != null && (fieldVisitRequest.getStatus().getKey().equals(ReferenceTable.FVR_REPLY_RECEIVED) || fieldVisitRequest.getStatus().getKey().equals(ReferenceTable.FVR_GRADING_STATUS))){
									fvrDto.setIsFVRReceived(Boolean.TRUE);
								}
								
								FVRTableDTO = new ArrayList<NewFVRGradingDTO>();
								NewFVRGradingDTO eachFVRDTO = null;
								List<FVRGradingDetail> fvrGradingDetails = reimbursementService
										.getFVRGradingDetails(fieldVisitRequest.getKey());
								
								List<FvrTriggerPoint> fvrTriggerPoints = reimbursementService
										.getFVRTriggerPoints(fieldVisitRequest.getKey());
								
								
								for (FvrTriggerPoint masterFVR : fvrTriggerPoints) {
									eachFVRDTO = new NewFVRGradingDTO();
									eachFVRDTO.setFvrSeqNo(masterFVR.getKey());
									eachFVRDTO.setCategory(masterFVR.getRemarks());
									eachFVRDTO.setSegment(SHAConstants.FVR_GRADING_SEGMENT_A);
									
								if(fvrGradingDetails != null && !fvrGradingDetails.isEmpty()){
									for (FVRGradingDetail fvrGradingDetail : fvrGradingDetails) {
										if(fvrGradingDetail.getSeqNo() != null){
											if(fvrGradingDetail.getSeqNo().equals(masterFVR.getKey())){
												eachFVRDTO.setKey(fvrGradingDetail.getKey());
												if(fvrGradingDetail.getGrading() != null){
													eachFVRDTO.setStatusFlagSegmentA(fvrGradingDetail.getGrading());
												}
												break;
											}
										}
										
									}
								}
								FVRTableDTO.add(eachFVRDTO);
								}
								
								
								for (FVRGradingMaster masterFVR : fvrGradingSegB) {
									eachFVRDTO = new NewFVRGradingDTO();
									eachFVRDTO.setFvrSeqNo(masterFVR.getKey());
									eachFVRDTO.setCategory(masterFVR.getGradingType());
									eachFVRDTO.setSegment(SHAConstants.FVR_GRADING_SEGMENT_B);
									
								if(fvrGradingDetails != null && !fvrGradingDetails.isEmpty()){
									for (FVRGradingDetail fvrGradingDetail : fvrGradingDetails) {
										if(fvrGradingDetail.getSeqNo() != null){
										if(fvrGradingDetail.getSeqNo().equals(masterFVR.getKey())){
											eachFVRDTO.setKey(fvrGradingDetail.getKey());
											if(fvrGradingDetail.getGrading() != null){
												eachFVRDTO.setStatusFlag(fvrGradingDetail.getGrading());
											}
											break;
										}
									}
									}
								}
								FVRTableDTO.add(eachFVRDTO);
								}
								
								for (FVRGradingMaster masterFVR : fvrGradingSegC) {
										eachFVRDTO = new NewFVRGradingDTO();
										eachFVRDTO.setFvrSeqNo(masterFVR.getKey());
										eachFVRDTO.setCategory(masterFVR.getGradingType());
										eachFVRDTO.setSegment(SHAConstants.FVR_GRADING_SEGMENT_C);
										if(masterFVR.getKey().intValue() == 22){
										eachFVRDTO.setIsFVRReceived(Boolean.TRUE);
//										eachFVRDTO.setStatusFlagSegmentC(SHAConstants.YES_FLAG);
										}
									if(fvrGradingDetails != null && !fvrGradingDetails.isEmpty()){
										for (FVRGradingDetail fvrGradingDetail : fvrGradingDetails) {
											if(fvrGradingDetail.getSeqNo() != null){
											if(fvrGradingDetail.getSeqNo().equals(masterFVR.getKey())){
												eachFVRDTO.setKey(fvrGradingDetail.getKey());
												if(masterFVR.getKey().intValue() != 22 && fvrGradingDetail.getGrading() != null){
													//Fix for populate any segment C other then "FVR not received" if fvr replied 
													eachFVRDTO.setStatusFlagSegmentC(fvrGradingDetail.getGrading());
													}
												break;
											}}
										}
									}
									
									FVRTableDTO.add(eachFVRDTO);
									}
								
							
								
								fvrDto.setNewFvrGradingDTO(FVRTableDTO);
								dto.add(fvrDto);
							}
						}
				
						fvrDTO.setFvrGradingDTO(
								dto);
			
			view.setFvrReportGradingPageView(FvrReportGradingPageView.class, fvrDTO,
					intimationDto, tableDTO);
		}
		
		protected void showProcessInternalNotes(
				@Observes @CDIEvent(MenuPresenter.PROCESS_INTERNAL_NOTES) final ParameterDTO parameters) 
		{
			ClaimDto claimDTO = null;

			NewIntimationDto newIntimationDto = (NewIntimationDto) parameters
					.getPrimaryParameter();

			if (newIntimationDto != null && newIntimationDto.getIntimationId() != null) {
				Claim claim = claimService
						.getClaimsByIntimationNumber(newIntimationDto.getIntimationId());
				if(claim != null)
					
					claimDTO = ClaimMapper.getInstance().getClaimDto(claim);
					
					claimDTO.setNewIntimationDto(newIntimationDto);
					
					Reimbursement reimbursement = reimbursementService.getLatestActiveROD(claim.getKey());
					if(reimbursement==null){
						Preauth preauth= preauthService.getLatestPreauthByClaim(claim.getKey());
						
						String diagnosisForPreauthByKey = "";
						if(preauth != null ) {
							diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
							
						}
						newIntimationDto.setDiagnosis(diagnosisForPreauthByKey);
					}else{
						String diagnosisForPreauthByKey = "";
						if(reimbursement != null ) {
							diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
							claimDTO.setRodKeyForDischargeDate(reimbursement.getKey());
						}
						newIntimationDto.setDiagnosis(diagnosisForPreauthByKey);
					}

					claimDTO.setModifiedBy(newIntimationDto.getUsername());
					view.setUpdateInternalNotesView(InternalNotesPageView.class,
							newIntimationDto,claimDTO);
				}
		}
			
		protected void showProcessClaimRequestWaitForInput(
				@Observes @CDIEvent(MenuItemBean.PROCESS_CLAIM_REQUEST_WAIT_FOR_INPUT) final ParameterDTO parameters) {
			SearchProcessClaimRequestFormDTO dto = null;
			if(parameters.getPrimaryParameter() != null && (parameters.getPrimaryParameter() instanceof SearchProcessClaimRequestFormDTO)) {
				dto = (SearchProcessClaimRequestFormDTO) parameters.getPrimaryParameter();
			}
			BeanItemContainer<SelectValue> insuranceSource = masterService
					.getMasterValueByReference(ReferenceTable.INTIMATION_SOURCE);
			BeanItemContainer<SelectValue> networkHospitalType = masterService
					.getMasterValueByReference(ReferenceTable.NETWORK_HOSPITAL_TYPE);
			BeanItemContainer<SelectValue> hospitalType = masterService
					.getMasterValueByReference(ReferenceTable.HOSPITAL_TYPE);
			BeanItemContainer<SelectValue> treatmentType = masterService
					.getMasterValueByReference(ReferenceTable.TREATMENT_MANAGEMENT);
			
			BeanItemContainer<SelectValue> productName = masterService.getSelectValueContainerForProduct();
			BeanItemContainer<SelectValue> cpuCode = masterService.getTmpCpuCodes();
			
			BeanItemContainer<SelectValue> claimType = masterService.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
			
			BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getStageList();
			
			BeanItemContainer<SelectValue> selectValueForPriority = SHAUtils.getSelectValueForPriority();
			
			Stage stageByKey = preauthService.getStageByKey(ReferenceTable.ZONAL_REVIEW_STAGE);
			Stage stageByKey1 = preauthService.getStageByKey(ReferenceTable.BILLING_STAGE);
			Stage stageByKey2 = preauthService.getStageByKey(ReferenceTable.FINANCIAL_STAGE);
			Stage stageByKey3 = preauthService.getStageByKey(ReferenceTable.CREATE_ROD_STAGE_KEY);
			Stage stageByKey4 = preauthService.getStageByKey(ReferenceTable.BILL_ENTRY_STAGE_KEY);
			Status statusByKey5 = preauthService.getStatusByKey(ReferenceTable.PREAUTH_COORDINATOR_REPLY_RECEIVED_STATUS); 
			Status statusByKey6 = preauthService.getStatusByKey(ReferenceTable.SPECIALIST_REPLY_RECEIVED);
			Status statusByKey7 = preauthService.getStatusByKey(ReferenceTable.FVR_REPLAY_RECIEVED_STATUS);
			
			SelectValue selectValue = new SelectValue();
			selectValue.setId(stageByKey.getKey());
			selectValue.setValue(stageByKey.getStageName());
			
			SelectValue selectValue1 = new SelectValue();
			selectValue1.setId(stageByKey1.getKey());
			selectValue1.setValue(stageByKey1.getStageName());
			
			SelectValue selectValue2 = new SelectValue();
			selectValue2.setId(stageByKey2.getKey());
			selectValue2.setValue(stageByKey2.getStageName());
			
			SelectValue selectValue3 = new SelectValue();
			selectValue3.setId(stageByKey3.getKey());
			selectValue3.setValue(stageByKey3.getStageName());
			
			SelectValue selectValue4 = new SelectValue();
			selectValue4.setId(stageByKey4.getKey());
			selectValue4.setValue(stageByKey4.getStageName());
			
			SelectValue selectValue5 = new SelectValue();
			selectValue5.setId(statusByKey5.getKey());
			selectValue5.setValue(statusByKey5.getProcessValue());
			
			SelectValue selectValue6 = new SelectValue();
			selectValue6.setId(statusByKey6.getKey());
			selectValue6.setValue(statusByKey6.getProcessValue());
			
			SelectValue selectValue7 = new SelectValue();
			selectValue7.setId(statusByKey7.getKey());
			selectValue7.setValue(statusByKey7.getProcessValue());
			
			SelectValue selectValue8 = new SelectValue();
			selectValue8.setId(1l);
			selectValue8.setValue(SHAConstants.SOURCE_INVESTIGATION_DISAPPROVED);
			
			SelectValue selectValue9 = new SelectValue();
			selectValue9.setId(2l);
			selectValue9.setValue(SHAConstants.SOURCE_INVESTIGATION_REPORT_RECEIVED);
			
			BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
			statusByStage.addBean(selectValue);
			statusByStage.addBean(selectValue1);
			statusByStage.addBean(selectValue2);
			statusByStage.addBean(selectValue3);
			statusByStage.addBean(selectValue4);
			statusByStage.addBean(selectValue5);
			statusByStage.addBean(selectValue6);
			statusByStage.addBean(selectValue7);
			statusByStage.addBean(selectValue8);
			statusByStage.addBean(selectValue8);
			statusByStage.addBean(selectValue9);
			
			view.setViewsProcessClaimRequest(SearchProcessClaimRequestView.class,
					true, insuranceSource, hospitalType, networkHospitalType,
					treatmentType,selectValueContainerForType,productName,cpuCode,selectValueForPriority,
					statusByStage,claimType, dto,SHAConstants.WAIT_FOR_INPUT_SCREEN);
		}
		
		
		protected void showSearchLotPullBack(
				@Observes @CDIEvent(MenuItemBean.LOT_PULL_BACK) final ParameterDTO parameters) {
			view.setViewG(SearchLotPullBackView.class, true);
		}
		
		protected void showAllowReconsideration(
				@Observes @CDIEvent(MenuItemBean.ALLOW_RECONSIDERATION) final ParameterDTO parameters) {
			view.setViewG(SearchAllowReconsideration.class, true);
		}
		
		
		protected void showLotPullBack(
				@Observes @CDIEvent(MenuPresenter.SHOW_LOT_PULL_BACK) final ParameterDTO parameters) {
				SearchLotPullBackTableDTO tableDTO = (SearchLotPullBackTableDTO) parameters.getPrimaryParameter();
				view.setLotPullBackScreen(LotPullBackPageView.class, tableDTO);
		} 
		
		/**
		 * No parameters   Part of CR R1097
		 * @param parameters
		 */
		protected void showAckWithoutRodReport(
				@Observes @CDIEvent(MenuItemBean.ACK_WITHOUT_ROD_REPORT) final ParameterDTO parameters) {
			
			
			String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
			BeanItemContainer<SelectValue> cpuCodeContainer = usertoCPUMapService.getRevisedUserCpuContainer(userId);
			BeanItemContainer<SelectValue> docFromContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
			
			SelectValue insuredDocSelect = new SelectValue(ReferenceTable.RECEIVED_FROM_INSURED,SHAConstants.DOC_RECEIVED_FROM_INSURED);
			docFromContainer.addBean(insuredDocSelect);
			SelectValue hospDocSelect = new SelectValue(ReferenceTable.RECEIVED_FROM_HOSPITAL,SHAConstants.DOC_RECEIVED_FROM_HOSPITAL);
			docFromContainer.addBean(hospDocSelect);
			
		    view.setAckWithoutRodReportView(AckWithoutRodReportView.class, cpuCodeContainer,docFromContainer);
		}
		
		/**
		 * Part of CR R0768
		 * @param parameters
		 */
		protected void showInvAssignStatusReport(
				@Observes @CDIEvent(MenuItemBean.INV_ASSIGN_STATUS_REPORT) final ParameterDTO parameters) {
			
			BeanItemContainer<SelectValue> empTypeContainer = masterService.getClaimtypeContainer();
			
			String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
			BeanItemContainer<SelectValue> cpuCodeContainer = usertoCPUMapService.getRevisedUserCpuContainer(userId);
			BeanItemContainer<SelectValue> invStatusContainer = SHAUtils.getInvAssignStatusContainer();
			BeanItemContainer<SelectValue> clmTypeContainer = masterService.getClaimtypeContainer();
			
		    view.setInvAssignStatusReportView(InvAssignReportView.class, cpuCodeContainer,invStatusContainer, clmTypeContainer);
		}


		

		/**
		 * Part of CR R1155
		 * @param parameters
		 */
		protected void showOmpOutStandingReport(
				@Observes @CDIEvent(MenuItemBean.SEARCH_OMP_OUTSTANDING_REPORT) final ParameterDTO parameters) {
		
			BeanItemContainer<SelectValue> classification = masterService.getListMasterValuebyTypeCode(SHAConstants.OMP_CLASSIFICATION);
//			BeanItemContainer<SelectValue> subClassification = masterService.getListMasterValuebyTypeCode(SHAConstants.OMP_SUB_CLASSIFICATION);
			WeakHashMap<Long,BeanItemContainer<SelectValue>> subClassificationMap = masterService.getOMPSubClassificationMap(); 
			
			
			view.setOmpOutStandingReportView(OmpOutstandingReportView.class, classification, subClassificationMap); 
		}
		
		
		/**
		 * Part of CR R1155
		 * @param parameters
		 */
		protected void showOmpStatusReport(
				@Observes @CDIEvent(MenuItemBean.SEARCH_OMP_STATUS_WISE_REPORT) final ParameterDTO parameters) {
		
			BeanItemContainer<SelectValue> classification = masterService.getListMasterValuebyTypeCode(SHAConstants.OMP_CLASSIFICATION);
//			BeanItemContainer<SelectValue> subClassification = masterService.getListMasterValuebyTypeCode(SHAConstants.OMP_SUB_CLASSIFICATION);
			WeakHashMap<Long,BeanItemContainer<SelectValue>> subClassificationMap = masterService.getOMPSubClassificationMap(); 
			BeanItemContainer<SelectValue> status = masterService.getOmpClaimStatusListForReport();
			BeanItemContainer<SelectValue> loss = masterService.getListMasterValuebyTypeCode(SHAConstants.OMP_SUB_CLASSIFICATION);
			BeanItemContainer<SelectValue> year = masterService.getYearContainer();
			
			view.setOmpStatusWiseReportView(OmpStatusWiseReportView.class, classification, subClassificationMap,status,loss,year);
		}
		
		protected void showPolicySearchWithParameter(
				@Observes @CDIEvent(MenuItemBean.SEARCH_POLICY_PARAMETER) final ParameterDTO parameters) {
			String policyNumber = (String) parameters
					.getPrimaryParameter();
			String healthCardNumber = (String) parameters
					.getSecondaryParameter(0, String.class);
			view.setCreateIntimationWithParameter(SearchPolicyView.class,policyNumber,healthCardNumber);
}
		//Uncommented for reimbursement auto allocation
		protected void showHoldMonitorScreen(
				@Observes @CDIEvent(MenuItemBean.HOLD_MONITOR_SCREEN) final ParameterDTO parameters) {
			
			SearchHoldMonitorScreenFormDTO searchFormDto = (SearchHoldMonitorScreenFormDTO) parameters.getPrimaryParameter();
			
			
			SelectValue selectValue8 = new SelectValue();
			selectValue8.setId(1l);
			selectValue8.setValue("common for billing & FA");
			
//			SelectValue selectValue9 = new SelectValue();
//			selectValue9.setId(2l);
//			selectValue9.setValue("ENHANCEMENT");
			
			BeanItemContainer<SelectValue> type = new BeanItemContainer<SelectValue>(SelectValue.class);
			type.addBean(selectValue8);
//			type.addBean(selectValue9);
			
			BeanItemContainer<SelectValue> userList = masterService
					.getRefferedByDocList();
			BeanItemContainer<SelectValue> cpuCode = masterService
					.getTmpCpuCodes();
			String screenName = SHAConstants.HOLD_MONITORING_PROCESS_FOR_COMMON_BILLING_FA_AUTO;
			view.setViewsHoldMoniterScreen(SearchHoldMonitorScreenView.class,true,type,userList,cpuCode,screenName);
		}
		
		protected Double getTotalHospRodFAApprovedAmt(Reimbursement latestRod) {
			Double totalApproved = 0d;
			if(latestRod != null){
				List<Reimbursement> previousRODByRodNumber = reimbursementService
						.getReimbursementList(latestRod.getRodNumber());
				if (previousRODByRodNumber != null && !previousRODByRodNumber.isEmpty()
						&& previousRODByRodNumber.size() > 1) {
					for (Reimbursement reimbursement : previousRODByRodNumber) {
						if(!(reimbursement.getKey().equals(latestRod.getKey()))){
							if(reimbursement.getDocAcknowLedgement().getHospitalisationFlag() != null && reimbursement.getDocAcknowLedgement().getHospitalisationFlag().toLowerCase().equalsIgnoreCase("y") && ReferenceTable.getFinancialApprovalStatus().containsKey(reimbursement.getStatus().getKey()) ) {
								totalApproved+= (reimbursement.getFinancialApprovedAmount() != null ? reimbursement.getFinancialApprovedAmount() : 0d); 
							}else if(reimbursement.getDocAcknowLedgement().getHospitalisationFlag() != null && reimbursement.getDocAcknowLedgement().getHospitalisationFlag().toLowerCase().equalsIgnoreCase("y") && reimbursementService.isSettledPaymentAvailableByRodKey(reimbursement.getKey())){
								totalApproved+= (reimbursement.getFinancialApprovedAmount() != null ? reimbursement.getFinancialApprovedAmount() : 0d);
							}
						}
						
						
					}
				}
				
			}

			return totalApproved;
		}
		//Medical Opinion Validation
		protected void showMedicalOpinionValidation(
				@Observes @CDIEvent(MenuItemBean.OPINION_VALIDATION) final ParameterDTO parameters) {	
			BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodeList();
			view.setMedicalOpinionValidationView(OpinionValidationView.class, selectValueContainerForCPUCode);
		}
		
		protected void showMedicalOpinionValidationReport(
				@Observes @CDIEvent(MenuItemBean.OPINION_VALIDATION_REPORT) final ParameterDTO parameters) {	
			BeanItemContainer<SelectValue> roleContainer = masterService.getMasOpinionRoleList();
			BeanItemContainer<SelectValue> empNameContainer = masterService.getEmpNameForRole();
			view.setMedicalOpinionValidationReportView(OpinionValidationReportView.class, roleContainer, empNameContainer);
		}
		//Allocate Corporate Buffer
		protected void showAllocateCorporateBuffer(
				@Observes @CDIEvent(MenuItemBean.ALLOCATE_CORP_BUFFER) final ParameterDTO parameters) {	
			view.setAllocateCorpBufferView(AllocateCorpBufferView.class);
		}
		
		/*//Need to optimize code
		 * Shifted to Revised menu presenter GLX2020069
		protected void showAllocateCorporateBufferWizard(
				@Observes @CDIEvent(MenuPresenter.SHOW_ALLOCATE_CORP_BUFFER_WIZARD) final ParameterDTO parameters) {
			AllocateCorpBufferTableDTO tableDTO = (AllocateCorpBufferTableDTO) parameters.getPrimaryParameter();
			NewIntimationDto intimationDto = new NewIntimationDto();
			AllocateCorpBufferDetailDTO allocateCorpBufferDetailDTO = new AllocateCorpBufferDetailDTO();
			
			if (tableDTO != null) {
				Claim claim = claimService.getClaimByKey(tableDTO.getKey());
				allocateCorpBufferDetailDTO.setClaimKey(claim.getKey());
				Intimation intimation = claim.getIntimation();
				intimationDto = intimationService.getIntimationDto(intimation);
				ClaimDto claimDTO = ClaimMapper.getInstance().getClaimDto(claim);
				allocateCorpBufferDetailDTO.setClaimDto(claimDTO);
				
				Double insuredSumInsured = 0d;
				if(null != intimation &&  
				null != intimation.getPolicy() && null != intimation.getPolicy().getProduct() &&
				null != intimation.getPolicy().getProduct().getKey() 
				&& !(ReferenceTable.GPA_PRODUCT_KEY.equals(intimation.getPolicy().getProduct().getKey())))
				{
				
				 insuredSumInsured = calcService.getInsuredSumInsured(intimationDto.getInsuredPatient().getInsuredId().toString(), intimationDto.getPolicy().getKey()
						 ,intimationDto.getInsuredPatient().getLopFlag());
				}
				else
				{
					 insuredSumInsured = calcService.getGPAInsuredSumInsured(intimationDto.getInsuredPatient().getInsuredId().toString(), intimationDto.getPolicy().getKey());
				}
				
				Reimbursement reimbursement = reimbursementService.getLatestActiveROD(claim.getKey());
				
				Double balanceSI = 0d;
				
				if(reimbursement != null){
					
					
					balanceSI = calcService.getPABalanceSI(intimationDto.getInsuredPatient().getKey(), 
							claim.getKey(),reimbursement.getKey(),(reimbursement.getBenefitsId()) != null ? reimbursement.getBenefitsId().getKey() : 0l );
				}
				
				allocateCorpBufferDetailDTO.setBalanceSI(balanceSI);
				
				Preauth preauth= preauthService.getLatestPreauthDetails(claim.getKey());
				
				if(reimbursement==null){
					
					
					String diagnosisForPreauthByKey = "";
					if(preauth != null ) {
						diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
						
					}
					tableDTO.setDiagnosis(diagnosisForPreauthByKey);
					allocateCorpBufferDetailDTO.setDiagnosis(diagnosisForPreauthByKey);
				}else{
					String diagnosisForPreauthByKey = "";
					if(reimbursement != null ) {
						diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
						
					}
					tableDTO.setDiagnosis(diagnosisForPreauthByKey);
					allocateCorpBufferDetailDTO.setDiagnosis(diagnosisForPreauthByKey);
				}
				
				if (preauth != null && preauth.getStage() != null && reimbursement == null) {
					intimationDto.setStage(preauth.getStage());
				} else if (reimbursement != null && reimbursement.getStage() != null) {
					intimationDto.setStage(reimbursement.getStage());
				}
				
				List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
						.search(claim.getKey(), false);
				
				List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
				for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {

					previousPreAuthTableDTO.setRequestedAmt(preauthService
							.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
									previousPreAuthTableDTO.getClaimKey()));
					newList.add(previousPreAuthTableDTO);

				}
				
				allocateCorpBufferDetailDTO.setPreviousPreauthDetailsList(newList);
			
				List<Reimbursement> reimbursementByClaimKey = createRodService.getReimbursementByClaimKey(claim.getKey());
				

				Double provisionAmount = 0d;
				
				for (Reimbursement reimbursement2 : reimbursementByClaimKey) {
					
					if(reimbursement2.getCurrentProvisionAmt() != null){
					Double provisionAmount2 = reimbursement2.getCurrentProvisionAmt();
					if(provisionAmount2 != null){
						provisionAmount += provisionAmount2;
					}}
				}

				allocateCorpBufferDetailDTO.setProvisionAmount(provisionAmount);
				
				if(claim.getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)){
					List<Preauth> preauthList = preauthService.getPreauthListByClaimKey(claim.getKey());

					if(preauthList != null && preauthList.size() == 1){
						
						Preauth lastPreauth = preauthList.get(0);
						
						if(lastPreauth.getStatus() != null && (! lastPreauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_PREAUTH_WITHDRAW_STATUS) || ! lastPreauth.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS))){
							
							allocateCorpBufferDetailDTO.setProvisionAmount(claim.getProvisionAmount());
							
						}else{
							
							if(lastPreauth.getWithdrawReason() != null && lastPreauth.getWithdrawReason().getKey() != null
									&& lastPreauth.getWithdrawReason().getKey().equals(ReferenceTable.PATIENT_NOT_ADMITTED)){
								allocateCorpBufferDetailDTO.setProvisionAmount(0d);
							}else{
								allocateCorpBufferDetailDTO.setProvisionAmount(claim.getProvisionAmount());
							}
							
						}
						
					}else{
						
						if(preauth != null && preauth.getStatus() != null && (! preauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_PREAUTH_WITHDRAW_STATUS) || ! preauth.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS))){

							allocateCorpBufferDetailDTO.setProvisionAmount(claim.getProvisionAmount());

						}else{
							
							if(preauth != null && preauth.getWithdrawReason() != null && preauth.getWithdrawReason().getKey() != null
									&& preauth.getWithdrawReason().getKey().equals(ReferenceTable.PATIENT_NOT_ADMITTED)){
								allocateCorpBufferDetailDTO.setProvisionAmount(0d);
							}else{
								allocateCorpBufferDetailDTO.setProvisionAmount(claim.getProvisionAmount());
							}
						}

					}
				}else if(claim.getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)
						&& reimbursementByClaimKey.isEmpty()){
					
					List<DocAcknowledgement> listOfAcknowledgement = createRodService.getListOfAcknowledgement(claim.getKey());

					if(listOfAcknowledgement != null && ! listOfAcknowledgement.isEmpty()){
						
						for (DocAcknowledgement docAcknowledgement : listOfAcknowledgement) {
							
							provisionAmount = 0d;
							
							if(null != docAcknowledgement){
								provisionAmount = provisionAmount + ackDocReceivedService.getClaimedAmountValueForView(docAcknowledgement);
							}
						}
						allocateCorpBufferDetailDTO.setProvisionAmount(provisionAmount);
						
					}else{
						allocateCorpBufferDetailDTO.setProvisionAmount(claim.getProvisionAmount());
					}

				}
				
				CloseClaim closeClaim = createRodService.getCloseClaim(claim.getKey());
				
				if(closeClaim != null && closeClaim.getClosedProvisionAmt() != null){
					allocateCorpBufferDetailDTO.setProvisionAmount(closeClaim.getClosedProvisionAmt());
				}
				
				if(allocateCorpBufferDetailDTO.getProvisionAmount() != null && balanceSI != null){
					
					Double minAmount = Math.min(allocateCorpBufferDetailDTO.getProvisionAmount(), balanceSI);
					allocateCorpBufferDetailDTO.setProvisionAmount(minAmount);
					
				}
				
				List<ViewDocumentDetailsDTO> listDocumentDetails = ackDocReceivedService.listOfEarlierAckByClaimKey(claim.getKey(),0l);
				
				for (ViewDocumentDetailsDTO viewDocumentDetailsDTO : listDocumentDetails) {
				
					if(viewDocumentDetailsDTO.getStatusKey() != null && ReferenceTable.CANCEL_ROD_KEYS.containsKey(viewDocumentDetailsDTO.getStatusKey())){
						viewDocumentDetailsDTO.setIsReadOnly(true);
					}

					if(viewDocumentDetailsDTO.getReimbursementKey() != null){
						CloseClaim rodAlreadyClosed = createRodService.getAlreadyRodClosed(viewDocumentDetailsDTO.getReimbursementKey());
						if(rodAlreadyClosed != null){
							viewDocumentDetailsDTO.setApprovedAmount(0d);
							viewDocumentDetailsDTO.setIsReadOnly(true);
						}
					}
					
					if(viewDocumentDetailsDTO.getIsReadOnly()){
						viewDocumentDetailsDTO.setApprovedAmount(0d);
					}
					viewDocumentDetailsDTO.setApprovedAmount(0d);
				}
				
				for (ViewDocumentDetailsDTO viewDocumentDetailsDTO : listDocumentDetails) {
					if(viewDocumentDetailsDTO.getModeOfReceipt() != null){
						viewDocumentDetailsDTO.setModeOfReceiptValue(viewDocumentDetailsDTO.getModeOfReceipt().getValue());
					}
					
					if(viewDocumentDetailsDTO.getDocumentReceivedDate() != null){
						viewDocumentDetailsDTO.setStrDocumentReceivedDate(SHAUtils.formatDate(viewDocumentDetailsDTO.getDocumentReceivedDate()));
					}
				}
				
				BeanItemContainer<SelectValue> reasonForClosing = masterService.getMasterValueByReference(ReferenceTable.REASON_FOR_REOPEN);
				
				allocateCorpBufferDetailDTO.setReopenContainer(reasonForClosing);
				
				allocateCorpBufferDetailDTO.setRodDocumentDetailsList(listDocumentDetails);
				
				allocateCorpBufferDetailDTO.setIntimationNumber(claim.getIntimation().getIntimationId());
				
				allocateCorpBufferDetailDTO.setClaimNumber(claim.getClaimId());
			}
			String userName = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
			allocateCorpBufferDetailDTO.setUserName(userName);

			allocateCorpBufferDetailDTO.setNewIntimationDto(intimationDto);
			view.setAllocateCorporateBufferWizardView(AllocateCorpBufferWizard.class, allocateCorpBufferDetailDTO);
		}*/
		

		protected void showProcessRAWRequest(
				@Observes @CDIEvent(MenuItemBean.PROCESS_RAW_REQUEST) final ParameterDTO parameters) {
			BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService
					.getTmpCpuCodeList();
			BeanItemContainer<SelectValue> claimTypeListContainer = masterService.getMasterValueByReference(ReferenceTable.CLAIM_TYPE);
			Stage stageByKey = preauthService.getStageByKey(ReferenceTable.PROCESS_PREAUTH);
			Stage stageByKeyEnhn = preauthService.getStageByKey(ReferenceTable.PROCESS_ENHANCEMENT_TYPE);
//			Stage stageByKeyZonal = preauthService.getStageByKey(ReferenceTable.PROCESS_CLAIM_REQUEST_ZONAL_STAGE_KEY);
			Stage stageByKeyCorp = preauthService.getStageByKey(ReferenceTable.PROCESS_CLAIM_REQUEST_STAGE_KEY);
//			Stage stageByKeyFinancial = preauthService.getStageByKey(ReferenceTable.PROCESS_CLAIM_FINANCIAL_STAGE_KEY);

			//New additon for CR2019023 
			Stage stageByKeyIntimation = preauthService.getStageByKey(ReferenceTable.INTIMATION_STAGE_KEY);

			SelectValue selectValueIntimation = new SelectValue();
			selectValueIntimation.setId(stageByKeyIntimation.getKey());
			selectValueIntimation.setValue(stageByKeyIntimation.getStageName());
			
			SelectValue selectValue = new SelectValue();
			selectValue.setId(stageByKey.getKey());
			selectValue.setValue(stageByKey.getStageName());
					
			SelectValue selectValue1 = new SelectValue();
			selectValue1.setId(stageByKeyEnhn.getKey());
			selectValue1.setValue(stageByKeyEnhn.getStageName());
			
			/*SelectValue selectValueZonal = new SelectValue();
			selectValueZonal.setId(stageByKeyZonal.getKey());
			selectValueZonal.setValue(stageByKeyZonal.getStageName());*/
			
			SelectValue selectValueCorp = new SelectValue();
			selectValueCorp.setId(stageByKeyCorp.getKey());
			selectValueCorp.setValue(stageByKeyCorp.getStageName());
			
			/*SelectValue selectValueFinancial = new SelectValue();
			selectValueFinancial.setId(stageByKeyFinancial.getKey());
			selectValueFinancial.setValue(stageByKeyFinancial.getStageName());*/
					
			BeanItemContainer<SelectValue> statusByStage = new BeanItemContainer<SelectValue>(SelectValue.class);
			statusByStage.addBean(selectValue);
			statusByStage.addBean(selectValue1);
//			statusByStage.addBean(selectValueZonal);
			statusByStage.addBean(selectValueCorp);
//			statusByStage.addBean(selectValueFinancial);
			statusByStage.addBean(selectValueIntimation);

			view.setProcessRAWRequestSearch(SearchProcessRawRequestView.class, true, selectValueContainerForCPUCode, claimTypeListContainer,statusByStage);
		}
		
		protected void showProcessRAWRequestWizard(
				@Observes @CDIEvent(MenuPresenter.SHOW_PROCESS_RAW_REQUEST_WIZARD) final ParameterDTO parameters) {
			
			SearchProcessRawRequestTableDto tableDto = (SearchProcessRawRequestTableDto) parameters.getPrimaryParameter();
			Intimation intimation = intimationService
					.searchbyIntimationNo(tableDto.getIntimationNo());
			Claim claimByKey = claimService.getClaimByClaimKey(tableDto.getClaimKey());
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			
			ClaimDto claimDTO = null;
			if(claimByKey != null){
				newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				claimDTO.setNewIntimationDto(newIntimationDto);
			}
			Hospitals hospObj = hospitalService.getHospitalById(intimation.getHospital());
			tableDto.setIntimationDto(newIntimationDto);
			if(hospObj != null){
				HospitalDto hospDto = new HospitalDto(hospObj);
				tableDto.getIntimationDto().setHospitalDto(hospDto);
			}
			Long claimCount = preauthService.getClaimCount(tableDto.getIntimationDto().getPolicy().getKey());
			
			tableDto.setClaimDto(claimDTO);
			tableDto.setPreauthDTO(new PreauthDTO());
			if(claimCount != null){
				tableDto.getPreauthDTO().setClaimCount(claimCount != null ? claimCount: 0);
			}
			tableDto.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
			tableDto.getPreauthDTO().setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			tableDto.getPreauthDTO().setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			tableDto.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
			
			tableDto.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
			tableDto.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
			
			tableDto.getPreauthDTO().setClaimDTO(claimDTO);
			tableDto.getPreauthDTO().setNewIntimationDTO(newIntimationDto);

			Long hospital = claimByKey.getIntimation().getHospital();
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				tableDto.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					tableDto.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}
			
			List<RawInitiatedRequestDTO> requestDetails = new ArrayList<RawInitiatedRequestDTO>();
			if(tableDto.getKey() != null){
				List<RawInvsHeaderDetails> rawDetails = claimService.getRawInvestDetailsByIntimation(tableDto.getIntimationNo());
				for (RawInvsHeaderDetails rawInvsHeaderDetails : rawDetails) {
					RawInitiatedRequestDTO reqDtls = new RawInitiatedRequestDTO();
					List<RawInvsDetails> invstDtls = claimService.getRawInvestDetails(rawInvsHeaderDetails.getKey());
					for (RawInvsDetails rawInvsDetails : invstDtls) {
						reqDtls.setCategory(rawInvsDetails.getRawCategory().getCategoryDescription());
						reqDtls.setSubCategory(null != rawInvsDetails.getRawSubCategory()?rawInvsDetails.getRawSubCategory().getSubCategoryDescription():null);
						reqDtls.setRemarksForEscalation(rawInvsDetails.getRequestedRemarks());
						reqDtls.setInitiatedBy(rawInvsDetails.getCreatedBy());
						reqDtls.setIntiatedDate(rawInvsDetails.getCreatedDate());
						reqDtls.setStatusId(rawInvsDetails.getRequestedStatus());
						reqDtls.setStageId(rawInvsDetails.getRequestedStage());
						Stage stg = preauthService.getStageByKey(rawInvsDetails.getRequestedStage());
						Status sts = preauthService.getStatusByKey(rawInvsDetails.getRequestedStatus());
						reqDtls.setStatusValue(sts.getProcessValue());
						reqDtls.setStageValue(stg.getStageName());
						reqDtls.setResolutionRawValue(rawInvsDetails.getRedolutionType());
						reqDtls.setRawinvestigationKey(rawInvsDetails.getKey());
						reqDtls.setRawRemarksUpdatedBy(rawInvsDetails.getRepliedBy());
						reqDtls.setRawRemarksUpadedDate(rawInvsDetails.getRepliedDate());
						reqDtls.setRemarksfromRaw(rawInvsDetails.getRepliedRemarks());
						requestDetails.add(reqDtls);
					}
				}
			}
			tableDto.setRaqInitiatedDto(requestDetails);
			
			newIntimationDto.setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));
			
			view.setProcessRAWRequesttWizard(ProcessRawRequestWizard.class, tableDto);
		
		}

		
		protected void showMasterAllocationList(
				@Observes @CDIEvent(MenuPresenter.SHOW_MASTER_USER_ALLOCATION_LIST) final ParameterDTO parameters) {
			String userName = (String) parameters.getPrimaryParameter();
			MasUserAutoAllocation user = preauthService.searchUserType(userName);
			SearchPreauthFormDTO searchDto = new SearchPreauthFormDTO();
			changeView(searchDto, user);
			
		}
		public void changeView(SearchPreauthFormDTO searchFormDTO,MasUserAutoAllocation user){
			if (user != null) {
				if (user.getUserType() != null) {
					if (user.getUserType().getValue().equalsIgnoreCase(
							SHAConstants.CPU_ALLOCATION_CORP_USER)) {
						searchFormDTO.setIsCPUUser(false);
						searchFormDTO.setIsCorpUser(true);
						
						
					} else if (user.getUserType().getValue().equalsIgnoreCase(
							SHAConstants.CPU_ALLOCATION_CPU_USER)) {
						searchFormDTO.setIsCPUUser(true);
						searchFormDTO.setIsCorpUser(false);
						
					}else{
						searchFormDTO.setIsCPUUser(false);
						searchFormDTO.setIsCorpUser(false);
					}
		
				}
			}
		}
		
		
		protected void showUpdateRodDetailsWizard(@Observes @CDIEvent(MenuPresenter.SHOW_UPDATE_ROD_DETAILS) final ParameterDTO parameters) {

			SearchCreateRODTableDTO tableDTO = (SearchCreateRODTableDTO) parameters
					.getPrimaryParameter();
			String screenName = (String) parameters.getSecondaryParameter(0, String.class);
			
			ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
			Long docAckKey = tableDTO.getAckNo();
			Long rodKey = null;
			
			rodDTO.getDocumentDetails().setDocAcknowledgementKey(docAckKey);
			rodDTO.setScreenName(screenName);
			
			
			DocAcknowledgement docAcknowledgment = claimService.getDocAcknowledgment(docAckKey);
			Long docReceivedId = ReferenceTable.RECEIVED_FROM_HOSPITAL;
			if(docAcknowledgment != null){
				docReceivedId = docAcknowledgment.getDocumentReceivedFromId() != null ? docAcknowledgment.getDocumentReceivedFromId().getKey() : ReferenceTable.RECEIVED_FROM_HOSPITAL;
			}

			populateDocumentDetails(rodDTO, docAckKey, ReferenceTable.ROD_CREATION);
			Long claimKey = tableDTO.getClaimkey();
			Claim claimByKey = claimService.getClaimByKey(claimKey);
			Boolean isValidClaimForROD = true;
	/*
			if(null != claimByKey)
			{
				rodDTO.setPreviousAccountDetailsList(populatePreviousAccountDetails(claimByKey.getIntimation().getIntimationId(),rodDTO.getDocumentDetails().getDocumentReceivedFromValue()));
			}*/
			if(null != claimByKey)
			{
				rodDTO.setPreviousAccntDetailsList(calcService.getPreviousAccountDetails(claimByKey.getIntimation().getInsured().getInsuredId(),docReceivedId));
			}
			
			if(null != claimByKey)
			{
					if (null != claimByKey
							&& null != claimByKey.getStatus()
							&& null != claimByKey.getStatus().getKey()
							&& claimByKey.getStatus().getKey()
									.equals(ReferenceTable.CLAIM_CLOSED_STATUS)) {
						isValidClaimForROD = false;
						view.showErrorPopUp("Selected claim has been closed.Cannot proceed further.");
					}

				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
				{
					isValidClaimForROD = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
				
				if(isValidClaimForROD)
				{
					if((ReferenceTable.CASHLESS_CLAIM_TYPE_KEY).equals(claimByKey.getClaimType().getKey()))
					{
						if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.REIM_CONVERSION_PROCESS_CURRENT_QUEUE))
						{
							isValidClaimForROD = false;
							view.showErrorPopUp("Claim is pending for conversion. Please convert claim first before creating acknowledgement.");
						}
					}
				}
			}
			
			if(isValidClaimForROD)
			{
			// Long count =
			// getAckNoCountByClaimKey(claimKey,ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED);
			Long count = getAckNoCountByClaimKey(claimKey,
					ReferenceTable.CREATE_ROD);
			rodDTO.setAcknowledgementNumber(count);
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			ClaimDto claimDTO = null;
			if (claimByKey != null) {
				// setClaimValuesToDTO(preauthDTO, claimByKey);
				newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
					 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
					 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
					 
						Preauth latestPreauthByClaimForWithdrawReject = preauthService.getLatestPreauthByClaimForWithdrawReject(claimKey);
						if(latestPreauthByClaimForWithdrawReject != null){
							if(latestPreauthByClaimForWithdrawReject != null && latestPreauthByClaimForWithdrawReject.getOtherBenefitFlag() != null && latestPreauthByClaimForWithdrawReject.getOtherBenefitFlag().equalsIgnoreCase("Y")){
								rodDTO.getDocumentDetails().setIsOtherBenefitApplicableInPreauth(true);
							}
							List<OtherBenefitsTableDto> benefitAmountDetailsByCashlessKey = premedicalService.getBenefitAmountDetailsByCashlessKey(latestPreauthByClaimForWithdrawReject.getKey());
							for (OtherBenefitsTableDto otherBenefitsTableDto : benefitAmountDetailsByCashlessKey) {
								if(otherBenefitsTableDto.getBenefitName() != null && otherBenefitsTableDto.getBenefitName().equalsIgnoreCase(SHAConstants.emergencyDomestic)){
									rodDTO.getDocumentDetails().setIsEmergencyMedicalEvacuation(true);
								}else if(otherBenefitsTableDto.getBenefitName() != null && otherBenefitsTableDto.getBenefitName().equalsIgnoreCase(SHAConstants.repatriationOfMortal)){
									rodDTO.getDocumentDetails().setIsRepatriationOfMortal(true);
								}
							}
						}
				 }
				claimDTO.setNewIntimationDto(newIntimationDto);
				rodDTO.setNewIntimationDTO(newIntimationDto);
				rodDTO.setClaimDTO(claimDTO);
				rodDTO.setNewIntimationDTO(newIntimationDto);
				rodDTO.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
			}
			// Method to populate hospital values from VW_HOSPITALS;
			// if(null != rodDTO.get)
			if(null != claimByKey && null != claimByKey.getClaimType() && null != claimByKey.getClaimType().getKey())
			{
				if((claimByKey.getClaimType().getKey()).equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
				{
						if (null != newIntimationDto.getHospitalDto().getHospitalType()) {
						populatePaymentDetailsForHosp(newIntimationDto.getHospitalDto()
								.getKey(), rodDTO,docAcknowledgment.getDocumentReceivedFromId().getKey());
						
					}
				}
				else 
				{
					/*rodDTO.getDocumentDetails().setPaymentModeFlag(
							ReferenceTable.PAYMENT_MODE_CHEQUE_DD);*/
					populatePaymentDetailsForReimbursementClaim(claimKey, rodDTO);
				}
			}
			Reimbursement previousLatestROD = createRodService
					.getPreviousRODDetails(claimKey);
			if (previousLatestROD != null) {
				// reimbursementKey = previousLatestROD.getKey();
				ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
//				ZonalMedicalReviewMapper.getAllMapValues();
				PreauthDTO reimbursementDTO = mapper
						.getReimbursementDTO(previousLatestROD);
				reimbursementDTO.setIsPostHospitalization(true);
				setReimbursmentTOPreauthDTO(mapper, claimByKey, previousLatestROD,
						reimbursementDTO, true, SHAConstants.CREATE_ROD);
				Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
						.getIntimation().getHospital());
				ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
						.getPreauthDataExtractionDetails()
						.getUpdateHospitalDetails();
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				//updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalState(hospitalById.getState());
				updateHospitalDetails.setHospitalCode(hospitalById
						.getHospitalCode());
				
				List<ReconsiderRODRequestTableDTO> reconsiderRODRequest = getReconsiderRODRequestForUpdateROD(claimByKey);
				List<ReimbursementRejectionDto> rejectionDetails = new ArrayList<ReimbursementRejectionDto>();
				
				if (reconsiderRODRequest != null
						&& !reconsiderRODRequest.isEmpty()) {

					for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderRODRequest) {

						ReimbursementRejectionDto reimbursementRejectionDto = reimbursementRejectionService.getReimbursementRejectionByKey(reconsiderRODRequestTableDTO.getRodKey());

						if (null != reimbursementRejectionDto
								&& null != reimbursementRejectionDto.getStatusValue()) {
							if ((ReferenceTable.PROCESS_CLAIM_FINANCIAL_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())
									|| (ReferenceTable.PROCESS_CLAIM_REQUEST_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())
									|| (ReferenceTable.PAYMENT_REJECTED).equals(reimbursementRejectionDto.getStatusKey())
									|| (ReferenceTable.CLAIM_APPROVAL_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())) {
								
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(true);
								rejectionDetails.add(reimbursementRejectionDto);
							
							} else {
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
							}
						}
						else {
							reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
						}
						
						Reimbursement reimbursmentObj = reimbursementService.getReimbursementByKey(reconsiderRODRequestTableDTO.getRodKey());
						
						Boolean isSettled = reimbursementService.isClaimPaymentAvailable(reimbursmentObj.getRodNumber());
						
						if ((isSettled != null && isSettled) || ( null != reimbursmentObj && null != reimbursmentObj.getFinancialCompletedDate()
								&& reimbursmentObj.getFinancialCompletedDate().after(reimbursmentObj.getModifiedDate()))) {
							if((ReferenceTable.PROCESS_CLAIM_REQUEST_APPROVE_REJECT_STATUS).equals(reimbursmentObj.getStatus().getKey()) ||
									(ReferenceTable.PROCESS_CLAIM_FINANCIAL_APPROVE_REJECT_STATUS).equals(reimbursmentObj.getStatus().getKey())) {
								reconsiderRODRequestTableDTO.setIsSettledReconsideration(false);
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(true); 
							}else{
								reconsiderRODRequestTableDTO.setIsSettledReconsideration(true);
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
							}
						}
					}
					rodDTO.setReconsiderRodRequestList(reconsiderRODRequest);
					rodDTO.setRejectionDetails(rejectionDetails);
				}
				
				reimbursementDTO.setReconsiderationList(reconsiderRODRequest);
				
				reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
						previousLatestROD.getKey());
				reimbursementDTO.setIsPreviousROD(true);
				rodDTO.getDocumentDetails().setEmailId(reimbursementDTO.getPayeeEmailId());
				rodDTO.getDocumentDetails().setPayableAt(reimbursementDTO.getPayableAt());
				rodDTO.setPreauthDTO(reimbursementDTO);
				rodDTO.getDocumentDetails().setDateOfAdmission(reimbursementDTO.getPreauthDataExtractionDetails().getAdmissionDate());
				rodDTO.getDocumentDetails().setDateOfDischarge(reimbursementDTO.getPreauthDataExtractionDetails().getDischargeDate());
				if(null != previousLatestROD.getDoaChangeReason())
					rodDTO.getDocumentDetails().setReasonForChange(previousLatestROD.getDoaChangeReason());
				
				if(null != previousLatestROD.getPayModeChangeReason())
					rodDTO.getDocumentDetails().setPayModeChangeReason(previousLatestROD.getPayModeChangeReason());
				
				// reimbursementDTO.setPreviousROD(previousLatestROD);
				
				//IMSSUPPOR-32597d
				
				LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
				legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
				reimbursementDTO.setLegalHeirDto(legalHeirDTO);
				
				if(previousLatestROD.getDocAcknowLedgement() != null
						&& previousLatestROD.getDocAcknowLedgement().getDocumentReceivedFromId() != null
						&& ReferenceTable.RECEIVED_FROM_INSURED.equals(previousLatestROD.getDocAcknowLedgement().getDocumentReceivedFromId().getKey())
						&& previousLatestROD.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId() != null
						&& ReferenceTable.RELATION_SHIP_SELF_KEY.equals(previousLatestROD.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId().getKey())
						&& previousLatestROD.getPatientStatus() != null 
						&& previousLatestROD.getPatientStatus().getKey() != null 
						&& ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(previousLatestROD.getPatientStatus().getKey())) {
					

					/*if(previousLatestROD.getNomineeName() != null) {
						reimbursementDTO.getNewIntimationDTO().setNomineeName(previousLatestROD.getNomineeName());
					}	
					if(previousLatestROD.getNomineeAddr() != null) {
						reimbursementDTO.getNewIntimationDTO().setNomineeAddr(previousLatestROD.getNomineeAddr());
					}*/
						
						List<NomineeDetailsDto> nomineeDetailsListByTransactionKey = intimationService.getNomineeDetailsListByTransactionKey(previousLatestROD.getKey());
						
						if(nomineeDetailsListByTransactionKey != null && !nomineeDetailsListByTransactionKey.isEmpty()) {
							rodDTO.getNewIntimationDTO().setNomineeList(nomineeDetailsListByTransactionKey);
						}	
						
						else {
								if(rodDTO.getNewIntimationDTO().getNomineeList() == null 
									|| rodDTO.getNewIntimationDTO().getNomineeList().isEmpty()) {
									
									List<LegalHeir> legalHeirList = masterService.getlegalHeirListByTransactionKey(previousLatestROD.getKey());
									if(legalHeirList != null && !legalHeirList.isEmpty()) {
										List<LegalHeirDTO> legalHeirDTOList = new ArrayList<LegalHeirDTO>();
										LegalHeirDTO legalHeirDto;
										for (LegalHeir legalHeir : legalHeirList) {
											 legalHeirDto = new LegalHeirDTO(legalHeir);
											 legalHeirDto.setRelationshipContainer(masterService.getRelationshipContainerValues());
											 legalHeirDTOList.add(legalHeirDto);
										}
										reimbursementDTO.setLegalHeirDTOList(legalHeirDTOList);
									}
								}	
						}
					}
				
				
			}
			//IMSSUPPOR-32597
			/*
			 * if(null != rodDTO.getClaimDTO() &&
			 * (ReferenceTable.CLAIM_TYPE_CASHLESS
			 * ).equalsIgnoreCase(rodDTO.getClaimDTO().getClaimTypeValue())) {
			 * populatePaymentDetailsForCashLessClaim
			 * (newIntimationDto.getHospitalDto().getKey(),rodDTO); } else {
			 * populatePaymentDetailsForReimbursementClaim
			 * (rodDTO.getClaimDTO().getKey
			 * (),rodDTO,newIntimationDto.getHospitalDto().getKey());
			 * 
			 * }
			 */
			
			/*if(tableDTO.getHumanTaskListDTO() == null || tableDTO.getHumanTaskListDTO().getPayload() == null || tableDTO.getHumanTaskListDTO().getPayload().getRod() == null || tableDTO.getHumanTaskListDTO().getPayload().getRod().getKey() == null) {
				generateRODNumber(rodDTO);
				getPreviousRODNumber(rodDTO)
			} else {
				Reimbursement reimbursementByKey = reimbursementService.getReimbursementByKey(tableDTO.getHumanTaskListDTO().getPayload().getRod().getKey());
				rodDTO.getDocumentDetails().setRodNumber(reimbursementByKey.getRodNumber());
				String diagnosisForPreauthByKey = "";
				if(reimbursementByKey != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursementByKey.getKey());
					
				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);
			}*/
			
			Map<String, Object> outPutArray = (Map<String, Object>) tableDTO.getDbOutArray();
			Long payloadRodKey = (Long) outPutArray.get(SHAConstants.PAYLOAD_ROD_KEY);
			if(null == payloadRodKey || payloadRodKey.equals(0l))
			{
				generateRODNumber(rodDTO);
				getPreviousRODNumber(rodDTO);
			}
			else
			{
				Reimbursement reimbursementByKey = reimbursementService.getReimbursementByKey(payloadRodKey);
				rodDTO.getDocumentDetails().setRodNumber(reimbursementByKey.getRodNumber());
				String diagnosisForPreauthByKey = "";
				if(reimbursementByKey != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursementByKey.getKey());
					
				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);
				rodDTO.setRodKeyFromPayload(payloadRodKey);
			}		
			
			
			if ((ReferenceTable.CLAIM_TYPE_CASHLESS).equalsIgnoreCase(rodDTO
					.getClaimDTO().getClaimTypeValue()) && null == rodDTO.getDocumentDetails().getDateOfAdmission() && null == rodDTO.getDocumentDetails().getDateOfDischarge())
			{
				Preauth preauth = createRodService
						.getLatestPreauthForClaim(claimKey);
				
				if (null != preauth) {
					rodDTO.getDocumentDetails().setDateOfAdmission(
							preauth.getDataOfAdmission());
					rodDTO.getDocumentDetails().setDateOfDischarge(preauth.getDateOfDischarge());
				} else {
					rodDTO.getDocumentDetails().setDateOfAdmission(
							rodDTO.getClaimDTO().getNewIntimationDto()
									.getAdmissionDate());
					
					//rodDTO.getDocumentDetails().setDateOfDischarge(rodDTO.getClaimDTO().getNewIntimationDto().get);
				}
				
				String diagnosisForPreauthByKey = "";
				if(preauth != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
					
				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);

			} else {
				if(null == previousLatestROD)
				{
				rodDTO.getDocumentDetails().setDateOfAdmission(
						rodDTO.getClaimDTO().getNewIntimationDto()
								.getAdmissionDate());
				}
			}
			Map<String, Integer> productBenefitMap = calcService.getProductBenefitFlag(
					claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
					.getProduct().getKey());
			/**
			 * Earlier , pre and post hospitalization was enabled only based on
			 * product conditions in ack , rod level and bill entry level.  But as per mockup 13.7 , this
			 * validation needs to be removed at ack and rod level and should be available only
			 * at FA level. Hence hardcoding the values of pre and post in map , by which we always
			 * enable pre and post for all products at ACK and ROD level and bil entry level.
			 * */
			productBenefitMap.put("preHospitalizationFlag", 1);
			productBenefitMap.put("postHospitalizationFlag", 1);
		//	productBenefitMap.put("LumpSumFlag", 1);
			rodDTO.setProductBenefitMap(productBenefitMap);

	/*		rodDTO.setProductBenefitMap(dbCalculationService.getProductBenefitFlag(
					claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
							.getProduct().getKey()));*/

			rodDTO.getPreauthDTO().setStrUserName(tableDTO.getUsername());
			// rodDTO.setStrUserName("weblogic");
			rodDTO.getPreauthDTO().setStrPassword(tableDTO.getPassword());
			rodDTO.setStrUserName(tableDTO.getUsername());
			// rodDTO.setStrUserName("weblogic");
			rodDTO.setStrPassword(tableDTO.getPassword());
			//rodDTO.setHumanTask(tableDTO.getHumanTaskListDTO());
			//Added for document details page enhancement.
			rodDTO.setCheckListTableContainerForROD(masterService.getDocumentCheckListValuesContainer(SHAConstants.MASTER_TYPE_REIMBURSEMENT));

			createRodService.getBillClassificationFlagDetails(rodDTO.getClaimDTO()
					.getKey(), rodDTO);
			/*rodDTO.setProductBenefitMap(dbCalculationService.getProductBenefitFlag(
					claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
							.getProduct().getKey()));*/
//			rodDTO.setReconsiderRodRequestList(getReconsiderRODRequest(claimByKey));
			
//			rodDTO.setUploadDocsList(getUploadedDocumentTableDataForBillEntry(key));
			
			List<RODQueryDetailsDTO> rodQueryDetailsList = getRODQueryDetailsForCreateRodandBillEntry(claimByKey,docAckKey); 
			rodDTO.setRodQueryDetailsList(rodQueryDetailsList);
			if(null != rodQueryDetailsList && !rodQueryDetailsList.isEmpty())
			{   
				Map<String , Long> reconsiderationMap = null;
				for (RODQueryDetailsDTO rodQueryDetailsDTO : rodQueryDetailsList) {
					if(null != rodQueryDetailsDTO.getReplyStatus() && ("Y").equalsIgnoreCase(rodQueryDetailsDTO.getReplyStatus()))
					{
						rodDTO.setIsQueryReplyReceived(true);
						reconsiderationMap = new HashMap<String,Long>();
						reconsiderationMap.put("ackKey",rodQueryDetailsDTO.getAcknowledgementKey());
						reconsiderationMap.put("rodKey", rodQueryDetailsDTO.getReimbursementKey());
						rodDTO.setReconsiderationMap(reconsiderationMap);
						rodKey = rodQueryDetailsDTO.getReimbursementKey();
						Reimbursement reimbursement = createRodService.getReimbursementObjectByKey(rodQueryDetailsDTO.getReimbursementKey());
						rodDTO.getDocumentDetails().setPaymentModeFlag(reimbursement.getPaymentModeId());
						rodDTO.getDocumentDetails().setEmailId(reimbursement.getPayeeEmailId());
						rodDTO.getDocumentDetails().setPanNo(reimbursement.getPanNumber());
						rodDTO.getDocumentDetails().setPayableAt(reimbursement.getPayableAt());
						//SelectValue selValue = new SelectValue();
						//selValue.setValue(reimbursement.getPayeeName());
						rodDTO.getDocumentDetails().setReasonForChange(reimbursement.getReasonForChange());
						rodDTO.getDocumentDetails().setLegalFirstName(reimbursement.getLegalHeirFirstName());
						rodDTO.getDocumentDetails().setAccountNo(reimbursement.getAccountNumber());
						rodDTO.getDocumentDetails().setAccountPreference(reimbursement.getAccountPreference());
						rodDTO.getDocumentDetails().setAccountType(reimbursement.getAccountType());
						if(null != reimbursement.getPaymentModeId() && reimbursement.getPaymentModeId().equals(ReferenceTable.PAYMENT_MODE_BANK_TRANSFER))
						{
							if(null != reimbursement.getBankId())
							{
								BankMaster masBank = masterService.getBankDetailsByKey(reimbursement.getBankId());
								rodDTO.getDocumentDetails().setBankId(masBank.getKey());
								rodDTO.getDocumentDetails().setBankName(masBank.getBankName());
								rodDTO.getDocumentDetails().setIfscCode(masBank.getIfscCode());
								rodDTO.getDocumentDetails().setBranch(masBank.getBranchName());
								rodDTO.getDocumentDetails().setCity(masBank.getCity());
							}
						}
						
						Long reimbursementKey = rodQueryDetailsDTO.getReimbursementKey();
						if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getHospitalizationFlag()))
						{
							if(null == rodDTO.getDocumentDetails().getHospitalizationClaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getHospitalizationClaimedAmount()))
							{
								Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.HOSPITALIZATION);
								if(null != totalClaimedAmt)
									rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(String.valueOf(totalClaimedAmt));
							}
						}
						
						if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getPreHospitalizationFlag()))
						{
							if(null == rodDTO.getDocumentDetails().getPreHospitalizationClaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getPreHospitalizationClaimedAmount()))
							{
								Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.PRE_HOSPITALIZATION);
								if(null != totalClaimedAmt)
									rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(String.valueOf(totalClaimedAmt));
							}
						}
						if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getPostHospitalizationFlag()))
						{
							if(null == rodDTO.getDocumentDetails().getPostHospitalizationClaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getPostHospitalizationClaimedAmount()))
							{
								Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.POST_HOSPITALIZATION);
								if(null != totalClaimedAmt)
									rodDTO.getDocumentDetails().setPostHospitalizationClaimedAmount(String.valueOf(totalClaimedAmt));
							}
						}
						
						if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getOtherBenefitsFlag()))
						{
							if(null == rodDTO.getDocumentDetails().getOtherBenefitclaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getOtherBenefitclaimedAmount()))
							{
								Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.OTHER_BENEFIT);
								if(null != totalClaimedAmt)
									rodDTO.getDocumentDetails().setOtherBenefitclaimedAmount(String.valueOf(totalClaimedAmt));
							}
						}
						
						//To populate bank details.
						/*rodDTO.get
						rodDTO.getDocumentDetails().setIfscCode(reimbursement.getB);*/
					}
				}
			}
			
			if(rodDTO.getClaimDTO().getClaimType() != null
					&& rodDTO.getClaimDTO().getClaimType().getId()
					.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				String[] rodSplit = rodDTO.getDocumentDetails().getRodNumber().split("/");
				String string = rodSplit[rodSplit.length - 1];
				if(SHAUtils.getIntegerFromString(string) == 1 || previousLatestROD == null) {
					PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//					PreMedicalMapper.getAllMapValues();
					List<Preauth> preauthByClaimKey = preauthService
							.getPreauthByClaimKey(claimByKey.getKey());
					Preauth previousPreauth = null;
					if (!preauthByClaimKey.isEmpty()) {
						previousPreauth = preauthByClaimKey.get(0);
						String[] split = previousPreauth.getPreauthId().split("/");
						String defaultNumber = split[split.length - 1];
						//Integer nextReferenceNo = Integer.valueOf(defaultNumber);
						for (Preauth preauth : preauthByClaimKey) {
							if (preauth.getPreauthId() != null) {
								String[] splitNumber = preauth.getPreauthId()
										.split("/");
								String number = splitNumber[splitNumber.length - 1];
								if (Integer.valueOf(number) > Integer
										.valueOf(defaultNumber)) {
									previousPreauth = preauth;
									//nextReferenceNo = Integer.valueOf(number);
								}
							}
						}
					}

					if (previousPreauth != null) {
						PreauthDTO reimbursementDTO = premedicalMapper
								.getPreauthDTO(previousPreauth);

						setpreauthTOPreauthDTO(premedicalMapper, claimByKey,
								previousPreauth, reimbursementDTO, true);
						reimbursementDTO.setIsCashlessType(true);
						reimbursementDTO.getPreauthDataExtractionDetails()
								.setDischargeDate(previousPreauth.getDateOfDischarge());
						if(ReferenceTable.getFHORevisedKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
									|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
										(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
											&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
													SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
													|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
													|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
											&& ("G").equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan()))
									|| (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
										&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
												SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
						{
							List<OtherBenefitsTableDto> otherBenefitsClaimedAmount = reimbursementService.getOtherBenefitsClaimedAmount(previousPreauth.getKey());
							for (OtherBenefitsTableDto otherBenefitsTableDto : otherBenefitsClaimedAmount) {
								otherBenefitsTableDto.setAmtAlreadyPaidToHospital(otherBenefitsTableDto.getApprovedAmt());
								otherBenefitsTableDto.setKey(null);
							}
							reimbursementDTO.getPreauthDataExtractionDetails().setOtherBenefitsList(otherBenefitsClaimedAmount);
						}
						
						rodDTO.setPreauthDTO(reimbursementDTO);
						
						rodDTO.getClaimDTO().setLatestPreauthKey(previousPreauth.getKey());     

					}
				}
				Preauth preauth =preauthService.getLatestPreauthByClaim(claimByKey.getKey());
				String diagnosisForPreauthByKey = "";
				if(preauth != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());
					
				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);

			
			}
			
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDTO.getUsername());
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.CREATE_ROD);
			
			//loadRRCRequestValuesForProcessing(rrcDTO,insuredSumInsured,SHAConstants.ACKNOWLEDGE_DOC_RECEIVED);
			
			rodDTO.setRrcDTO(rrcDTO);
			
			String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
			if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
				String get64vbStatus = PremiaService.getInstance().get64VBStatus(claimByKey.getIntimation().getPolicy().getPolicyNumber(), claimByKey.getIntimation().getIntimationId());
				if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
					rodDTO.setIsDishonoured(true);
				} 
			}
			
			
//			Preauth latestPreauthByClaim = createRodService.getLatestPreauthByClaim(5014232l);
//			List<ClaimAmountDetails> claimAmountDetailsByPreauth = createRodService.getClaimAmountDetailsByPreauth(5022781l);
//			

//			Reimbursement reimbursementObjectByKey = createRodService.getReimbursementObjectByKey(5040982l);
//			Claim claimByClaimKey = claimService.getClaimByClaimKey(5020558l);	
//			
//			createRodService.submitTaskToBPM(rodDTO, reimbursementObjectByKey, false, sendToWhere, false, claimByClaimKey);
			
			
			if(null != rrcDTO.getNewIntimationDTO() && null != rrcDTO.getNewIntimationDTO().getPolicy()) {
			rodDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(rrcDTO.getNewIntimationDTO().getPolicy().getKey()));
			rodDTO.setIsPEDInitiatedbtn(rodDTO.getIsPEDInitiated());
			}
			
			/**
			 * Added for loading already uploaded docs table values.
			 * 
			 * */
			
			if(null != tableDTO.getIsDocumentUploaded() && (SHAConstants.YES).equalsIgnoreCase(tableDTO.getIsDocumentUploaded()) && null != tableDTO.getAckDocKey()  && null != tableDTO.getDocAcknowledgementKey())
			{
				rodDTO.setAlreadyUploadDocsList(createRodService.getUploadDocumentForAcknowledgementDocKey(tableDTO.getDocAcknowledgementKey()));
			}
			
//			if(rrcDTO.getNewIntimationDTO() != null && rrcDTO.getNewIntimationDTO().getInsuredPatient() != null &&
//					rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
//				Long claimCount = preauthService.getClaimCount(rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey());
//				if(claimCount != null){
//					rodDTO.setClaimCount(claimCount);
//				}
//			}
			
			if(null != newIntimationDto && null != newIntimationDto.getPolicy()) {
				BeanItemContainer<SelectValue> sectionList = masterService.getSectionList(newIntimationDto.getPolicy().getProduct().getKey(),newIntimationDto.getPolicy());
				rodDTO.setSectionList(sectionList);
				if(rodKey != null) {
					rodDTO.setShouldDisableSection(reimbursementService.isItHavingAnyROD(claimKey, rodKey));
				} else {
					rodDTO.setShouldDisableSection(reimbursementService.isItHavingAnyROD(claimKey));
				}
				
			}
			if(claimByKey!=null){
				
				Long hospital = claimByKey.getIntimation().getHospital();
				Hospitals hospitalById = hospitalService.getHospitalById(hospital);
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					rodDTO.setIsSuspicious(hospitalById.getSuspiciousType());
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null && !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")){
						rodDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
					}
				}
			}
			
			rodDTO.setDbOutArray(tableDTO.getDbOutArray());
			
			Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
			rodDTO.getPreauthDTO().setIsPolicyValidate(policyValidation);
			
			// R1045
			rodDTO.getPreauthDTO().setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			rodDTO.getPreauthDTO().setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			rodDTO.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());
			
			rodDTO.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
			rodDTO.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
			
			Product product = rodDTO.getClaimDTO().getNewIntimationDto().getPolicy()
					.getProduct();
			if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())){
			
			if (! (ReferenceTable.CLAIM_TYPE_CASHLESS).equalsIgnoreCase(rodDTO
					.getClaimDTO().getClaimTypeValue())){
					if(null == previousLatestROD){
						List<UpdateOtherClaimDetailDTO> updateOtherClaimDetails = preauthService.getUpdateOtherClaimDetails(newIntimationDto.getPolicy().getKey(),rodDTO.getPreauthDTO());
						for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetails) {
							updateOtherClaimDetailDTO.setKey(null);
						}
						rodDTO.getPreauthDTO().setUpdateOtherClaimDetailDTO(updateOtherClaimDetails);
					}else{
						List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsForExisting = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(previousLatestROD.getKey());
						for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsForExisting) {
							updateOtherClaimDetailDTO.setKey(null);
						}
						rodDTO.getPreauthDTO().setUpdateOtherClaimDetailDTO(updateOtherClaimDetailsForExisting);
					}
				}else{
					if(null != previousLatestROD){
						List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsForExisting = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(previousLatestROD.getKey());
						for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsForExisting) {
							updateOtherClaimDetailDTO.setKey(null);
						}
						rodDTO.getPreauthDTO().setUpdateOtherClaimDetailDTO(updateOtherClaimDetailsForExisting);
					}
				}
			}
			
			//DRIMSSUPPOR-32597d
			LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
			legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
			rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirDTO);
			//IMSSUPPOR-23596
			rodDTO.setIsAlreadyHospitalizationExist(reimbursementService.isPreviousHospAcknowledgment(claimKey, docAckKey));
			
			view.setCreateRODWizardView(CreateRODWizardView.class, rodDTO);
			
			}
		}
		
		private List<ReconsiderRODRequestTableDTO> getReconsiderRODRequestForUpdateROD(
				Claim claim) {
			List<ReconsiderRODRequestTableDTO> reconsiderRODList = ackDocReceivedService
					.getReconsiderRequestTableValuesForUpdateRod(claim);
			return reconsiderRODList;
		}
		
		protected void showCancelStatusReport(
				@Observes @CDIEvent(MenuItemBean.AUTO_ALLOCATION_CANCEL_REPORT) final ParameterDTO parameters) {

			
			view.setViewAutoAllocCancelStatusReport(AutoAllocationCancelReportView.class, true);
		}
		
		protected void showInvestigationDirectAssigmentSearch(
				@Observes @CDIEvent(MenuItemBean.INVESTIGATION_DIRECT_ASSIGNEMENT) final ParameterDTO parameters) {
			
			

			
			view.setViewInvestigationDirectAssigement(
					InvestigationDirectAssignmentView.class);
		}
		

		protected void showUploadNEFTDetailsWizard(
				@Observes @CDIEvent(MenuPresenter.SHOW_UPLOAD_NEFT_DETAILS) final ParameterDTO parameters) {
			
			SearchUploadNEFTDetailsTableDTO tableDTO = (SearchUploadNEFTDetailsTableDTO) parameters
					.getPrimaryParameter();
			ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
			
			Long claimKey = tableDTO.getClaimKey();
			Claim claim = claimService.getClaimByKey(claimKey);

			List<Reimbursement> reimbursementList = reimbursementService
					.getRembursementDetails(claimKey);
			
			//List<Reimbursement> reimbursementList = new ArrayList<Reimbursement>();
			Map<Long, Long> rejectMap = ReferenceTable.REJECT_ROD_KEYS;
			/*if(null != reimbursementListObj && !reimbursementListObj.isEmpty())
			{
				for (Reimbursement reimbursement : reimbursementListObj) {
					if(null != rejectMap && !rejectMap.isEmpty() && null == rejectMap.get(reimbursement.getStatus().getKey()))
					{
						reimbursementList.add(reimbursement);
					}
				}
			}
			
	*/
			
			if (tableDTO.getRodKey() != null) {
				Reimbursement reimbursement = reimbursementService
						.getReimbursementbyRod(tableDTO.getRodKey());
				
			
				if(null != reimbursement)
				{
					rodDTO.getDocumentDetails().setDocAcknowledgementKey(
							reimbursement.getDocAcknowLedgement().getKey());
					rodDTO.getDocumentDetails().setDateOfDischarge(reimbursement.getDateOfDischarge());
					rodDTO.getDocumentDetails().setRodKey(reimbursement.getKey());
				}
				
				
				String diagnosisForPreauthByKey = "";
				if(reimbursement != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
					
				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);
				
			}

			DocAcknowledgement docAcknowlegement = acknowledgementDocumentsReceivedService.getDocAcknowledgment(rodDTO.getDocumentDetails().getDocAcknowledgementKey());
			rodDTO.getDocumentDetails().setAcknowledgementNumber(
					docAcknowlegement.getAcknowledgeNumber());
			rodDTO.getDocumentDetails().setRodKey(tableDTO.getKey());
			
			if(null != docAcknowlegement.getModeOfReceiptId())
			{
				rodDTO.getDocumentDetails().setModeOfReceiptValue(docAcknowlegement.getModeOfReceiptId().getValue());
			}
			
			rodDTO.getDocumentDetails().setAdditionalRemarks(docAcknowlegement.getAdditionalRemarks());

			rodDTO.getDocumentDetails().setAcknowledgmentContactNumber(docAcknowlegement.getInsuredContactNumber());
			rodDTO.getDocumentDetails().setEmailId(docAcknowlegement.getInsuredEmailId());
			rodDTO.getDocumentDetails().setDocumentsReceivedDate(docAcknowlegement.getDocumentReceivedDate());
			/*if(null != docAcknowlegement.getSourceOfDocument())
				{
					if(SHAConstants.SOURCE_DOC_INSURED.equalsIgnoreCase(docAcknowlegement.getSourceOfDocument())){
				rodDTO.getDocumentDetails().setSourceOfDocument(Boolean.TRUE);
			}
			else if(SHAConstants.SOURCE_DOC_INTERNAL.equalsIgnoreCase(docAcknowlegement.getSourceOfDocument())){
				rodDTO.getDocumentDetails().setSourceOfDocument(Boolean.FALSE);
			}
				}*/
			rodDTO.getDocumentDetails().setHospitalizationFlag(
					docAcknowlegement.getHospitalisationFlag());
			rodDTO.getDocumentDetails().setPreHospitalizationFlag(
					docAcknowlegement.getPreHospitalisationFlag());
			rodDTO.getDocumentDetails().setPostHospitalizationFlag(
					docAcknowlegement.getPostHospitalisationFlag());
			rodDTO.getDocumentDetails().setPartialHospitalizationFlag(
					docAcknowlegement.getPartialHospitalisationFlag());
			
			if(docAcknowlegement.getHospitalizationRepeatFlag() != null){
				rodDTO.getDocumentDetails().setHospitalizationRepeatFlag(docAcknowlegement.getHospitalizationRepeatFlag());	
			}
			
			rodDTO.getDocumentDetails().setLumpSumAmountFlag(
					docAcknowlegement.getLumpsumAmountFlag());
			if (docAcknowlegement.getHospitalizationClaimedAmount() != null) {
				rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(
						docAcknowlegement.getHospitalizationClaimedAmount()
								.toString());
			}

			SelectRODtoAddAdditionalDocumentsMapper selectRODtoAddAdditionalDocumentsMapper = new SelectRODtoAddAdditionalDocumentsMapper();
			List<SelectRODtoAddAdditionalDocumentsDTO> selectRODtoAddAdditionalDocumentsDTOList = selectRODtoAddAdditionalDocumentsMapper
					.getReimbursementDto(reimbursementList);
			
			for (SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO2 : selectRODtoAddAdditionalDocumentsDTOList) {
				if(selectRODtoAddAdditionalDocumentsDTO2 != null && selectRODtoAddAdditionalDocumentsDTO2.getStatusKey() != null){
				if(selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.ACKNOWLEDGE_STATUS_KEY) || selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY)
				|| selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.BILL_ENTRY_STATUS_KEY)){
					
					selectRODtoAddAdditionalDocumentsDTO2.setApprovedAmt(null);
					
					}
				}
				
			}

			Long count = getAckNoCountByClaimKey(claimKey,
					ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED);
			rodDTO.setAcknowledgementNumber(count);
			ClaimDto claimDTO  = null;
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			if (claim != null) {
				newIntimationDto = intimationService.getIntimationDto(claim
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claim);
				claimDTO.setNewIntimationDto(newIntimationDto);
				rodDTO.setClaimDTO(claimDTO);

			}
			generateAcknowledgeNo(rodDTO);

			/*
			 * rodDTO.getDocumentDetails().setDocumentCheckList(
			 * getDocumentCheckList(claimByKey));
			 */

			rodDTO.setProductBenefitMap(calcService.getProductBenefitFlag(
					claim.getKey(), claim.getIntimation().getPolicy().getProduct()
							.getKey()));
			rodDTO.getDocumentDetails().setDocumentCheckList(
					setDocumentCheckListTableValues());

			rodDTO.setReconsiderRodRequestList(getReconsiderRODRequest(claim));
			rodDTO.setRodQueryDetailsList(getRODQueryDetailsValues(claim));

//			List<Reimbursement> reimbursementByStageId = reimbursementService
//					.getReimbursementByClaimKeyAndStageId(claimKey);
			/*List<Reimbursement> reimbursementByStageId = reimbursementService
				.getReimbursementByClaimKey(claimKey);*/
			//List<Reimbursement> reimbursementByStageId = new ArrayList<Reimbursement>();
			/*List<Reimbursement> reimbursementListObj = reimbursementService
			.getReimbursementByClaimKey(claimKey);*/
			
			/*if(null != reimbursementList && !reimbursementList.isEmpty())
			{
				for (Reimbursement reimbursement : reimbursementList) {
					if(null != rejectMap && !rejectMap.isEmpty() && null == rejectMap.get(reimbursement.getStatus().getKey()))
					{
						reimbursementByStageId.add(reimbursement);
					}
					if(isMAapproved(reimbursement) && reimbursementService.isBatchNotCreated(reimbursement.getKey())){
						reimbursementByStageId.add(reimbursement);
					}
				}
			}

			selectRODtoAddAdditionalDocumentsDTOList = selectRODtoAddAdditionalDocumentsMapper
					.getReimbursementDto(reimbursementByStageId);*/

			for (int index = 0; index < selectRODtoAddAdditionalDocumentsDTOList
					.size(); index++) {
				if (reimbursementList.get(index).getStatus().getKey()
						.equals(ReferenceTable.BILLING_SEND_TO_FINANCIAL_APPROVER)) {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementList.get(index)
											.getBillingApprovedAmount() != null ? reimbursementList
											.get(index).getBillingApprovedAmount()
											.toString()
											: "");
				} else if (reimbursementList.get(index).getStatus().getKey()
						.equals(ReferenceTable.FINANCIAL_APPROVE_STATUS)) {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementList.get(index)
											.getFinancialApprovedAmount() != null ? reimbursementList
											.get(index)
											.getFinancialApprovedAmount()
											.toString()
											: "");
				} else {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementList.get(index)
											.getCurrentProvisionAmt() != null ? reimbursementList
											.get(index).getCurrentProvisionAmt()
											.toString()
											: "");
				}
			}

			for (int index = 0; index < reimbursementList.size(); index++) {
				StringBuffer billClassificaiton = new StringBuffer();
				Double claimedAmt = 0d;
				if (reimbursementList.get(index) != null
						&& reimbursementList.get(index)
								.getDocAcknowLedgement() != null) {
					if (reimbursementList.get(index).getDocAcknowLedgement()
							.getHospitalisationFlag() != null) {
						if (reimbursementList.get(index)
								.getDocAcknowLedgement().getHospitalisationFlag()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospitalisation, ");
						}

					}

					if (reimbursementList.get(index).getDocAcknowLedgement()
							.getPreHospitalisationFlag() != null) {
						if (reimbursementList.get(index)
								.getDocAcknowLedgement()
								.getPreHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton .append("Pre - Hospitalisation, ");
						}
					}

					if (reimbursementList.get(index).getDocAcknowLedgement()
							.getPostHospitalisationFlag() != null) {
						if (reimbursementList.get(index)
								.getDocAcknowLedgement()
								.getPostHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Post - Hospitalisation,  ");
						}

					}

					if (reimbursementList.get(index).getDocAcknowLedgement()
							.getPartialHospitalisationFlag() != null) {
						if (reimbursementList.get(index)
								.getDocAcknowLedgement()
								.getPartialHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Partial - Hospitalisation,  ");
						}

					}

					if (reimbursementList.get(index).getDocAcknowLedgement()
							.getLumpsumAmountFlag() != null) {
						if (reimbursementList.get(index)
								.getDocAcknowLedgement().getLumpsumAmountFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Lumpsum - Amount,  ");
						}
					}

					if (reimbursementList.get(index).getDocAcknowLedgement()
							.getHospitalCashFlag() != null) {
						if (reimbursementList.get(index)
								.getDocAcknowLedgement().getHospitalCashFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospital - Cash,  ");
						}
					}

					if (reimbursementList.get(index).getDocAcknowLedgement()
							.getHospitalizationRepeatFlag() != null) {
						if (reimbursementList.get(index)
								.getDocAcknowLedgement().getHospitalizationRepeatFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospitalisation - Repeat,  ");
						}
					}

					if (reimbursementList.get(index).getDocAcknowLedgement()
							.getPatientCareFlag() != null) {
						if (reimbursementList.get(index)
								.getDocAcknowLedgement()
								.getPatientCareFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Patient - Care,  ");
						}
					}
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getHospitalizationClaimedAmount();
//					}
	//
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getPreHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getPreHospitalizationClaimedAmount();
//					}
	//
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getPostHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getPostHospitalizationClaimedAmount();
//					}
				}
				if (billClassificaiton.length() > 0) {
					/*billClassificaiton = billClassificaiton.toString().substring(0,
							billClassificaiton.length() - 2);*/
					String billClassificationStr = billClassificaiton.toString().substring(0, billClassificaiton.length() - 2);
					selectRODtoAddAdditionalDocumentsDTOList.get(index)
							.setBillClassification(billClassificationStr);

				}
				claimedAmt = createRodService.getClaimedAmount(selectRODtoAddAdditionalDocumentsDTOList.get(index).getKey());
				if(claimedAmt != null){
				selectRODtoAddAdditionalDocumentsDTOList.get(index).setClaimedAmt(
						claimedAmt.toString());
				}
			}

			Integer index = 1;

			for (SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO1 : selectRODtoAddAdditionalDocumentsDTOList) {
				selectRODtoAddAdditionalDocumentsDTO1.setsNo(index.toString());
				index++;
			}
			/*List<UploadDocumentDTO> rodSummaryDetails = rodService
					.getRODSummaryDetails(tableDTO.getKey());
			
			if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
			{
				List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
			//	List<UploadDocumentDTO> uploadDocsList = rodDTO.getUploadDocsList();
				for (UploadDocumentDTO uploadDocDTO : rodSummaryDetails) {
					//sss
					uploadDocDTO.setIsBillSaved(true);
					List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
					List<RODBillDetails> billEntryDetails = rodService
							.getBillEntryDetails(uploadDocDTO.getDocSummaryKey());
					if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
						for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
							
							 * <<<<<<< HEAD
							 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
							 * uploadDocumentDTO)); =======
							 
							dtoList.add(getBillDetailsDTOForBillEntry(billEntryDetailsDO));
							
							// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
						}
						uploadDocDTO.setBillEntryDetailList(dtoList);
					}
				}
			//	rodDTO.getUploadDocumentsDTO().setBillEntryDetailList(dtoList);
				rodDTO.setUploadDocsList(rodSummaryDetails);
				
			}*/

			rodDTO.setSelectRODtoAddAdditionalDocumentsDTO(selectRODtoAddAdditionalDocumentsDTOList);

			rodDTO.setStrUserName(tableDTO.getUsername());
			
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDTO.getUsername());

			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.UPLOAD_NEFT_DETAILS);
			
			//loadRRCRequestValuesForProcessing(rrcDTO,insuredSumInsured,SHAConstants.ACKNOWLEDGE_DOC_RECEIVED);
			
			rodDTO.setRrcDTO(rrcDTO);

			view.setUploadNEFTDetailsWizard(UploadNEFTDetailsView.class,rodDTO);
		}
			
		//R1069
		protected void showAddAditionalPaymentInfosWizard(
				@Observes @CDIEvent(MenuPresenter.ADD_ADDITIONAL_PAYMENT_INFORMATION) final ParameterDTO parameters) {

			SearchAddAdditionalDocumentPaymentInfoTableDTO tableDTO = (SearchAddAdditionalDocumentPaymentInfoTableDTO) parameters
					.getPrimaryParameter();
			ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
			
			Long claimKey = tableDTO.getClaimKey();
			Claim claim = claimService.getClaimByKey(claimKey);

			List<Reimbursement> reimbursementList = reimbursementService
					.getRembursementDetails(claimKey);
			
			//List<Reimbursement> reimbursementList = new ArrayList<Reimbursement>();
			Map<Long, Long> rejectMap = ReferenceTable.REJECT_ROD_KEYS;
			/*if(null != reimbursementListObj && !reimbursementListObj.isEmpty())
			{
				for (Reimbursement reimbursement : reimbursementListObj) {
					if(null != rejectMap && !rejectMap.isEmpty() && null == rejectMap.get(reimbursement.getStatus().getKey()))
					{
						reimbursementList.add(reimbursement);
					}
				}
			}
			
	*/
			/*Boolean isValidClaimForAck = true;
			if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.BILLING_CURRENT_QUEUE)))
			{
				isValidClaimForAck = false;
				view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
			}
			if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.FA_CURRENT_QUEUE)))
			{
				isValidClaimForAck = false;
				view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
			}*/
			
			if (tableDTO.getKey() != null) {
				Reimbursement reimbursement = reimbursementService
						.getReimbursementbyRod(tableDTO.getKey());
				
				/*Boolean isValidClaimForAck = true;
				if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.BILLING_CURRENT_QUEUE)))
				{
					
					isValidClaimForAck = false;
					view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
				}
				if((ackDocReceivedService.getDBTaskForPreauth(claim.getIntimation(), SHAConstants.FA_CURRENT_QUEUE)))
				{
					isValidClaimForAck = false;
					view.showErrorPopUp("This claims has crossed medical stage and you are not allowed to upload the document");
				}*/
			
				if(null != reimbursement)
				{
					rodDTO.getDocumentDetails().setDocAcknowledgementKey(
							reimbursement.getDocAcknowLedgement().getKey());
					rodDTO.getDocumentDetails().setDateOfDischarge(reimbursement.getDateOfDischarge());
					rodDTO.getDocumentDetails().setRodKey(reimbursement.getKey());
				}
				
				
				String diagnosisForPreauthByKey = "";
				if(reimbursement != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursement.getKey());
					
				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);
				
			}

			DocAcknowledgement docAcknowlegement = acknowledgementDocumentsReceivedService
					.getDocAcknowledgment(rodDTO.getDocumentDetails()
							.getDocAcknowledgementKey());

			rodDTO.getDocumentDetails().setAcknowledgementNumber(
					docAcknowlegement.getAcknowledgeNumber());
			rodDTO.getDocumentDetails().setRodKey(tableDTO.getKey());
			
			if(null != docAcknowlegement.getModeOfReceiptId())
			{
				rodDTO.getDocumentDetails().setModeOfReceiptValue(docAcknowlegement.getModeOfReceiptId().getValue());
			}
			
			rodDTO.getDocumentDetails().setAdditionalRemarks(docAcknowlegement.getAdditionalRemarks());

			rodDTO.getDocumentDetails().setAcknowledgmentContactNumber(docAcknowlegement.getInsuredContactNumber());
			rodDTO.getDocumentDetails().setEmailId(docAcknowlegement.getInsuredEmailId());
			rodDTO.getDocumentDetails().setDocumentsReceivedDate(docAcknowlegement.getDocumentReceivedDate());
			/*if(null != docAcknowlegement.getSourceOfDocument())
				{
					if(SHAConstants.SOURCE_DOC_INSURED.equalsIgnoreCase(docAcknowlegement.getSourceOfDocument())){
				rodDTO.getDocumentDetails().setSourceOfDocument(Boolean.TRUE);
			}
			else if(SHAConstants.SOURCE_DOC_INTERNAL.equalsIgnoreCase(docAcknowlegement.getSourceOfDocument())){
				rodDTO.getDocumentDetails().setSourceOfDocument(Boolean.FALSE);
			}
				}*/
			rodDTO.getDocumentDetails().setHospitalizationFlag(
					docAcknowlegement.getHospitalisationFlag());
			rodDTO.getDocumentDetails().setPreHospitalizationFlag(
					docAcknowlegement.getPreHospitalisationFlag());
			rodDTO.getDocumentDetails().setPostHospitalizationFlag(
					docAcknowlegement.getPostHospitalisationFlag());
			rodDTO.getDocumentDetails().setPartialHospitalizationFlag(
					docAcknowlegement.getPartialHospitalisationFlag());
			
			if(docAcknowlegement.getHospitalizationRepeatFlag() != null){
				rodDTO.getDocumentDetails().setHospitalizationRepeatFlag(docAcknowlegement.getHospitalizationRepeatFlag());	
			}
			
			rodDTO.getDocumentDetails().setLumpSumAmountFlag(
					docAcknowlegement.getLumpsumAmountFlag());
			if (docAcknowlegement.getHospitalizationClaimedAmount() != null) {
				rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(
						docAcknowlegement.getHospitalizationClaimedAmount()
								.toString());
			}

			SelectRODtoAddAdditionalDocumentsMapper selectRODtoAddAdditionalDocumentsMapper = new SelectRODtoAddAdditionalDocumentsMapper();
			List<SelectRODtoAddAdditionalDocumentsDTO> selectRODtoAddAdditionalDocumentsDTOList = selectRODtoAddAdditionalDocumentsMapper
					.getReimbursementDto(reimbursementList);
			
			for (SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO2 : selectRODtoAddAdditionalDocumentsDTOList) {
				if(selectRODtoAddAdditionalDocumentsDTO2 != null && selectRODtoAddAdditionalDocumentsDTO2.getStatusKey() != null){
				if(selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.ACKNOWLEDGE_STATUS_KEY) || selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY)
				|| selectRODtoAddAdditionalDocumentsDTO2.getStatusKey().equals(ReferenceTable.BILL_ENTRY_STATUS_KEY)){
					
					selectRODtoAddAdditionalDocumentsDTO2.setApprovedAmt(null);
					
					}
				}
				
			}

			Long count = getAckNoCountByClaimKey(claimKey,
					ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED);
			rodDTO.setAcknowledgementNumber(count);
			ClaimDto claimDTO  = null;
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			if (claim != null) {
				newIntimationDto = intimationService.getIntimationDto(claim
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claim);
				claimDTO.setNewIntimationDto(newIntimationDto);
				rodDTO.setClaimDTO(claimDTO);

			}
			generateAcknowledgeNo(rodDTO);

			/*
			 * rodDTO.getDocumentDetails().setDocumentCheckList(
			 * getDocumentCheckList(claimByKey));
			 */

			rodDTO.setProductBenefitMap(calcService.getProductBenefitFlag(
					claim.getKey(), claim.getIntimation().getPolicy().getProduct()
							.getKey()));
			rodDTO.getDocumentDetails().setDocumentCheckList(
					setDocumentCheckListTableValues());

			rodDTO.setReconsiderRodRequestList(getReconsiderRODRequest(claim));
			rodDTO.setRodQueryDetailsList(getRODQueryDetailsValues(claim));

//			List<Reimbursement> reimbursementByStageId = reimbursementService
//					.getReimbursementByClaimKeyAndStageId(claimKey);
			/*List<Reimbursement> reimbursementByStageId = reimbursementService
				.getReimbursementByClaimKey(claimKey);*/
			List<Reimbursement> reimbursementByStageId = new ArrayList<Reimbursement>();
			/*List<Reimbursement> reimbursementListObj = reimbursementService
			.getReimbursementByClaimKey(claimKey);*/
			
			if(null != reimbursementList && !reimbursementList.isEmpty())
			{
				for (Reimbursement reimbursement : reimbursementList) {
					/*if(null != rejectMap && !rejectMap.isEmpty() && null == rejectMap.get(reimbursement.getStatus().getKey()))
					{
						reimbursementByStageId.add(reimbursement);
					}*/
					if(isMAapproved(reimbursement) && reimbursementService.isBatchNotCreated(reimbursement.getKey())){
						reimbursementByStageId.add(reimbursement);
					}
				}
			}

			selectRODtoAddAdditionalDocumentsDTOList = selectRODtoAddAdditionalDocumentsMapper
					.getReimbursementDto(reimbursementByStageId);

			for (int index = 0; index < selectRODtoAddAdditionalDocumentsDTOList
					.size(); index++) {
				if (reimbursementByStageId.get(index).getStatus().getKey()
						.equals(ReferenceTable.BILLING_SEND_TO_FINANCIAL_APPROVER)) {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementByStageId.get(index)
											.getBillingApprovedAmount() != null ? reimbursementByStageId
											.get(index).getBillingApprovedAmount()
											.toString()
											: "");
				} else if (reimbursementByStageId.get(index).getStatus().getKey()
						.equals(ReferenceTable.FINANCIAL_APPROVE_STATUS)) {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementByStageId.get(index)
											.getFinancialApprovedAmount() != null ? reimbursementByStageId
											.get(index)
											.getFinancialApprovedAmount()
											.toString()
											: "");
				} else {
					selectRODtoAddAdditionalDocumentsDTOList
							.get(index)
							.setApprovedAmt(
									reimbursementByStageId.get(index)
											.getCurrentProvisionAmt() != null ? reimbursementByStageId
											.get(index).getCurrentProvisionAmt()
											.toString()
											: "");
				}
			}

			for (int index = 0; index < reimbursementByStageId.size(); index++) {
				StringBuffer billClassificaiton = new StringBuffer();
				Double claimedAmt = 0d;
				if (reimbursementByStageId.get(index) != null
						&& reimbursementByStageId.get(index)
								.getDocAcknowLedgement() != null) {
					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getHospitalisationFlag()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospitalisation, ");
						}

					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPreHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPreHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton .append("Pre - Hospitalisation, ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPostHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPostHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Post - Hospitalisation,  ");
						}

					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPartialHospitalisationFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPartialHospitalisationFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Partial - Hospitalisation,  ");
						}

					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getLumpsumAmountFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getLumpsumAmountFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Lumpsum - Amount,  ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getHospitalCashFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getHospitalCashFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospital - Cash,  ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getHospitalizationRepeatFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement().getHospitalizationRepeatFlag()
								.toString().equalsIgnoreCase("y")) {
							billClassificaiton.append("Hospitalisation - Repeat,  ");
						}
					}

					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
							.getPatientCareFlag() != null) {
						if (reimbursementByStageId.get(index)
								.getDocAcknowLedgement()
								.getPatientCareFlag().toString()
								.equalsIgnoreCase("y")) {
							billClassificaiton.append("Patient - Care,  ");
						}
					}
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getHospitalizationClaimedAmount();
//					}
	//
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getPreHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getPreHospitalizationClaimedAmount();
//					}
	//
//					if (reimbursementByStageId.get(index).getDocAcknowLedgement()
//							.getPostHospitalizationClaimedAmount() != null) {
//						claimedAmt = claimedAmt
//								+ reimbursementByStageId.get(index)
//										.getDocAcknowLedgement()
//										.getPostHospitalizationClaimedAmount();
//					}
				}
				if (billClassificaiton.length() > 0) {
					/*billClassificaiton = billClassificaiton.toString().substring(0,
							billClassificaiton.length() - 2);*/
					String billClassificationStr = billClassificaiton.toString().substring(0, billClassificaiton.length() - 2);
					selectRODtoAddAdditionalDocumentsDTOList.get(index)
							.setBillClassification(billClassificationStr);

				}
				claimedAmt = createRodService.getClaimedAmount(selectRODtoAddAdditionalDocumentsDTOList.get(index).getKey());
				if(claimedAmt != null){
				selectRODtoAddAdditionalDocumentsDTOList.get(index).setClaimedAmt(
						claimedAmt.toString());
				}
			}

			Integer index = 1;

			for (SelectRODtoAddAdditionalDocumentsDTO selectRODtoAddAdditionalDocumentsDTO1 : selectRODtoAddAdditionalDocumentsDTOList) {
				selectRODtoAddAdditionalDocumentsDTO1.setsNo(index.toString());
				index++;
			}
			/*List<UploadDocumentDTO> rodSummaryDetails = rodService
					.getRODSummaryDetails(tableDTO.getKey());
			
			if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
			{
				List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
			//	List<UploadDocumentDTO> uploadDocsList = rodDTO.getUploadDocsList();
				for (UploadDocumentDTO uploadDocDTO : rodSummaryDetails) {
					//sss
					uploadDocDTO.setIsBillSaved(true);
					List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();
					List<RODBillDetails> billEntryDetails = rodService
							.getBillEntryDetails(uploadDocDTO.getDocSummaryKey());
					if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
						for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
							
							 * <<<<<<< HEAD
							 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
							 * uploadDocumentDTO)); =======
							 
							dtoList.add(getBillDetailsDTOForBillEntry(billEntryDetailsDO));
							
							// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
						}
						uploadDocDTO.setBillEntryDetailList(dtoList);
					}
				}
			//	rodDTO.getUploadDocumentsDTO().setBillEntryDetailList(dtoList);
				rodDTO.setUploadDocsList(rodSummaryDetails);
				
			}*/

			rodDTO.setSelectRODtoAddAdditionalDocumentsDTO(selectRODtoAddAdditionalDocumentsDTOList);

			rodDTO.setStrUserName(tableDTO.getUsername());
			
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDTO.getUsername());

			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.ADD_ADDITIONAL_DOCUMENT_PAYMENT_INFO);
			
			//loadRRCRequestValuesForProcessing(rrcDTO,insuredSumInsured,SHAConstants.ACKNOWLEDGE_DOC_RECEIVED);
			
			rodDTO.setRrcDTO(rrcDTO);

			view.setAddAditionalpaymentWizard(AddAditionalDocumentsPaymentInfoView.class,
    				rodDTO);
		}
		
		private Boolean isMAapproved(Reimbursement reimbursement){
			if(reimbursement.getMedicalCompletedDate() != null){
				return Boolean.TRUE;
			}else{
				if(reimbursement.getDocAcknowLedgement() != null && reimbursement.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL) && reimbursement.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)){
					return Boolean.TRUE;
				}
				return Boolean.FALSE;
			}
			
		}

		protected void showUpdateSublimitWizard(
				@Observes @CDIEvent(MenuPresenter.UPDATE_SUBLIMIT) final ParameterDTO parameters){
			
			SearchUpdateSublimitTableDTO tableDTO = (SearchUpdateSublimitTableDTO) parameters.getPrimaryParameter();

			Reimbursement reimbursementObjectByKey = rodService
					.getReimbursementObjectByKey(tableDTO.getReimbursementKey());
			List<UploadDocumentDTO> rodSummaryDetails = rodService
					.getRODSummaryDetails(reimbursementObjectByKey.getKey());

			ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
//			ZonalMedicalReviewMapper.getAllMapValues();
			PreauthDTO reimbursementDTO = mapper
					.getReimbursementDTO(reimbursementObjectByKey);

			
			
			/*if(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag() != null && ("Y").equalsIgnoreCase(reimbursementDTO.getPreauthDataExtractionDetails().getReconsiderationFlag()))
			{
				List<ReconsiderRODRequestTableDTO> reconsiderDTOList = getReconsiderRODRequestForBillEntry(tableDTO.getReimbursementKey());
				if(null != reconsiderDTOList && !reconsiderDTOList.isEmpty())
				{
					for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderDTOList) {
						if(null != reconsiderRODRequestTableDTO.getIsRejectReconsidered() && reconsiderRODRequestTableDTO.getIsRejectReconsidered())
						{
							reimbursementDTO.setIsRejectReconsidered(true);
						}
						else
						{
							reimbursementDTO.setIsRejectReconsidered(false);
						}
					}
				}
				reimbursementDTO.setReconsiderRodRequestList(getReconsiderRODRequestForBillEntry(tableDTO.getReimbursementKey()));
			}*/
			

			Claim claimByKey = reimbursementObjectByKey.getClaim();
			reimbursementDTO
					.setReconsiderationList(getReconsiderRODRequest(claimByKey));
			
			// R1045
			reimbursementDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			reimbursementDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			reimbursementDTO.setCrmFlagged(claimByKey.getCrcFlag());
			
			reimbursementDTO.setVipCustomer(claimByKey.getIsVipCustomer());
			reimbursementDTO.setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());

			
			if(null != claimByKey)
			{
				reimbursementDTO.setPreviousAccntDetailsList(calcService.getPreviousAccountDetails(claimByKey.getIntimation().getInsured().getInsuredId()
						,reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey()));
			}

			if(claimByKey!=null){
				
				Long hospital = claimByKey.getIntimation().getHospital();
				Hospitals hospitalById = hospitalService.getHospitalById(hospital);
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					reimbursementDTO.setIsSuspicious(hospitalById.getSuspiciousType());
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null && !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")){
						reimbursementDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
					}
				}
			}
			setCategoryFlag(reimbursementObjectByKey, reimbursementDTO);
			

			if (!reimbursementDTO.getHospitalizaionFlag()) {
				reimbursementDTO = setHospitalizationAmount(reimbursementDTO);
			}

			reimbursementDTO = setReimbursmentTOPreauthDTO(mapper, claimByKey,
					reimbursementObjectByKey, reimbursementDTO, true, SHAConstants.FINANCIAL);
			reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
					reimbursementObjectByKey.getKey());
			
			reimbursementDTO.setBillingApprovedDate(reimbursementObjectByKey.getBillingCompletedDate());

			// Added for amount claimed table enhancement --- stops
			DBCalculationService dbCalculationService = new DBCalculationService();
			Double insuredSumInsured = dbCalculationService.getInsuredSumInsured(
					reimbursementDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), reimbursementDTO
							.getPolicyDto().getKey(),reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());

			Map<Integer, Object> detailsMap = new HashMap<Integer, Object>();


			if(reimbursementObjectByKey.getSectionCategory() != null){
				
				if(ReferenceTable.getGMCProductList().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
					insuredSumInsured = dbCalculationService.getInsuredSumInsuredForGMC(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(),
							reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getSectionCode());
					detailsMap = dbCalculationService
							.getHospitalizationDetailsForGMC(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
				}else{
					detailsMap = dbCalculationService
							.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),reimbursementObjectByKey.getSectionCategory(),"A");
				}
			
			}else{
				
				Long sectionCategory = 0l;
				if(reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.STAR_CARDIAC_CARE_POLICY) || reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.DIABETES_INDIVIDUAL_POLICY) || reimbursementDTO.getPolicyDto()
									.getProduct().getKey().equals(ReferenceTable.DIABETES_FLOATER_POLICY))
				{
					sectionCategory = 1l;
				}
				if(ReferenceTable.getGMCProductList().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
					insuredSumInsured = dbCalculationService.getInsuredSumInsuredForGMC(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(),
							reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getSectionCode());
					detailsMap = dbCalculationService
							.getHospitalizationDetailsForGMC(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,"0");
				}else{
					
					String policyPlan = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null ? reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() : "0";
					
					/*if(ReferenceTable.MEDI_CLASSIC_BASIC_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) || ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())) {*/
					if(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
							&& (((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
									|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
									|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
							|| ((SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
									&& reimbursementDTO.getNewIntimationDTO().getPolicy().getProductType().getKey().equals(ReferenceTable.INDIVIDUAL_POLICY)))) {
						policyPlan = reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() != null ? reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan() : "0";
					}
					
					detailsMap = dbCalculationService
							.getHospitalizationDetails(reimbursementDTO.getPolicyDto()
									.getProduct().getKey(), insuredSumInsured,
									reimbursementDTO.getNewIntimationDTO().getHospitalDto()
											.getRegistedHospitals().getCityClass(),
									reimbursementDTO.getNewIntimationDTO()
											.getInsuredPatient().getInsuredId(), reimbursementDTO.getNewIntimationDTO().getKey(),sectionCategory,policyPlan);
				}
				
			}

			
			List<Double> copayValue = dbCalculationService.getProductCoPay(reimbursementDTO
					.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
					.getKey(), reimbursementDTO.getClaimDTO().getNewIntimationDto()
					.getInsuredPatient().getKey(),reimbursementDTO.getClaimDTO().getNewIntimationDto()
					.getInsuredPatient().getInsuredId(),reimbursementDTO.getNewIntimationDTO());
			reimbursementDTO.setProductCopay(copayValue);

			List<Long> documentSummaryKeys = new ArrayList<Long>();
			
			List<DMSDocumentDetailsDTO> dmsDocDetailList = getClaimsDMSList(claimByKey.getIntimation().getIntimationId());
			
			/**
			 * Fix for implemeting claims dms in bill entry screen.. -- starts
			 * **/
			/*if(null != rodSummaryDetails && !rodSummaryDetails.isEmpty())
			{
				for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
					if(null != claimByKey)
					{
						uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
						uploadDocumentDTO.setDmsDocumentDTOList(getClaimsDMSList(claimByKey.getIntimation().getIntimationId()));
					}
				}
			}*/
			
			/**
			 * Added for enabling view documents in preauth screen while raising query -- fix starts.
			 * */
			if(null != claimByKey)
			{
				reimbursementDTO.setDmsDocumentDTOList(dmsDocDetailList);
			}
			/**
			 * Added for enabling view documents in preauth screen while raising query -- fix ends
			 * */
			
			Double productBasedAmbulanceAmt = getProductBasedAmbulanceAmt(tableDTO.getReimbursementKey());
			
			List<UploadDocumentDTO> rodBillSummaryDetails = rodService
					.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);
			
			if(rodBillSummaryDetails != null){
				for (UploadDocumentDTO uploadDocumentDTO2 : rodBillSummaryDetails) {
					uploadDocumentDTO2.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
				}
			}
			List<BillEntryDetailsDTO> dtoList = null;
			for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
				
				if(null != reimbursementObjectByKey)
				{
					uploadDocumentDTO.setIntimationNo(reimbursementObjectByKey.getClaim().getIntimation().getIntimationId());
					uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfAdmission()));
					uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursementObjectByKey.getDateOfDischarge()));
					uploadDocumentDTO.setInsuredPatientName(reimbursementObjectByKey.getClaim().getIntimation().getInsuredPatientName());
				}
				
				if(null != claimByKey)
				{
					uploadDocumentDTO.setClaimNo(claimByKey.getClaimId());
					uploadDocumentDTO.setDmsDocumentDTOList(dmsDocDetailList);
				}
				
				documentSummaryKeys.add(uploadDocumentDTO.getDocSummaryKey());
				uploadDocumentDTO.setStatus(true);
				List<RODBillDetails> billEntryDetails = rodService
						.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
				dtoList = new ArrayList<BillEntryDetailsDTO>();
				if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
					for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
						/*
						 * <<<<<<< HEAD
						 * dtoList.add(getBillDetailsDTO(billEntryDetailsDO,
						 * uploadDocumentDTO)); =======
						 */
						dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
								uploadDocumentDTO));
						// >>>>>>> 7656df822ab29676fae4ca1d8cd4ec48ac917fe0
					}
				}
				/*
				 * uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
				 * .get(8));
				 */
				uploadDocumentDTO.setProductBasedRoomRent((Double) detailsMap
						.get(8));
				uploadDocumentDTO
						.setProductBasedICURent((Double) detailsMap.get(9));
				
				Product product = reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct();
				if(product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey()) && 
						reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
					uploadDocumentDTO
					.setProductBasedRoomRent(0d);
					uploadDocumentDTO
								.setProductBasedICURent(0d);
				}
				/*uploadDocumentDTO.setProductBasedAmbulanceAmt((Double) detailsMap
						.get(15));*/
				uploadDocumentDTO.setProductBasedAmbulanceAmt(productBasedAmbulanceAmt);
				uploadDocumentDTO.setStatus(false);
				uploadDocumentDTO.setBillEntryDetailList(dtoList);
				uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
				uploadDocumentDTO.setRodKey(reimbursementObjectByKey.getKey());

				uploadDocumentDTO.setStrUserName(tableDTO.getUsername());
			}
			/*List<UploadDocumentDTO> rodBillSummaryDetails = rodService
					.getRODBillSummaryDetails(reimbursementObjectByKey.getKey(), mapper);*/
			
			reimbursementDTO.getUploadDocDTO().setBillingWorkSheetUploadDocumentList(rodBillSummaryDetails);

			Double totalBilledAmount = reimbursementService
					.getTotalBilledAmount(documentSummaryKeys);
			reimbursementDTO.setAmountConsidered(totalBilledAmount != null ? String
					.valueOf(totalBilledAmount.intValue()) : "0");
			reimbursementDTO
					.setInitialAmountConsidered(totalBilledAmount != null ? String
							.valueOf(totalBilledAmount.intValue()) : "0");
			reimbursementDTO.setUploadDocumentDTO(rodSummaryDetails);
			/*reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
			reimbursementDTO.setRodHumanTask(tableDTO.getHumanTask());
			reimbursementDTO.setRodHumanTask(tableDTO.getHumanTaskDTO());*/
			reimbursementDTO.setStrUserName(tableDTO.getUsername());
			reimbursementDTO.setStrPassword(tableDTO.getPassword());
			reimbursementDTO.setTaskNumber(tableDTO.getTaskNumber());
			// Added for amount claimed table enhancement --- stops

			Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
					.getIntimation().getHospital());
			ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
					.getPreauthDataExtractionDetails().getUpdateHospitalDetails();
			/*if(hospitalById != null){
				
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalState(hospitalById.getState());
				updateHospitalDetails.setHospitalCode(hospitalById.getHospitalCode());
				updateHospitalDetails.setHospitalName(hospitalById.getName());
				updateHospitalDetails.setPanNumber(hospitalById.getPanNumber());
				updateHospitalDetails.setHospitalAddress1(hospitalById.getAddress());
				updateHospitalDetails.setHopitalRegNumber(hospitalById.getRegistrationNumber());
				updateHospitalDetails.setHospitalPhoneNo(hospitalById.getPhoneNumber());
				updateHospitalDetails.setHospitalTypeId(hospitalById.getHospitalType().getKey());
				//updateHospitalDetails.setInpatientBeds(hospitalById.getInpatientBeds() != null ? hospitalById
						//.getInpatientBeds().toString() : "0");
				
			}
			*/
			UploadDocumentDTO reimbursementBenefitsValue = claimRequestBenefitsService
					.getReimbursementBenefitsValue(reimbursementObjectByKey
							.getKey());

//			setReimbursementValues(reimbursementObjectByKey, reimbursementDTO);

			/*paymentDetailsForfinancial(reimbursementObjectByKey, reimbursementDTO,
					hospitalById);*/
	        
			if (reimbursementBenefitsValue != null) {
				reimbursementDTO.getPreauthDataExtractionDetails()
						.setUploadDocumentDTO(reimbursementBenefitsValue);
			}
			if (null != reimbursementBenefitsValue
					&& reimbursementBenefitsValue.getPatientCareBenefitFlag() != null
					&& reimbursementBenefitsValue.getPatientCareBenefitFlag()
							.equalsIgnoreCase("PC")) {
				List<ReimbursementBenefitsDetails> patientCareTableByBenefitKey = reimbursementService
						.getPatientCareTableByBenefitKey(reimbursementBenefitsValue
								.getPatientBenefitKey());
				List<PatientCareDTO> patientCareDTOList = new ArrayList<PatientCareDTO>();
				if (patientCareTableByBenefitKey != null
						&& !patientCareTableByBenefitKey.isEmpty()) {
					PatientCareDTO dto = null;
					for (ReimbursementBenefitsDetails patientCareDetails : patientCareTableByBenefitKey) {
						dto = new PatientCareDTO();
						dto.setEngagedFrom(patientCareDetails.getEngagedFrom());
						dto.setEngagedTo(patientCareDetails.getEngagedTo());
						dto.setKey(patientCareDetails.getKey());
						patientCareDTOList.add(dto);
					}
				}
				reimbursementDTO.getPreauthDataExtractionDetails()
						.getUploadDocumentDTO()
						.setPatientCareDTO(patientCareDTOList);
			}

			List<AddOnBenefitsDTO> populateAddOnBenefitsTableValues = claimRequestBenefitsService
					.populateAddOnBenefitsTableValues(
							reimbursementDTO.getNewIntimationDTO(),
							reimbursementObjectByKey.getClaim().getKey(),
							reimbursementObjectByKey.getKey(),
							reimbursementDTO.getProductCopay(),null);

			reimbursementDTO.getPreauthDataExtractionDetails()
					.setAddOnBenefitsDTOList(populateAddOnBenefitsTableValues);


			Boolean isBasedOnPremium = false;
			if(ReferenceTable.getPremiumDeductionProductKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey()) && (reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) && (reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag() != null && reimbursementObjectByKey.getDocAcknowLedgement().getHospitalisationFlag().equalsIgnoreCase(SHAConstants.YES_FLAG))) {
				isBasedOnPremium = true;
			}
			
			
			List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
					.search(reimbursementObjectByKey.getClaim().getKey(), isBasedOnPremium);

			List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
			for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {

				previousPreAuthTableDTO.setRequestedAmt(preauthService
						.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
								previousPreAuthTableDTO.getClaimKey()));
				newList.add(previousPreAuthTableDTO);
			}

			reimbursementDTO.setPreviousPreauthTableDTO(newList);

			reimbursementDTO.setBillingApprovedAmount(reimbursementObjectByKey
					.getBillingApprovedAmount());

			List<Reimbursement> hospitalizationROD = getHospitalizationROD(
					reimbursementObjectByKey.getClaim().getKey(),
					reimbursementObjectByKey);
			Reimbursement partialHospitalizationROD = getPartialHospitalizationROD(
					reimbursementObjectByKey.getClaim().getKey(),
					reimbursementObjectByKey);

			DocAcknowledgement docAcknowledgement = reimbursementObjectByKey
					.getDocAcknowLedgement();
			String hospitalFlag = null;
			String partialHospitalFlag = null;
			if (docAcknowledgement != null
					&& docAcknowledgement.getHospitalisationFlag() != null) {
				hospitalFlag = docAcknowledgement.getHospitalisationFlag();
				partialHospitalFlag = docAcknowledgement.getPartialHospitalisationFlag();
			}
			if (hospitalFlag != null && !hospitalFlag.equalsIgnoreCase("Y") && partialHospitalFlag != null && !partialHospitalFlag.equalsIgnoreCase("Y")) {
				/*if ((hospitalizationROD != null
						&& hospitalizationROD.getStatus() != null
						&& !ReferenceTable.FINANCIAL_APPROVE_STATUS
								.equals(hospitalizationROD.getStatus().getKey()) && !ReferenceTable.getPaymentStatus().containsKey(hospitalizationROD.getStatus().getKey())) ) {
					reimbursementDTO.setIsHospitalizationRODApproved(false);
				}*/
				if(hospitalizationROD != null && !hospitalizationROD.isEmpty()){
					for(Reimbursement hospitalRod :hospitalizationROD){
						if ((hospitalRod != null
								&& hospitalRod.getStatus() != null
								&&  ReferenceTable.getPaymentStatus().containsKey(hospitalRod.getStatus().getKey())) ) {
							reimbursementDTO.setIsHospitalizationRODApproved(true);
							break;
						}else{
							reimbursementDTO.setIsHospitalizationRODApproved(false);
						}
					}
				}
				
				if(partialHospitalizationROD != null
						&& partialHospitalizationROD.getStatus() != null
						&& ReferenceTable.FINANCIAL_APPROVE_STATUS
								.equals(partialHospitalizationROD.getStatus().getKey()) && ReferenceTable.getPaymentStatus().containsKey(partialHospitalizationROD.getStatus().getKey())) {
					reimbursementDTO.setIsHospitalizationRODApproved(true);
				}
			}
			

			if (reimbursementObjectByKey.getDocAcknowLedgement()
					.getHospitalizationRepeatFlag() != null
					&& reimbursementObjectByKey.getDocAcknowLedgement()
							.getHospitalizationRepeatFlag().toLowerCase()
							.equalsIgnoreCase("y")) {
				reimbursementDTO.setIsHospitalizationRepeat(true);
			}
			
			
			reimbursementDTO.getPreauthDataExtractionDetails()
					.setDocAckknowledgement(
							reimbursementObjectByKey.getDocAcknowLedgement());
			reimbursementDTO.getPreauthMedicalDecisionDetails().setApprovalRemarks(
					"");

			String specialityName = claimService
					.getSpecialityName(reimbursementObjectByKey.getClaim().getKey());

			reimbursementDTO.setSpecialityName(specialityName);
	        
			String remedicalRemarks = null;
			String rebillingRemarks = null;
			Long latestMedicalApproverKey = reimbursementService.getLatestMedicalApproverKey(reimbursementObjectByKey.getKey());
			if(latestMedicalApproverKey != null){
				MedicalApprover medicalApproverByKey = reimbursementService.getMedicalApproverByKey(latestMedicalApproverKey);
				if(medicalApproverByKey != null){
					reimbursementDTO.setIsReMedical(true);
					remedicalRemarks = medicalApproverByKey.getApproverReply();
				}
			}
			Long latestApproverKey = reimbursementService.getLatestMedicalApproverForRebilling(reimbursementObjectByKey.getKey());
			if(latestApproverKey != null){
				MedicalApprover medicalApproverByKey = reimbursementService.getMedicalApproverByKey(latestApproverKey);
				if(medicalApproverByKey != null){
					reimbursementDTO.setIsReBilling(true);
					rebillingRemarks = medicalApproverByKey.getApproverReply();
				}
			}
			
			reimbursementDTO.getPreauthDataExtractionDetails().setBillingRemarks(rebillingRemarks);
			reimbursementDTO.getPreauthDataExtractionDetails().setMedicalRemarks(remedicalRemarks);
			reimbursementDTO.setFvrCount(intimationService.getFVRCount(reimbursementDTO.getNewIntimationDTO().getKey())); 
			
			if (claimByKey.getClaimType() != null
					&& claimByKey.getClaimType().getKey()
							.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {

//				PreMedicalMapper premedicalMapper = new PreMedicalMapper();
				
				Preauth previousPreauth = getPreviousPreauth(claimByKey.getKey());
				
				reimbursementDTO.setIsCashlessType(true);
				
				if(previousPreauth != null) {
					reimbursementDTO.setPreauthKey(previousPreauth.getKey());
				}
			}

//			loadRRCRequestValues(reimbursementDTO,insuredSumInsured,SHAConstants.RRC_FINANCIAL);
			
			

			if (reimbursementDTO.getClaimKey() != null) {
				List<Investigation> investigationList = investigationService
						.getByInvestigationByClaimKey(reimbursementDTO.getClaimKey());
				if (investigationList != null && investigationList.size() >= 0) {
					reimbursementDTO.setInvestigationSize(investigationList.size());
				} else {
					reimbursementDTO.setInvestigationSize(0);
				}
			}

			reimbursementDTO.setSittingsAmount(dbCalculationService.getDialysisAmount(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
			Map<String, Integer> productBenefitFlag = dbCalculationService.getProductBenefitFlag(reimbursementObjectByKey.getClaim().getKey(), reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey());
//				
			if(productBenefitFlag.get(SHAConstants.PRE_HOSP_FLAG).equals(0)) {
				reimbursementDTO.setIsPreHospApplicable(false);
			}
			
			if(productBenefitFlag.get(SHAConstants.POST_HOSP_FLAG).equals(0)) {
				reimbursementDTO.setIsPostHospApplicable(false);
			}
			
			if(productBenefitFlag.get(SHAConstants.LUMP_SUM_FLAG).equals(1)) {
				reimbursementDTO.setIsLumpsumApplicable(true);
			}
			
			if(productBenefitFlag.get(SHAConstants.HOSPITALCASH_FLAG).equals(1)) {
				reimbursementDTO.setIsHospitalCashApplicable(true);
			}
			
			if(productBenefitFlag.get(SHAConstants.PATIENTCARE_FLAG).equals(1)) {
				reimbursementDTO.setIsPatientCareApplicable(true);
			}
			
			
				if((!reimbursementDTO.getHospitalizaionFlag() && !reimbursementDTO.getPartialHospitalizaionFlag()) && ! reimbursementDTO.getPostHospitalizaionFlag() && reimbursementDTO.getPreHospitalizaionFlag()
						&& productBenefitFlag.get(SHAConstants.PRE_HOSP_FLAG).equals(0)) {
					reimbursementDTO.setIsDishonoured(true);
				} else if((!reimbursementDTO.getHospitalizaionFlag() && !reimbursementDTO.getPartialHospitalizaionFlag()) && ! reimbursementDTO.getPreHospitalizaionFlag() && reimbursementDTO.getPostHospitalizaionFlag()
						&& productBenefitFlag.get(SHAConstants.POST_HOSP_FLAG).equals(0)) {
					reimbursementDTO.setIsDishonoured(true);
				}

			
			if((!reimbursementDTO.getHospitalizaionFlag() && !reimbursementDTO.getPartialHospitalizaionFlag() && !reimbursementDTO.getLumpSumAmountFlag()) &&
					! reimbursementDTO.getIsPreHospApplicable() && ! reimbursementDTO.getIsPostHospApplicable()){
				reimbursementDTO.setIsDishonoured(true);
			}
			
			// If hospitalization is not processed then remaining ROD should be rejected.
			Reimbursement hospROD = reimbursementService.getHospitalizationROD(reimbursementObjectByKey.getClaim().getKey());
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)) {
				if(hospROD == null) {
//					reimbursementDTO.setIsDishonoured(true);
					reimbursementDTO.setIsHospitalizationRejected(true);
				}
			}
			
			if(ReferenceTable.getFHORevisedKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
					|| ReferenceTable.STAR_SPECIAL_CARE_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
					|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
						(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
							&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
									SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
									|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
									|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
							&& ("G").equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan()))
					|| (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
						{
				if(hospROD != null){
				     List<Hospitalisation> hospitalisationList = createRodService.getHospitalisationList(hospROD.getKey());
				     Integer noOfDays = 0;
				     if(hospitalisationList != null){
				    	 for (Hospitalisation hospitalisation : hospitalisationList) {
								noOfDays += hospitalisation.getNoOfDays() != null ? hospitalisation.getNoOfDays().intValue() : 0;
							}
				     }
				     
				     reimbursementDTO.setPreviousRODNoOfDays(noOfDays);
				}
			}
			
			Reimbursement hospitalizationOrPartialROD = reimbursementService.getHospitalizationOrPartialROD(reimbursementObjectByKey.getClaim().getKey());
			
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				
				Integer seqNumber = 0;
				
				if(reimbursementObjectByKey.getRodNumber() != null){
					String[] split = reimbursementObjectByKey.getRodNumber().split("/");
					seqNumber = Integer.valueOf(split[split.length - 1]);
				}
				
				if(hospitalizationOrPartialROD == null && ! seqNumber.equals(1)) {
					reimbursementDTO.setIsDishonoured(true);
					reimbursementDTO.setIsHospitalizationRejected(true);
				}
				
				if(reimbursementObjectByKey.getStatus().getKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY)){
					reimbursementDTO.setIsByPass(true);
				}
				
			}
			
			Map<String, String> popupMessages = dbCalculationService.getPOPUPMessages(reimbursementDTO.getPolicyKey(), reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey(),reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
			reimbursementDTO.setPopupMap(popupMessages);
			
			if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
					&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
				//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
					Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? reimbursementDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
					reimbursementDTO.setSuspiciousPopupMap(suspiciousMap);
				//}
			}
			if(reimbursementDTO.getNewIntimationDTO().getHospitalDto() != null && reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
					&& reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
				//if(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
					Map<String, String> nonPreferredMap = SHAUtils.getNonPreferredMap(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
					reimbursementDTO.setNonPreferredPopupMap(nonPreferredMap);
				//}
			}
			
			if(reimbursementObjectByKey.getNatureOfTreatment() != null 
					&& reimbursementObjectByKey.getNatureOfTreatment().getKey().equals(ReferenceTable.NON_ALLOPATHIC_ID) &&
					ReferenceTable.isNonAllopathicApplicableProduct(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
				reimbursementDTO.setIsDishonoured(true);
			}
			
			String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
			if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
				String get64vbStatus = PremiaService.getInstance().get64VBStatus(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), reimbursementDTO.getNewIntimationDTO().getIntimationId());
				if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
					reimbursementDTO.setIsDishonoured(true);
				}  else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
					reimbursementDTO.setIsPending(true);
				}
			}
			reimbursementDTO = checkFinalEnhancement(reimbursementDTO);
			
			MastersValue networkHospitalType = masterService.getMaster(reimbursementDTO.getNewIntimationDTO().getHospitalDto().getNetworkHospitalTypeId());
			reimbursementDTO.setNetworkHospitalType(networkHospitalType.toString());
			
			// Below stuff for Mulitple Room rent or ICU...........
			reimbursementDTO = SHAUtils.roomRentNursingMapping(reimbursementDTO, 8l, 9l, false,false);
			reimbursementDTO = SHAUtils.roomRentNursingMapping(reimbursementDTO, 10l, 11l, true,false);
			reimbursementDTO = SHAUtils.roomRentNursingMapping(reimbursementDTO, 85l, 84l, false,true);
			
			List<BillItemMapping> mappingData = reimbursementService.getMappingData(reimbursementObjectByKey.getKey());
			SHAUtils.fillMappingData(reimbursementDTO, mappingData, false);
			
			try {
				if(reimbursementObjectByKey.getReconsiderationRequest() != null && reimbursementObjectByKey.getReconsiderationRequest().equalsIgnoreCase("Y")) {
//					if(reimbursementObjectByKey.getDocAcknowLedgement().getPaymentCancellationFlag() !=  null && reimbursementObjectByKey.getDocAcknowLedgement().getPaymentCancellationFlag().equalsIgnoreCase("N")) {
						reimbursementDTO.setIsReconsiderationRequest(true);
						if(reimbursementService.isClaimPaymentAvailable(reimbursementObjectByKey.getRodNumber())) {
							Double claimPaymentAmountByRODNumber = reimbursementService.getClaimPaymentAmountByRODNumber(reimbursementObjectByKey.getRodNumber());
							reimbursementDTO.setClaimPaymentAmount(claimPaymentAmountByRODNumber);
						} else {
							reimbursementDTO.setIsReconsiderationRequest(false);
						}
						
//					}
				}
			} catch(Exception e) {
				e.printStackTrace();
			}
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				reimbursementDTO.setIsCashlessType(true);
			}
			if(reimbursementDTO.getIsCashlessType() && reimbursementDTO.getHospitalizaionFlag() && (reimbursementDTO.getStatusKey().equals(ReferenceTable.CREATE_ROD_STATUS_KEY)|| reimbursementDTO.getStatusKey().equals(ReferenceTable.PROCESS_CLAIM_FINANCIAL_DISAPPROVE_REJECT_STATUS))){
				reimbursementDTO.setIsDirectToFinancial(true);
				Preauth latestPreauth = reimbursementService.getLatestPreauthByClaim(reimbursementDTO.getClaimDTO().getKey());
				reimbursementDTO.getClaimDTO().setLatestPreauthKey(latestPreauth.getKey());
			}
			reimbursementDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey()));
			reimbursementDTO.setIsPEDInitiatedForBtn(reimbursementDTO.getIsPEDInitiated());
			
//			if(reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
//					&& reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_INSURED)){
//				Boolean isPedWatchList = pedQueryService.isTaskAvailableInWatchListForIntimation(reimbursementDTO.getNewIntimationDTO().getIntimationId());
//				reimbursementDTO.setIsPedWatchList(isPedWatchList);
//			}
			
			
			/*if(reimbursementDTO.getIsReconsiderationRequest() != null && !reimbursementDTO.getIsReconsiderationRequest() && reimbursementObjectByKey != null) {
				Boolean paymentAvailable = reimbursementService.isPaymentAvailable(reimbursementObjectByKey.getRodNumber());
				reimbursementDTO.setIsPaymentAvailable(paymentAvailable);
				reimbursementDTO.setIsPaymentAvailableShown(paymentAvailable);
				DocAcknowledgement acknowledgementByKey = reimbursementService.getAcknowledgementByKey(reimbursementObjectByKey.getDocAcknowLedgement().getKey());
				if(acknowledgementByKey != null && acknowledgementByKey.getPaymentCancellationFlag() != null && acknowledgementByKey.getPaymentCancellationFlag().equalsIgnoreCase("Y")) {
					reimbursementDTO.setIsPaymentAvailable(false);
					reimbursementDTO.setIsPaymentAvailableShown(false);
				}
				
			}*/
			
			
			List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
			List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			
			reimbursementDTO.setInsuredPedDetails(pedByInsured);
			reimbursementDTO.setApprovedPedDetails(approvedPedByInsured);
			

			try{
		        Double totalBilledAmountForHosp = reimbursementService.getTotalBilledAmountForHosp(documentSummaryKeys);
		        reimbursementDTO.setAmountConsidered(totalBilledAmountForHosp != null ? String
						.valueOf(totalBilledAmountForHosp.intValue()) : "0");
		        
//		        if(reimbursementDTO.getAmountConsCopayPercentage() != null && reimbursementDTO.getAmountConsCopayPercentage().equals(0l)){
		        	reimbursementDTO.setAmountConsidered(reimbursementDTO.getAmountConsidedAfterCoPay() != null ? String
						.valueOf(reimbursementDTO.getAmountConsidedAfterCoPay().intValue()) : "0");
//		        }
		        
			}catch(Exception e){
				e.printStackTrace();
			}
			
			if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				if(reimbursementDTO.getHospitalizaionFlag()) {
					Reimbursement partialHospitalizationRODWithSettled = getPartialHospitalizationRODWithSettled(claimByKey.getKey());
					ReimbursementCalCulationDetails hosptialization = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(reimbursementDTO.getKey(), ReferenceTable.HOSPITALIZATION);
					if(hosptialization != null) {
						reimbursementDTO.setBillingApprovedAmount(hosptialization.getPayableToHospAftTDS() != null ? hosptialization.getPayableToHospAftTDS().doubleValue() : 0d);
						reimbursementDTO.setPayableToHospAmt(hosptialization.getPayableToHospital() != null ? hosptialization.getPayableToHospital().doubleValue() : 0d);
						reimbursementDTO.setHospDiscountAmount(hosptialization.getHospitalDiscount() != null ? hosptialization.getHospitalDiscount().doubleValue() : 0d);
					}
					if(partialHospitalizationRODWithSettled != null) {
						ReimbursementCalCulationDetails reimbursementCalcObjByRodAndClassificationKey = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(partialHospitalizationRODWithSettled.getKey(), ReferenceTable.HOSPITALIZATION);
						reimbursementDTO.setPayableToInsAmt(reimbursementCalcObjByRodAndClassificationKey.getPayableInsuredAfterPremium() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableInsuredAfterPremium().doubleValue() : 0d);
						reimbursementDTO.setFAApprovedAmount(partialHospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? partialHospitalizationRODWithSettled.getFinancialApprovedAmount() : 0d);
					}
				} else if(reimbursementDTO.getPartialHospitalizaionFlag()) {
					Reimbursement hospitalizationRODWithSettled = getHospitalizationRODWithSettled(claimByKey.getKey());
					
					
					if(hospitalizationRODWithSettled != null) {
						Double totalHospRodFAApprovedAmt = getTotalHospRodFAApprovedAmt(hospitalizationRODWithSettled);
						ReimbursementCalCulationDetails reimbursementCalcObjByRodAndClassificationKey = reimbursementService.getReimbursementCalcObjByRodAndClassificationKey(hospitalizationRODWithSettled.getKey(), ReferenceTable.HOSPITALIZATION);
						reimbursementDTO.setPayableToHospAmt(reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital().doubleValue() : 0d);
						reimbursementDTO.setHospDiscountAmount(reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d);
						//Double amount = (reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d) + (hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : 0d);
						Double amount = reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital() != null ? reimbursementCalcObjByRodAndClassificationKey.getPayableToHospital().doubleValue() : 0d;
						Double amount1 = (reimbursementCalcObjByRodAndClassificationKey.getAmountAlreadyPaidAmt() != null ? reimbursementCalcObjByRodAndClassificationKey.getAmountAlreadyPaidAmt().doubleValue() : 0d) - amount;
						if(amount1 > 0){
							amount += amount1;
						}
						
						reimbursementDTO.setPayableToHospAmt(amount);
						//reimbursementDTO.setFAApprovedAmount(hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : (reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() != null ? reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() : 0d));
						
						Double approvedAmt = hospitalizationRODWithSettled.getFinancialApprovedAmount() != null ? hospitalizationRODWithSettled.getFinancialApprovedAmount() : (reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() != null ? reimbursementCalcObjByRodAndClassificationKey.getCashlessApprovedAmount() : 0d);
						Double hospitalDiscnt = reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount() != null ? reimbursementCalcObjByRodAndClassificationKey.getHospitalDiscount().doubleValue() : 0d;
						reimbursementDTO.setFAApprovedAmount(approvedAmt + hospitalDiscnt + totalHospRodFAApprovedAmt);
						
					}
				}
			}


			Boolean queryReceivedStatusRod = reimbursementQuerySerice.isQueryReceivedStatusRod(reimbursementObjectByKey.getKey());
			 
			 if(queryReceivedStatusRod){
				 reimbursementDTO.setIsQueryReceived(true);   
				 
			 }
			 
			 
			 List<ReimbursementCalCulationDetails> reimbursementCalculationDetails = acknowledgementDocumentsReceivedService.getReimbursementCalculationDetails(reimbursementObjectByKey.getKey());
				

				
				for (ReimbursementCalCulationDetails reimbursementCalCulationDetails2 : reimbursementCalculationDetails) {
					if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
							reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.HOSPITALIZATION)){
						
						HopitalizationCalulationDetailsDTO hospitalizationCalcDTO = getHospitalizationCalculationDTO(reimbursementCalCulationDetails2,reimbursementDTO, false);
						if(reimbursementDTO.getDocumentReceivedFromId() != null && reimbursementDTO.getDocumentReceivedFromId().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
					           hospitalizationCalcDTO.setBalanceToBePaid(0);
						}
						reimbursementDTO.setHospitalizationCalculationDTO(hospitalizationCalcDTO);
						
					}
					else if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
							reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.PRE_HOSPITALIZATION)){
						PreHopitalizationDetailsDTO preHospitalizationCalcDTO = getPreHospitalizationDTO(reimbursementCalCulationDetails2, reimbursementDTO, false);
						reimbursementDTO.setPreHospitalizationCalculationDTO(preHospitalizationCalcDTO);
						
					}else if(reimbursementCalCulationDetails2.getBillClassificationId() != null && 
							reimbursementCalCulationDetails2.getBillClassificationId().equals(ReferenceTable.POST_HOSPITALIZATION)){
						PostHopitalizationDetailsDTO postHospitalizationCalcDTO = getPostHospitalizationDTO(reimbursementCalCulationDetails2, reimbursementDTO, false);
						reimbursementDTO.setPostHospitalizationCalculationDTO(postHospitalizationCalcDTO);
					}
				}
				
				List<Double> copayValues = new ArrayList<Double>();
				
				if(reimbursementObjectByKey.getAmtConsCopayPercentage() != null){
					reimbursementDTO.setCoPayValue(reimbursementObjectByKey.getAmtConsCopayPercentage().doubleValue());
					copayValues.add(reimbursementObjectByKey.getAmtConsCopayPercentage().doubleValue());
				}
				reimbursementDTO.setDoctorNote(reimbursementObjectByKey.getDoctorNote() != null? reimbursementObjectByKey.getDoctorNote() : "" );
			 
				List<DiagnosisDetailsTableDTO> diagnosisTableList = reimbursementDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
				if(diagnosisTableList != null && ! diagnosisTableList.isEmpty()){
					SublimitFunObject sublimitObj = null;
					for (DiagnosisDetailsTableDTO diagnosisDetailsTableDTO : diagnosisTableList) {
						
						/**
						 *  CR R1136 
						 */
						sublimitObj = icdSublimitMapService.getSublimitDetailsBasedOnIcdCode(diagnosisDetailsTableDTO.getIcdCodeKey());
						if(diagnosisDetailsTableDTO.getSublimitApplicable() != null && 
								diagnosisDetailsTableDTO.getSublimitApplicable().getId().equals(ReferenceTable.COMMONMASTER_YES) && 
								sublimitObj != null && 
										diagnosisDetailsTableDTO.getSublimitName() != null &&
								sublimitObj.getName().equalsIgnoreCase(diagnosisDetailsTableDTO.getSublimitName().getName())){
							diagnosisDetailsTableDTO.setSublimitMapAvailable(Boolean.TRUE);
						}
						
						if(diagnosisDetailsTableDTO.getCopayPercentage() != null){
							Double copayPercentage = diagnosisDetailsTableDTO.getCopayPercentage();
							copayValues.add(copayPercentage);
						}
					}
				}
				
				List<ProcedureDTO> procedureDTO = reimbursementDTO.getPreauthMedicalProcessingDetails().getProcedureExclusionCheckTableList();
				if(procedureDTO != null && ! procedureDTO.isEmpty()){
					for (ProcedureDTO procedureDTO2 : procedureDTO) {
						if(procedureDTO2.getCopayPercentage() != null){
							copayValues.add(procedureDTO2.getCopayPercentage());
						}
					}
				}

				if(! copayValues.isEmpty()){
				    Double maximumCopay = Collections.max(copayValues);
				    if(maximumCopay != null){
				    	reimbursementDTO.setCoPayValue(maximumCopay);
				    }
				}
				
			 SHAUtils.setConsolidatedAmtDTO(reimbursementDTO, true);
			 Double totalClaimedAmount = reimbursementService.getTotalClaimedAmount(reimbursementObjectByKey);
			 reimbursementDTO.setRodTotalClaimedAmount(totalClaimedAmount);
			 
			 if(reimbursementDTO.getAmountConsidedAfterCoPay() != null && totalBilledAmount != null && !reimbursementDTO.getAmountConsidedAfterCoPay().equals(totalBilledAmount)) {
				 reimbursementDTO.setAmountConsidered(String.valueOf(totalBilledAmount.longValue()));
			 }
			 
			 //SHAUtils.setDefaultCopayValue(reimbursementDTO);
			 
			 String previoustAmountForDiagnosisProcedure = SHAUtils.getPrevioustAmountForDiagnosisProcedure(reimbursementDTO.getPreauthDataExtractionDetails().getDiagnosisTableList(), reimbursementDTO
					.getPreauthMedicalProcessingDetails()
					.getProcedureExclusionCheckTableList(), reimbursementDTO.getResidualAmountDTO());
			 
			 Double approvedAmount = SHAUtils.getDoubleValueFromString(previoustAmountForDiagnosisProcedure);
			 reimbursementDTO.setSublimitAndSIAmt(approvedAmount);

			/* if(reimbursementObjectByKey.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)
					 && reimbursementObjectByKey.getDocAcknowLedgement() != null && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId() != null
					 && reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
			 
					 if(hospitalById != null){
							Boolean hospitalDiscount = SHAUtils.isHospitalDiscount(hospitalById);
							reimbursementDTO.setIsHospitalDiscountApplicable(hospitalDiscount);
					 }
			 }*/
			 
			/* if(reimbursementDTO.getNewIntimationDTO() != null && reimbursementDTO.getNewIntimationDTO().getInsuredPatient() != null &&
					 reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
					Long claimCount = preauthService.getClaimCount(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey());
					if(claimCount != null){
						reimbursementDTO.setClaimCount(claimCount);
					}
				}*/
			 
//			 reimbursementObjectByKey.getStatus().setKey(ReferenceTable.FINANCIAL_REFER_TO_MEDICAL_APPROVER);
//			 reimbursementService.setBPMForClaimBilling(reimbursementDTO, false, "MEDICAL", reimbursementObjectByKey);
			 
				Date policyFromDate = reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
				
				Date admissionDate = reimbursementDTO.getNewIntimationDTO().getAdmissionDate();
				
			
//				bean.getPolicyDto().getPolicyType();
				Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
				if(diffDays != null && diffDays<90){
					reimbursementDTO.setIs64VBChequeStatusAlert(true);
				}	

				reimbursementDTO.setDbOutArray(tableDTO.getDbOutArray());
				
				if(ReferenceTable.getFHORevisedKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
						|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
							(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
								&& ((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
										SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
										|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
										|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
								&& ("G").equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan()))
						|| (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
						&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
								SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))))
						{
					 List<OtherBenefitsTableDto> benefitTableValues = reimbursementService.getBenefitTableValues(reimbursementDTO.getNewIntimationDTO(), insuredSumInsured, reimbursementObjectByKey);
					 reimbursementDTO.getPreauthMedicalDecisionDetails().setOtherBenefitTableDtoList(benefitTableValues);
					 
					 if(reimbursementObjectByKey.getInjuryCauseId() != null && reimbursementObjectByKey.getInjuryCauseId().equals(ReferenceTable.CAUSE_OF_INJURY_ACCIDENT_KEY)){
				        	reimbursementDTO.getPreauthDataExtractionDetails().setIsRTAButtonEnable(true);
				       }
					 
					 if(reimbursementObjectByKey.getDocAcknowLedgement().getDocumentReceivedFromId().getKey().equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
						 Preauth latestPreauth = reimbursementService.getLatestPreauthByClaim(reimbursementDTO.getClaimDTO().getKey());
						 reimbursementDTO.getPreauthMedicalDecisionDetails().setOtherBenefitPreauthApprAmt(latestPreauth.getOtherBenefitApprovedAmt());
						}
				}
				if(ReferenceTable.STAR_SPECIAL_CARE_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
					
					 List<OtherBenefitsTableDto> benefitTableValues = reimbursementService.getBenefitTableValues(reimbursementDTO.getNewIntimationDTO(), insuredSumInsured, reimbursementObjectByKey);
					 reimbursementDTO.getPreauthMedicalDecisionDetails().setOtherBenefitTableDtoList(benefitTableValues);
				}
				
				if(ReferenceTable.JET_PRIVILEGE_PRODUCT.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
					List<OtherBenefitsTableDto> benefitTableValues = reimbursementService.getBenefitTableValues(reimbursementDTO.getNewIntimationDTO(), insuredSumInsured, reimbursementObjectByKey);
					 reimbursementDTO.getPreauthMedicalDecisionDetails().setOtherBenefitTableDtoList(benefitTableValues);
				}
				
				Boolean isZUAQueryAvailable = masterService.getZUAQueryDetails(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());		
				if(null != isZUAQueryAvailable){
					
					reimbursementDTO.setIsZUAQueryAvailable(isZUAQueryAvailable);
				}
				
				Boolean policyValidation = policyService.getPolicyValidationObject(reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
				reimbursementDTO.setIsPolicyValidate(policyValidation);
				
				Product product = reimbursementDTO.getNewIntimationDTO().getPolicy()
						.getProduct();
				if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())
						 && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan() != null && reimbursementDTO.getNewIntimationDTO().getPolicy().getPolicyPlan().equalsIgnoreCase("G")) {
					List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsDTOForReimbursement = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(reimbursementObjectByKey.getKey());
					
					if(updateOtherClaimDetailsDTOForReimbursement != null){
						
						Integer admissionAmt = 0;
						
						for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsDTOForReimbursement) {
							if(updateOtherClaimDetailDTO.getAdmissibleAmount() != null){
								admissionAmt += updateOtherClaimDetailDTO.getAdmissibleAmount().intValue();
							}
						}
						
						reimbursementDTO.setOtherInsurerAdmissibleAmt(admissionAmt);
						
					}
					
					reimbursementDTO
					.setDeductibleAmount((reimbursementDTO.getNewIntimationDTO()
							.getInsuredPatient() != null && reimbursementDTO
							.getNewIntimationDTO().getInsuredPatient()
							.getDeductibleAmount() != null) ? reimbursementDTO
							.getNewIntimationDTO().getInsuredPatient()
							.getDeductibleAmount() : 0d);
					reimbursementDTO.setIsReverseAllocation(false);
				}
				
				reimbursementDTO.getPreauthMedicalDecisionDetails().setIsFvrIntiated(preauthService.getFVRStatusIdByClaimKey(reimbursementDTO.getClaimKey()));
				
				if(null != reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getHospitalizationClaimedAmount()){
					reimbursementDTO.getPreauthDataExtractionDetails().
					setHospClaimedAmountDocRec(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getHospitalizationClaimedAmount().intValue());
				}
				if(null != reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getPreHospitalizationClaimedAmount()){
					reimbursementDTO.getPreauthDataExtractionDetails().
					setPreHospClaimedAmountDocRec(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getPreHospitalizationClaimedAmount().intValue());
				}
				if(null != reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getPostHospitalizationClaimedAmount()){
					reimbursementDTO.getPreauthDataExtractionDetails().
					setPostHospClaimedAmountDocRec(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getPostHospitalizationClaimedAmount().intValue());
				}
				if(null != reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getOtherBenefitsClaimedAmount()){
					reimbursementDTO.getPreauthDataExtractionDetails().
					setOtherBenefitsAmountDocRec(reimbursementDTO.getPreauthDataExtractionDetails().getDocAckknowledgement().getOtherBenefitsClaimedAmount().intValue());
				}
				
				List<BenefitAmountDetails> otherBenefitClaimedAmnt = reimbursementService.getOtherBenefitsClaimedAmountForValidation(reimbursementObjectByKey.getKey());
				Double otherBenefitClaimedAmnt1 = 0d;
				for (BenefitAmountDetails benefitAmountDetails : otherBenefitClaimedAmnt) {
					if(benefitAmountDetails.getBalancePayable() != null)
					otherBenefitClaimedAmnt1 += benefitAmountDetails.getBalancePayable();
				}
				reimbursementDTO.getConsolidatedAmtDTO().setOtherBenefitAmt(otherBenefitClaimedAmnt1.intValue());
				reimbursementDTO.getPreauthDataExtractionDetails().setTotalOtherBenefitsApprovedAmt(otherBenefitClaimedAmnt1);
				reimbursementDTO.setUpdatePaymentDtlsFlag(reimbursementObjectByKey.getUpdatePaymentDtlsFlag());
				
				Boolean popupMessagesForProduct = dbCalculationService.getPOPUPMessagesForProduct(reimbursementDTO.getNewIntimationDTO().getPolicy().getKey(), claimByKey.getIntimation().getInsured().getKey(), claimByKey.getIntimation().getPolicy().getProduct().getKey());
				reimbursementDTO.setIsChangeInsumInsuredAlert(popupMessagesForProduct);
				reimbursementDTO.setNonPayableReasonListDto(null);
				
				/*Below Condition Removed as per latest documentation
				if(validatePolicyStatus(reimbursementDTO.getPolicyDto() != null ? reimbursementDTO.getPolicyDto().getPolicyNumber() : "0")){
					reimbursementDTO.setIsCancelPolicy(true);
				}*/
				
				/*if(ReferenceTable.getGMCProductList().containsKey(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getProduct().getKey())){
				      Insured insuredByKey = intimationService.getInsuredByKey(reimbursementObjectByKey.getClaim().getIntimation().getInsured().getKey());
				      Insured MainMemberInsured = null;
				      
				      if(insuredByKey.getDependentRiskId() == null){
				    	  MainMemberInsured = insuredByKey;
				      }else{
				    	  Insured insuredByPolicyAndInsuredId = intimationService.getInsuredByPolicyAndInsuredNameForDefault(reimbursementObjectByKey.getClaim().getIntimation().getPolicy().getPolicyNumber(), insuredByKey.getDependentRiskId());
				    	  MainMemberInsured = insuredByPolicyAndInsuredId;
				      }
				      
				      if(MainMemberInsured != null){
				    	  
				    	  reimbursementDTO.getNewIntimationDTO().setGmcMainMemberName(MainMemberInsured.getInsuredName());
				    	  reimbursementDTO.getNewIntimationDTO().setEmployeeCode(MainMemberInsured.getInsuredEmployeeId());
				    	  
				    	  *//**
				    	   * Part of CR R1186
				    	   *//*
				    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress1(MainMemberInsured.getAddress1());
				    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress2(MainMemberInsured.getAddress2());
				    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setAddress3(MainMemberInsured.getAddress3());
				    	  reimbursementDTO.getNewIntimationDTO().getInsuredPatient().setCity(MainMemberInsured.getCity());
				    	  
				      }
					}
				 *//** R1139 **//* */		
				
				/*Investigation investigation = investigationService.getInvestigationByTransactionKey(reimbursementDTO.getKey());
				if(investigation != null){			
				
				   List<AssignedInvestigatiorDetails> assignInvsList = reimbursementService.getInvestigationCountAlert(investigation.getKey());
					 
					if (assignInvsList != null && !assignInvsList.isEmpty()) {
						reimbursementDTO.getPreauthDataExtractionDetails().setIsMultipleInvsAssigned(Boolean.TRUE);
						int invsReplyCount = 0;
						int invesCompletedOrCancelCount = 0;
						Integer investigatorsCount = assignInvsList.size();
						reimbursementDTO.getPreauthDataExtractionDetails().setInvestigatorsCount(investigatorsCount);
						
						for (AssignedInvestigatiorDetails assignedInvestigatiorDetails : assignInvsList) {
							if(null != assignedInvestigatiorDetails.getStatus() && 
									ReferenceTable.UPLOAD_INVESIGATION_COMPLETED.equals(assignedInvestigatiorDetails.getStatus().getKey())||
									ReferenceTable.INVESTIGATION_GRADING.equals(assignedInvestigatiorDetails.getStatus().getKey())){
								
								invsReplyCount++;
							}
							if(null != assignedInvestigatiorDetails.getStatus() && 
									(ReferenceTable.UPLOAD_INVESIGATION_COMPLETED.equals(assignedInvestigatiorDetails.getStatus().getKey())||
									 ReferenceTable.PARALLEL_INVES_CANCELLED.equals(assignedInvestigatiorDetails.getStatus().getKey())) ||
									 ReferenceTable.INVESTIGATION_GRADING.equals(assignedInvestigatiorDetails.getStatus().getKey())){
								invesCompletedOrCancelCount++;
							}
						}
						if(investigatorsCount == invesCompletedOrCancelCount){
							reimbursementDTO.getPreauthDataExtractionDetails().setIsMultipleInvsAssigned(Boolean.FALSE);		
						}
						reimbursementDTO.getPreauthDataExtractionDetails().setInvsReplyReceivedCount(invsReplyCount);
					}
				}*/
				reimbursementDTO.getPreauthMedicalDecisionDetails().setIsInvsInitiated(preauthService.isInvsInitiated(reimbursementDTO.getClaimDTO().getKey()));
				
			
			view.setUpdateSublimitView(UpdateSublimitWizard.class,reimbursementDTO);
			
		}
		
		protected void showManagerFeedBackView(
				@Observes @CDIEvent(MenuItemBean.MANAGER_FEEDBACK_FORM) final ParameterDTO parameters) {
			/*	BeanItemContainer<SelectValue> feedBack = masterService.getMasterValueByCode(ReferenceTable.FEEDBACK);
			//BeanItemContainer<SelectValue> zoneValue = calcService.getZoneCode();
			//BeanItemContainer<SelectValue> zoneValue = branchManagerFeedbackService.getZoneValue();
			//BeanItemContainer<SelectValue> branchValue = new BeanItemContainer<SelectValue>(SelectValue.class);
			//BeanItemContainer<SelectValue> branchValue = masterService.getSelectValueContainerForBranch();
			BeanItemContainer<SelectValue> feedbackContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
			Status reportedStatus = masterService.getStatusByKey(ReferenceTable.FEEDBACK_REPORTED_KEY);
			Status respondedStatus = masterService.getStatusByKey(ReferenceTable.FEEDBACK_RESPONDED_KEY);
			SelectValue reportedStatusSelectValue = new SelectValue(reportedStatus.getKey(),reportedStatus.getProcessValue());
			SelectValue respondedStatusSelectValue = new SelectValue(respondedStatus.getKey(),respondedStatus.getProcessValue());
			feedbackContainer.addBean(respondedStatusSelectValue);
			feedbackContainer.addBean(reportedStatusSelectValue);
			BeanItemContainer<SelectValue> feedbackTypeValue = masterService.getMasterValueByCode(ReferenceTable.FEEDBACK_TYPE);*/
			
			String userName=(String)UI.getCurrent().getSession().getAttribute(BPMClientContext.USERID);
			BeanItemContainer<SelectValue> branchValue = dBCalculationService.getBranchContainerForManagerFeedback(userName);
			view.setManagerFeedBack(ManagerFeedBackView.class,true,branchValue/*,feedbackContainer,feedbackTypeValue*/);
		} 
		
		protected void branchManagerFeedbackView(
				@Observes @CDIEvent(MenuItemBean.MANAGER_FEEDBACK) final ParameterDTO parameters) {
			
			BeanItemContainer<SelectValue> feedBack = masterService.getMasterValueByCode(ReferenceTable.FEEDBACK);
			BeanItemContainer<SelectValue> zoneValue = dBCalculationService.getZoneCode();
			
			//BeanItemContainer<SelectValue> zoneValue = branchManagerFeedbackService.getZoneValue();
			//BeanItemContainer<SelectValue> branchValue = new BeanItemContainer<SelectValue>(SelectValue.class);
			//BeanItemContainer<SelectValue> branchValue = masterService.getSelectValueContainerForBranch();
			BeanItemContainer<SelectValue> branchValue = dBCalculationService.getBranchDetailsContainerForBranchManagerFeedback(0L);
			BeanItemContainer<SelectValue> feedbackContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
			Status reportedStatus = masterService.getStatusByKey(ReferenceTable.FEEDBACK_REPORTED_KEY);
			Status respondedStatus = masterService.getStatusByKey(ReferenceTable.FEEDBACK_RESPONDED_KEY);
			SelectValue reportedStatusSelectValue = new SelectValue(reportedStatus.getKey(),reportedStatus.getProcessValue());
			SelectValue respondedStatusSelectValue = new SelectValue(respondedStatus.getKey(),respondedStatus.getProcessValue());
			SelectValue completedStatusSelectValue = new SelectValue(9999L,"Feedback Completed");
			SelectValue allStatusSelectValue = new SelectValue(0L,SHAConstants.ALL);
			feedbackContainer.addBean(respondedStatusSelectValue);
			feedbackContainer.addBean(reportedStatusSelectValue);
			feedbackContainer.addBean(completedStatusSelectValue);
			feedbackContainer.addBean(allStatusSelectValue);
			BeanItemContainer<SelectValue> feedbackTypeValue = masterService.getMasterValueByCode(ReferenceTable.FEEDBACK_TYPE);
			view.setbranchManagerFeedback(BranchManagerFeedbackView.class
					,true,feedBack,zoneValue,branchValue,feedbackContainer,feedbackTypeValue);
		}
		protected void showTopUpPolicySearch(
				@Observes @CDIEvent(MenuItemBean.TOP_UP_POLICY_MASTER_SCREEN) final ParameterDTO parameters) {
			view.setViewTopUpPolicy(
					TopUpPolicyMasterView.class);
		}
		
		protected void showFraudIdentification(
				@Observes @CDIEvent(MenuItemBean.FRAUD_IDENTIFICATION) final ParameterDTO parameters) {
			view.setViewFraudIdentification(FraudIdentificationView.class);
		}
		
		private void populatePaymentDetailsForGMCPayment(Claim claim,ReceiptOfDocumentsDTO rodDTO,NewIntimationDto newIntimationDto){
			
			if(rodDTO.getPreauthDTO().getPolicyDto().getPaymentParty() !=null &&
					rodDTO.getPreauthDTO().getPolicyDto().getPaymentParty().equalsIgnoreCase(SHAConstants.GMC_PAYMENT_PARTY_CORPORATE)){
			PolicyBankDetails policyBankDtls = createRodService.getCorpBankDetails(rodDTO.getPreauthDTO().getPolicyDto().getKey());
			
				if(policyBankDtls != null){
					rodDTO.getDocumentDetails().setAccountNo(policyBankDtls.getAccountNumber());
					/*rodDTO.getDocumentDetails().setAccountPreference(reimbursement.getAccountPreference());
					rodDTO.getDocumentDetails().setAccountType(reimbursement.getAccountType());*/
					rodDTO.getDocumentDetails()
							.setBankName(policyBankDtls.getBankName());
					SelectValue selValue = new SelectValue();
					selValue.setValue(policyBankDtls.getCustomerName());
					rodDTO.getDocumentDetails().setEmailId(rodDTO.getPreauthDTO().getPolicyDto().getPolEmailId());
					rodDTO.getDocumentDetails().setBranch(policyBankDtls.getBranchName());
					rodDTO.getDocumentDetails().setCity(policyBankDtls.getBranchName());
					rodDTO.getDocumentDetails()
							.setIfscCode(policyBankDtls.getIfscCode());
					rodDTO.getDocumentDetails().setPaymentMode(false);
					rodDTO.getDocumentDetails().setPaymentModeFlag(ReferenceTable.PAYMENT_MODE_BANK_TRANSFER);
					rodDTO.getDocumentDetails().setPayeeName(selValue);
				}
			} else {
					if(rodDTO.getPreauthDTO().getPolicyDto().getLinkPolicyNumber() != null) {
						
						Insured insuredDetails = insuredService.getInsuredByInsuredKey(rodDTO.getNewIntimationDTO().getInsuredKey());
						Map<String, String> getLinkedPolicyDtls = calcService.getLinkedPolicyDetails(rodDTO.getPreauthDTO().getPolicyDto().getPolicyNumber(), insuredDetails.getLinkEmpNumber());
						SelectValue selValue = new SelectValue();
						selValue.setValue(getLinkedPolicyDtls.get("INSURED_NAME"));
						rodDTO.getDocumentDetails().setPayeeName(selValue);
						rodDTO.getDocumentDetails().setAccountNo(getLinkedPolicyDtls.get("ACCOUNT_NO"));
						rodDTO.getDocumentDetails()
								.setBankName(getLinkedPolicyDtls.get("BANK_NAME"));
						rodDTO.getDocumentDetails().setBranch(getLinkedPolicyDtls.get("BRANCH_NAME"));
						rodDTO.getDocumentDetails().setCity(getLinkedPolicyDtls.get("BRANCH_NAME"));
						rodDTO.getDocumentDetails()
								.setIfscCode(getLinkedPolicyDtls.get("IFSC_CODE"));
						rodDTO.getDocumentDetails().setPaymentMode(false);
						rodDTO.getDocumentDetails().setEmailId(getLinkedPolicyDtls.get("INSURED_EMAIL_ID"));
						
						} else {
							Insured insuredDtls = insuredService.getCLSInsured(newIntimationDto.getInsuredKey().toString());
							String lobFlag = null;
							Long mainMberId = null;
							if(insuredDtls.getDependentRiskId() != null){
								 mainMberId =insuredDtls.getDependentRiskId().longValue();
							} else {
								 mainMberId = insuredDtls.getInsuredId().longValue();
							}
							if(rodDTO.getNewIntimationDTO().getLobId() != null && rodDTO.getNewIntimationDTO().getLobId().getId().equals(ReferenceTable.HEALTH_LOB_KEY)){
								lobFlag = SHAConstants.HEALTH_LOB_FLAG;
							} else {
								lobFlag = SHAConstants.PA_LOB_TYPE;
							}
							Insured mainMemberDtls = intimationService.getInsuredByPolicyAndInsuredId(rodDTO.getPreauthDTO().getPolicyDto().getPolicyNumber(),mainMberId, lobFlag);
							if(mainMemberDtls != null){
								SelectValue selValue = new SelectValue();
								selValue.setValue(mainMemberDtls.getInsuredName());
								rodDTO.getDocumentDetails().setPayeeName(selValue);
								rodDTO.getDocumentDetails().setAccountNo(mainMemberDtls.getAccountNumber());
								rodDTO.getDocumentDetails()
										.setBankName(mainMemberDtls.getBankName());
								rodDTO.getDocumentDetails().setBranch(mainMemberDtls.getBranchName());
								rodDTO.getDocumentDetails().setCity(mainMemberDtls.getBranchName());
								rodDTO.getDocumentDetails()
										.setIfscCode(mainMemberDtls.getIfscCode());
								rodDTO.getDocumentDetails().setPaymentMode(false);
								rodDTO.getDocumentDetails().setEmailId(mainMemberDtls.getInsuredEmailId());
							}
						}
			}
		}
		protected void showBranchManagerFeedbackHome(
				@Observes @CDIEvent(SHOW_BRANCH_MANAGER_FEEDBACK_HOME_PAGE) final ParameterDTO parameters) {
			
			String userName = (String)UI.getCurrent().getSession().getAttribute(BPMClientContext.USERID);
			//BeanItemContainer<SelectValue> branchContainerValue = (BeanItemContainer<SelectValue>)parameters.getPrimaryParameter();
			SelectValue selectedBranch = (SelectValue)parameters.getPrimaryParameter();
			BeanItemContainer<SelectValue> branchContainerForManagerFeedback = dBCalculationService.getBranchContainerForManagerFeedback(userName);
			SelectValue selectValue = null;
			if(selectedBranch == null){
			List<SelectValue> itemIds = branchContainerForManagerFeedback.getItemIds();
			if(null != itemIds && !itemIds.isEmpty()){
				selectValue = itemIds.get(0);
			}
			}else{
				selectValue = selectedBranch;
			}
			BranchManagerFeedbackhomePageDto hompageDto = dBCalculationService.getBranchManagerHomePageStats(null != selectValue && null != selectValue.getId() ? String.valueOf(selectValue.getId()) : null, userName);
			hompageDto.setHomeBranch(selectValue);
			
			view.setBranchManagerFeedBackHomePage(ManagerFeedBackView.class,true,branchContainerForManagerFeedback,hompageDto);
		}
		
		protected void showWithdrawPreauthPostProcessView(
				@Observes @CDIEvent(MenuPresenter.WITHDRAW_PREAUTH_POST_PROCESS_PAGE_VIEW) final ParameterDTO parameters) {

			SearchWithdrawCashLessPostProcessTableDTO tableDTO = (SearchWithdrawCashLessPostProcessTableDTO) parameters
					.getPrimaryParameter();

			Preauth preauthList = preauthService.getPreauthById(tableDTO.getKey());

			tableDTO.setPreauth(preauthList);

			PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//			PreMedicalMapper.getAllMapValues();

			//Long preauthKey = preauthList.getKey();

			PreauthDTO preauthDTO = premedicalMapper.getPreauthDTO(preauthList);
			setpreauthTOPreauthDTO(premedicalMapper, preauthList.getClaim(),
					preauthList, preauthDTO, false);
			tableDTO.setPreauthDto(preauthDTO);
			
			if(preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList() != null){
				List<DiagnosisDetailsTableDTO> diagnosisTableList = preauthDTO.getPreauthDataExtractionDetails().getDiagnosisTableList();
				List<ExclusionDetails> exclusionDetailsList = masterService.getExclusionDetailsList();
				for (DiagnosisDetailsTableDTO diagnosisDetailsTableDTO : diagnosisTableList) {
					//List<ExclusionDetails> exclusionDetailsList = masterService.getExclusionDetailsList();
					if(diagnosisDetailsTableDTO.getPedList() != null){
						for (PedDetailsTableDTO pedDetail : diagnosisDetailsTableDTO.getPedList()) {
							pedDetail.setExclusionAllDetails(exclusionDetailsList);
						}
					}
				}
			}
			
			Intimation intimationByKey = intimationService.getIntimationByKey(preauthList.getIntimation().getKey());
			
	        preauthDTO.setCpuProvisionAmt(intimationByKey.getCpuCode() != null ? intimationByKey.getCpuCode().getProvisionAmount() : null);
	        
	        preauthDTO.setStrUserName(tableDTO.getUsername());
	        preauthDTO.setStrPassword(tableDTO.getPassword());

			tableDTO.setPreauthDto(preauthDTO);

			BeanItemContainer<SelectValue> selectValueContainer = masterService
					.getConversionReasonByValue(ReferenceTable.WITHDRAWAL_REASON);

			Claim claim = preauthList.getClaim();
			
			Boolean isValidClaim = true;
			if(null != claim)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claim.getLegalFlag()))
				{
					isValidClaim = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
			
			if(isValidClaim){

			List<PreviousPreAuthTableDTO> previousPreauthList = previousPreAuthService
					.search(claim.getKey(), false);
			
			

			List<PreviousPreAuthTableDTO> newList = new ArrayList<PreviousPreAuthTableDTO>();
			for (PreviousPreAuthTableDTO previousPreAuthTableDTO : previousPreauthList) {

				previousPreAuthTableDTO.setRequestedAmt(preauthService
						.getPreauthReqAmt(previousPreAuthTableDTO.getKey(),
								previousPreAuthTableDTO.getClaimKey()));
				newList.add(previousPreAuthTableDTO);

			}

			tableDTO.setPreviousPreAuthTableDTO(newList);

			tableDTO.setPolicyKey(preauthList.getPolicy().getKey());

			tableDTO.setClaimKey(preauthList.getClaim().getKey());

			ClaimDto claimDto = preauthDTO.getClaimDTO();
			claimDto.setClaimId(claim.getClaimId());
			MastersValue currency = claim.getCurrencyId();
			SelectValue currencyId = new SelectValue();
			currencyId.setId(currency.getKey());
			currencyId.setValue(currency.getValue());

			claimDto.setCurrencyId(currencyId);

			NewIntimationDto intimationDto = intimationService
					.getIntimationDto(preauthList.getIntimation());

			
			Double insuredSumInsured = calcService
					.getInsuredSumInsured(preauthDTO.getNewIntimationDTO()
							.getInsuredPatient().getInsuredId().toString(),
							preauthDTO.getPolicyDto().getKey(),preauthDTO.getNewIntimationDTO()
							.getInsuredPatient().getLopFlag());
			
			List<Preauth> preauthByClaimKey = preauthService
					.getPreauthByClaimKey(preauthList.getClaim().getKey());
			
			for (Preauth preauth2 : preauthByClaimKey) {
				preauthDTO.setReferenceType(preauth2.getPreauthId());
			}
			
			preauthDTO.setPreviousPreauthKey(tableDTO.getKey());
			
			if(preauthList.getRoomCategory() != null){
				SelectValue selected = new SelectValue();
				selected.setId(preauthList.getRoomCategory().getKey());
				selected.setValue(preauthList.getRoomCategory().getValue());
				preauthDTO.getPreauthDataExtractionDetails().setRoomCategory(selected);
				preauthDTO.getNewIntimationDTO().setRoomCategory(selected);
			}

			
			loadRRCRequestValues(preauthDTO,insuredSumInsured,SHAConstants.PROCESS_WITHDRAW_PREAUTH_POST_PROCESS);
			preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
			preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
			
			//CR  R1186
			if(preauthDTO.getIsPEDInitiated()){
				boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				preauthDTO.setInsuredDeleted(isInsuredDeleted);
				
				//CR R1156
				boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				preauthDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);
			}
			ConvertClaimDTO convertClaimDto = new ConvertClaimDTO();
			Claim claimDetails = claimService.getClaimByKey(claim.getKey());

			NewIntimationDto convertintimationDto = intimationService
					.getIntimationDto(claimDetails.getIntimation());

			ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimDetails);
			claimDTO.setNewIntimationDto(convertintimationDto);
			
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setNewIntimationDTO(convertintimationDto);
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setStrUserName(tableDTO.getUsername());
			Double convertinsuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_CONVERT_CLAIM);
			tableDTO.setrRCDto(rrcDTO);
			
			
			Long hospital = claim.getIntimation().getHospital();
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			
			if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				tableDTO.getPreauthDto().setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					tableDTO.getPreauthDto().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}

			if (claimDetails != null) {
				convertClaimDto = convertClaimMapper.getClaimDTO(claimDetails);
			}
			if (null != claimDetails.getStatus()) {
				convertClaimDto.setClaimStatus(claimDetails.getStatus()
						.getProcessValue());

				if (claimDetails.getStatus().getKey().equals(ReferenceTable.CLAIM_REGISTERED_STATUS)) {
					convertClaimDto.setDenialRemarks(claimDetails
							.getRegistrationRemarks());

				} else if (claimDetails.getStatus().getKey() == 19l
						|| claimDetails.getStatus().getKey() == 24l) {
					Preauth preauthDetails = preauthService
							.getPreauthClaimKey(claimDetails.getKey());

					PreauthQuery preauthQuery = preauthService
							.getPreauthQueryList(preauthDetails.getKey());

					convertClaimDto
							.setDenialRemarks(preauthQuery.getQueryRemarks());
				} else if(claimDetails.getStatus().getKey().equals(ReferenceTable.WITHDRAW_APPROVED_STATUS) || claimDetails.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_STATUS)
						|| claimDetails.getStatus().getKey().equals(ReferenceTable.STANDALONE_WITHDRAW_POST_STATUS)){
					
					Preauth preauthDetails = preauthService
							.getLatestPreauthDetails(claimDetails.getKey());
					if(preauthDetails.getMedicalRemarks() != null){
						convertClaimDto.setDenialRemarks(preauthDetails.getMedicalRemarks());
					}else{
						convertClaimDto.setDenialRemarks(preauthDetails.getRemarks());
					}
					
					
				}
			}

			List<Long> keysList = new ArrayList<Long>();

			if (claimDetails != null) {
				List<Preauth> convertpreauthList = preauthService
						.getPreauthByClaimKey(claimDetails.getKey());
				for (Preauth preauth : convertpreauthList) {
					keysList.add(preauth.getKey());
				}

			}
			if (!keysList.isEmpty()) {
				Long preauthKey = Collections.max(keysList);
				Preauth preauth = preauthService.getPreauthById(preauthKey);
				if (null != preauth) {
					if (null != preauth.getStatus()) {
						if (preauth.getStatus().getKey() == 26l) {
							convertClaimDto.setClaimStatus(preauth.getStatus()
									.getProcessValue());
							convertClaimDto.setDenialRemarks(preauth.getRemarks());
						}
					}
				}
			}
			
			
	         DocUploadToPremia premiaData = processPremedicalService.getUploadedDataDocumentDetails(claimDetails.getIntimation().getIntimationId()/*"CLI/2015/141125/0003907"*/);
			
			if(premiaData  != null && premiaData.getPfdUpFFAXAmt() != null){
				convertClaimDto.setClaimedAmount(Double.valueOf(premiaData.getPfdUpFFAXAmt()));
			}
			
//			BeanItemContainer<SelectValue> conversionContainer = masterService
//					.getConversionReasonByValue(ReferenceTable.REASON_FOR_CONVERSION);
			BeanItemContainer<SelectValue> conversionContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
			SelectValue conversionReasonId = new SelectValue();
			MastersValue conversionReason = masterService.getMaster(ReferenceTable.CONVERSION_REASON_FOR_PATIENT_ADMITTED_PAID);
			conversionReasonId.setId(conversionReason.getKey());
			conversionReasonId.setValue(conversionReason.getValue());
			conversionContainer.addBean(conversionReasonId);
			convertClaimDto.setConversionReasonList(conversionContainer);
			List<Reimbursement> reimbursementList = reimbursementService.getRembursementDetails(claim.getKey());
			List<WithDrawPostProcessBillDetailsDTO> updateBillClassificationList = new ArrayList<WithDrawPostProcessBillDetailsDTO>();
			
			for (Reimbursement reimbursement : reimbursementList) {
				WithDrawPostProcessBillDetailsDTO tableProcessDTO = new WithDrawPostProcessBillDetailsDTO();
				
					ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
					PreauthDTO reimbursementDTO = mapper
							.getReimbursementDTO(reimbursement);
//					reimbursementDTO.setIsPostHospitalization(true);
					setReimbursmentTOPreauthDTO(mapper, claim, reimbursement,
							reimbursementDTO, true, SHAConstants.CREATE_ROD);
					
					setCategoryFlag(reimbursement, reimbursementDTO);
					List<UploadDocumentDTO> rodSummaryDetails = rodService
							.getRODSummaryDetails(reimbursement.getKey());
					for (UploadDocumentDTO uploadDocumentDTO : rodSummaryDetails) {
						uploadDocumentDTO.setIntimationNo(reimbursement.getClaim().getIntimation().getIntimationId());
						uploadDocumentDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursement.getDateOfAdmission()));
						uploadDocumentDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursement.getDateOfDischarge()));
						uploadDocumentDTO.setInsuredPatientName(reimbursement.getClaim().getIntimation().getInsuredPatientName());
						uploadDocumentDTO.setReimbursementKey(reimbursement.getKey());
						uploadDocumentDTO.setRodKey(reimbursement.getKey());
						uploadDocumentDTO.setAckDocKey(reimbursement.getDocAcknowLedgement().getKey());
						uploadDocumentDTO.setHospitalizationFlag(reimbursement.getDocAcknowLedgement().getHospitalisationFlag() != null ? reimbursement.getDocAcknowLedgement().getHospitalisationFlag() : "");
						uploadDocumentDTO.setPreHospitalizationFlag(reimbursement.getDocAcknowLedgement().getPreHospitalisationFlag() != null ? reimbursement.getDocAcknowLedgement().getPreHospitalisationFlag() : "");
						uploadDocumentDTO.setPostHospitalizationFlag(reimbursement.getDocAcknowLedgement().getPostHospitalisationFlag() != null ? reimbursement.getDocAcknowLedgement().getPostHospitalisationFlag() :"");
						uploadDocumentDTO.setHospitalBenefitFlag(reimbursement.getDocAcknowLedgement().getBenifitFlag() != null ? reimbursement.getDocAcknowLedgement().getBenifitFlag() : "");
					}
					List<DMSDocumentDetailsDTO> dmsDocDetailList = getClaimsDMSList(claimDetails.getIntimation().getIntimationId());
					/*if(rodSummaryDetails != null && !rodSummaryDetails.isEmpty()) {
					for (WithDrawPostProcessBillDetailsDTO uploadDocumentDTO : rodSummaryDetails) {*/
					tableProcessDTO.setClaimNo(claimDetails.getClaimId());
					tableProcessDTO.setDmsDocumentDTOList(dmsDocDetailList);
					tableProcessDTO.setRodNo(reimbursement.getRodNumber());
					tableProcessDTO.setDocReceivedDate(reimbursement.getDocAcknowLedgement().getDocumentReceivedDate());
					tableProcessDTO.setModeOfReceipt(reimbursement.getDocAcknowLedgement().getModeOfReceiptId().getValue());
					tableProcessDTO.setRemstatus(reimbursement.getStatus().getProcessValue());
					tableProcessDTO.setRemstatusKey(reimbursement.getStatus().getKey());
					tableProcessDTO.setApprovedAmount(reimbursement.getFinancialApprovedAmount());
					tableProcessDTO.setIntimationNo(reimbursement.getClaim().getIntimation().getIntimationId());
					tableProcessDTO.setDateOfAdmission(SHAUtils.formatDate(reimbursement.getDateOfAdmission()));
					tableProcessDTO.setDateOfDischarge(SHAUtils.formatDate(reimbursement.getDateOfDischarge()));
					tableProcessDTO.setInsuredPatientName(reimbursement.getClaim().getIntimation().getInsuredPatientName());
						String billClassificationValue = getBillClassificationValue(reimbursement.getDocAcknowLedgement());
						if(billClassificationValue != null && reimbursement.getDocAcknowLedgement().getBenifitFlag() != null){
							billClassificationValue += ","+reimbursement.getDocAcknowLedgement().getBenifitFlag();
						}else if(reimbursement.getDocAcknowLedgement().getBenifitFlag() != null){
							billClassificationValue = reimbursement.getDocAcknowLedgement().getBenifitFlag();
						}
						tableProcessDTO.setBillClassification(billClassificationValue);
						tableProcessDTO.setStatus(true);
						tableProcessDTO.setPreauthDto(reimbursementDTO);
						tableProcessDTO.setAckDocKey(reimbursement.getDocAcknowLedgement().getKey());
						tableProcessDTO.setRodKey(reimbursement.getKey());
						tableProcessDTO.setUploadDocList(rodSummaryDetails);
//						if(reimbursement.getReconsiderationRequest() != null && reimbursement.getReconsiderationRequest().equalsIgnoreCase("Y")){
//							tableProcessDTO.setIsReconsiderationRequest(true);
//						}
//						if(rodNo.equals(reimbursement.getRodNumber())){
//						
//						}
						
						/*List<RODBillDetails> billEntryDetails = rodService
								.getBillEntryDetails(uploadDocumentDTO.getDocSummaryKey());
						List<BillEntryDetailsDTO> dtoList = new ArrayList<BillEntryDetailsDTO>();*/
						/*if (billEntryDetails != null && !billEntryDetails.isEmpty()) {
							for (RODBillDetails billEntryDetailsDO : billEntryDetails) {
							
								dtoList.add(getBillDetailsDTOForBilling(billEntryDetailsDO,
										uploadDocumentDTO));
								uploadDocumentDTO.setStatus(false);
								uploadDocumentDTO.setBillEntryDetailList(dtoList);
								uploadDocumentDTO.setClaimType(reimbursementDTO.getClaimDTO().getClaimType());
								
								uploadDocumentDTO.setStrUserName(tableDTO.getUsername());

							}
						}*/
//					}
					
					/*for (UploadDocumentDTO uploadDocDTO : rodSummaryDetails) {
						if(uploadDocDTO.getBillNo() != null){
							tableProcessDTO = uploadDocDTO;
						}
					}*/
//				}
				
				//IMSSUPPOR-28163
				Reimbursement rodNo= createRodService.getLatestReimbursementByRodNumber(reimbursement.getRodNumber());
				if(rodNo != null && rodNo.getReconsiderationRequest() != null && rodNo.getReconsiderationRequest().equalsIgnoreCase("Y")){
						 tableProcessDTO.setIsReconsiderationRequest(true);
				}		
						
				updateBillClassificationList.add(tableProcessDTO);
				/*Reimbursement rodNo	= createRodService.getLatestReimbursementByRodNumber(reimbursementList.get(0).getRodNumber());
				if(rodNo != null && rodNo.getReconsiderationRequest() != null && rodNo.getReconsiderationRequest().equalsIgnoreCase("Y")){
					updateBillClassificationList.get(0).setIsReconsiderationRequest(true);
				}*/
			}
			tableDTO.setBillClassificationTableDTO(updateBillClassificationList);
		
			
			
			view.setWithdrawPreauthPostProcessView(WithdrawPreauthPostProcessWizard.class, tableDTO,
					intimationDto, claimDto, selectValueContainer,convertClaimDto,conversionContainer);
			}

		}
		
		protected void showPreviousManagerFeedBack(
				@Observes @CDIEvent(MenuItemBean.MANAGER_PREVIOUS_FEEDBACK) final ParameterDTO parameters) {
			view.setViewPreviousManagerFeedBack(
					BranchManagerPreviousFeedbackView.class);
		}
		
		protected void showLinkPreviousManagerFeedBack(
				@Observes @CDIEvent(MenuPresenter.SHOW_PREVIOUS_FEEDBACK_LINK_HOME_PAGE) final ParameterDTO parameters) {
			FeedbackStatsDto fbStatusDTO = (FeedbackStatsDto)parameters.getPrimaryParameter();
			Long fbStatus = (Long)parameters.getSecondaryParameter(0, Long.class);
			view.setViewPreviousManagerLink(BranchManagerPreviousFeedbackView.class,fbStatusDTO,fbStatus);
		}
		
		//Magazine
		public void showAlertForMagazine(){	 

			Label successLabel = new Label(
					"<b style = 'color: red;'>Please confirm you have read the magazine</b>",
					ContentMode.HTML);
			Button homeButton = new Button("OK");
			homeButton.setStyleName(ValoTheme.BUTTON_FRIENDLY);
			VerticalLayout layout = new VerticalLayout(successLabel, homeButton);
			layout.setComponentAlignment(homeButton, Alignment.MIDDLE_CENTER);
			layout.setSpacing(true);
			layout.setMargin(true);
			layout.setStyleName("borderLayout");

			final ConfirmDialog dialog = new ConfirmDialog();
			dialog.setClosable(false);
			dialog.setContent(layout);
			dialog.setResizable(false);
			dialog.setModal(true);
			dialog.show(UI.getCurrent(), null, true);

			homeButton.addClickListener(new ClickListener() {
				private static final long serialVersionUID = 7396240433865727954L;

				@Override
				public void buttonClick(ClickEvent event) {
					dialog.close();
				}
			});
		}
		
		protected void showMagazineGalleryPopup(
				@Observes @CDIEvent(MenuPresenter.MAGAZINE_GALLERY_POPUP) final ParameterDTO parameters) {
			final ImsUser imsUser = (ImsUser) parameters.getPrimaryParameter();
			final Window popupWindow = new Window();
			popupWindow.setCaption("Magazine Gallery");
			popupWindow.setWidth("60%");
			popupWindow.setHeight("100%");
			popupWindow.center();
			popupWindow.setClosable(false);
			popupWindow.setResizable(false);

			UI.getCurrent().addWindow(popupWindow);
			
		}
		
		protected void getMagazineDocument(@Observes @CDIEvent(MenuPresenter.GET_MAGAZINE) final ParameterDTO parameters) {
			
			//String magazineCode = (String) parameters.getPrimaryParameter();
			List<MasMagazineDocument> megazineList = masterService.getAllMagazine();
			//String magazineCode = magazine.getMasMagCode();
		//	List<MagazineDTO> magObj =  masterService.getMagazineByCode(magazineCode);
			view.setMagazineDetails(megazineList);
		}
		
//		Commented the below Cashless Screen
//		protected void showUncheckNegotiationSearch(
//				@Observes @CDIEvent(MenuItemBean.UNCHECK_NEGOTIATION) final ParameterDTO parameters) {
//			view.setViewUncheckNegotiation(
//					SearchUncheckNegotiationView.class);
//		}
		
		protected void showUploadBedPhotoWizard(
				@Observes @CDIEvent(MenuPresenter.UPLOAD_BED_PHOTO_WIZARD) final ParameterDTO parameters){
			SearchBedPhotoTableDTO tableDTO = (SearchBedPhotoTableDTO) parameters.getPrimaryParameter();
			String intimationNo = tableDTO.getIntimationNo();
			if(intimationNo != null){
				Intimation intimationByNo = intimationService.getIntimationByNo(intimationNo);
				NewIntimationDto newIntimationDto = intimationService.getIntimationDto(intimationByNo);
				tableDTO.setNewIntimationDto(newIntimationDto);
			}
			view.setUploadBedPhotoWizard(UploadBedPhotoView.class,true,tableDTO);
		}
		
		public void showInformation(String eMsg) {
			MessageBox open = MessageBox.createWarning()
			.withCaptionCust("Warning").withHtmlMessage(eMsg.toString())
		    .withOkButton(ButtonOption.caption("OK")).open();
			
			Button button = open.getButton(ButtonType.OK);
			button.addClickListener(new ClickListener() {
				
				@Override
				public void buttonClick(ClickEvent event) {
					UI.getCurrent().getPage().setLocation("./logout");
				}
			});
			
		}
		
		protected void showTataTrustPreauthWizard(
				@Observes @CDIEvent(MenuPresenter.SHOW_TATA_POLICY_PREAUTH_WIZARD) final ParameterDTO parameters) {

			SearchPreauthTableDTO tableDTO = (SearchPreauthTableDTO) parameters
					.getPrimaryParameter();
			
			Date startDate = new Date();
			log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR DB FETCHING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+startDate);
			
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			PreauthDTO preauthDTO = new PreauthDTO();
			//preauthDTO.setRodHumanTask(tableDTO.getHumanTask());
			preauthDTO.setTaskNumber(tableDTO.getTaskNumber());	
			
			preauthDTO.setStrUserName(tableDTO.getUsername());
			preauthDTO.setStrPassword(tableDTO.getPassword());
			if(null != tableDTO.getDocReceivedTimeForMatchDate())
				preauthDTO.setSfxMatchedQDate(tableDTO.getDocReceivedTimeForMatchDate());
			/*if(null !=tableDTO.getDocReceivedTimeForReg())
				preauthDTO.setSfxRegisteredQDate(SHAUtils.formatDateForStarfax(tableDTO.getDocReceivedTimeForReg()));*/
			if(null != tableDTO.getDocReceivedTimeForRegDate())
				preauthDTO.setSfxRegisteredQDate(tableDTO.getDocReceivedTimeForRegDate());
			/*if(null != tableDTO.getDocReceivedTimeForMatch() )
			preauthDTO.setSfxMatchedQDate(SHAUtils.formatDateForStarfax(tableDTO.getDocReceivedTimeForMatch()));*/
             //added for FLP Bypass case from autoallocation menu
			preauthDTO.setIsPreauthAutoAllocationQ(tableDTO.getIsPreauthAutoAllocationQ());
			Claim claimByKey = claimService.getClaimByKey(tableDTO.getClaimKey());
			Boolean isValidClaim = true;
			if(null != claimByKey)
			{
				if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
				{
					isValidClaim = false;
					view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
				}
			}
			
			
			if(isValidClaim)
			{
			
				List<Preauth> preauthByClaimKey = preauthService
						.getPreauthByClaimKey(claimByKey.getKey());
				Boolean isQueryOrTranslate = false;
				if (!preauthByClaimKey.isEmpty()) {
					for (Preauth preauth : preauthByClaimKey) {
		
						//String[] split = preauth.getPreauthId().split("/");
						//Integer seqNumber = Integer.valueOf(split[split.length - 1]);
							if (preauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_COORDINATOR_REPLY_RECEIVED_STATUS) ||
									preauth.getStatus().getKey().equals(ReferenceTable.PREMEDICAL_PREAUTH_COORDINATOR_REPLY) ||
									preauth.getStatus().getKey().equals(ReferenceTable.PREMEDICAL_ENHANCEMENT_COORDINATOR_REPLY) ||
									preauth.getStatus().getKey().equals(ReferenceTable.ENHANCEMENT_COORDINATOR_REPLY_RECEIVED_STATUS) ||
									preauth.getStatus().getKey().equals(ReferenceTable.PREAUTH_REFER_TO_FLP_STATUS)
									|| preauth
											.getStatus()
											.getKey()
											.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_QUERY_RECEIVED_STATUS) || preauth
											.getStatus()
											.getKey()
											.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SEND_FOR_PROCESSING_STATUS) || preauth
											.getStatus()
											.getKey()
											.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_QUERY_STATUS) || preauth
											.getStatus()
											.getKey()
											.equals(ReferenceTable.PRE_MEDICAL_PRE_AUTH_SUGGEST_REJECTION_STATUS)) {
								Date mapperStartDate = new Date();
								log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR PREMEDICAL MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
								
								PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
//								PreMedicalMapper.getAllMapValues();
								preauthDTO = premedicalMapper.getPreauthDTO(preauth);
								
								Date mapperEndDate = new Date();
								log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR PREMEDICAL MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
								
								log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR PREMEDICAL MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));

								
								//preauthDTO.setRodHumanTask(tableDTO.getHumanTask());
								setpreauthTOPreauthDTO(premedicalMapper, claimByKey,
										preauth, preauthDTO, true);
								CoordinatorDTO coordinatorDTO = new CoordinatorDTO();
								coordinatorDTO.setRefertoCoordinator(false);
								preauthDTO.setCoordinatorDetails(coordinatorDTO);
								preauthDTO.getPreauthDataExtractionDetails().setCorporateBufferFlag(preauthDTO.getClaimDTO().getIsgmcCorpBuffer() != null ? preauthDTO.getClaimDTO().getIsgmcCorpBuffer() : 0L);
								isQueryOrTranslate = true;
								break;
							}
					}
				}
		
				preauthDTO.setClsProsAllowed(masterService.getClsProsAllowedByPolicyNo(tableDTO.getPolicyNo()));
				
				if (!isQueryOrTranslate) {
					List<Preauth> preauthByClaimKeyWithClearCashless = preauthService
							.getPreauthByClaimKeyWithClearCashless(claimByKey.getKey());
					String referenceNo = claimByKey.getClaimId() + "/001";
					if(!preauthByClaimKeyWithClearCashless.isEmpty()) {
						referenceNo = claimByKey.getClaimId() + "/00" + String.valueOf(preauthByClaimKeyWithClearCashless.size() + 1);
					}
					
					preauthDTO.getPreauthDataExtractionDetails().setReferenceNo(
							referenceNo);
					if (claimByKey != null) {
						
						newIntimationDto = intimationService
								.getIntimationDto(claimByKey.getIntimation());
											
						setClaimValuesToDTO(preauthDTO, claimByKey);
						// newIntimationDto.getPolicy().getProduct().getAutoRestoration()
						
						Date mapperStartDate = new Date();
						log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperStartDate);
						
						ClaimDto claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
						//gmc
						if(claimByKey.getGmcCorpBufferLmt() != null){
							claimDTO.setGmcCorpBufferLmt(claimByKey.getGmcCorpBufferLmt().intValue());	
						}
						if(claimByKey.getGmcCorpBufferFlag() != null){
							claimDTO.setIsgmcCorpBuffer(claimByKey.getGmcCorpBufferFlag().equalsIgnoreCase(SHAConstants.YES_FLAG) ? 1L: 0L);
						}
						preauthDTO.setNewIntimationDTO(newIntimationDto);
						preauthDTO.setClaimDTO(claimDTO);
						
						//FLPByPass issue fix
						if (claimByKey.getIntimation().getPolicy().getHomeOfficeCode() != null) {
							 List<MasOmbudsman> ombudsmanOfficeList = getOmbudsmanOffiAddrByPIOCode(claimByKey.getIntimation().getPolicy().getHomeOfficeCode());
							 if(ombudsmanOfficeList !=null && !ombudsmanOfficeList.isEmpty())
								 preauthDTO.getClaimDTO().setOmbudsManAddressList(ombudsmanOfficeList);
						 }
						
						if (preauthDTO.getNewIntimationDTO() != null) {
							Product product = preauthDTO.getNewIntimationDTO().getPolicy()
									.getProduct();
							if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())) {
								preauthDTO
										.setDeductibleAmount((preauthDTO.getNewIntimationDTO()
												.getInsuredPatient() != null && preauthDTO
												.getNewIntimationDTO().getInsuredPatient()
												.getDeductibleAmount() != null) ? preauthDTO
												.getNewIntimationDTO().getInsuredPatient()
												.getDeductibleAmount() : 0d);
							}
						}
						
						Date mapperEndDate = new Date();
						log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+mapperEndDate);
						
						log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR CLAIM MAPPER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(mapperStartDate, mapperEndDate));

					}
					
					Double insuredSumInsured = 0d;
					
					if(ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
						
						insuredSumInsured = calcService.getInsuredSumInsuredForGMC(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
								preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getPolicy().getSectionCode());
					}
					else{
						insuredSumInsured = calcService.getInsuredSumInsured(
								preauthDTO.getNewIntimationDTO().getInsuredPatient()
										.getInsuredId().toString(), preauthDTO.getPolicyDto()
										.getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
					}
					
					preauthDTO.getPolicyDto().setInsuredSumInsured(insuredSumInsured);

					Double balanceSI = 0d;
					List<Double> copayValue = new ArrayList<Double>();
					if(ReferenceTable.getGMCProductList().containsKey(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
						balanceSI = calcService.getBalanceSIForGMC(
								preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
								preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
								preauthDTO.getClaimKey());
						copayValue = calcService.getProductCoPayForGMC(
								preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
					}else{
						balanceSI = calcService.getBalanceSI(
								preauthDTO.getNewIntimationDTO().getPolicy().getKey(),
								preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),
								preauthDTO.getClaimKey(), insuredSumInsured,
								preauthDTO.getNewIntimationDTO().getKey()).get(
								SHAConstants.TOTAL_BALANCE_SI);
						 copayValue = calcService.getProductCoPay(
								preauthDTO.getNewIntimationDTO().getPolicy().getProduct()
										.getKey(), preauthDTO.getNewIntimationDTO()
										.getInsuredPatient().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId(),preauthDTO.getNewIntimationDTO());
					}

					preauthDTO.setBalanceSI(balanceSI);
					preauthDTO.setProductCopay(copayValue);
					preauthDTO.setSittingsAmount(calcService.getDialysisAmount(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey(), insuredSumInsured.longValue()).intValue());
					
					Map<String, Object> autoRestroation = calcService.getAutoRestroation(preauthDTO.getNewIntimationDTO().getIntimationId());
					if(autoRestroation.containsKey(SHAConstants.AUTO_RESTORATION_CHK) && autoRestroation.get(SHAConstants.AUTO_RESTORATION_CHK) != null){
						preauthDTO.getPreauthDataExtractionDetails().setAutoRestoration(String.valueOf(autoRestroation.get(SHAConstants.AUTO_RESTORATION_CHK)));
						if(preauthDTO.getPreauthDataExtractionDetails().getAutoRestoration().equalsIgnoreCase(SHAConstants.AUTO_RESTORATION_DONE)) {
							preauthDTO.setIsAutoRestorationDone(true);
						}
					}
					if(autoRestroation.containsKey(SHAConstants.AUTO_RESTORATION_COUNT) && autoRestroation.get(SHAConstants.AUTO_RESTORATION_COUNT) != null){
						preauthDTO.getPreauthDataExtractionDetails().setRestorationCount((Integer.valueOf(autoRestroation.get(SHAConstants.AUTO_RESTORATION_COUNT).toString())));
					}
					
				}
		
				preauthDTO.setIsRepremedical(isQueryOrTranslate);
				
				
				preauthDTO.setStrUserName(tableDTO.getUsername());
				preauthDTO.setStrPassword(tableDTO.getPassword());
				
			//	loadRRCRequestValues(preauthDTO,insuredSumInsured,SHAConstants.PROCESS_PRE_MEDICAL);
				
			Date premiaStartDate = new Date();
			log.info("%%%%%%%%%%%%%%%%%%%%%% STARTING TIME FOR 64VB PREMIA CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+premiaStartDate);
				
				String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
				if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
					String get64vbStatus = PremiaService.getInstance().get64VBStatus(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(), preauthDTO.getNewIntimationDTO().getIntimationId());
					if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
						preauthDTO.setIsDishonoured(true);
					} else if(get64vbStatus != null && (SHAConstants.PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_PENDING.equalsIgnoreCase(get64vbStatus) || SHAConstants.UNIQUE_64VB_DUE.equalsIgnoreCase(get64vbStatus))) {
						preauthDTO.setIsPending(true);
					}
				}
				
				Date premiaEndDate = new Date();
				log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR 64VB PREMIA CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+premiaEndDate);
				
				log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR 64VB PREMIA CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(premiaStartDate, premiaEndDate));
				
				
			  Date	dbCalStartDate = new Date();
				log.info("%%%%%%%%%%%%%%%%%%%%%%STARTING TIME FOR  DB CALCULATION SERVICE  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+dbCalStartDate);
				
//				preauthDTO.setAdmissionDatePopup(dbCalculationService.getPolicyAgeingForPopup(preauthDTO.getNewIntimationDTO().getAdmissionDate(), preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber()));
				
				String policyYear = preauthDTO.getNewIntimationDTO().getPolicyYear();
			    if(policyYear != null){
			    	String intValue = policyYear.replaceAll("[^0-9]", "");
			    	Integer policyAgeing = SHAUtils.getIntegerFromStringWithComma(intValue);
			    	preauthDTO.setAdmissionDatePopup(policyAgeing != null ? policyAgeing.equals(0) ? true : false :false);
			    }
				
				preauthDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(preauthDTO.getNewIntimationDTO().getPolicy().getKey()));
							
				//CR  R1086
				if(preauthDTO.getIsPEDInitiated()){
					boolean isInsuredDeleted = pedQueryService.getStatusOfInsuredForNonDisclosePed(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
					preauthDTO.setInsuredDeleted(isInsuredDeleted);
					
					//CR R1156
					boolean multiplePEDAvailable = pedQueryService.getMultiplePEDAvailableNotDeleted(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
					preauthDTO.setMultiplePEDAvailableNotDeleted(multiplePEDAvailable);
				}
				
				preauthDTO.setIsPEDInitiatedForBtn(preauthDTO.getIsPEDInitiated());
				
				Map<String, String> popupMessages = calcService.getPOPUPMessages(preauthDTO.getPolicyKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey(),preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
				preauthDTO.setPopupMap(popupMessages);
				
				if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag() != null
						&& preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousFlag().equalsIgnoreCase("Y")){
					//if(preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null){
						Map<String, String> suspiciousMap = SHAUtils.getSuspiciousMap(preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() != null ? preauthDTO.getNewIntimationDTO().getHospitalDto().getSuspiciousRemarks() : SHAConstants.SUSPICIOUS_HOSP);
						preauthDTO.setSuspiciousPopupMap(suspiciousMap);
					//}
				}
				if(preauthDTO.getNewIntimationDTO().getHospitalDto() != null && preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag() != null
						&& preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredFlag().equalsIgnoreCase("Y")){
					//if(preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null){
						Map<String, String> nonPreferredMap = SHAUtils.getNonPreferredMap(preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() != null ? preauthDTO.getNewIntimationDTO().getHospitalDto().getNonPreferredRemarks() : SHAConstants.NON_PREFERRED_HOSP);
						preauthDTO.setNonPreferredPopupMap(nonPreferredMap);
					//}
				}
				
				  Date	dbCalEndate = new Date();
					log.info("%%%%%%%%%%%%%%%%%%%%%%STARTING TIME FOR  DB CALCULATION SERVICE  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+dbCalEndate);
					
					log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR 64VB PREMIA CALL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(dbCalStartDate, dbCalEndate));
					
				
				Date policyFromDate = preauthDTO.getNewIntimationDTO().getPolicy().getPolicyFromDate();
				
				Date admissionDate = preauthDTO.getNewIntimationDTO().getAdmissionDate();
				Long diffDays = SHAUtils.getDiffDays(policyFromDate, admissionDate);
				if(diffDays != null && diffDays<90){
					preauthDTO.setIs64VBChequeStatusAlert(true);
				}
				
				preauthDTO.setDbOutArray(tableDTO.getDbOutArray());
				
				if(claimByKey.getIntimation().getUnNamedKey() != null){
					preauthDTO.setUnNamedKey(claimByKey.getIntimation().getUnNamedKey());
				}
				//gmc
				Intimation intimation = claimByKey.getIntimation();
				Long mainNo = 0L;
				if(intimation.getInsured().getDependentRiskId() !=null){
					mainNo = intimation.getInsured().getDependentRiskId();
				}else{
					mainNo = intimation.getInsured().getInsuredId();
				}
				Map<String, Double> values = calcService.getGmcCorpBufferASIForRegister(SHAConstants.PRC_BUFFERTYPE_CB,intimation.getPolicy().getPolicyNumber(),intimation.getInsured().getKey(),mainNo,claimByKey.getKey());
				
				if(values != null && !values.isEmpty()){
					if(values.get(SHAConstants.LN_POLICY_BUFFER_SI) != null){
						preauthDTO.getPreauthDataExtractionDetails().setCorpBufferSI(values.get(SHAConstants.LN_POLICY_BUFFER_SI));	
					}
					if(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT) != null){
						preauthDTO.getPreauthDataExtractionDetails().setCorpBufferUtilisedAmt(values.get(SHAConstants.LN_BUFFER_UTILISED_AMT));	
					}
					if(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) != null){
						preauthDTO.getPreauthDataExtractionDetails().setCorpBufferLimit(values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT));	
					}
					if(values.get(SHAConstants.LN_INSURED_UTIL_AMT) != null &&
							values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) !=null){
						Double avlbBalance = values.get(SHAConstants.LN_INSURED_ALLOCATE_AMT) - values.get(SHAConstants.LN_INSURED_UTIL_AMT);
						preauthDTO.getPreauthDataExtractionDetails().setCorpBufferAvalBal(avlbBalance);
					}		
				}
					
				Map<String, Integer> productBenefitMap = calcService.getProductBenefitFlag(
						claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
						.getProduct().getKey());
				
				if(productBenefitMap != null && productBenefitMap.containsKey(SHAConstants.OTHER_BENEFITS_FLAG) && productBenefitMap.get(SHAConstants.OTHER_BENEFITS_FLAG) != null){
					
					int benefitFlag = (int)productBenefitMap.get(SHAConstants.OTHER_BENEFITS_FLAG);
					
					preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(benefitFlag);
				}
				else{
					preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(0);
				}
				
				if(ReferenceTable.JET_PRIVILEGE_PRODUCT.equals(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())){
					preauthDTO.getPreauthDataExtractionDetails().setOtherBeneitApplicableFlag(0);
				}
				
				if(claimByKey!=null){
					
					Long hospital = claimByKey.getIntimation().getHospital();
					Hospitals hospitalById = hospitalService.getHospitalById(hospital);
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
						preauthDTO.setIsSuspicious(hospitalById.getSuspiciousType());
						if(hospitalById!=null && hospitalById.getSuspiciousType()!=null && !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")){
							preauthDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
						}
					}
				}
				
				Boolean policyValidation = policyService.getPolicyValidationObject(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
				preauthDTO.setIsPolicyValidate(policyValidation);			
				
				Product product = preauthDTO.getNewIntimationDTO().getPolicy()
						.getProduct();
				if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())){
					List<UpdateOtherClaimDetailDTO> updateOtherClaimDetails = preauthService.getUpdateOtherClaimDetails(preauthDTO.getNewIntimationDTO().getPolicy().getKey(),preauthDTO);
					preauthDTO.setUpdateOtherClaimDetailDTO(updateOtherClaimDetails);
				}
				
				Boolean popupMessagesForProduct = calcService.getPOPUPMessagesForProduct(preauthDTO.getNewIntimationDTO().getPolicy().getKey(), claimByKey.getIntimation().getInsured().getKey(), claimByKey.getIntimation().getPolicy().getProduct().getKey());
				preauthDTO.setIsChangeInsumInsuredAlert(popupMessagesForProduct);
				List<InsuredPedDetails> pedByInsured = policyService.getPEDByInsured(preauthDTO.getNewIntimationDTO().getInsuredPatient().getInsuredId());
				List<PreExistingDisease> approvedPedByInsured = policyService.getPedList(preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
				
				preauthDTO.setInsuredPedDetails(pedByInsured);
				preauthDTO.setApprovedPedDetails(approvedPedByInsured);
				
				preauthDTO.setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
				preauthDTO.setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
				preauthDTO.setCrmFlagged(claimByKey.getCrcFlag());
				
				preauthDTO.setVipCustomer(claimByKey.getIsVipCustomer());
				preauthDTO.setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());
				
				Policy policy = preauthDTO.getNewIntimationDTO().getPolicy();
				
				if(ReferenceTable.getGMCProductList().containsKey(policy.getProduct().getKey())){
					List<SelectValue> duplicateInsuredDetails =calcService.getDuplicateInsuredDetails(policy.getKey(), preauthDTO.getNewIntimationDTO().getInsuredPatient().getKey());
					preauthDTO.setDuplicateInsuredList(duplicateInsuredDetails);
				}
				String topAlertFlag = claimService.getTopUpPolicyDetails(policy.getPolicyNumber(),preauthDTO);
				preauthDTO.setTopUpPolicyAlertFlag(topAlertFlag);
				
				Boolean isZUAQueryAvailable = masterService.getZUAQueryDetails(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());		
				if(null != isZUAQueryAvailable){
					
					preauthDTO.setIsZUAQueryAvailable(isZUAQueryAvailable);
				}
				preauthDTO.getPreauthMedicalDecisionDetails().setIsFvrIntiated(preauthService.getFVRStatusIdByClaimKey(preauthDTO.getClaimKey()));
//				if(null != preauthDTO.getNewIntimationDTO().getIsTataPolicy() && preauthDTO.getNewIntimationDTO().getIsTataPolicy()){
					preauthDTO.getPreauthDataExtractionDetails().setAdmissionDate(preauthDTO.getNewIntimationDTO().getAdmissionDate());
//				}
					
				//IMSSUPPOR-31532	
				if(preauthDTO.getNewIntimationDTO() != null && preauthDTO.getNewIntimationDTO().getPolicy() != null &&
					preauthDTO.getNewIntimationDTO().getPolicy().getKey() != null){
					Long claimCount = preauthService.getClaimCount(preauthDTO.getNewIntimationDTO().getPolicy().getKey());
					if(claimCount != null){
						preauthDTO.setClaimCount(claimCount);
					}
				}
				
				//added for retail byepass case .due to approval button diabled in process preauth- by noufel
                if(preauthDTO.getNewIntimationDTO() != null && preauthDTO.getNewIntimationDTO().getPolicy() != null &&
                                preauthDTO.getNewIntimationDTO().getPolicy().getKey() != null){
                        String maternityFlag=calcService.getMaternityFlagForProduct(preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
                        if(maternityFlag != null && maternityFlag.equalsIgnoreCase("Y")){
                                preauthDTO.setMaternityFlag(true);
                        }
                }
				
                //added for installment payment process in policy level and product level check  
                Map<String, String> getPolicyInstallment = calcService.getInstallmentPaymentFlag(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber(),preauthDTO.getNewIntimationDTO().getPolicy().getProduct().getKey());
                if(getPolicyInstallment != null && !getPolicyInstallment.isEmpty()){
                	preauthDTO.setPolicyInstalmentFlag(getPolicyInstallment.get(SHAConstants.FLAG) != null ? getPolicyInstallment.get(SHAConstants.FLAG) : "N");
                	preauthDTO.setPolicyInstalmentMsg(getPolicyInstallment.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) != null ? getPolicyInstallment.get(SHAConstants.POLICY_INSTALMENT_MESSAGE) : null);
                }
                
                if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
                	PremiaService premiaService = new PremiaService();
        			Integer policyInstallmentAmount = premiaService.getPolicyInstallmentAmount(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
        			preauthDTO.setPolicyInstalmentPremiumAmt(policyInstallmentAmount.doubleValue());	
                }
                if(preauthDTO.getPolicyInstalmentFlag() != null && preauthDTO.getPolicyInstalmentFlag().equals(SHAConstants.YES_FLAG)){
                	PremiaService premiaService = new PremiaService();
        			String policyDueDate = premiaService.getPolicyInstallmentDetails(preauthDTO.getNewIntimationDTO().getPolicy().getPolicyNumber());
        			preauthDTO.setPolicyInstalmentDueDate(SHAUtils.dateformatFromString(policyDueDate.toString()));	
                }
                
              //Portal Flag updated in cashless table
        		if(tableDTO.getNhpUpdDocumentKey() != null){
        			preauthDTO.setNhpUpdKey(tableDTO.getNhpUpdDocumentKey());
        		}
        		
        		 if(claimByKey.getIcacFlag() != null && claimByKey.getIcacFlag().equalsIgnoreCase(SHAConstants.YES_FLAG)){
                	 preauthDTO.setIcacProcessFlag(SHAConstants.YES_FLAG);
                 }
                 
                
				view.setPreauthWizardView(PreauthWizard.class, preauthDTO,
						(Boolean) parameters.getSecondaryParameter(0, Boolean.class));
				
				 Date endDate = new Date();
				 log.info("%%%%%%%%%%%%%%%%%%%%%% ENDING TIME FOR DB FETCHING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+endDate);
				 
				 log.info("%%%%%%%%%%%%%%%%%%%%%% TOTAL TIME FOR DB FETCHING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"+SHAUtils.getDurationFromTwoDate(startDate, endDate));
				
			}
		}
		
		protected void showGmcAutomailer(
				@Observes @CDIEvent(MenuItemBean.GMC_AUTOMAILER) final ParameterDTO parameters) {
			view.setGmcAutomailer(
					GmcAutomailerView.class);
		}
		
		protected void showCVCAuditScreen(
				@Observes @CDIEvent(MenuItemBean.CVC_AUDIT) final ParameterDTO parameters) {
			
			String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);	
			
			view.setViewCVCAudit(SearchCVCView.class, true);
			
		}
		
		protected void showCVCAuditWizard(
				@Observes @CDIEvent(MenuPresenter.CVC_AUDIT_WIZARD) final ParameterDTO parameters) {
			SearchCVCTableDTO tableDto = (SearchCVCTableDTO) parameters
					.getPrimaryParameter();
			
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			
			ClaimDto claimDTO = null;
			if (tableDto != null) {
				
				Claim claimByKey = claimService.getClaimByKey(tableDto.getClaimKey());
				log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> SHOW CVC AUDIT INTIMATIONDTO START %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+tableDto.getClaimKey()+"%%%------>"+ new Date());
				newIntimationDto = intimationService.getIntimationDto(claimByKey.getIntimation());
				log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> SHOW CVC AUDIT INTIMATIONDTO END%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+tableDto.getClaimKey()+"%%%------>"+ new Date());
				claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKey);
				Preauth latestPreauthByClaim = null;
				if (claimDTO.getClaimType() != null
						&& claimDTO.getClaimType().getId()
								.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
					latestPreauthByClaim = preauthService
							.getLatestPreauthByClaim(claimDTO.getKey());
					if(null != latestPreauthByClaim){
						claimDTO.setCashlessAppAmt(latestPreauthByClaim
								.getTotalApprovalAmount());
					}
				}
			
				
				claimDTO.setNewIntimationDto(newIntimationDto);
			
			//IMSSUPPOR-31178 - Duplicate call hence removed
			/*if (claimByKey != null) {
				newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				
				claimDTO.setNewIntimationDto(newIntimationDto);
				
			}*/
			
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDto.getUsername());
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
		//	loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_UPLOAD_INVESTIGATION);
			
			tableDto.setRrcDto(rrcDTO);
			
			//IMSSUPPOR-27597
			if(latestPreauthByClaim != null){
				claimDTO.setCashlessAppAmt(latestPreauthByClaim
						.getTotalApprovalAmount());
			}
			
			// R1045
			tableDto.setPreauthDto(new PreauthDTO());
			tableDto.getPreauthDto().setNewIntimationDTO(newIntimationDto);
			tableDto.getPreauthDto().setClaimDTO(claimDTO);
			
			//IMSSUPPOR-27597
			String diagnosisForPreauthByKey = "";
			if(tableDto.getTransactionKey() != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(tableDto.getTransactionKey());
				
			}
			tableDto.getPreauthDto().getNewIntimationDTO().setDiagnosis(diagnosisForPreauthByKey);
			
			
			//R1152
	    	if(newIntimationDto.getHospitalDto() != null && newIntimationDto.getHospitalDto().getCpuId() != null && newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getHomeOfficeCode() != null){
				TmpCPUCode cpu = rodService.getCpuDetails(newIntimationDto.getHospitalDto().getCpuId());
				OrganaizationUnit branch = rodService.getBranchCode(newIntimationDto.getPolicy().getHomeOfficeCode());
				if(cpu != null && branch != null && branch.getCpuCode() != null){
					if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
						//tableDto.setIsGeoSame(Boolean.FALSE);
					}
				}
			}
	    	
	    	if (null != claimByKey && claimByKey.getLobId() != null && claimByKey.getLobId().equals(ReferenceTable.PA_LOB_KEY)) {
	    		
	    		if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.CASHLESS_CHAR)) {
		    		Preauth preauthByClaim = preauthService.getPreauthById(tableDto.getTransactionKey());
		    		if (null != preauthByClaim) {
		    			tableDto.setClaimedAmount(preauthByClaim.getClaimedAmt().toString());
		    		}
		    	}
		    	if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.REIMBURSEMENT_CHAR)) {
		    		
		    		PABenefitsCovers paBenefitsListByRodKey = paSearchProcessClaimBillingService.getPABenefitsBillAmountByRodKey(tableDto.getTransactionKey());
			    	if (null != paBenefitsListByRodKey) {
			    		tableDto.setClaimedAmount(paBenefitsListByRodKey.getBillAmount().toString());
			    	}
			    	
			    	List<RODBillDetails> billEntryDetails = ackDocReceivedService.getBillEntryDetails(tableDto.getTransactionKey());
					if(billEntryDetails != null && !billEntryDetails.isEmpty()){
						Double billAmount = 0d;
						for (RODBillDetails rodBillDetails : billEntryDetails) {
							billAmount += rodBillDetails.getClaimedAmountBills() != null ?  rodBillDetails.getClaimedAmountBills() : 0d;
						}
						tableDto.setClaimedAmount(billAmount.toString());
					}
		    		
		    	}
	    	} else {

		    	if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.CASHLESS_CHAR)) {
		    		Preauth preauthByClaim = preauthService.getPreauthById(tableDto.getTransactionKey());
		    		if (null != preauthByClaim) {
		    			tableDto.setClaimedAmount(preauthByClaim.getClaimedAmt().toString());
		    		}
		    	}
		    	if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.REIMBURSEMENT_CHAR)) {
			    	List<RODBillDetails> billEntryDetails = ackDocReceivedService.getBillEntryDetails(tableDto.getTransactionKey());
					if(billEntryDetails != null && !billEntryDetails.isEmpty()){
						Double billAmount = 0d;
						for (RODBillDetails rodBillDetails : billEntryDetails) {
							billAmount += rodBillDetails.getClaimedAmountBills() != null ?  rodBillDetails.getClaimedAmountBills() : 0d;
						}
						tableDto.setClaimedAmount(billAmount.toString());
					}
		    		
		    	}
	    	}
				
			view.setCVCWizardView(CVCPageView.class,
					true, tableDto);
		}
	}
		
		protected void showCVCAuditActionWizard(
				@Observes @CDIEvent(MenuPresenter.CVC_AUDIT_ACTION_PROCESSING_WIZARD) final ParameterDTO parameters) {
			SearchCVCAuditActionTableDTO tableDto = (SearchCVCAuditActionTableDTO) parameters
					.getPrimaryParameter();
			
			ImsUser imsUser = null;
			String[] userRoles = null;
			if(VaadinSession.getCurrent().getAttribute(BPMClientContext.USER_OBJECT) != null) {
				imsUser = (ImsUser) VaadinSession.getCurrent().getAttribute(BPMClientContext.USER_OBJECT);
				userRoles = imsUser.getUserRoleList();
			}
			
			if(Arrays.asList(userRoles).contains(MenuPresenter.USER_ROLE_CVC_AUDIT)) { //CLM_CVC_AUDIT_NORMAL_USER
				tableDto.setClmAuditHeadUser(false);
			}

			if(Arrays.asList(userRoles).contains(MenuPresenter.USER_ROLE_CVC_AUDIT_CLUSTER_HEAD) ) {  //CLM_CVC_AUDIT_CLUSTER_HEAD_USER
				tableDto.setClmAuditHeadUser(true);
			}
			cvcActionService.updateCVCLockKey(tableDto);
			
			List<ClaimAuditQuery> auditQrylist = cvcActionService.getQrylistByAuditKey(tableDto.getAuditKey());
			List<SearchCVCAuditClsQryTableDTO> clsQryList = new ArrayList<SearchCVCAuditClsQryTableDTO>();
			List<SearchCVCAuditClsQryTableDTO> medicalQryList = new ArrayList<SearchCVCAuditClsQryTableDTO>();
			List<SearchCVCAuditClsQryTableDTO> billingFaQryList = new ArrayList<SearchCVCAuditClsQryTableDTO>();
			
			if(null != auditQrylist && !auditQrylist.isEmpty() ){
				SearchCVCAuditClsQryTableDTO auditQryDto = null;
				TmpEmployee employeeName = null;
				for (ClaimAuditQuery claimAuditQuery : auditQrylist) {
					
					if(claimAuditQuery.getReplyby() != null){
					employeeName = masterService.getEmployeeName(claimAuditQuery.getReplyby().toLowerCase());
					}
					if(claimAuditQuery.getTeamName().toLowerCase().contains(SHAConstants.AUDIT_TEAM_CASHLESS.toLowerCase())){
						auditQryDto = new SearchCVCAuditClsQryTableDTO(claimAuditQuery);
						auditQryDto.setClmAuditHeadUser(tableDto.isClmAuditHeadUser());
						if(employeeName != null && claimAuditQuery.getReplyby() != null){
							auditQryDto.setClsQryReplyBy(claimAuditQuery.getReplyby() + (employeeName.getEmpFirstName() != null ? ("-"+employeeName.getEmpFirstName()) : ""));							
						}
						clsQryList.add(auditQryDto);
					}
					else if(claimAuditQuery.getTeamName().toLowerCase().contains(SHAConstants.AUDIT_TEAM_MEDICAL.toLowerCase())){
						auditQryDto = new SearchCVCAuditClsQryTableDTO(claimAuditQuery);
						auditQryDto.setClmAuditHeadUser(tableDto.isClmAuditHeadUser());
						if(employeeName != null && claimAuditQuery.getReplyby() != null){
							auditQryDto.setMedicalAuditQryReplyBy(claimAuditQuery.getReplyby() + (employeeName.getEmpFirstName() != null ? ("-"+employeeName.getEmpFirstName()) : ""));							
						}
						medicalQryList.add(auditQryDto);
					}
					else if(claimAuditQuery.getTeamName().toLowerCase().contains(SHAConstants.AUDIT_TEAM_BILLING.toLowerCase())
							|| claimAuditQuery.getTeamName().toLowerCase().contains(SHAConstants.AUDIT_TEAM_FINANCIAL.toLowerCase())){
						auditQryDto = new SearchCVCAuditClsQryTableDTO(claimAuditQuery);
						auditQryDto.setClmAuditHeadUser(tableDto.isClmAuditHeadUser());
						if(employeeName != null && claimAuditQuery.getReplyby() != null){
							auditQryDto.setBillinFaAuditQryReplyBy(claimAuditQuery.getReplyby() + (employeeName.getEmpFirstName() != null ? ("-"+employeeName.getEmpFirstName()) : ""));							
						}
						billingFaQryList.add(auditQryDto);
					}
				}
				
			}
			tableDto.setClsQryList(clsQryList);
			tableDto.setMedicalQryList(medicalQryList);
			tableDto.setBillingFaQryList(billingFaQryList);
			
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			
			ClaimDto claimDTO = null;
			if (tableDto != null) {
				
				Claim claimByKey = claimService.getClaimByKey(tableDto.getClaimKey());
				newIntimationDto = intimationService.getIntimationDto(claimByKey.getIntimation());
				claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKey);
				Preauth latestPreauthByClaim = null;
				if (claimDTO.getClaimType() != null
						&& claimDTO.getClaimType().getId()
								.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
					latestPreauthByClaim = preauthService
							.getLatestPreauthByClaim(claimDTO.getKey());
					if(null != latestPreauthByClaim){
						claimDTO.setCashlessAppAmt(latestPreauthByClaim
								.getTotalApprovalAmount());
					}
				}
				claimDTO.setNewIntimationDto(newIntimationDto);
					
			if (claimByKey != null) {
				newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				
				claimDTO.setNewIntimationDto(newIntimationDto);
				
			}
			
			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDto.getUsername());
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
							.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			
			tableDto.setRrcDto(rrcDTO);
			
			if(latestPreauthByClaim != null){
				claimDTO.setCashlessAppAmt(latestPreauthByClaim
						.getTotalApprovalAmount());
			}
			
			// R1045
			tableDto.setPreauthDto(new PreauthDTO());
			tableDto.getPreauthDto().setNewIntimationDTO(newIntimationDto);
			tableDto.getPreauthDto().setClaimDTO(claimDTO);
			
			String diagnosisForPreauthByKey = "";
			if(tableDto.getTransactionKey() != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(tableDto.getTransactionKey());
				
			}
			tableDto.getPreauthDto().getNewIntimationDTO().setDiagnosis(diagnosisForPreauthByKey);
			
			
			//R1152
	    	if(newIntimationDto.getHospitalDto() != null && newIntimationDto.getHospitalDto().getCpuId() != null && newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getHomeOfficeCode() != null){
				TmpCPUCode cpu = rodService.getCpuDetails(newIntimationDto.getHospitalDto().getCpuId());
				OrganaizationUnit branch = rodService.getBranchCode(newIntimationDto.getPolicy().getHomeOfficeCode());
				if(cpu != null && branch != null && branch.getCpuCode() != null){
					if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
					}
				}
			}
	    	
	    	if (null != claimByKey && claimByKey.getLobId() != null && claimByKey.getLobId().equals(ReferenceTable.PA_LOB_KEY)) {
	    		
	    		if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.CASHLESS_STRING)) {
		    		Preauth preauthByClaim = preauthService.getPreauthById(tableDto.getTransactionKey());
		    		if (null != preauthByClaim) {
		    			tableDto.setClaimedAmount(preauthByClaim.getClaimedAmt().toString());
		    		}
		    	}
		    	if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.REIMBURSEMENT_STRING)) {
		    		
		    		PABenefitsCovers paBenefitsListByRodKey = paSearchProcessClaimBillingService.getPABenefitsBillAmountByRodKey(tableDto.getTransactionKey());
			    	if (null != paBenefitsListByRodKey) {
			    		tableDto.setClaimedAmount(paBenefitsListByRodKey.getBillAmount().toString());
			    	}
			    	
			    	List<RODBillDetails> billEntryDetails = ackDocReceivedService.getBillEntryDetails(tableDto.getTransactionKey());
					if(billEntryDetails != null && !billEntryDetails.isEmpty()){
						Double billAmount = 0d;
						for (RODBillDetails rodBillDetails : billEntryDetails) {
							billAmount += rodBillDetails.getClaimedAmountBills() != null ?  rodBillDetails.getClaimedAmountBills() : 0d;
						}
						tableDto.setClaimedAmount(billAmount.toString());
					}
		    		
		    	}
	    	} else {

		    	if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.CASHLESS_STRING)) {
		    		Preauth preauthByClaim = preauthService.getPreauthById(tableDto.getTransactionKey());
		    		if (null != preauthByClaim) {
		    			tableDto.setClaimedAmount(preauthByClaim.getClaimedAmt().toString());
		    		}
		    	}
		    	if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.REIMBURSEMENT_STRING)) {
			    	List<RODBillDetails> billEntryDetails = ackDocReceivedService.getBillEntryDetails(tableDto.getTransactionKey());
					if(billEntryDetails != null && !billEntryDetails.isEmpty()){
						Double billAmount = 0d;
						for (RODBillDetails rodBillDetails : billEntryDetails) {
							billAmount += rodBillDetails.getClaimedAmountBills() != null ?  rodBillDetails.getClaimedAmountBills() : 0d;
						}
						tableDto.setClaimedAmount(billAmount.toString());
					}
		    		
		    	}
	    	}
				
			view.setCVCAuditActionWizardView(CVCAuditActionPageView.class,
					true, tableDto);
		}
	}
		
		protected void showViewCVCAuditActionSearch(
				@Observes @CDIEvent(MenuItemBean.CVC_AUDIT_ACTION_PROCESSING) final ParameterDTO parameters){
			
			String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
			
			MasClmAuditUserMapping clmAuditUser = masterService.getAuditUserByEmpId(userId);
			
			view.setViewCVCAuditActionSearch(SearchCVCAuditActionView.class, true);
		}
		
	private String getBillClassificationValue(DocAcknowledgement docAck) {
			StringBuilder strBuilder = new StringBuilder();
			// StringBuilder amtBuilder = new StringBuilder();
			// Double total = 0d;
			try {
				if (("Y").equals(docAck.getHospitalisationFlag())) {
					strBuilder.append("Hospitalization");
					strBuilder.append(",");
				}
				if (("Y").equals(docAck.getPreHospitalisationFlag())) {
					strBuilder.append("Pre-Hospitalization");
					strBuilder.append(",");
				}
				if (("Y").equals(docAck.getPostHospitalisationFlag())) {
					strBuilder.append("Post-Hospitalization");
					strBuilder.append(",");
				}

				if (("Y").equals(docAck.getPartialHospitalisationFlag())) {
					strBuilder.append("Partial-Hospitalization");
					strBuilder.append(",");
				}

				if (("Y").equals(docAck.getLumpsumAmountFlag())) {
					strBuilder.append("Lumpsum Amount");
					strBuilder.append(",");

				}
				if (("Y").equals(docAck.getHospitalCashFlag())) {
					strBuilder.append("Add on Benefits (Hospital cash)");
					strBuilder.append(",");

				}
				if (("Y").equals(docAck.getPatientCareFlag())) {
					strBuilder.append("Add on Benefits (Patient Care)");
					strBuilder.append(",");
				}
				if (("Y").equals(docAck.getHospitalizationRepeatFlag())) {
					strBuilder.append("Hospitalization Repeat");
					strBuilder.append(",");
				}
				
				if (("Y").equals(docAck.getCompassionateTravel())) {
					strBuilder.append("Compassionate Travel");
					strBuilder.append(",");
				}
				
				if (("Y").equals(docAck.getRepatriationOfMortalRemain())) {
					strBuilder.append("Repatriation Of Mortal Remains");
					strBuilder.append(",");
				}
				
				if(null != docAck.getClaim()&& docAck.getClaim().getIntimation() != null && docAck.getClaim().getIntimation().getPolicy() != null &&
						(ReferenceTable.FHO_REVISED_PRODUCT_2021_KEY.equals(docAck.getClaim().getIntimation().getPolicy().getProduct().getKey())
								|| ReferenceTable.getValuableServiceProviderForFHO().containsKey(docAck.getClaim().getIntimation().getPolicy().getProduct().getKey()))){
					if (("Y").equals(docAck.getPreferredNetworkHospita())) {
						strBuilder.append("Valuable Service Provider (Hospital)");
						strBuilder.append(",");
					}
				}
				else{ 
					if (("Y").equals(docAck.getPreferredNetworkHospita())) {
						strBuilder.append("Preferred Network Hospital");
						strBuilder.append(",");
					}
				}
				
				if (("Y").equals(docAck.getSharedAccomodation())) {
					strBuilder.append("Shared Accomodation");
					strBuilder.append(",");
				}
				
				if (("Y").equals(docAck.getEmergencyMedicalEvaluation())) {
					strBuilder.append("Emergency Medical Evacuation");
					strBuilder.append(",");
				}
				// rodQueryDTO.setClaimedAmount(total);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return strBuilder.toString();
		}
	
	//added for new product
	protected void showMedicalProcessClaimRequestBenefitsWizard(
			SearchProcessClaimRequestTableDTO tableDTO, PreauthDTO reimbursementDTO) {

		// SearchProcessClaimBillingTableDTO tableDTO =
		// (SearchProcessClaimBillingTableDTO)parameters.getPrimaryParameter();
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();

		Long rodKey = tableDTO.getRodKey();// = 7006l;
		// Long rodKey = 5155l;
		Long claimKey = tableDTO.getClaimKey();
		// Long claimKey = 4042l;
		// rodDTO.setHumanTask(tableDTO.getHumanTaskListDTO());

		populateDocumentDetails(rodDTO, rodKey,
				ReferenceTable.CLAIM_BILLING_BENEFITS);

		Claim claimByKey = claimService.getClaimByKey(claimKey);
		

		NewIntimationDto newIntimationDto = new NewIntimationDto();
		if (claimByKey != null) {
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());

			ClaimDto claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKey);
			
			if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				 Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
				 claimDTO.setCashlessAppAmt(latestPreauthByClaim.getTotalApprovalAmount());
			 }
			claimDTO.setNewIntimationDto(newIntimationDto);
			rodDTO.setClaimDTO(claimDTO);
			rodDTO.setPreauthDTO(reimbursementDTO);
		}

		rodDTO.getUploadDocumentsDTO().setAdmissionDate(rodDTO.getClaimDTO().getNewIntimationDto().getAdmissionDate());
		Reimbursement objReimbursement = createRodService.getReimbursementObjectByKey(rodKey);
		if(null != objReimbursement)
		{
			rodDTO.getUploadDocumentsDTO().setDischargeDate(objReimbursement.getDateOfDischarge());
			
			//MED-PRD-076
			rodDTO.getDocumentDetails().setDateOfAdmission(objReimbursement.getDateOfAdmission());
			rodDTO.getDocumentDetails().setDateOfDischarge(objReimbursement.getDateOfDischarge());
		}

		List<Double> copayValue = calcService.getProductCoPay(rodDTO
				.getClaimDTO().getNewIntimationDto().getPolicy().getProduct()
				.getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
				.getInsuredPatient().getKey(), rodDTO.getClaimDTO().getNewIntimationDto()
				.getInsuredPatient().getInsuredId(),rodDTO.getNewIntimationDTO());
		rodDTO.setProductCoPay(copayValue);

		List<AddOnBenefitsDTO> addOnBenefitsDTO = claimRequestBenefitsService
				.populateAddOnBenefitsTableValues(rodDTO.getClaimDTO()
						.getNewIntimationDto(), claimKey, rodKey, copayValue,null);
		if (null != addOnBenefitsDTO && !addOnBenefitsDTO.isEmpty()) {
			rodDTO.setAddOnBenefitsDTO(addOnBenefitsDTO);
		}

		rodDTO.setProductBenefitMap(calcService.getProductBenefitFlag(
				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
						.getProduct().getKey()));
		rodDTO.setStrUserName(tableDTO.getUsername());
		rodDTO.setStrPassword(tableDTO.getPassword());
	//	rodDTO.setHumanTask(tableDTO.getHumanTaskDTO());
		rodDTO.getDocumentDetails().setRodKey(rodKey);
		
		Reimbursement reimbursement = createRodService.getReimbursementObjectByKey(rodKey);
		if(null != reimbursement)
		{
			if(ReferenceTable.PAYMENT_MODE_CHEQUE_DD.equals(reimbursement.getPaymentModeId()))
			{
				rodDTO.getDocumentDetails().setPaymentMode(true);
				
			}
			else if(ReferenceTable.PAYMENT_MODE_BANK_TRANSFER.equals(reimbursement.getPaymentModeId()))
			{
				rodDTO.getDocumentDetails().setPaymentMode(false);
				rodDTO.getDocumentDetails().setAccountNo(reimbursement.getAccountNumber());
				BankMaster bankDetails = masterService.getBankDetailsByKey(reimbursement.getBankId());
				if(null != bankDetails)
				{
					rodDTO.getDocumentDetails().setIfscCode(bankDetails.getIfscCode());
					rodDTO.getDocumentDetails().setBankName(bankDetails.getBankName());
					rodDTO.getDocumentDetails().setCity(bankDetails.getCity());
					rodDTO.getDocumentDetails().setBranch(bankDetails.getBranchName());	
				}				
			}
			rodDTO.getDocumentDetails().setEmailId(reimbursement.getPayeeEmailId());
			rodDTO.getDocumentDetails().setPanNo(reimbursement.getPanNumber());
			rodDTO.getDocumentDetails().setPayableAt(reimbursement.getPayableAt());
			rodDTO.getDocumentDetails().setReasonForChange(reimbursement.getReasonForChange());
			rodDTO.getDocumentDetails().setLegalFirstName(reimbursement.getLegalHeirFirstName());
			rodDTO.getDocumentDetails().setPayModeChangeReason(reimbursement.getPayModeChangeReason());
		}
		
		String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
		if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
			String get64vbStatus = PremiaService.getInstance().get64VBStatus(claimByKey.getIntimation().getPolicy().getPolicyNumber(), claimByKey.getIntimation().getIntimationId());
			if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
				rodDTO.setIsDishonoured(true);
			} 
		}
		Reimbursement hospROD = reimbursementService.getHospitalizationROD(reimbursement.getClaim().getKey());
		if(null != reimbursement && null != reimbursement.getClaim() && null != reimbursement.getClaim().getClaimType()  && reimbursement.getClaim().getClaimType().getKey().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)) {
			if(hospROD == null) {
//				reimbursementDTO.setIsDishonoured(true);
				rodDTO.setIsHospitalizationRejected(true);
			}
		}
		
		Reimbursement hospitalizationOrPartialROD = reimbursementService.getHospitalizationOrPartialROD(reimbursement.getClaim().getKey());
		
		if(null != reimbursement && null != reimbursement.getClaim() && null != reimbursement.getClaim().getClaimType()  && reimbursement.getClaim().getClaimType().getKey().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
		//if(reimbursementDTO.getClaimDTO().getClaimType() != null && reimbursementDTO.getClaimDTO().getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
			
			Integer seqNumber = 0;
			
			if(reimbursement.getRodNumber() != null){
				String[] split = reimbursement.getRodNumber().split("/");
				seqNumber = Integer.valueOf(split[split.length - 1]);
			}
			
			if(hospitalizationOrPartialROD == null && ! seqNumber.equals(1)) {
				rodDTO.setIsDishonoured(true);
				rodDTO.setIsHospitalizationRejected(true);
			}
		}
		rodDTO.setIsBillingScreen(false);
		rodDTO.setIsMedicalScreen(true);
		rodDTO.setDbOutArray(tableDTO.getDbOutArray());
		reimbursementDTO.setReceiptOfDocumentsDTO(rodDTO);
		
		if(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode() != null &&  reimbursementDTO.getNewIntimationDTO().getPolicy()
				.getProduct().getCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_076)
				/*|| reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode() != null && 
				reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.GROUP_HOSPITAL_CASH_POLICY)*/){
			reimbursementDTO.getPreauthDataExtractionDetails().setPatientDayCareDueTo(rodDTO.getDocumentDetails().getPatientDayCareDueTo());
			reimbursementDTO.getPreauthDataExtractionDetails().setPatientDayCare(rodDTO.getDocumentDetails().getPatientDayCare());
			reimbursementDTO.getPreauthDataExtractionDetails().setHospitalCashDueTo(rodDTO.getDocumentDetails().getHospitalCashDueTo());
			view.setProcessClaimRequest(ClaimRequestWizard.class, reimbursementDTO);
		}else{
			view.setProcessClaimRequestBenefitsWizard(
					ProcessClaimRequestBenefitsWizard.class, rodDTO);
		}
	}
	
	
	protected void showSettlementProcessOutpatientClaim(
			@Observes @CDIEvent(MenuItemBean.CREATE_SETTLEMENT_BATCH_OP) final ParameterDTO parameters) {
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = calcService.getTmpCpuCodeListByUser(userId);
		BeanItemContainer<SelectValue> selectValueContainerForType = masterService.getSelectValueContainer(ReferenceTable.CLAIM_TYPE);	
		BeanItemContainer<SelectValue> selectValueContainerForClaimant = masterService.getSelectValueContainer(ReferenceTable.ACK_DOC_RECEIVED_FROM);	
		BeanItemContainer<SelectValue> selectValueContainerForClaimType = masterService.getClaimTypeContainer(ReferenceTable.CLAIM_TYPE);	
		BeanItemContainer<SelectValue> selectValueContainerForPaymentStatus = masterService.getPaymentStatusValue(ReferenceTable.PAYMENT_STATUS);
		BeanItemContainer<SpecialSelectValue> selectValueContainerForProduct = masterService.getContainerForProduct();
		BeanItemContainer<SelectValue> selectValueContainerForPaymentMode = masterService.getPaymentModeContainer(ReferenceTable.PAYMENT_MODE);
		BeanItemContainer<SelectValue> selectValueContainerForDocVerified = masterService.getPaymentStatusValue(ReferenceTable.DOCVERIFY);
		BeanItemContainer<SelectValue> selectValueContainerForPIOCode = masterService.getSelectValueContainerForPIOCode();
		//
		view.setViewSettlementProcessClaimClaimOP(SearchSettlementLetterProcessOPClaimRequestView.class, selectValueContainerForCPUCode,selectValueContainerForType,selectValueContainerForClaimant,selectValueContainerForClaimType,
				selectValueContainerForPaymentStatus,selectValueContainerForProduct,selectValueContainerForDocVerified,selectValueContainerForPaymentMode,selectValueContainerForPIOCode,true);
	}
	
	//Hold Monitor FLP
	protected void showHoldMonitorFLPScreen(@Observes @CDIEvent(MenuItemBean.HOLD_MONITOR_FLP_SCREEN) final ParameterDTO parameters) {
		SearchHoldMonitorScreenFormDTO searchFormDto = (SearchHoldMonitorScreenFormDTO) parameters.getPrimaryParameter();
		SelectValue selectValue8 = new SelectValue();
		selectValue8.setId(101l);
		selectValue8.setValue("First Level Preauth");
		
		SelectValue selectValue9 = new SelectValue();
		selectValue9.setId(102l);
		selectValue9.setValue("First Level Enhancement");
		
		BeanItemContainer<SelectValue> type = new BeanItemContainer<SelectValue>(SelectValue.class);
		type.addBean(selectValue8);
		type.addBean(selectValue9);
		
		BeanItemContainer<SelectValue> userList = masterService.getRefferedByDocList();
		BeanItemContainer<SelectValue> cpuCode = masterService.getTmpCpuCodes();
		view.setViewHoldMonitorFLPScreen(SearchHoldMonitorFLPScreenView.class,true,type,userList,cpuCode);
	}
	
	protected void showRecordMarketingEscalation(
			@Observes @CDIEvent(MenuItemBean.RECORD_MARKETING_ESCALATION) final ParameterDTO parameters) {
		view.setViewG(SearchRecordMarkEscView.class, true);
	}
	
	protected void showRecordMarkEscProcess(
			@Observes @CDIEvent(MenuPresenter.RECORD_MARKETING_ESCALATION_PROCESS) final ParameterDTO parameters) {

		SearchRecordMarkEscTableDTO searchDTO = (SearchRecordMarkEscTableDTO) parameters
				.getPrimaryParameter();
		
		PEDQueryDTO pedQueryDto = new PEDQueryDTO();
		
		RecordMarkEscDTO recMarkEscDto = new RecordMarkEscDTO();
		
		Claim claimByKey = claimService.getClaimsByIntimationNumber(searchDTO.getIntimationNo());
		ClaimDto claimDTO = new ClaimDto();
		
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		/*if ((claimByKey != null 
				&& claimByKey.getIntimation().getPolicy().getProductType().getKey() != null 
				&& 2904 != claimByKey.getIntimation().getPolicy().getProductType().getKey().intValue())
				|| claimByKey.getIntimation().getPolicy().getProduct().getCode().equalsIgnoreCase(ReferenceTable.STAR_CRITICARE_OTHER_BANKS)) {  // Not Applicable For Group and GHI Policies CR R1212
			newIntimationDto = intimationService.getIntimationDto(claimByKey
					.getIntimation());
			
			claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
	
			claimDTO.setNewIntimationDto(newIntimationDto);
				
			pedQueryDto.setClaimDto(claimDTO);
			
			Long policyKey = claimDTO.getNewIntimationDto().getPolicy().getKey();
			
			Long insuredKey = claimDTO.getNewIntimationDto().getInsuredKey();
			
			String policyInsuredAgeingFlag = dBCalculationService.getPolicyInsuredAgeingFlag(policyKey,insuredKey);
			
			pedQueryDto.setPolicyInsuredAgeingFlag(policyInsuredAgeingFlag);*/
			
			/*if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
			{
			Intimation intimation = intimationService
					.getIntimationByKey(claimDTO.getIntimationKey());
			pedQueryDto.setDocRecievedDate(intimation.getAdmissionDate());
			
			}
			else if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.REIMBURSEMENT_CLAIM_TYPE_KEY)){
			Date docRecievedDate = dBCalculationService.getDocRecievedDate(claimByKey.getKey());
			pedQueryDto.setDocRecievedDate(docRecievedDate);
			}*/
			
			
			BeanItemContainer<SelectValue> selectValuesForICDChapter = masterService.getSelectValuesForICDChapter();
			
			BeanItemContainer<SelectValue> selectPedCodeContainer=masterService.getPedDescription();
			
		
			
			BeanItemContainer<SelectValue> selectEscRoleContainer = masterService.getSelectValueContainer(ReferenceTable.REC_MARK_ESC_ROLE);
			
			BeanItemContainer<SelectValue> selectEscReasonContainer = masterService.getSelectValueContainer(ReferenceTable.REC_MARK_ESC_REASON);
			
			pedQueryDto.setSelectIcdChapterContainer(selectValuesForICDChapter);
			pedQueryDto.setSelectPedCodeContainer(selectPedCodeContainer);
			
			recMarkEscDto.setEscalatedRoleContainer(selectEscRoleContainer);
			recMarkEscDto.setEscalationReasonContainer(selectEscReasonContainer);
			
			if(claimByKey != null){
				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
			}
			
			claimDTO.setNewIntimationDto(newIntimationDto);
				
			recMarkEscDto.setClaimDTO(claimDTO);
			
			PreauthDTO preauthDto =  new PreauthDTO();
			//PreauthDTO preauthDto =  PreauthMapper.getInstance().getPreauthDTO(preauth);
			Intimation intimation = intimationService.getIntimationByNo(searchDTO.getIntimationNo());
			
			newIntimationDto = intimationService.getIntimationDto(intimation);
				
			preauthDto.setNewIntimationDTO(newIntimationDto);
			
			preauthDto.setClaimDTO(claimDTO);
			
			recMarkEscDto.setPreauthDto(preauthDto);
			/*if(claimDTO.getNewIntimationDto()!=null){
				pedQueryDto.getPreauthDTO().setNewIntimationDTO(claimDTO.getNewIntimationDto());
			}*/
			BeanItemContainer<SelectValue> insuredContainer = new BeanItemContainer<SelectValue>(SelectValue.class);
			
			/*List<Insured> insuredList = searchDTO.getInsuredList();
			SelectValue select = null;
			for (Insured insured : insuredList) {
				if(insured.getInsuredName() != null){
					select = new SelectValue();
					select.setId(insured.getKey());
					select.setValue(insured.getInsuredName());	
					insuredContainer.addBean(select);
				}
	
			}*/
			Long hospital=null;
			if(claimByKey != null && claimByKey.getIntimation() != null && claimByKey.getIntimation().getHospital() != null){
			hospital = claimByKey.getIntimation().getHospital();
			}
			Hospitals hospitalById = hospitalService.getHospitalById(hospital);
			
			/*if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
				pedQueryDto.getPreauthDTO().setIsSuspicious(hospitalById.getSuspiciousType());
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					pedQueryDto.getPreauthDTO().setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
				}
			}*/
			
			pedQueryDto.setInsuredDetailsContainer(insuredContainer);
			PolicyDto policyDTO = null;
			if(claimByKey!= null && claimByKey.getIntimation() != null && claimByKey.getIntimation().getPolicy() != null){
			policyDTO = new PolicyMapper().getPolicyDto(claimByKey.getIntimation().getPolicy());
			}
			pedQueryDto.setPolicyDto(policyDTO);
			
			Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
			pedQueryDto.setIsPolicyValidate(policyValidation);
			
			pedQueryDto.setUsername(searchDTO.getUsername());
	
			view.setrecordMarkEscView(RecMarketingEscalationView.class, recMarkEscDto);
		//}
		/*else if(claimByKey != null && claimByKey.getIntimation().getPolicy().getProductType().getKey() != null 
				&& claimByKey.getIntimation().getPolicy().getProductType().getKey() == 2904
				){
			view.showErrorPopUp("PED Work Flow Not Applicable for Group and GHI Policies.");
		}*/
	}
	
	private void loginpopup(ImsUser imsUser){

		Window popupWindow = new com.vaadin.ui.Window();
		popupWindow.setCaption("");

		Label infoLabel = new Label("<b style = 'color: black; font-size:18px'>Please select the module you would like to access. </b>", ContentMode.HTML);			
		infoLabel.setHeight("70px");
		Button cashless = new Button("Cashless");
		cashless.setStyleName("moduleSwitch");
		cashless.setWidth("145px");
		cashless.setHeight("110px");
		cashless.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 7396240433865727954L;
			@Override
			public void buttonClick(ClickEvent event) {
				view.showCashLessLoginSuccess();
			}
		});

		Button reimbursement = new Button("Reimbursement");
		reimbursement.setStyleName("moduleSwitch");
		reimbursement.setWidth("145px");
		reimbursement.setHeight("110px");
		reimbursement.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 7396240433865727954L;
			@Override
			public void buttonClick(ClickEvent event) {
				popupWindow.close();
				view.showLoginSuccess(imsUser);
			}
		});
		
		Button reports = new Button("Reports");
		reports.setStyleName("moduleSwitch");
		reports.setWidth("145px");
		reports.setHeight("110px");
		reports.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 7396240433865727954L;
			@Override
			public void buttonClick(ClickEvent event) {
				view.showReportsLoginSuccess();
			}
		});
		
		Button others = new Button("Others");
		others.setStyleName("moduleSwitch");
		others.setWidth("145px");
		others.setHeight("110px");
		others.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 7396240433865727954L;
			@Override
			public void buttonClick(ClickEvent event) {
				popupWindow.close();
				view.showLoginSuccess(imsUser);
			}
		});
		Label noteLabel = null;
		BPMClientContext bpmClientContext = new BPMClientContext();
		if(bpmClientContext.showActions() && !bpmClientContext.showReports()){
			 noteLabel = new Label(	
				    "<b style = 'color: black; font-size:14px'>&nbsp; &nbsp;<u>Note</u></b> \n" +	
				    "<ul> "+	
				    "  <li><b style = 'color: black; font-size:14px'>Cashless – All pure Cashless menus</b></li> "+	
				    "  <li><b style = 'color: black; font-size:14px'>Reimbursement - All pure Reimbursement menus – Acknowledgement to FA</b></li> "+
				    "  <li><b style = 'color: black; font-size:14px'>Reports - All pure Report menus</b></li> "+
				    "  <li><b style = 'color: black; font-size:14px'>Others (All other menus – both common ones for Cashless & Reimbursement  and special ones like audit, payment, etc.)</b></li> "+	
				    "</ul> "	
				    ,ContentMode.HTML);
		} else {
			 noteLabel = new Label(	
				    "<b style = 'color: black; font-size:14px'>&nbsp; &nbsp;<u>Note</u></b> \n" +	
				    "<ul> "+	
				    "  <li><b style = 'color: black; font-size:14px'>Cashless – All pure Cashless menus</b></li> "+	
				    "  <li><b style = 'color: black; font-size:14px'>Reimbursement - All pure Reimbursement menus – Acknowledgement to FA</b></li> "+
				    "  <li><b style = 'color: black; font-size:14px'>Others (All other menus – both common ones for Cashless & Reimbursement  and special ones like audit, payment, etc.)</b></li> "+	
				    "</ul> "	
				    ,ContentMode.HTML);
		}
		
		
		HorizontalLayout HLayout = new HorizontalLayout(infoLabel);
		
		HorizontalLayout butHolder = new HorizontalLayout();
		butHolder.addComponent(cashless);
		butHolder.addComponent(reimbursement);
		if(bpmClientContext.showActions() && !bpmClientContext.showReports()){
			butHolder.addComponent(reports);
		}
		butHolder.addComponent(others);
		butHolder.setComponentAlignment(cashless, Alignment.BOTTOM_CENTER);
		butHolder.setComponentAlignment(reimbursement, Alignment.BOTTOM_CENTER);
		if(bpmClientContext.showActions() && !bpmClientContext.showReports()){
			butHolder.setComponentAlignment(reports, Alignment.BOTTOM_CENTER);
		}
		butHolder.setComponentAlignment(others, Alignment.BOTTOM_CENTER);
		butHolder.setSpacing(true);
		butHolder.setMargin(true);
		HorizontalLayout NLayout = new HorizontalLayout(noteLabel);
		
		VerticalLayout holderLayout = new VerticalLayout();
		holderLayout.addComponent(HLayout);
		holderLayout.addComponent(butHolder);
		holderLayout.addComponent(NLayout);
		holderLayout.setSpacing(true);
		holderLayout.setComponentAlignment(HLayout, Alignment.BOTTOM_CENTER);
		holderLayout.setComponentAlignment(butHolder, Alignment.BOTTOM_CENTER);
		popupWindow.setContent(holderLayout);
		if(bpmClientContext.showActions() && !bpmClientContext.showReports()){
			popupWindow.setWidth("60%");
		} else {	
			popupWindow.setWidth("50%");
		}
		popupWindow.setHeight("50%");
		popupWindow.center();
		popupWindow.setClosable(false);
		popupWindow.setResizable(false);
		UI.getCurrent().addWindow(popupWindow);
	}
	
	protected void showHRMP(
			@Observes @CDIEvent(MenuItemBean.HRMP) final ParameterDTO parameters){
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
		
		MasClmAuditUserMapping clmAuditUser = masterService.getAuditUserByEmpId(userId);
		
		view.setHRMPSearch(SearchHRMPView.class, true);
	}
	
	protected void showHRMPWizard(
			@Observes @CDIEvent(MenuPresenter.HRMP_WIZARD) final ParameterDTO parameters) {
		SearchHRMPTableDTO tableDto = (SearchHRMPTableDTO) parameters
				.getPrimaryParameter();
    	
		view.setHRMPWizardView(HRMPWizardView.class,
				true, tableDto);
	
	}
	
	protected void showMarketingEscalationReport(
			@Observes @CDIEvent(MenuItemBean.MARKETING_ESCALATION_REPORT) final ParameterDTO parameters) {	
		view.setMarketingEscalationReportView(MarketingEscalationReportView.class, true);
	}
	protected void showStopPyamentValidationScreen(
			@Observes @CDIEvent(MenuPresenter.SHOW_STOP_PAYMENT_VALIDATION_WIZARD) final ParameterDTO parameters) {
		StopPaymentRequestDto tableDTO = (StopPaymentRequestDto) parameters.getPrimaryParameter();
		
		if(tableDTO.getPreauthDto().getClaimDTO() != null && tableDTO.getPreauthDto().getClaimDTO().getKey() != null){
			Reimbursement rembobj = preauthService.getRembiObj(tableDTO.getPreauthDto().getClaimDTO().getKey());
//			ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
			List<PedValidation> findPedValidationByPreauthKey = preauthService
					.findPedValidationByPreauthKey(rembobj.getKey());
			List<DiagnosisDetailsTableDTO> newPedValidationTableListDto =  ZonalMedicalReviewMapper.getInstance().getNewPedValidationTableListDto(findPedValidationByPreauthKey);
			for (DiagnosisDetailsTableDTO pedValidationTableDTO : newPedValidationTableListDto) {
				
				if (pedValidationTableDTO.getDiagnosisName() != null) {
					String diagnosis = masterService.getDiagnosis(pedValidationTableDTO.getDiagnosisName().getId());
					pedValidationTableDTO.setDiagnosis(diagnosis);
					pedValidationTableDTO.getDiagnosisName().setValue(diagnosis);
				}
			}
			tableDTO.getPreauthDto().getPreauthDataExtractionDetails().setDiagnosisTableList(newPedValidationTableListDto);
		}
			view.setStopPyamentValidationScreen(PopupStopPaymentValidateWizard.class, tableDTO);
	}
	
	protected void showStopPyamentRequestScreen(
			@Observes @CDIEvent(MenuPresenter.SHOW_STOP_PAYMENT_REQUEST_WIZARD) final ParameterDTO parameters) {
		StopPaymentRequestDto tableDTO = (StopPaymentRequestDto) parameters.getPrimaryParameter();
			view.setStopPyamentRequestScreen(PopupStopPaymentRequestWizard.class, tableDTO);
	}
	
	protected void showSubmitSpecialistGetTask(
			@Observes @CDIEvent(MenuPresenter.SUBMIT_SPECIALIST_ADVISE_GETTASK) final ParameterDTO parameters) {
		
		SubmitSpecialistFormDTO dto = null;
		if(parameters.getPrimaryParameter() != null && (parameters.getPrimaryParameter() instanceof SubmitSpecialistFormDTO)) {
			dto = (SubmitSpecialistFormDTO) parameters.getPrimaryParameter();
		}
		/*
		 * BeanItemContainer<SelectValue> selectValueContainerForCPUCode =
		 * masterService.getTmpCpuCodeList();
		 * view.setViewSubmitSpecialistAdvice(
		 * SearchSubmitSpecialistAdviseView.class, true,
		 * selectValueContainerForCPUCode);
		 */
		BeanItemContainer<SelectValue> selectValueForRefferedByDoc = masterService
				.getRefferedByDocList();
		BeanItemContainer<SelectValue> selectValueContainerForCPUCode = masterService.getTmpCpuCodes();
		view.setViewGetTask(SubmitSpecialistView.class, selectValueForRefferedByDoc,
				true, true, selectValueContainerForCPUCode,dto);
	}
	
	protected void showPEDRequestApproveGetTask(
			@Observes @CDIEvent(MenuPresenter.PROCESS_PED_REQUEST_APPROVE_GETTASK) final ParameterDTO parameters) {
		SearchPEDRequestApproveFormDTO dto = null;
		if(parameters.getPrimaryParameter() != null && (parameters.getPrimaryParameter() instanceof SearchPEDRequestApproveFormDTO)) {
			dto = (SearchPEDRequestApproveFormDTO) parameters.getPrimaryParameter();
		}
		view.setViewGGetTask(SearchPEDRequestApproveView.class, true, dto);
	}
	
	protected void showCreateOnlineRODWizard(
			@Observes @CDIEvent(MenuPresenter.SHOW_CREATE_ONLINE_ROD_WIZARD) final ParameterDTO parameters) {

		SearchCreateOnlineRODTableDTO tableDTO = (SearchCreateOnlineRODTableDTO) parameters.getPrimaryParameter();
		ReceiptOfDocumentsDTO rodDTO = new ReceiptOfDocumentsDTO();
		Long docAckKey = tableDTO.getAckNo();
		Long rodKey = null;

		rodDTO.getDocumentDetails().setDocAcknowledgementKey(docAckKey);

		DocAcknowledgement docAcknowledgment = claimService.getDocAcknowledgment(docAckKey);
		Long docReceivedId = ReferenceTable.RECEIVED_FROM_HOSPITAL;
		if(docAcknowledgment != null){
			docReceivedId = docAcknowledgment.getDocumentReceivedFromId() != null ? docAcknowledgment.getDocumentReceivedFromId().getKey() : ReferenceTable.RECEIVED_FROM_HOSPITAL;
		}

		populateDocumentDetails(rodDTO, docAckKey, ReferenceTable.ROD_CREATION);
		Long claimKey = tableDTO.getClaimkey();
		Claim claimByKey = claimService.getClaimByKey(claimKey);
		Boolean isValidClaimForROD = true;
		/*
		if(null != claimByKey)
		{
			rodDTO.setPreviousAccountDetailsList(populatePreviousAccountDetails(claimByKey.getIntimation().getIntimationId(),rodDTO.getDocumentDetails().getDocumentReceivedFromValue()));
		}*/
		if(null != claimByKey)
		{
			rodDTO.setPreviousAccntDetailsList(calcService.getPreviousAccountDetails(claimByKey.getIntimation().getInsured().getInsuredId(),docReceivedId));
		}

		if(null != claimByKey)
		{
			if (null != claimByKey
					&& null != claimByKey.getStatus()
					&& null != claimByKey.getStatus().getKey()
					&& claimByKey.getStatus().getKey()
					.equals(ReferenceTable.CLAIM_CLOSED_STATUS)) {
				isValidClaimForROD = false;
				view.showErrorPopUp("Selected claim has been closed.Cannot proceed further.");
			}

			if((SHAConstants.YES_FLAG).equalsIgnoreCase(claimByKey.getLegalFlag()))
			{
				isValidClaimForROD = false;
				view.showErrorPopUp("Intimation is locked by legal process. Cannot proceed further");
			}

			if(isValidClaimForROD)
			{
				if((ReferenceTable.CASHLESS_CLAIM_TYPE_KEY).equals(claimByKey.getClaimType().getKey()))
				{
					if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.REIM_CONVERSION_PROCESS_CURRENT_QUEUE))
					{
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is pending for conversion. Please convert claim first before creating acknowledgement.");
					}
					else if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.FLP_CURRENT_QUEUE)){
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is Pending in Cashless Level");
					}
					else if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.FLE_CURRENT_QUEUE)){
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is Pending in Cashless Level");
					}
					else if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.PE_CURRENT_QUEUE)){
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is Pending in Cashless Level");
					}
					else if(ackDocReceivedService.getDBTaskForPreauth(claimByKey.getIntimation(), SHAConstants.PP_CURRENT_QUEUE)){
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is Pending in Cashless Level");
					}
					NegotiationDetails negDtls = preauthService.getNegotiationPending(claimByKey.getKey());
					if(negDtls != null && negDtls.getNegotiationFlag().equals(SHAConstants.YES_FLAG)
							&& docReceivedId.equals(ReferenceTable.RECEIVED_FROM_HOSPITAL)){
						isValidClaimForROD = false;
						view.showErrorPopUp("Claim is pending for negotiation. Please complete the negotiation before creating ROD");
					}
				}
			}
		}

		if(isValidClaimForROD)
		{
			// Long count =
			// getAckNoCountByClaimKey(claimKey,ReferenceTable.ACKNOWLEDGE_DOC_RECEIVED);
			//CR2019169
			/*LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
			legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
			rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirDTO);
		Intimation intimationKey = intimationService.getIntimationByNo(tableDTO.getIntimationNo());
		List<LegalHeir> displayDto = masterService.getlegalHeirListByTransactionKey(intimationKey.getKey());

		if(displayDto != null && !displayDto.isEmpty()) {
			List<LegalHeirDTO> list = new ArrayList<LegalHeirDTO>();
			LegalHeirDTO legalHeirDTODisplay;
			for (LegalHeir legalHeir : displayDto) {
				legalHeirDTODisplay = new LegalHeirDTO(legalHeir);
				legalHeirDTODisplay.setHeirName(legalHeir.getLegalHeirName());
				SelectValue value = new SelectValue();
				value.setId(legalHeir.getRelationCode());
				value.setValue(legalHeir.getRelationDesc());
				legalHeirDTODisplay.setRelationship(value);
				legalHeirDTODisplay.setSharePercentage(legalHeir.getSharePercentage());
				legalHeirDTODisplay.setAddress(legalHeir.getAddress());
				SelectValue accValue = new SelectValue();
				accValue.setValue(legalHeir.getAccountType());
				legalHeirDTODisplay.setAccountType(accValue);
				legalHeirDTODisplay.setBeneficiaryName(legalHeir.getBeneficiaryName());
				legalHeirDTODisplay.setAccountNo(legalHeir.getAccountNo());
				legalHeirDTODisplay.setIfscCode(legalHeir.getIfscCode());
				SelectValue docValue = new SelectValue();
				docValue.setValue(legalHeir.getAccountType());
				legalHeirDTODisplay.setDocType(accValue);
				list.add(legalHeirDTODisplay);

			}		

			rodDTO.getPreauthDTO().setLegalHeirDTOList(list);
			}*/

			Long count = getAckNoCountByClaimKey(claimKey,
					ReferenceTable.CREATE_ROD);
			rodDTO.setAcknowledgementNumber(count);
			NewIntimationDto newIntimationDto = new NewIntimationDto();
			ClaimDto claimDTO = null;
			if (claimByKey != null) {
				// setClaimValuesToDTO(preauthDTO, claimByKey);
				newIntimationDto = intimationService.getIntimationDto(claimByKey
						.getIntimation());

				claimDTO =  ClaimMapper.getInstance().getClaimDto(claimByKey);
				if(claimDTO.getClaimType() != null && claimDTO.getClaimType().getId().equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
					Preauth latestPreauthByClaim = preauthService.getLatestPreauthByClaim(claimDTO.getKey());
					claimDTO.setCashlessAppAmt(latestPreauthByClaim != null ? latestPreauthByClaim.getTotalApprovalAmount() : 0d);

					Preauth latestPreauthByClaimForWithdrawReject = preauthService.getLatestPreauthByClaimForWithdrawReject(claimKey);
					if(latestPreauthByClaimForWithdrawReject != null){
						if(latestPreauthByClaimForWithdrawReject != null && latestPreauthByClaimForWithdrawReject.getOtherBenefitFlag() != null && latestPreauthByClaimForWithdrawReject.getOtherBenefitFlag().equalsIgnoreCase("Y")){
							rodDTO.getDocumentDetails().setIsOtherBenefitApplicableInPreauth(true);
						}
						List<OtherBenefitsTableDto> benefitAmountDetailsByCashlessKey = premedicalService.getBenefitAmountDetailsByCashlessKey(latestPreauthByClaimForWithdrawReject.getKey());
						for (OtherBenefitsTableDto otherBenefitsTableDto : benefitAmountDetailsByCashlessKey) {
							if(otherBenefitsTableDto.getBenefitName() != null && otherBenefitsTableDto.getBenefitName().equalsIgnoreCase(SHAConstants.emergencyDomestic)){
								rodDTO.getDocumentDetails().setIsEmergencyMedicalEvacuation(true);
							}else if(otherBenefitsTableDto.getBenefitName() != null && otherBenefitsTableDto.getBenefitName().equalsIgnoreCase(SHAConstants.repatriationOfMortal)){
								rodDTO.getDocumentDetails().setIsRepatriationOfMortal(true);
							}
						}
					}


					/*for bancs*///IMSSUPPOR-30613
					if(latestPreauthByClaim!=null){
						if(latestPreauthByClaim.getCatastrophicLoss() != null) {
							SelectValue catastropheData = masterService.getCatastropheData(latestPreauthByClaim.getCatastrophicLoss());
							if(catastropheData != null){
								rodDTO.getPreauthDTO().setCatastrophicLoss(new SelectValue(latestPreauthByClaim.getCatastrophicLoss(),catastropheData.getValue()));
							}
						}

						if(latestPreauthByClaim.getNatureOfLoss() != null) {
							MastersValue master = masterService.getMaster(latestPreauthByClaim.getNatureOfLoss());
							if(master != null){
								rodDTO.getPreauthDTO().setNatureOfLoss(new SelectValue(latestPreauthByClaim.getNatureOfLoss(),master.getValue()));
							}
						}

						if(latestPreauthByClaim.getCauseOfLoss() != null) {

							MastersValue causeOfLoss =  masterService.getMaster(latestPreauthByClaim.getCauseOfLoss());

							if(causeOfLoss != null){

								rodDTO.getPreauthDTO().setCauseOfLoss(new SelectValue(latestPreauthByClaim.getCauseOfLoss(),causeOfLoss.getValue()));
							}
						}
					}
				}
				claimDTO.setNewIntimationDto(newIntimationDto);
				rodDTO.setNewIntimationDTO(newIntimationDto);
				rodDTO.setClaimDTO(claimDTO);
				rodDTO.setNewIntimationDTO(newIntimationDto);
				rodDTO.getPreauthDTO().setNewIntimationDTO(newIntimationDto);
			}
			// Method to populate hospital values from VW_HOSPITALS;
			// if(null != rodDTO.get)
			if(null != claimByKey && null != claimByKey.getClaimType() && null != claimByKey.getClaimType().getKey())
			{
				setClaimValuesToDTO(rodDTO.getPreauthDTO(), claimByKey);
				if((claimByKey.getClaimType().getKey()).equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY))
				{
					Policy policy = policyService.getPolicyByKey(claimByKey.getIntimation().getPolicy().getKey());
					if(policy.getPaymentParty() != null &&
							rodDTO.getDocumentDetails().getDocumentReceivedFromValue() != null && !rodDTO.getDocumentDetails().getDocumentReceivedFromValue().equalsIgnoreCase(SHAConstants.DOC_RECEIVED_FROM_HOSPITAL)){
						populatePaymentDetailsForGMCPayment(claimByKey,rodDTO,newIntimationDto);
					} else {
						if (null != newIntimationDto.getHospitalDto().getHospitalType()) {
							populatePaymentDetailsForHosp(newIntimationDto.getHospitalDto()
									.getKey(), rodDTO,docAcknowledgment.getDocumentReceivedFromId().getKey());
						}
					}
				}
				else 
				{
					/*rodDTO.getDocumentDetails().setPaymentModeFlag(
						ReferenceTable.PAYMENT_MODE_CHEQUE_DD);*/
					//				setClaimValuesToDTO(rodDTO.getPreauthDTO(), claimByKey);
					if(rodDTO.getPreauthDTO().getPolicyDto().getPaymentParty() != null &&
							rodDTO.getDocumentDetails().getDocumentReceivedFromValue() != null && !rodDTO.getDocumentDetails().getDocumentReceivedFromValue().equalsIgnoreCase(SHAConstants.DOC_RECEIVED_FROM_HOSPITAL)){
						populatePaymentDetailsForGMCPayment(claimByKey,rodDTO,newIntimationDto);
					} else {
						populatePaymentDetailsForReimbursementClaim(claimKey, rodDTO);
					}
				}
			}
			Reimbursement previousLatestROD = createRodService
					.getPreviousRODDetails(claimKey);
			if (previousLatestROD != null) {
				// reimbursementKey = previousLatestROD.getKey();
				ZonalMedicalReviewMapper mapper = ZonalMedicalReviewMapper.getInstance();
				//			ZonalMedicalReviewMapper.getAllMapValues();
				PreauthDTO reimbursementDTO = mapper
						.getReimbursementDTO(previousLatestROD);
				reimbursementDTO.setIsPostHospitalization(true);

				//IMSSUPPOR-27229
				if(reimbursementDTO.getPreauthMedicalDecisionDetails() != null && reimbursementDTO.getPreauthMedicalDecisionDetails().getCorporateBufferUtilizedAmt() != null){
					reimbursementDTO.getPreauthMedicalDecisionDetails().setCorporateBufferUtilizedAmt(null);
				}

				setReimbursmentTOPreauthDTO(mapper, claimByKey, previousLatestROD,
						reimbursementDTO, true, SHAConstants.CREATE_ROD);
				Hospitals hospitalById = hospitalService.getHospitalById(claimByKey
						.getIntimation().getHospital());
				ZonalReviewUpdateHospitalDetailsDTO updateHospitalDetails = reimbursementDTO
						.getPreauthDataExtractionDetails()
						.getUpdateHospitalDetails();
				updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				//updateHospitalDetails.setHospitalCity(hospitalById.getCity());
				updateHospitalDetails.setHospitalState(hospitalById.getState());
				updateHospitalDetails.setHospitalCode(hospitalById
						.getHospitalCode());


				LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
				legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
				reimbursementDTO.setLegalHeirDto(legalHeirDTO);

				if(previousLatestROD.getDocAcknowLedgement() != null
						&& previousLatestROD.getDocAcknowLedgement().getDocumentReceivedFromId() != null
						&& ReferenceTable.RECEIVED_FROM_INSURED.equals(previousLatestROD.getDocAcknowLedgement().getDocumentReceivedFromId().getKey())
						&& previousLatestROD.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId() != null
						&& ReferenceTable.RELATION_SHIP_SELF_KEY.equals(previousLatestROD.getClaim().getIntimation().getInsured().getRelationshipwithInsuredId().getKey())
						&& previousLatestROD.getPatientStatus() != null 
						&& previousLatestROD.getPatientStatus().getKey() != null 
						&& ReferenceTable.PATIENT_STATUS_DECEASED_REIMB.equals(previousLatestROD.getPatientStatus().getKey())) {


					/*if(previousLatestROD.getNomineeName() != null) {
					reimbursementDTO.getNewIntimationDTO().setNomineeName(previousLatestROD.getNomineeName());
				}	
				if(previousLatestROD.getNomineeAddr() != null) {
					reimbursementDTO.getNewIntimationDTO().setNomineeAddr(previousLatestROD.getNomineeAddr());
				}*/

					List<NomineeDetailsDto> nomineeDetailsListByTransactionKey = intimationService.getNomineeDetailsListByTransactionKey(previousLatestROD.getKey());

					if(nomineeDetailsListByTransactionKey != null && !nomineeDetailsListByTransactionKey.isEmpty()) {
						rodDTO.getNewIntimationDTO().setNomineeList(nomineeDetailsListByTransactionKey);
					}	

					else {
						if(rodDTO.getNewIntimationDTO().getNomineeList() == null 
								|| rodDTO.getNewIntimationDTO().getNomineeList().isEmpty()) {

							List<LegalHeir> legalHeirList = masterService.getlegalHeirListByTransactionKey(previousLatestROD.getKey());
							if(legalHeirList != null && !legalHeirList.isEmpty()) {
								List<LegalHeirDTO> legalHeirDTOList = new ArrayList<LegalHeirDTO>();
								LegalHeirDTO legalHeirDto;
								for (LegalHeir legalHeir : legalHeirList) {
									legalHeirDto = new LegalHeirDTO(legalHeir);
									legalHeirDto.setRelationshipContainer(masterService.getRelationshipContainerValues());
									legalHeirDTOList.add(legalHeirDto);
								}
								reimbursementDTO.setLegalHeirDTOList(legalHeirDTOList);
							}
						}	
					}
				}

				List<ReconsiderRODRequestTableDTO> reconsiderRODRequest = getReconsiderRODRequest(claimByKey);
				List<ReimbursementRejectionDto> rejectionDetails = new ArrayList<ReimbursementRejectionDto>();

				if (reconsiderRODRequest != null
						&& !reconsiderRODRequest.isEmpty()) {

					for (ReconsiderRODRequestTableDTO reconsiderRODRequestTableDTO : reconsiderRODRequest) {

						ReimbursementRejectionDto reimbursementRejectionDto = reimbursementRejectionService.getReimbursementRejectionByKey(reconsiderRODRequestTableDTO.getRodKey());

						if (null != reimbursementRejectionDto
								&& null != reimbursementRejectionDto.getStatusValue()) {
							if ((ReferenceTable.PROCESS_CLAIM_FINANCIAL_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())
									|| (ReferenceTable.PROCESS_CLAIM_REQUEST_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())
									|| (ReferenceTable.PAYMENT_REJECTED).equals(reimbursementRejectionDto.getStatusKey())
									|| (ReferenceTable.CLAIM_APPROVAL_APPROVE_REJECT_STATUS).equals(reimbursementRejectionDto.getStatusKey())) {

								reconsiderRODRequestTableDTO.setIsRejectReconsidered(true);
								rejectionDetails.add(reimbursementRejectionDto);

							} else {
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
							}
						}
						else {
							reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
						}

						Reimbursement reimbursmentObj = reimbursementService.getReimbursementByKey(reconsiderRODRequestTableDTO.getRodKey());

						Boolean isSettled = reimbursementService.isClaimPaymentAvailable(reimbursmentObj.getRodNumber());

						if ((isSettled != null && isSettled) || ( null != reimbursmentObj && null != reimbursmentObj.getFinancialCompletedDate()
								&& reimbursmentObj.getFinancialCompletedDate().after(reimbursmentObj.getModifiedDate()))) {


							if((ReferenceTable.PROCESS_CLAIM_REQUEST_APPROVE_REJECT_STATUS).equals(reimbursmentObj.getStatus().getKey()) ||
									(ReferenceTable.PROCESS_CLAIM_FINANCIAL_APPROVE_REJECT_STATUS).equals(reimbursmentObj.getStatus().getKey())) {
								reconsiderRODRequestTableDTO.setIsSettledReconsideration(false);
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(true); 
							}else{
								reconsiderRODRequestTableDTO.setIsSettledReconsideration(true);
								reconsiderRODRequestTableDTO.setIsRejectReconsidered(false);
							}
						}
						//IMSSUPPOR-26556
						if(docAcknowledgment != null){
							if(reconsiderRODRequestTableDTO.getSelect() != null && reconsiderRODRequestTableDTO.getSelect() && reconsiderRODRequestTableDTO.getAcknowledgementNo() != null && 
									!reconsiderRODRequestTableDTO.getAcknowledgementNo().equalsIgnoreCase(docAcknowledgment.getAcknowledgeNumber())){
								reconsiderRODRequestTableDTO.setSelect(false);
							}
						}

						if((ReferenceTable.PAYMENT_REJECTED).equals(reimbursmentObj.getStatus().getKey()) ||
								(ReferenceTable.PAYMENT_PROCESS_STAGE.equals(reimbursmentObj.getStage().getKey())&&
										ReferenceTable.PAYMENT_PROCESS_REOPENED.equals(reimbursmentObj.getStatus().getKey()))){

							reconsiderRODRequestTableDTO.setIsSettledReconsideration(false);
							reconsiderRODRequestTableDTO.setIsRejectReconsidered(true);
						}

						MastersValue patientStatus = reimbursmentObj.getPatientStatus();
						if(patientStatus != null) {
							reconsiderRODRequestTableDTO.setPatientStatus(new SelectValue(patientStatus.getKey(), patientStatus.getValue()));
							rodDTO.getDocumentDetails().setPatientStatus(reconsiderRODRequestTableDTO.getPatientStatus());
							rodDTO.getDocumentDetails().setDeathDate(reimbursmentObj.getDateOfDeath());
							rodDTO.getDocumentDetails().setReasonForDeath(reimbursmentObj.getDeathReason());
						}

						List<LegalHeir> legalHeirList = masterService.getlegalHeirListByTransactionKey(reimbursmentObj.getKey());
						if(legalHeirList != null && !legalHeirList.isEmpty()) {
							List<LegalHeirDTO> legalHeirDTOList = new ArrayList<LegalHeirDTO>();
							LegalHeirDTO legalHeirDto;
							for (LegalHeir legalHeir : legalHeirList) {
								legalHeirDto = new LegalHeirDTO(legalHeir);
								legalHeirDto.setRelationshipContainer(masterService.getRelationshipContainerValues());
								legalHeirDTOList.add(legalHeirDto);
							}
							reconsiderRODRequestTableDTO.setLegalHeirDTOList(legalHeirDTOList);
						}

					}
					rodDTO.setReconsiderRodRequestList(reconsiderRODRequest);
					rodDTO.setRejectionDetails(rejectionDetails);
				}

				reimbursementDTO.setReconsiderationList(reconsiderRODRequest);

				reimbursementDTO = getResiudalAmountToDTO(reimbursementDTO,
						previousLatestROD.getKey());
				reimbursementDTO.setIsPreviousROD(true);
				rodDTO.getDocumentDetails().setEmailId(reimbursementDTO.getPayeeEmailId());
				rodDTO.getDocumentDetails().setPayableAt(reimbursementDTO.getPayableAt());
				rodDTO.setPreauthDTO(reimbursementDTO);
				rodDTO.getDocumentDetails().setDateOfAdmission(reimbursementDTO.getPreauthDataExtractionDetails().getAdmissionDate());
				rodDTO.getDocumentDetails().setDateOfDischarge(reimbursementDTO.getPreauthDataExtractionDetails().getDischargeDate());
				if(null != previousLatestROD.getDoaChangeReason())
					rodDTO.getDocumentDetails().setReasonForChange(previousLatestROD.getDoaChangeReason());

				if(null != previousLatestROD.getPayModeChangeReason())
					rodDTO.getDocumentDetails().setPayModeChangeReason(previousLatestROD.getPayModeChangeReason());


				/*for bancs*/
				if(previousLatestROD.getCatastrophicLoss() != null) {
					SelectValue catastropheData = masterService.getCatastropheData(previousLatestROD.getCatastrophicLoss());
					if(catastropheData != null){
						rodDTO.getPreauthDTO().setCatastrophicLoss(new SelectValue(previousLatestROD.getCatastrophicLoss(),catastropheData.getValue()));
					}
				}

				if(previousLatestROD.getNatureOfLoss() != null) {
					MastersValue master = masterService.getMaster(previousLatestROD.getNatureOfLoss());
					if(master != null){
						rodDTO.getPreauthDTO().setNatureOfLoss(new SelectValue(previousLatestROD.getNatureOfLoss(),master.getValue()));
					}
				}

				if(previousLatestROD.getCauseOfLoss() != null) {

					MastersValue causeOfLoss =  masterService.getMaster(previousLatestROD.getCauseOfLoss());

					if(causeOfLoss != null){

						rodDTO.getPreauthDTO().setCauseOfLoss(new SelectValue(previousLatestROD.getCauseOfLoss(),causeOfLoss.getValue()));
					}
				}

				// reimbursementDTO.setPreviousROD(previousLatestROD);

			}


			/*
			 * if(null != rodDTO.getClaimDTO() &&
			 * (ReferenceTable.CLAIM_TYPE_CASHLESS
			 * ).equalsIgnoreCase(rodDTO.getClaimDTO().getClaimTypeValue())) {
			 * populatePaymentDetailsForCashLessClaim
			 * (newIntimationDto.getHospitalDto().getKey(),rodDTO); } else {
			 * populatePaymentDetailsForReimbursementClaim
			 * (rodDTO.getClaimDTO().getKey
			 * (),rodDTO,newIntimationDto.getHospitalDto().getKey());
			 * 
			 * }
			 */

			/*if(tableDTO.getHumanTaskListDTO() == null || tableDTO.getHumanTaskListDTO().getPayload() == null || tableDTO.getHumanTaskListDTO().getPayload().getRod() == null || tableDTO.getHumanTaskListDTO().getPayload().getRod().getKey() == null) {
			generateRODNumber(rodDTO);
			getPreviousRODNumber(rodDTO)
		} else {
			Reimbursement reimbursementByKey = reimbursementService.getReimbursementByKey(tableDTO.getHumanTaskListDTO().getPayload().getRod().getKey());
			rodDTO.getDocumentDetails().setRodNumber(reimbursementByKey.getRodNumber());
			String diagnosisForPreauthByKey = "";
			if(reimbursementByKey != null ) {
				diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursementByKey.getKey());

			}
			rodDTO.setDiagnosis(diagnosisForPreauthByKey);
		}*/

			Map<String, Object> outPutArray = (Map<String, Object>) tableDTO.getDbOutArray();
			Long payloadRodKey = (Long) outPutArray.get(SHAConstants.PAYLOAD_ROD_KEY);
			if(null == payloadRodKey || payloadRodKey.equals(0l))
			{
				generateRODNumber(rodDTO);
				getPreviousRODNumber(rodDTO);
			}
			else
			{
				Reimbursement reimbursementByKey = reimbursementService.getReimbursementByKey(payloadRodKey);
				rodDTO.getDocumentDetails().setRodNumber(reimbursementByKey.getRodNumber());
				String diagnosisForPreauthByKey = "";
				if(reimbursementByKey != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(reimbursementByKey.getKey());

				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);
				rodDTO.setRodKeyFromPayload(payloadRodKey);
				rodDTO.getNewIntimationDTO().setNomineeList(intimationService.getNomineeDetailsListByTransactionKey(payloadRodKey));
			}		



			if ((ReferenceTable.CLAIM_TYPE_CASHLESS).equalsIgnoreCase(rodDTO
					.getClaimDTO().getClaimTypeValue()) && null == rodDTO.getDocumentDetails().getDateOfAdmission() && null == rodDTO.getDocumentDetails().getDateOfDischarge())
			{
				Preauth preauth = createRodService
						.getLatestPreauthForClaim(claimKey);

				if (null != preauth) {
					rodDTO.getDocumentDetails().setDateOfAdmission(
							preauth.getDataOfAdmission());
					rodDTO.getDocumentDetails().setDateOfDischarge(preauth.getDateOfDischarge());
				} else {
					rodDTO.getDocumentDetails().setDateOfAdmission(
							rodDTO.getClaimDTO().getNewIntimationDto()
							.getAdmissionDate());

					//rodDTO.getDocumentDetails().setDateOfDischarge(rodDTO.getClaimDTO().getNewIntimationDto().get);
				}

				String diagnosisForPreauthByKey = "";
				if(preauth != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());

				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);

			} else {
				if(null == previousLatestROD)
				{
					rodDTO.getDocumentDetails().setDateOfAdmission(
							rodDTO.getClaimDTO().getNewIntimationDto()
							.getAdmissionDate());
				}
			}
			Map<String, Integer> productBenefitMap = calcService.getProductBenefitFlag(
					claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
					.getProduct().getKey());
			/**
			 * Earlier , pre and post hospitalization was enabled only based on
			 * product conditions in ack , rod level and bill entry level.  But as per mockup 13.7 , this
			 * validation needs to be removed at ack and rod level and should be available only
			 * at FA level. Hence hardcoding the values of pre and post in map , by which we always
			 * enable pre and post for all products at ACK and ROD level and bil entry level.
			 * */
			productBenefitMap.put("preHospitalizationFlag", 1);
			productBenefitMap.put("postHospitalizationFlag", 1);
			//	productBenefitMap.put("LumpSumFlag", 1);
			rodDTO.setProductBenefitMap(productBenefitMap);

			/*		rodDTO.setProductBenefitMap(dbCalculationService.getProductBenefitFlag(
				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
						.getProduct().getKey()));*/

			rodDTO.getPreauthDTO().setStrUserName(tableDTO.getUsername());
			rodDTO.getPreauthDTO().setStrPassword(tableDTO.getPassword());
			rodDTO.setStrUserName(tableDTO.getUsername());
			// rodDTO.setStrUserName("weblogic");
			rodDTO.setStrPassword(tableDTO.getPassword());
			//rodDTO.setHumanTask(tableDTO.getHumanTaskListDTO());
			//Added for document details page enhancement.
			rodDTO.setCheckListTableContainerForROD(masterService.getDocumentCheckListValuesContainer(SHAConstants.MASTER_TYPE_REIMBURSEMENT));

			createRodService.getBillClassificationFlagDetails(rodDTO.getClaimDTO()
					.getKey(), rodDTO);
			/*rodDTO.setProductBenefitMap(dbCalculationService.getProductBenefitFlag(
				claimByKey.getKey(), claimByKey.getIntimation().getPolicy()
						.getProduct().getKey()));*/
			//		rodDTO.setReconsiderRodRequestList(getReconsiderRODRequest(claimByKey));

			//		rodDTO.setUploadDocsList(getUploadedDocumentTableDataForBillEntry(key));

			List<RODQueryDetailsDTO> rodQueryDetailsList = getRODQueryDetailsForCreateRodandBillEntry(claimByKey,docAckKey); 
			rodDTO.setRodQueryDetailsList(rodQueryDetailsList);
			if(null != rodQueryDetailsList && !rodQueryDetailsList.isEmpty())
			{   
				Map<String , Long> reconsiderationMap = null;
				for (RODQueryDetailsDTO rodQueryDetailsDTO : rodQueryDetailsList) {
					if(null != rodQueryDetailsDTO.getReplyStatus() && ("Y").equalsIgnoreCase(rodQueryDetailsDTO.getReplyStatus()))
					{
						rodDTO.setIsQueryReplyReceived(true);
						reconsiderationMap = new HashMap<String,Long>();
						reconsiderationMap.put("ackKey",rodQueryDetailsDTO.getAcknowledgementKey());
						reconsiderationMap.put("rodKey", rodQueryDetailsDTO.getReimbursementKey());
						rodDTO.setReconsiderationMap(reconsiderationMap);
						rodKey = rodQueryDetailsDTO.getReimbursementKey();
						Reimbursement reimbursement = createRodService.getReimbursementObjectByKey(rodQueryDetailsDTO.getReimbursementKey());
						rodDTO.getDocumentDetails().setPaymentModeFlag(reimbursement.getPaymentModeId());
						rodDTO.getDocumentDetails().setEmailId(reimbursement.getPayeeEmailId());
						rodDTO.getDocumentDetails().setPanNo(reimbursement.getPanNumber());
						rodDTO.getDocumentDetails().setPayableAt(reimbursement.getPayableAt());
						//SelectValue selValue = new SelectValue();
						//selValue.setValue(reimbursement.getPayeeName());
						rodDTO.getDocumentDetails().setReasonForChange(reimbursement.getReasonForChange());
						rodDTO.getDocumentDetails().setLegalFirstName(reimbursement.getLegalHeirFirstName());
						if(reimbursement.getAccountNumber() != null){
							rodDTO.getDocumentDetails().setAccountNo(reimbursement.getAccountNumber());
						}
						rodDTO.getDocumentDetails().setAccountPreference(reimbursement.getAccountPreference());
						rodDTO.getDocumentDetails().setAccountType(reimbursement.getAccountType());
						if(reimbursement.getPatientStatus() != null){
							rodDTO.getDocumentDetails().setPatientStatus(new SelectValue(reimbursement.getPatientStatus().getKey(), reimbursement.getPatientStatus().getValue()));
						}
						rodDTO.getDocumentDetails().setDeathDate(reimbursement.getDateOfDeath());
						rodDTO.getDocumentDetails().setReasonForDeath(reimbursement.getDeathReason());
						if(null != reimbursement.getPaymentModeId() && reimbursement.getPaymentModeId().equals(ReferenceTable.PAYMENT_MODE_BANK_TRANSFER))
						{
							if(null != reimbursement.getBankId())
							{
								BankMaster masBank = masterService.getBankDetailsByKey(reimbursement.getBankId());
								rodDTO.getDocumentDetails().setBankId(masBank.getKey());
								rodDTO.getDocumentDetails().setBankName(masBank.getBankName());
								rodDTO.getDocumentDetails().setIfscCode(masBank.getIfscCode());
								rodDTO.getDocumentDetails().setBranch(masBank.getBranchName());
								rodDTO.getDocumentDetails().setCity(masBank.getCity());

								/*newIntimationDto.setNomineeName(reimbursement.getNomineeName());
							newIntimationDto.setNomineeAddr(reimbursement.getNomineeAddr());
							rodDTO.getNewIntimationDTO().setNomineeName(reimbursement.getNomineeName());
							rodDTO.getNewIntimationDTO().setNomineeAddr(reimbursement.getNomineeAddr());*/

							}
						}

						Long reimbursementKey = rodQueryDetailsDTO.getReimbursementKey();
						if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getHospitalizationFlag()))
						{
							if(null == rodDTO.getDocumentDetails().getHospitalizationClaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getHospitalizationClaimedAmount()))
							{
								Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.HOSPITALIZATION);
								if(null != totalClaimedAmt)
									rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(String.valueOf(totalClaimedAmt));
							}
						}

						if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getPreHospitalizationFlag()))
						{
							if(null == rodDTO.getDocumentDetails().getPreHospitalizationClaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getPreHospitalizationClaimedAmount()))
							{
								Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.PRE_HOSPITALIZATION);
								if(null != totalClaimedAmt)
									rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(String.valueOf(totalClaimedAmt));
							}
						}
						if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getPostHospitalizationFlag()))
						{
							if(null == rodDTO.getDocumentDetails().getPostHospitalizationClaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getPostHospitalizationClaimedAmount()))
							{
								Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.POST_HOSPITALIZATION);
								if(null != totalClaimedAmt)
									rodDTO.getDocumentDetails().setPostHospitalizationClaimedAmount(String.valueOf(totalClaimedAmt));
							}
						}

						if((SHAConstants.YES_FLAG).equalsIgnoreCase(rodDTO.getDocumentDetails().getOtherBenefitsFlag()))
						{
							if(null == rodDTO.getDocumentDetails().getOtherBenefitclaimedAmount() || ("").equalsIgnoreCase(rodDTO.getDocumentDetails().getOtherBenefitclaimedAmount()))
							{
								Double totalClaimedAmt = createRodService.getTotalClaimedAmt(reimbursementKey, ReferenceTable.OTHER_BENEFIT);
								if(null != totalClaimedAmt)
									rodDTO.getDocumentDetails().setOtherBenefitclaimedAmount(String.valueOf(totalClaimedAmt));
							}
						}

						List<LegalHeir> legalHeirList = masterService.getlegalHeirListByTransactionKey(reimbursement.getKey());
						if(legalHeirList != null && !legalHeirList.isEmpty()) {
							List<LegalHeirDTO> legalHeirDTOList = new ArrayList<LegalHeirDTO>();
							LegalHeirDTO legalHeirDto;
							for (LegalHeir legalHeir : legalHeirList) {
								legalHeirDto = new LegalHeirDTO(legalHeir);
								legalHeirDto.setRelationshipContainer(masterService.getRelationshipContainerValues());
								legalHeirDTOList.add(legalHeirDto);
							}
							rodDTO.getPreauthDTO().setLegalHeirDTOList(legalHeirDTOList);
						}
						Boolean grievanceRepresentation = reimbursement.getGrievanceRepresentation() !=null && reimbursement.getGrievanceRepresentation().equals("Y") ? true : false;
						rodDTO.getDocumentDetails().setGrievanceRepresentation(grievanceRepresentation);

						//To populate bank details.
						/*rodDTO.get
					rodDTO.getDocumentDetails().setIfscCode(reimbursement.getB);*/
					}
				}
			}

			if(rodDTO.getClaimDTO().getClaimType() != null
					&& rodDTO.getClaimDTO().getClaimType().getId()
					.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				String[] rodSplit = rodDTO.getDocumentDetails().getRodNumber().split("/");
				String string = rodSplit[rodSplit.length - 1];
				if(SHAUtils.getIntegerFromString(string) == 1 || previousLatestROD == null) {
					PreMedicalMapper premedicalMapper=PreMedicalMapper.getInstance();
					//				PreMedicalMapper.getAllMapValues();
					List<Preauth> preauthByClaimKey = preauthService
							.getPreauthByClaimKey(claimByKey.getKey());
					Preauth previousPreauth = null;
					if (!preauthByClaimKey.isEmpty()) {
						previousPreauth = preauthByClaimKey.get(0);
						String[] split = previousPreauth.getPreauthId().split("/");
						String defaultNumber = split[split.length - 1];
						//Integer nextReferenceNo = Integer.valueOf(defaultNumber);
						for (Preauth preauth : preauthByClaimKey) {
							if (preauth.getPreauthId() != null) {
								String[] splitNumber = preauth.getPreauthId()
										.split("/");
								String number = splitNumber[splitNumber.length - 1];
								if (Integer.valueOf(number) > Integer
										.valueOf(defaultNumber)) {
									previousPreauth = preauth;
									//nextReferenceNo = Integer.valueOf(number);
								}
							}
						}
					}

					if (previousPreauth != null) {
						PreauthDTO reimbursementDTO = premedicalMapper
								.getPreauthDTO(previousPreauth);

						reimbursementDTO.getPreauthDataExtractionDetails().setVentilatorSupportFlag(previousPreauth.getVentilatorSupport());

						setpreauthTOPreauthDTO(premedicalMapper, claimByKey,
								previousPreauth, reimbursementDTO, true);
						reimbursementDTO.setIsCashlessType(true);
						reimbursementDTO.getPreauthDataExtractionDetails()
						.setDischargeDate(previousPreauth.getDateOfDischarge());
						if(ReferenceTable.getFHORevisedKeys().containsKey(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())
								|| /*ReferenceTable.MEDI_CLASSIC_GOLD_PRODUCT_KEY.equals(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getKey())*/
								(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
								&& (((SHAConstants.PRODUCT_CODE_72.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
										SHAConstants.PRODUCT_CODE_87.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
										|| SHAConstants.PRODUCT_CODE_81.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())
										|| SHAConstants.PROD_PAC_PRD_012.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()))
										&& ("G").equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getInsuredPatient().getPolicyPlan())))
								|| (reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct() != null 
								&& (SHAConstants.PRODUCT_CODE_84.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode()) ||
										SHAConstants.PRODUCT_CODE_91.equalsIgnoreCase(reimbursementDTO.getNewIntimationDTO().getPolicy().getProduct().getCode())))){
							List<OtherBenefitsTableDto> otherBenefitsClaimedAmount = reimbursementService.getOtherBenefitsClaimedAmount(previousPreauth.getKey());
							for (OtherBenefitsTableDto otherBenefitsTableDto : otherBenefitsClaimedAmount) {
								otherBenefitsTableDto.setAmtAlreadyPaidToHospital(otherBenefitsTableDto.getApprovedAmt());
								otherBenefitsTableDto.setKey(null);
							}
							reimbursementDTO.getPreauthDataExtractionDetails().setOtherBenefitsList(otherBenefitsClaimedAmount);
						}

						rodDTO.setPreauthDTO(reimbursementDTO);

						rodDTO.getClaimDTO().setLatestPreauthKey(previousPreauth.getKey());     

					}
				}
				Preauth preauth =preauthService.getLatestPreauthByClaim(claimByKey.getKey());
				String diagnosisForPreauthByKey = "";
				if(preauth != null ) {
					diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(preauth.getKey());

				}
				rodDTO.setDiagnosis(diagnosisForPreauthByKey);


			}

			RRCDTO rrcDTO = new RRCDTO();
			rrcDTO.setClaimDto(claimDTO);
			rrcDTO.setNewIntimationDTO(newIntimationDto);
			rrcDTO.setStrUserName(tableDTO.getUsername());
			Double insuredSumInsured = calcService.getInsuredSumInsured(
					rrcDTO.getNewIntimationDTO().getInsuredPatient()
					.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
			loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.CREATE_ROD);

			//loadRRCRequestValuesForProcessing(rrcDTO,insuredSumInsured,SHAConstants.ACKNOWLEDGE_DOC_RECEIVED);

			rodDTO.setRrcDTO(rrcDTO);

			String strPremiaFlag = BPMClientContext.PREMIA_FLAG;
			if(strPremiaFlag != null && ("true").equalsIgnoreCase(strPremiaFlag)) {
				String get64vbStatus = PremiaService.getInstance().get64VBStatus(claimByKey.getIntimation().getPolicy().getPolicyNumber(), claimByKey.getIntimation().getIntimationId());
				if(get64vbStatus != null && SHAConstants.DISHONOURED.equalsIgnoreCase(get64vbStatus)) {
					rodDTO.setIsDishonoured(true);
				} 
			}


			//		Preauth latestPreauthByClaim = createRodService.getLatestPreauthByClaim(5014232l);
			//		List<ClaimAmountDetails> claimAmountDetailsByPreauth = createRodService.getClaimAmountDetailsByPreauth(5022781l);
			//		

			//		Reimbursement reimbursementObjectByKey = createRodService.getReimbursementObjectByKey(5040982l);
			//		Claim claimByClaimKey = claimService.getClaimByClaimKey(5020558l);	
			//		
			//		createRodService.submitTaskToBPM(rodDTO, reimbursementObjectByKey, false, sendToWhere, false, claimByClaimKey);


			if(null != rrcDTO.getNewIntimationDTO() && null != rrcDTO.getNewIntimationDTO().getPolicy()) {
				rodDTO.setIsPEDInitiated(pedQueryService.isPEDInitiated(rrcDTO.getNewIntimationDTO().getPolicy().getKey()));
				rodDTO.setIsPEDInitiatedbtn(rodDTO.getIsPEDInitiated());
			}

			/**
			 * Added for loading already uploaded docs table values.
			 * 
			 * */

			if(null != tableDTO.getIsDocumentUploaded() && (SHAConstants.YES).equalsIgnoreCase(tableDTO.getIsDocumentUploaded()) && null != tableDTO.getAckDocKey()  && null != tableDTO.getDocAcknowledgementKey())
			{
				rodDTO.setAlreadyUploadDocsList(createRodService.getUploadDocumentForAcknowledgementDocKey(tableDTO.getDocAcknowledgementKey()));
			}

			//		if(rrcDTO.getNewIntimationDTO() != null && rrcDTO.getNewIntimationDTO().getInsuredPatient() != null &&
			//				rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey() != null){
			//			Long claimCount = preauthService.getClaimCount(rrcDTO.getNewIntimationDTO().getInsuredPatient().getKey());
			//			if(claimCount != null){
			//				rodDTO.setClaimCount(claimCount);
			//			}
			//		}

			if(null != newIntimationDto && null != newIntimationDto.getPolicy()) {
				//			BeanItemContainer<SelectValue> sectionList = masterService.getSectionList(newIntimationDto.getPolicy().getProduct().getKey());
				BeanItemContainer<SelectValue> sectionList = masterService
						.getSectionList(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getKey(),rodDTO.getClaimDTO().getNewIntimationDto().getPolicy());

				if(ReferenceTable.getSuperSurplusKeys().containsKey(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getProduct().getKey())
						&& ((rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan() == null) || (rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan() != null && rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyPlan().equalsIgnoreCase("S")))){
					List<SelectValue> itemIds = sectionList.getItemIds();
					List<SelectValue> filterItem = new ArrayList<SelectValue>();
					for (SelectValue selectValue : itemIds) {
						if(! selectValue.getCommonValue().equals(ReferenceTable.DELVIERY_AND_NEW_BORN_SECTION_CODE)){
							filterItem.add(selectValue);
						}
					}
					sectionList.removeAllItems();
					sectionList.addAll(filterItem);
				}
				rodDTO.setSectionList(sectionList);
				if(rodKey != null) {
					rodDTO.setShouldDisableSection(reimbursementService.isItHavingAnyROD(claimKey, rodKey));
				} else {
					rodDTO.setShouldDisableSection(reimbursementService.isItHavingAnyROD(claimKey));
				}

			}
			if(claimByKey!=null){

				Long hospital = claimByKey.getIntimation().getHospital();
				Hospitals hospitalById = hospitalService.getHospitalById(hospital);
				if(hospitalById!=null && hospitalById.getSuspiciousType()!=null){
					rodDTO.setIsSuspicious(hospitalById.getSuspiciousType());
					if(hospitalById!=null && hospitalById.getSuspiciousType()!=null /*&& !hospitalById.getSuspiciousType().equalsIgnoreCase("Suspicious")*/){
						rodDTO.setClmPrcsInstruction(hospitalById.getClmPrcsInstruction());
					}
				}
			}

			rodDTO.setDbOutArray(tableDTO.getDbOutArray());

			Boolean policyValidation = policyService.getPolicyValidationObject(newIntimationDto.getPolicy().getPolicyNumber());
			rodDTO.getPreauthDTO().setIsPolicyValidate(policyValidation);

			// R1045
			rodDTO.getPreauthDTO().setCrcFlaggedReason(claimByKey.getCrcFlaggedReason());
			rodDTO.getPreauthDTO().setCrcFlaggedRemark(claimByKey.getCrcFlaggedRemark());
			rodDTO.getPreauthDTO().setCrmFlagged(claimByKey.getCrcFlag());

			rodDTO.getPreauthDTO().setVipCustomer(claimByKey.getIsVipCustomer());
			rodDTO.getPreauthDTO().setClaimPriorityLabel(claimByKey.getClaimPriorityLabel());

			Product product = rodDTO.getClaimDTO().getNewIntimationDto().getPolicy()
					.getProduct();
			if (product != null && ReferenceTable.getSuperSurplusKeys().containsKey(product.getKey())){

				if (! (ReferenceTable.CLAIM_TYPE_CASHLESS).equalsIgnoreCase(rodDTO
						.getClaimDTO().getClaimTypeValue())){
					if(null == previousLatestROD){
						List<UpdateOtherClaimDetailDTO> updateOtherClaimDetails = preauthService.getUpdateOtherClaimDetails(newIntimationDto.getPolicy().getKey(),rodDTO.getPreauthDTO());
						for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetails) {
							updateOtherClaimDetailDTO.setKey(null);
						}
						rodDTO.getPreauthDTO().setUpdateOtherClaimDetailDTO(updateOtherClaimDetails);
					}else{
						List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsForExisting = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(previousLatestROD.getKey());
						for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsForExisting) {
							updateOtherClaimDetailDTO.setKey(null);
						}
						rodDTO.getPreauthDTO().setUpdateOtherClaimDetailDTO(updateOtherClaimDetailsForExisting);
					}
				}else{
					if(null != previousLatestROD){
						List<UpdateOtherClaimDetailDTO> updateOtherClaimDetailsForExisting = preauthService.getUpdateOtherClaimDetailsDTOForReimbursement(previousLatestROD.getKey());
						for (UpdateOtherClaimDetailDTO updateOtherClaimDetailDTO : updateOtherClaimDetailsForExisting) {
							updateOtherClaimDetailDTO.setKey(null);
						}
						rodDTO.getPreauthDTO().setUpdateOtherClaimDetailDTO(updateOtherClaimDetailsForExisting);
					}
				}
			}

			if(previousLatestROD == null){
				setClaimValuesToDTO(rodDTO.getPreauthDTO(),claimByKey);
			}
			rodDTO.getPreauthDTO().getNewIntimationDTO().setGmcMainMemberId(rodDTO.getNewIntimationDTO().getGmcMainMemberId());
			rodDTO.getPreauthDTO().getNewIntimationDTO().setGmcMainMemberName(rodDTO.getNewIntimationDTO().getGmcMainMemberName());
			if(rodDTO.getPreauthDTO().getPolicyDto().getLinkPolicyNumber() != null){
				Insured insuredDetails = insuredService.getInsuredByInsuredKey(rodDTO.getNewIntimationDTO().getInsuredKey());
				Map<String, String> getLinkedPolicyDtls = calcService.getLinkedPolicyDetails(rodDTO.getPreauthDTO().getPolicyDto().getPolicyNumber(), insuredDetails.getLinkEmpNumber());
				rodDTO.getClaimDTO().getNewIntimationDto().setGmcMainMemberName(getLinkedPolicyDtls.get("INSURED_NAME"));
				if(rodDTO.getPreauthDTO().getPolicyDto().getPaymentParty() != null && rodDTO.getPreauthDTO().getPolicyDto().getPaymentParty().equalsIgnoreCase(SHAConstants.GMC_PAYMENT_PARTY_EMPLOYEE)) {
					rodDTO.getDocumentDetails().setEmailId(getLinkedPolicyDtls.get("INSURED_EMAIL_ID"));
				}
			}

			//IMSSUPPOR-23596
			rodDTO.setIsAlreadyHospitalizationExist(reimbursementService.isPreviousHospAcknowledgment(claimKey, docAckKey));

			String topAlertFlag = claimService.getTopUpPolicyDetails(rodDTO.getClaimDTO().getNewIntimationDto().getPolicy().getPolicyNumber(),rodDTO.getPreauthDTO());
			rodDTO.getPreauthDTO().setTopUpPolicyAlertFlag(topAlertFlag);
			/*//CR2019169
				LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
				legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
				rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirDTO);*/
			LegalHeirDTO legalHeirDTO = new LegalHeirDTO();
			legalHeirDTO.setRelationshipContainer(masterService.getRelationshipContainerValues());
			rodDTO.getPreauthDTO().setLegalHeirDto(legalHeirDTO);
			newIntimationDto.setInsuredDeceasedFlag(dBCalculationService.getInsuredPatientStatus(newIntimationDto.getPolicy().getKey(), newIntimationDto.getInsuredPatient().getKey()));

			//CR2019217
			Map<String,Object> icrAgent  = calcService.getAgentAndBranchName(rodDTO.getPreauthDTO().getNewIntimationDTO().getIntimationId()); 
			if(icrAgent != null && !icrAgent.isEmpty()) {
				String agentScorePoint = icrAgent.get(SHAConstants.ICR_AGENT_POINT).toString();
				rodDTO.getPreauthDTO().setIcrAgentValue(agentScorePoint);
				//added for SM Points suggested by Sathish Sir added by Noufel
				String smScorepoint = icrAgent.get(SHAConstants.SM_AGENT_POINT).toString();
				rodDTO.getPreauthDTO().setSmAgentValue(smScorepoint);

			}
			//IMSSUPPOR-33388
			if(rodDTO.getNewIntimationDTO().getPolicy().getProduct().getCode() != null && 
					(rodDTO.getNewIntimationDTO().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.PRODUCT_CODE_076)
							|| rodDTO.getNewIntimationDTO().getPolicy().getProduct().getCode().equalsIgnoreCase(SHAConstants.GROUP_HOSPITAL_CASH_POLICY))) {
				rodDTO.getDocumentDetails().setHospitalizationFlag(null);
				rodDTO.getDocumentDetails().setHospitalization(false);
				rodDTO.getDocumentDetails().setPreHospitalizationFlag(null);
				rodDTO.getDocumentDetails().setPreHospitalization(false);
				rodDTO.getDocumentDetails().setPostHospitalizationFlag(null);
				rodDTO.getDocumentDetails().setPostHospitalization(false);
				rodDTO.getDocumentDetails().setHospitalizationClaimedAmount(null);
				rodDTO.getDocumentDetails().setPreHospitalizationClaimedAmount(null);
				rodDTO.getDocumentDetails().setPostHospitalizationClaimedAmount(null);
			}

			if(ReferenceTable.RECEIVED_FROM_INSURED.equals(docAcknowledgment.getDocumentReceivedFromId().getKey())){

				System.out.println("Intimation NUMBER****************"+rodDTO.getPreauthDTO().getNewIntimationDTO().getIntimationId());
				List<DocumentDetails> documentDetails = createRodService.getDocumentDetailsByIntimationNumber(rodDTO.getPreauthDTO().getNewIntimationDTO().getIntimationId(),SHAConstants.NEFT_DETAILS);
				if(documentDetails !=null){
					System.out.println("NEFT Details Available in DMS");
					rodDTO.setIsNEFTDetailsAvailableinDMS(true);
				}
				else{
					System.out.println("NEFT Details not Available in DMS");

					String neftDetailsAvailableFlag = calcService.getNEFTDetailsAvailableFlag(rodDTO.getNewIntimationDTO().getIntimationId());
					//String neftDetailsAvailableFlag = "N";
					if(neftDetailsAvailableFlag !=null && neftDetailsAvailableFlag.equalsIgnoreCase(SHAConstants.N_FLAG)){
						System.out.println("To save Details");
						rodDTO.setIsNEFTDetailsAvailable(true);					
					}
				}
			}	
			System.out.println("CREATE ONLINE ROD Intimation NUMBER****************"+rodDTO.getPreauthDTO().getNewIntimationDTO().getIntimationId());
			view.setCreateOnlineRODWizardView(CreateOnlineRODWizardView.class, rodDTO);
		}
	}
	
	protected void showPostProcessCVC(
			@Observes @CDIEvent(MenuItemBean.POST_PROCESS_CVC) final ParameterDTO parameters){
		
		String userId = (String)VaadinSession.getCurrent().getAttribute(BPMClientContext.USERID);
		
		MasClmAuditUserMapping clmAuditUser = masterService.getAuditUserByEmpId(userId);
		
		view.setPostProcessCVCSearch(SearchPostProcessCVCView.class, true);
	}
	
	protected void showPostCVCAuditWizard(
			@Observes @CDIEvent(MenuPresenter.POST_PROCESS_CVC_WIZARD) final ParameterDTO parameters) {
		SearchCVCTableDTO tableDto = (SearchCVCTableDTO) parameters
				.getPrimaryParameter();
//		SearchCVCTableDTO tableDto = new SearchCVCTableDTO();
		NewIntimationDto newIntimationDto = new NewIntimationDto();
		
		ClaimDto claimDTO = null;
		if (tableDto != null) {
//			Intimation intimation = intimationService.getIntimationByNo(dto.getIntimationNo());
			Claim claimByKey = intimationService.getClaimforIntimation(tableDto.getIntimationKey());
			log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> SHOW CVC AUDIT INTIMATIONDTO START %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+tableDto.getClaimKey()+"%%%------>"+ new Date());
			newIntimationDto = intimationService.getIntimationDto(claimByKey.getIntimation());
			log.info("%%%%%%%%%%%%%%%%%%% MENUPRESENTER-----> SHOW CVC AUDIT INTIMATIONDTO END%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%------> "+tableDto.getClaimKey()+"%%%------>"+ new Date());
			claimDTO = ClaimMapper.getInstance().getClaimDto(claimByKey);
			Preauth latestPreauthByClaim = null;
			if (claimDTO.getClaimType() != null
					&& claimDTO.getClaimType().getId()
							.equals(ReferenceTable.CASHLESS_CLAIM_TYPE_KEY)) {
				latestPreauthByClaim = preauthService
						.getLatestPreauthByClaim(claimDTO.getKey());
				if(null != latestPreauthByClaim){
					claimDTO.setCashlessAppAmt(latestPreauthByClaim
							.getTotalApprovalAmount());
				}
			}
		
			
			claimDTO.setNewIntimationDto(newIntimationDto);
		
		RRCDTO rrcDTO = new RRCDTO();
		rrcDTO.setClaimDto(claimDTO);
		rrcDTO.setNewIntimationDTO(newIntimationDto);
		rrcDTO.setStrUserName(tableDto.getUsername());
		Double insuredSumInsured = calcService.getInsuredSumInsured(
				rrcDTO.getNewIntimationDTO().getInsuredPatient()
						.getInsuredId().toString(), rrcDTO.getNewIntimationDTO().getPolicy().getKey(),rrcDTO.getNewIntimationDTO().getInsuredPatient().getLopFlag());
	//	loadRRCRequestValuesForCashless(rrcDTO, insuredSumInsured, SHAConstants.PROCESS_UPLOAD_INVESTIGATION);
		
		tableDto.setRrcDto(rrcDTO);
		
		//IMSSUPPOR-27597
		if(latestPreauthByClaim != null){
			claimDTO.setCashlessAppAmt(latestPreauthByClaim
					.getTotalApprovalAmount());
		}
		
		// R1045
		tableDto.setPreauthDto(new PreauthDTO());
		tableDto.getPreauthDto().setNewIntimationDTO(newIntimationDto);
		tableDto.getPreauthDto().setClaimDTO(claimDTO);
		
		//IMSSUPPOR-27597
		String diagnosisForPreauthByKey = "";
		if(tableDto.getTransactionKey() != null ) {
			diagnosisForPreauthByKey = preauthService.getDiagnosisForPreauthByKey(tableDto.getTransactionKey());
			
		}
		tableDto.getPreauthDto().getNewIntimationDTO().setDiagnosis(diagnosisForPreauthByKey);
		
		
		//R1152
    	if(newIntimationDto.getHospitalDto() != null && newIntimationDto.getHospitalDto().getCpuId() != null && newIntimationDto.getPolicy() != null && newIntimationDto.getPolicy().getHomeOfficeCode() != null){
			TmpCPUCode cpu = rodService.getCpuDetails(newIntimationDto.getHospitalDto().getCpuId());
			OrganaizationUnit branch = rodService.getBranchCode(newIntimationDto.getPolicy().getHomeOfficeCode());
			if(cpu != null && branch != null && branch.getCpuCode() != null){
				if(!branch.getCpuCode().equalsIgnoreCase(cpu.getCpuCode().toString())){
					//tableDto.setIsGeoSame(Boolean.FALSE);
				}
			}
		}
    	
    	if (null != claimByKey && claimByKey.getLobId() != null && claimByKey.getLobId().equals(ReferenceTable.PA_LOB_KEY)) {
    		
    		if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.CASHLESS_CHAR)) {
	    		Preauth preauthByClaim = preauthService.getPreauthById(tableDto.getTransactionKey());
	    		if (null != preauthByClaim) {
	    			tableDto.setClaimedAmount(preauthByClaim.getClaimedAmt().toString());
	    		}
	    	}
	    	if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.REIMBURSEMENT_CHAR)) {
	    		
	    		PABenefitsCovers paBenefitsListByRodKey = paSearchProcessClaimBillingService.getPABenefitsBillAmountByRodKey(tableDto.getTransactionKey());
		    	if (null != paBenefitsListByRodKey) {
		    		tableDto.setClaimedAmount(paBenefitsListByRodKey.getBillAmount().toString());
		    	}
		    	
		    	List<RODBillDetails> billEntryDetails = ackDocReceivedService.getBillEntryDetails(tableDto.getTransactionKey());
				if(billEntryDetails != null && !billEntryDetails.isEmpty()){
					Double billAmount = 0d;
					for (RODBillDetails rodBillDetails : billEntryDetails) {
						billAmount += rodBillDetails.getClaimedAmountBills() != null ?  rodBillDetails.getClaimedAmountBills() : 0d;
					}
					tableDto.setClaimedAmount(billAmount.toString());
				}
	    		
	    	}
    	} else {

	    	if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.CASHLESS_CHAR)) {
	    		Preauth preauthByClaim = preauthService.getPreauthById(tableDto.getTransactionKey());
	    		if (null != preauthByClaim) {
	    			tableDto.setClaimedAmount(preauthByClaim.getClaimedAmt().toString());
	    		}
	    	}
	    	if (null != tableDto.getClaimType() && tableDto.getClaimType().equalsIgnoreCase(SHAConstants.REIMBURSEMENT_CHAR)) {
		    	List<RODBillDetails> billEntryDetails = ackDocReceivedService.getBillEntryDetails(tableDto.getTransactionKey());
				if(billEntryDetails != null && !billEntryDetails.isEmpty()){
					Double billAmount = 0d;
					for (RODBillDetails rodBillDetails : billEntryDetails) {
						billAmount += rodBillDetails.getClaimedAmountBills() != null ?  rodBillDetails.getClaimedAmountBills() : 0d;
					}
					tableDto.setClaimedAmount(billAmount.toString());
				}
	    		
	    	}
    	}
	    	
			
		view.setPostProcessCVCWizardView(PostProcessClaimCVCAuditView.class,
				true, tableDto);
		}
	}
	
}
